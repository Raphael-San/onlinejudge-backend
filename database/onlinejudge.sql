-- MySQL dump 10.16  Distrib 10.3.7-MariaDB, for osx10.13 (x86_64)
--
-- Host: localhost    Database: newoj
-- ------------------------------------------------------
-- Server version	10.3.7-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `problem`
--

DROP TABLE IF EXISTS `problem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `problem` (
  `id` varchar(255) NOT NULL,
  `title` varchar(255) NOT NULL,
  `description` longtext NOT NULL,
  `timeLimit` int(11) NOT NULL,
  `memoryLimit` int(11) NOT NULL,
  `judger` varchar(255) NOT NULL,
  `volume` smallint(6) DEFAULT NULL,
  `number` smallint(6) DEFAULT NULL,
  `tags` varchar(255) DEFAULT NULL,
  `defunct` tinyint(1) NOT NULL,
  `dataSet` varchar(255) NOT NULL,
  `createdAt` timestamp NOT NULL DEFAULT current_timestamp(),
  `updatedAt` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `problem`
--

LOCK TABLES `problem` WRITE;
/*!40000 ALTER TABLE `problem` DISABLE KEYS */;
INSERT INTO `problem` VALUES ('1','A+B','\n#### Description\nPlease calculate $A+B(0 \\leq A,B \\leq 10)$\n\n#### Input\nThe first line of input contains $T(1 \\leq T \\leq 1000)$, the number of test cases. There is only line for each test case. It contains two integers $A,B(1 \\leq A,B \\leq 10)$.\n\n#### Output\nFor each test case, output the sum of A and B.\n\n#### Sample Input\n```\n2\n1 2\n2 3\n```\n\n#### Sample Output\n```\n3\n5\n```\n',1000,1024,'0',0,0,'',1,'2','2018-11-05 00:31:14','2018-11-05 00:48:07'),('10','Hierarchy','#### Description\nIn company your boss may send you some order, message, or anything via the network, of course you may replay something to your boss. Statistics show that stuff send via the network from your boss will be more than what you reply to. \n\nThere are $$$N(1\\leq N \\leq 15)$$$ employees in a company. You will got an $$$N*N$$$ matrix, all elements in the matrix are integer numbers lager or equal to 0. The $$$j\\,$$$th number in $$$i\\,$$$th line,$$$K(0\\leq K \\leq 1000)$$$, denotes $$$i\\,$$$th employee send $$$K$$$ messages to $$$j\\,\n$$$th employee from the network.\n\nYour job is to order all employees from higher class to lower, and makes the messages send from lower to higher class as less as possible. If there is more than one possible hierarchy, show me the one which higher class employees with lower index$$$(0 \\rightarrow N-1)$$$.\n\n#### Input\nThe first number $$$T(1\\leq T \\leq 100)$$$ indicates how many test case are followed.\n\nFor each test case, the first number is $$$N(1\\leq N \\leq15)$$$, how many employees. And an $$$N*N$$$ integer matrix will followed.\n\n#### Output\nFor each test case output the answer in one line, numbers separate by a space.\n\n#### Sample Input\n```\n2\n\n3\n0 0 0\n0 0 0\n0 0 0\n\n3\n0 1 0\n0 0 2\n0 0 0\n```\n\n#### Sample Output\n```\n0 1 2\n0 1 2\n```\n',10000,32768,'0',0,9,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('100','Peg Game','#### Description\nYou are given a 7-by-7 board of holes. Some holes are filled with pegs, and some are not. You may jump a peg over\nan adjacent peg, as long as the hole the jumping peg lands in is unoccupied. The jumped peg is removed. Your goal\nis to leave the board with only one peg in it, and the peg must end up in the specified location.\nThe board is specified as a 7-by-7 array of characters, with the following meanings:\nx : this hole may never be occupied by a peg\ne : this hole is initially empty\no : this hole is initially occupied by a peg\nE : this hole is initially empty, and the last peg should end here\nO : this hole is initially occupied, and the last peg should end here\nFor example, consider the following board:\n[[Image:A99_1.jpg|center]]\nYou can see that there are initially 4 pegs in the board, and the last peg should end up in the middle of the board.\nThe winning sequence of moves is:\n[[Image:A99_2.jpg|center]]\nWhere coordinates are given as (x, y).\n#### Input\nThe first line of input is the number of datasets to follow. Each dataset should be processed the same.\nThe input for each dataset consists of 7 lines; each line consists of 7 characters from the set {x, e, o, E, O}\nwith blanks between them. You are guaranteed that exactly one \'E\' or \'O\' will appear, and that two or more \'o\' or \'O\'\nwill appear.\n\n#### Output\nFor each dataset, output a line containing the data set number. If a sequence of valid moves exists that leaves only\none peg on the board, and leaves that peg in the desired location, print out the sequence of moves, as shown in the\nabove example. If no sequence exists, print “No solution\". Leave a blank line between datasets.\n\n#### Sample Input\n```\n2\nx x e e e x x\nx x o e e x x\ne e o e e e e\ne e o O e e e\ne e e e e e e\nx x e e e x x\nx x e e e x x\nx x e E e e e\nx e e e e e e\ne e e o o e e\ne e e x e e e\ne e e e e e e\ne e e e e e e\ne e e e e e e\n```\n\n#### Sample Output\n```\nDataset 1:\n1. (4, 4) to (2, 4)\n2. (3, 2) to (3, 4)\n3. (2, 4) to (4, 4)\nDataset 2:\nNo solution.\n```\n',10000,32768,'0',0,99,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1000','快速排序','#### Description\n给定无序序列 S{s1，s2，…sn}，n为表元素的个数，使用快速排序对序列进行排序。输出第一趟排序完成后的中间结果，以及最终快速排序完成后的有序序列。\n\n例1： S={25,13, 9,27,31,53, 4,79,48,95,81}，n = 11\n\n输出：\n\n第1趟排序完成后：4 13 9 25 31 53 27 79 48 95 81\n\n最终排序结果：4 9 13 25 27 31 48 53 79 81 95\n\n#### Input\n第一行输入一个整数t，表示有t组测试数据\n\n第二行起每2行表示\n\n第1行为无序序列元素个数\n\n第2行为无序序列元素\n\n#### Output\n每两行表示1组测试数据的排序结果\n\n第1行为第1趟排序完成后的结果\n\n第2行为最终快速排序完成后的结果\n\n#### Sample Input\n```\n2\n\n11\n\n13 4 57 33 25 47 59 65 93 77 63\n\n9\n\n19 66 52 39 48 5 77 91 84\n\n```\n\n#### Sample Output\n```\n4 13 57 33 25 47 59 65 93 77 63\n\n4 13 25 33 47 57 59 63 65 77 93\n\n5 19 52 39 48 66 77 91 84\n\n5 19 39 48 52 66 77 84 91\n\n```\n',1000,32768,'0',10,0,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1001','第1题','#### Description\n（1）	国庆节，北京大学张同学从北京西站出发，计划一路乘坐高铁，游览多个城市，但由于各个城市之间高铁的建设程度不一，并非两两城市之间都通高铁。如\n今，张同学查到城市之间的高铁通车图，旅途中尽量选择坐高铁。请用图的广度优先遍历和深度优先遍历求出张同学经过所有城市的先后次序（同级遍历，字母靠前者优\n先）。\n\n假设可选择的旅游城市有如下8个：\n\n{北京(A)，天津(B)，石家庄(C)，济南(D)，合肥(E)，南京(F)，杭州(G)，上海(H)}\n\n8城市高铁通车情况如下图：\n\n[[File:Whsmt1.jpg]]\n\n8城市对应邻接矩阵为：\n\n0 1 1 1 0 0 0 0\n\n0 0 0 1 0 0 0 0\n\n0 0 0 1 1 0 0 0\n\n0 0 0 0 0 1 0 0\n\n0 0 0 0 0 1 0 0\n\n0 0 0 0 0 0 1 1\n\n0 0 0 0 0 0 0 1\n\n0 0 0 0 0 0 0 0\n\n#### Input\n两行，第一行是旅游城市个数，第二行是城市编号\n\n#### Output\n两行，第一行是广度优先遍历结果，第二行是深度优先遍历结果\n\n#### Sample Input\n```\n\n5\n\nA B C D E\n\n```\n\n#### Sample Output\n```\n\nABCDE\n\nABDCE\n\n```\n',1000,32768,'0',10,1,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1002','第2题','#### Description\n（2）	假设 {北京(A)，天津(B)，石家庄(C)，济南(D)，合肥(E)，南京(F)，杭州(G)，上海(H)}\n8城市高铁通车情况如下图，双向箭头表示高铁已实行双向通车，单向箭头表示回程高速暂未开通，仍以低速铁路调度执行。任意输入几个城市，返回这几个城市之间是否两两之间都能乘坐高铁抵达对方城市。（即判断连通图，如果几个城市组成为连通图，则可以，否则，不行）。\n\n[[File:Whsmt2.jpg]]\n\n8城市对应邻接矩阵为：\n\n0 1 1 1 0 0 0 0\n\n1 0 0 1 0 0 0 0\n\n1 0 0 1 1 0 0 0\n\n1 1 1 0 0 1 0 0\n\n0 0 0 0 0 1 0 0\n\n0 0 0 0 1 0 1 1\n\n0 0 0 0 0 0 0 1\n\n0 0 0 0 0 0 1 0\n\n#### Input\n\n两行，第一行是旅游城市个数，第二行是城市编号\n\n#### Output\n\n一行，Yes ( or No)\n\n#### Sample Input\n```\n3\n\nA B E\n\n```\n\n#### Sample Output\n```\n\nNo\n\n```\n',1000,32768,'0',10,2,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1003','第3题','#### Description\n（3）	假设 {北京(A)，天津(B)，石家庄(C)，济南(D)，合肥(E)，南京(F)，杭州(G)，上海(H)}\n8城市高铁通车情况以及各段运行时间如下图，箭头旁边数字表示路段运行时间。\n输入某个城市编号,\n\n1）	请输出该城市在8城市高铁通车图的拓扑排序结果中为第几个城市(从1开始)，\n\n2）	请输出北京到该城市的最短行车时间路径及时间长度。\n\n[[File:Whsmt3.jpg]]\n\n8城市对应邻接矩阵为：\n\n0 20 20 80 0 0 0 0\n\n0 0 0 50 0 0 0 0\n\n0 0 0 70 50 0 0 0\n\n0 0 0 0 0 90 0 0\n\n0 0 0 0 0 20 0 0\n\n0 0 0 0 0 0 60 100\n\n0 0 0 0 0 0 0 30\n\n0 0 0 0 0 0 0 0\n\n#### Input\n一行， 某个城市编号\n\n#### Output\n三行， 第一行是拓扑排序结果的第几个位置，第二行是最短路径，第三行是时间长度\n\n#### Sample Input\n```\nD\n\n```\n\n#### Sample Output\n```\n4\n\nABD\n\n70\n\n```\n',1000,32768,'0',10,3,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1004','第4题','#### Description\n（4）	任意给定一个无序序列：S={s1，s2，…，sn}， n为序列元素个数，建立一颗二叉排序树T，输出其中序遍历的结果（应为从小到大有序序列），以及sn在树中第几层，层中的第几个元素（相对完全二叉树位置）。输入一个待查找的数x，在中序遍历的结果（有序序列）中使用折半查找x，输出查找结果。\n\n折半查找如果查找成功，输出成功标志1，否则输出0。查找成功时需输出x为中序遍历（有序序列）中的第几个元素，不成功输出0。此外，不管查找成功还是失败，需输出查找过程中进行了几次比较操作。\n\n#### Input\n三行，第一行是无序序列元素个数，第二行是各个元素的值，第三行是需要查找的数x\n\n#### Output\n三行，第一行是中序遍历有序结果, 第二行是sn在树中第几层，层中的第几个元素，第三行是折半查找的结果。\n\n#### Sample Input\n```\n12\n\n66 45 78 42 55 32 39 68 95 86 102 29\n\n55\n\n```\n\n#### Sample Output\n```\n29 32 39 42 45 55 66 68 78 86 95 102\n\n5 1\n\n1 6 1\n\n```\n',1000,32768,'0',10,4,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1005','第5题','#### Description\n（5）	图书馆为便于管理和学生查阅图书，在摆上图书馆的书架前，图书馆管理员对每一本书给定唯一的12位编号，例：《货币战争》对应编号为201105170095, 前8位表示该书的首次上架日期，后四位表示当天上架的第几本书。现在仓库某角落乱序摆放有一堆已下架的书，为将它们重新摆上书架，管理员需要对他们进行排序。输入一组书籍的编号，请对他们进行排序，排序规则为最新的书排在前面（首次上架日期离现在最近者靠前，同日上架者则按后四位编号从小到大排序）。\n\n#### Input\n两行，第一行是书籍数目，第二行是各书籍编号\n\n#### Output\n一行，排序结果\n\n#### Sample Input\n```\n3\n\n199912010505 200501070005 199912010515\n\n```\n\n#### Sample Output\n```\n200501070005 199912010505 199912010515\n\n```\n',1000,32768,'0',10,5,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1006','第6题','#### Description\n（6）	接上题，若排序规则修改为如下：\n排序规则为最新的书排在前面（首次上架日期离现在最近者靠前，同日上架者则按后四位编号从大到小排序）。\n请使用希尔排序和快速排序对书籍进行排序。\n\n#### Input\n两行，第一行是书籍数目，第二行是各书籍编号\n\n#### Output\n四行\n\n第一行是希尔排序执行一次插入排序后的中间结果\n\n第二行是希尔排序最终结果\n\n第三行是快速排序执行一趟排序后的中间结果\n\n第四行是快速排序最终结果\n\n#### Sample Input\n```\n5\n\n199912010505 200501070005 199912010515 199811110406 200711050123\n\n```\n\n#### Sample Output\n```\n200711050123 200501070005 199912010515 199811110406 199912010505\n\n200711050123 200501070005 199912010515 199912010505 199811110406\n\n200711050123 200501070005 199912010515 199912010505 199811110406\n\n200711050123 200501070005 199912010515 199912010505 199811110406\n\n```\n',1000,32768,'0',10,6,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1007','旅游问题','#### Description\n\n吴先生第一次到某城市旅游，希望能够游览到城市所有著名旅游景点。现在吴先生找到了城市景点间的道路交通图，请你帮他制定一个合理的游览次序，使得吴先生能够实现他的目标。\n#### Input\n\n第1行输入1个数字k，表示有k个测试用例。\n\n第2行输入1个数字n，表示有n个景点，1<=n<=26。\n\n第3行到第n+2行输入一个n×n的邻接矩阵，aij=0表示景点i和j间没有通路，aij=1表示景点i和j间存在通路。\n\n#### Output\n\n对每个测试用例，每行输出从景点A（第一个景点）开始的深度优先遍历结果，序号小的优先遍历。\n#### Sample Input\n```\n1\n4\n0 1 1 0\n1 0 0 1\n1 0 0 1\n0 1 1 0\n```\n\n#### Sample Output\n```\nABDC\n```\n',1000,32768,'0',10,7,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1008','抵达酒店问题','#### Description\n\n续上题，E景点（第五个景点）是吴先生心慕已久的旅游景点，吴先生已在那里预定了酒店。一方面，因为旅途劳累，吴先生希望下了飞机后立刻赶往酒店入住。另一方面，因为整个行程时间有限，吴先生还希望，在去酒店过程中，若途经著名旅游景点，将顺便游览一番。现在吴先生根据城市景点间的道路交通图，计算出了景点间的乘车时间，并根据景点具体情况，也给出了他预计在每个景点的逗留时间。请根据这2个信息，帮吴先生制定一个从机场（第一个景点）到酒店（第五个景点）的线路行程，使得他既能尽早到达酒店，又能游览沿途景点。\n#### Input\n\n第1行输入1个数字k，表示有k个测试用例\n\n第2行输入1个数字n，表示有n个景点，5<=n<=26\n\n第3行输入n个数字，分别表示在每个景点的预计逗留时间\n\n第4行到第n+3行输入一个n×n的邻接矩阵，aij=0表示景点i和j间没有通路，aij=t,t>0，表示从景点i到景点j需要t时间。\n#### Output\n\n输出从景点A到景点E的行程安排及到达景点E时的总花费时间。\n#### Sample Input\n```\n1\n5\n0 30 20 100 0\n0 20 5 0 100\n20 0 0 20 0\n5 0 0 5 20\n0 20 5 0 5\n100 0 20 5 0\n```\n\n#### Sample Output\n```\nACE 45\n```\n',1000,32768,'0',10,8,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1009','泛洪路由','#### Description\n\n泛洪路由是一种简单但低效的路由算法，其原理是路由器接受到一个数据包后，查看是否发给自己的，若是则接受，若不是则向除来路之外的所有通路转发。现在刘技术员经过前期调查，确定了路由器间的连通图，请根据路由图，帮刘技术员确定，若在这些路由器上使用泛洪路由，是否能使得路由器间能两两进行通信。\n#### Input\n\n第1行输入1个数字k，表示有k个测试用例\n\n第2行输入1个数字n，表示有n个路由器，1<=n<=500\n\n第3行到第n+2行输入一个n×n的邻接矩阵，aij=0表示路由i和j间没有通路，aij=1表示路由i和j间存在通路。\n\n#### Output\n\n应用泛洪路由，n个路由器是否两两之间都能进行通信。\n#### Sample Input\n```\n2\n4\n0 1 1 0\n1 0 0 1\n1 0 0 1\n0 1 1 0\n3\n0 0 0\n0 0 1\n0 1 0\n\n```\n\n#### Sample Output\n```\nYES\nNO\n\n```\n',1000,32768,'0',10,9,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('101','Taxation With Representation Overdone','#### Description\nIn the land of Kalii lived a civilization not unlike our own. They had government, business, and\ntechnology. The only major difference was how tax rates were decided. You see, the people of Kalii loved to\nhaggle. They haggled over everything including what percentage of their income went to the government coffers.\nWhen a Kalii family’s tax contract was up they had to travel to the capital to haggle with government officials and\nhammer out a new deal. The contract would have a start date, an end date (for bookkeeping purposes the end day\nwas always the 15th of the end month), and a tax rate. It was also traditional for a Kalii family to enjoy a short time\nperiod of tax free living between the end of their last contract and the start of the new one. This time period was a\npoint to haggle over as well.\n\nThe land of Kalii was prosperous and very populous and, as a consequence, government officials were\noften overwhelmed with work. When a deal was agreed upon with a family, the officials would quickly write it\ndown in shorthand and send it off to be processed. These scribbled notes had to be converted to XML format to be\nentered into their computer system. Sometimes the scribble was inconclusive and the family would have to be\nrecalled to the capital for another round of haggling. This entire process was very inefficient but it was the way the\npeople of Kalii had always done it and they were not about to change anytime soon.\n\nYour job is to convert the scribblings of the officials into XML format.\n\n#### Input\nInput consists of multiple datasets, one per line. Each correct line contains three pieces of information:\n+  Tax rate\n  -  A tax rate always has a ‘%’ after it if it is a whole number (i.e. 5%).\n  -  A tax rate never has a decimal point in it.\n  -  A tax rate may contain a fraction but its denominator must only be a 2, 4, or 8.\n  -  A tax rate must have a numerator that is less than its denominator.\n+  Contract End Date\n  -  A contract end date is a numerical representation of the month (one or two digits) and the last two digits of the year. The month and year may be separated by a single hyphen (i.e. 12-05 or 1205 would refer to 15DEC05).\n+  Contract Start Date\n  -  A contract start date is a numerical representation of the month (one or two digits) and a two -digit day of the month. The month and day may be separated by a single hyphen (i.e. 12-05 or 1205 would refer to 05DEC03).\n+  A contract start date must start on or after the current date(Nov 09,2003). For example, the cur rent year is 2003. If the start date is 305 it is assumed that the year the contract starts will be 2004.\n+ Note: There may be 0 or more spaces between each of the three fields.\n+ Note: The Kalii calendar consists of the twelve months familiar to you, but all months have 31 days.\n+ Note: The maximum tax rate is 99.875%\n\n#### Output\nFor each data set, print the correctly indented XML (4 spaces per indent level):\n```\n<Kalii Index=N>\n    <startdate>(start date)</startdate>\n    <rate>(tax rate)</rate>\n    <enddate>(end date)</enddate>\n</Kalii>\n```\n\nN should be replaced by the data set number, (start date) by the start date, (tax rate) by the tax rate, and\n(end date) by the end date. If no output could be computed because of either bad or ambiguous data, simply\nprint <Kalii Index=N >BAD DATA</Kalii>, where N should be replaced by the data set number.\n\n+ Note: The format for the start date is DDMMMYY. The format for the end date is 15MMMYY. Where DD is the\nzero-padded day of month (01-31), MMM is the month in upper-case letters (JAN, FEB, MAR, APR, MAY,\nJUN, JUL, AUG, SEP, OCT, NOV, DEC), and YY is the zero-padded last 2 digits of the year (00-99).\n+ Note: The tax rate should be accurate to 3 decimal places.\n\n#### Sample Input\n```\n25/850812-31\n6% 02110122\n6.75% 2-11 4-23\n```\n\n#### Sample Output\n```\n<Kalii Index=1>\n    <startdate>31DEC03</startdate>\n    <rate>2.625</rate>\n    <enddate>15MAY08</enddate>\n</Kalii>\n<Kalii Index=2>\n    <startdate>22JAN04</startdate>\n    <rate>6.000</rate>\n    <enddate>15FEB11</enddate>\n</Kalii>\n<Kalii Index=3>BAD DATA</Kalii>\n```\n\n',10000,32768,'0',1,0,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1010','古董年代问题','#### Description\n\n老李是个古董迷，他认为，古董越老越值钱。现在，他收集了一批古董，请你帮他把这些古董，按照他认为的价值排序。\n#### Input\n\n第1行输入1个数字k，表示有k个测试用例\n\n第2行输入1个数字n，表示有n个古董，1<=n<=500\n\n第3行到第n+2行输入编号为（i-1）的古董的鉴定生产日期，如”-5”表示公元前5年，”100”表示公元100年\n\n#### Output\n\n按古董价值从大到小，输出古董的鉴定生产日期及其编号\n#### Sample Input\n```\n2\n4\n1980\n1300\n1523\n-321\n3\n-10\n10\n0\n\n```\n\n#### Sample Output\n```\n-321 4\n1300 2\n1523 3\n1980 1\n-10 1\n0 3\n10 2\n```\n',1000,32768,'0',10,10,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1011','古董编号问题','#### Description\n\n续上题，再给古董拍完序后，老李不小心把一个古董的编号给弄丢了。但是幸好老李还保留有古董的鉴定生产日期，现在，请根据前面排序后的结果，按折半查找的方法，迅速查找出古董鉴定生产日期对应的编号及比较次数。\n#### Input\n\n第1行输入1个数字k，表示有k个测试数据\n\n第2行输入1个数字n，表示有n个古董，1<=n<=500\n\n第3行到第n+2行输入古董编号及其按升序排列的鉴定生产日期\n\n第n+3行输入要查找对应编号的古董鉴定生产日期\n#### Output\n\n输出与输入古董鉴定生产日期对应的古董编号以及折半查找的比较次数\n#### Sample Input\n```\n1\n11\n4 15\n7 113\n8 219\n1 321\n5 437\n9 556\n2 664\n11 775\n6 880\n3 988\n10 1092\n664\n\n```\n\n#### Sample Output\n```\n2 3\n\n```\n',1000,32768,'0',10,11,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1012','快速排序','#### Description\n\n应用快速排序算法，对输入序列进行排序，输出前3趟排序结果和最终排序结果。\n#### Input\n\n第1行输入一个整数k，表示有k组测试数据，1<=k<=100\n第2行起每两行表示\n\n  第1行为代排序元素个数ni，1<=ni<=500\n\n  第2行为ni个代排序序元素\n#### Output\n\n快速排序前3趟排序结果和最终排序结果。\n#### Sample Input\n```\n2\n11\n13 4 57 33 25 47 59 65 93 77 63\n9\n19 66 52 39 48 5 77 91 84\n\n```\n\n#### Sample Output\n```\n4 13 57 33 25 47 59 65 93 77 63\n4 13 57 33 25 47 59 65 93 77 63\n4 13 47 33 25 57 59 65 93 77 63\n4 13 25 33 47 57 59 63 65 77 93\n5 19 52 39 48 66 77 91 84\n5 19 52 39 48 66 77 91 84\n5 19 48 39 52 66 77 91 84\n5 19 39 48 52 66 77 84 91\n\n```\n',1000,32768,'0',10,12,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1013','连通判断','#### Description\n给出一个无向图的连接情况，判断两顶点之间是否连通，即判断两顶点是否存在路径。求解方法：从其中一个顶点出发，对它邻接顶点做深度优先遍历，如果遍历过程中出现另一个顶点则说明连通，否则为不连通。\n\n\n例如图1，判断顶点1和4之间是否连通，通过搜索可以找到路径1-2-3-4，因此1和4之间连通\n[[File:link1.jpg]]   \n\n图2中判断顶点0和1之间是否连通，经过搜索找不到路径，所以0和1之间不连通\n[[File:Link2.jpg]]\n\n#### Input\n第一行输入三个参数n、A、B，n表示图有多少个顶点，顶点自动从0开始编号到n-1，A和B表示两个顶点编号，n、A、B都是整数，3<n<100，0<=A<B<n\n第二行起，连续输入n行，表示图的邻接矩阵\n\n#### Output\n如果A和B连通，则输出3333\n如果A和B不连通，则输出4444\n\n#### Sample Input\n```\n6 1 4\n0 1 0 0 1 1\n1 0 1 1 0 1\n0 1 0 1 0 0\n0 1 1 0 1 1\n1 0 0 1 0 1\n1 1 0 1 1 0\n\n```\n\n#### Sample Output\n```\n3333\n\n```\n',1000,32768,'0',10,13,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1014','范围查找','#### Description\n已知一个图的连接情况，给出一个顶点和一个距离长度，找出从该顶点出发，最短路径不超过指定距离的其他顶点。例如下图，找顶点0距离不超过10的其他顶点，可以找到顶点1、2、3、4\n\n[[File:link3.jpg]]\n\n#### Input\n第一行输入两个参数n、A、L，n表示图有多少个顶点，顶点自动从0开始编号到n-1，A表示顶点编号，L表示指定距离，3<n<100，0<=A<n\n第二行起，连续输入n行，表示图的邻接矩阵\n\n#### Output\n输出找到的顶点编号，如果找不到顶点，输出9999\n\n#### Sample Input\n```\n5 0 10\n0 5 0 7 15\n0 0 5 0 0\n0 0 0 0 1\n0 0 2 0 0\n0 0 0 0 0\n\n```\n\n#### Sample Output\n```\n1 2 3 4\n```\n',1000,32768,'0',10,14,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1015','插入排序','#### Description\n对一个无序数列采用插入排序法进行从小到大排序，并输出中间位置的数据\n\n#### Input\n第一行输入t，表示有t个测试数列\n第二行输入k，表示无序数列有k个数据，5<k<100\n第三行输入有k个无序不重复的整数数据\n依此类推......\n\n#### Output\n如果中间位置只有1个，则输出1个数据，如果中间位置有2个则输出2个数据\n\n例如数列包含9个数据，位置编号0～8，中间位置是4，则输出位置4的数据；数列包含10个数据，位置编号0～9，中间位置是4和5，则输出位置4和位置5的数据\n\n#### Sample Input\n```\n2\n8\n77 66 88 33 22 99 111 55 \n7\n101 37 45 99 63 54 21\n\n```\n\n#### Sample Output\n```\n66 77\n54\n\n```\n',1000,32768,'0',10,15,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1016','位置定位','#### Description\n\n已知一个有序整数数列按从小到大排序，对于任意一个整数k，找出它在数列的位置。数列位置编号从1开始到N，具体规则如下：\n\n1、	如果k小于数列最小值，则返回位置为0\n\n2、	如果k大于数列最大值，则返回位置N+1\n\n3、	如果k等于数列某个值，则返回对应的位置号\n\n4、	如果k在数列的某两个值之间，则返回这两个值的位置号\n\n#### Input\n第一行输入t，表示有t个测试数据\n第二行输入N和k，N表示数列有N个数据，5<N<100，k为任意整数\n第三行输入有N个不重复的整数，按从小到大排列\n依此类推……\n\n#### Output\n输出位置号\n\n#### Sample Input\n```\n3\n6 12\n33 66 99 111 222 333 \n6 100\n33 66 99 111 222 333 \n7 606\n101 202 303 404 505 606 707\n\n```\n\n#### Sample Output\n```\n0\n3 4\n6\n\n```\n',1000,32768,'0',10,16,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1017','二叉排序树','#### Description\n给定一个无序整数数列，在初始为空的二叉排序树中根据数列依次插入从而建立二叉排序树。首先输出该树叶子的数量。然后查找指定的k值，如果查找成功，输出k值结点所在树的层数，根结点为第一层，如果查找不成功则插入树中，并输出k值结点所在树的层数。\n例如数列：56  13  37  64  5  92，生成的二叉排序树如下图\n该树叶子数为3\n\n若查找数据64，查找成功，所在层数是2，\n\n若查找数据60，查找不成功，最后插入64的左孩子中，所在层数为3\n\n若查找数据99，查找不成功，最后插入92的右孩子中，所在层数为4\n\n[[File:BST1.jpg]]\n\n#### Input\n第一行输入t，表示有t个测试数据\n第二行输入N和k，N表示数列有N个数据， k是要查找的值\n第三行输入有N个不重复的整数，每个整数均小于9999，\n依此类推……\n\n#### Output\n先输出树的叶子数量，然后输出查找k值所在的层数\n\n#### Sample Input\n```\n3\n6 64\n56 13 37 64 5 92\n6 60\n56 13 37 64 5 92\n6 99\n56 13 37 64 5 92\n\n```\n\n#### Sample Output\n```\n3 2\n3 3\n3 4\n\n```\n',1000,32768,'0',10,17,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1018','索引顺序查找法','#### Description\n索引顺序查找是顺序查找和折半查找的综合方法。对于一个无序整数数列，根据块长度进行分块，然后在每个块中选出最大数值作为块索引，把所有块索引按从小到大排列，形成顺序索引表。\n查找时，先把查找数值在顺序索引中查找，用折半查找法：\n\n若索引小于查找数值的块则跳过\n\n若索引等于查找数值，则在索引对应的块中进行查找，块中查找采用顺序查找法，从块内的最后1个数据开始往前找。\n\n若索引大于查找数值，则继续折半查找，一直到折半查找结束，然后对大于查找数值的索引对应块进行逐个块内查找，采用顺序查找法，若块内找不到，选择索引大于查找数值的下一个块继续查找。 \n\n例如数列：5、19、21、75、13、56、64、37、88、80、92，位置从0开始编号，设块长度为4，则\n\n5、19、75、21为第0块，块索引为75\n\n13、56、64、37为第1块，块索引为64\n\n88、80、92为第2块，块索引为92\n\n形成索引表64、75、92\n\n若查找数据80，在索引表中用折半查找法，第一次比较索引75和查找80，第二次比较索引92和查找80，然后进入第2块进行搜索。块内采用顺序查找法，从末尾开始比较，比较2次找到80。\n\n例如查找数据5，当用折半查找发现它比所有索引都要小，它按索引表顺序先查找64索引对应的块，找不到再去75索引对应的块，最后查找成功。\n\n#### Input\n第一行输入t，表示有t个测试数据\n第二行输入N、L、k，N表示数列有N个数据， L是块长度，L<N，k是要查找的值\n第三行输入有N个整数\n依此类推……\n\n#### Output\n输出比较总次数，包括索引表和块内的查找，然后在输出查找结果，如果查找成功输出3333，查找失败输出4444。\n\n\n#### Sample Input\n```\n1\n11 4 80\n5  19  21  75  13  56  64  37  88  80  92\n\n```\n\n#### Sample Output\n```\n4 3333\n\n```\n',1000,32768,'0',10,18,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1019','直接插入排序法','#### Description\n\n（难度容易，30分钟完成）\n\n基本思路（升序思路）\n每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序。\n\n比如：15 35 20 18 40\n\n每次经过插入排序之后的数组为\n\n（1）15                              取15插入\n\n（2）15 35                         取35插入\n\n（3）15 20 35                     取20插入\n\n（4）15 18 20 35                取18插入\n\n（5）15 18 20 35 40             取40插入\n\n#### Input\n \n第1行输入一个整数n(<=100)，表示有n个数\n第2行输入n个整数\n\n#### Output\n\n输出n个数的从小到大排序结果\n\n\n#### Sample Input\n```\n\n5\n15 35 20 18 40\n```\n\n#### Sample Output\n```\n\n15 18 20 35 40\n```\n',1000,32768,'0',10,19,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('102','It’s Logical','#### Description\nAt the University of Kentucky, they build a lot of high-performance computer hardware and software, often using\none supercomputer to design the next. One of the most fundamental computer design problems is logic\noptimization: making sure that the optimized logic still computes the same function as the original design.\n\nFor this problem, your program will be given two logic expressions to compare for logical equivalence.\n\n#### Input\nThe first line of the input consists of a positive integer n, which is the number of datasets (lines) that follow. Each\ndataset consists of a single line containing the two input expressions to be tested. The input expressions consist of\nany of 26 variables named a-z, the binary operators |, &, ^, (OR, AND and XOR respectively), the unary ~ (NOT),\nand parenthesis. The expressions should be evaluated ignoring all other characters and with operator precedence as\nin the C language (parenthesis, ~, &, ^, |). The two expressions will be input in sequence and it is up to your\nprogram to determine where one expression ends and the next begins.\n\nMost logic manipulation programs would convert each expression into a normal form and check if the two\nnormalized expressions are identical. Fortunately for you, each expression will consist of no more than 100\noperations using no more than 10 different variables. For that many cases, you can test for equivalence by simply\nevaluating the two input expressions for all possible inputs and comparing the results.\n\n#### Output\nFor each data set, print:\n\nData set N: Equivalent\n\nif the expressions produce the same result, or:\n\nData set N: Different\n\nif they produce different results. Of course N should be replaced by the data set number.\n\n#### Sample Input\n```\n3\na ^b&(b|a)~b^ a\na^b&(b|a)(a^(b&(b|a)))\n~~~~z~~z\n```\n\n#### Sample Output\n```\nData set 1: Different\nData set 2: Equivalent\nData set 3: Equivalent\n```\n\n',10000,32768,'0',1,1,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1020','折半查找法求平方根','#### Description\n\n（难度中等，40分钟完成）\n\n假定输入y是整数，我们用折半查找来找这个平方根。在从0到y之间必定有一个取值是y的平方根，如果我们查找的数x比y的平方根小，则x2<y，如果我们查找的数x比y的平方根大，则x2>y，我们可以据此缩小查找范围，当我们查找的数足够准确时（比如满足|x2-y|<0.001），就可以认为找到了y的平方根。\n\n\n比如求5的平方根x，则x一定满足   0<=x<=5，取x为(5+0)/2=2.5，因为2.5的平方为6.25>5，所以x一定小于2.5，也即x满足0<=x<=2.5，取x为1.25，以此类推\n\nX的范围	         X的取值	 x2	        x2-y\n\n0	5	 2.5	        6.25	        1.25\n\n0	2.5	 1.25	        1.5625	        -3.4375\n\n1.25	2.5	 1.875	        3.515625	-1.484375\n\n1.875	2.5	 2.1875	        4.78515625	-0.21484375\n\n2.1875	2.5	 2.34375	5.4931640625	0.4931640625\n\n2.1875	2.34375	 2.265625	5.133056640625	0.133056640625\n\n2.1875	2.265625 2.2265625	…	        …\n\n最后求得5的平方根为2.236\n\n#### Input\n\n第1行输入一个整数n(<100)，表示有n个数\n从第2行起到第n+1行输入n个整数\n\n#### Output\n\n输出n个数的平方根，精确到小数点后三位。\n#### Sample Input\n```\n2\n13\n5\n\n```\n\n#### Sample Output\n```\n3.606\n2.236\n\n```\n',1000,32768,'0',10,20,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1021','旅行商问题','#### Description\n\n旅行推销员问题（Travelling Salesman Problem）：有n个城市，一个推销员要从其中某一个城市出发，唯一走遍所有的城市，再回到他出发的城市，求最短的路线。\n\n比如图1\n\n[[File:G1.jpg]]\n\n从0顶点出发，经过其他顶点，再回到0。利用蛮力法进行穷举，得到如下的不同组合以及路径：\n\n[[File:G2.jpg]]\n\n总共要穷举24条路径，分别计算这24条路径的长度。\n通过比较得到，最短路径为0 1 4 3 2 0和 0 2 3 4 1 0， 最短路径长度为34\n\n#### Input\n\n第1行输入一个整数n(<13)，表示有n个结点\n从第2行起到第n+1行输入一个nn的邻接矩阵，其中Matrix[i,j]=x (x>0)表示第i个结点有边指向第j个结点且其长度为x，否则(x<=0)表示不存在边。\n\n#### Output\n\n输出总共穷举了多少条路径，输出最短路径及其长度，如果有多条路径，则输出这多条路径（按字典顺序，升序）\n#### Sample Input\n```\n5\n0 7 6 10 13\n7 0 7 10 10 \n6 7 0 5 9\n10 10 5 0 6\n13 10 9 6 0\n\n```\n\n#### Sample Output\n```\n24\n0 1 4 3 2 0 34\n0 2 3 4 1 0 34\n\n```\n',20000,32768,'0',10,21,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1022','寻找中位数','#### Description\n\n中位数是指将数据排序后，位置在最中间的数值。\n\n即将数据分成两部分，一部分大于该数值，一部分小于该数值。中位数的位置：当样本数为奇数时，(N+1)/2 ; 当样本数为偶数时，N/2\n\n中位数和均值的概念在统计中非常有用。\n\n比如A国家有6个人，每个人的收入为:19  10  94  11 23  17\n\n中位数的求法：\n\n首先将其排序：10 11 17 19 23 94\n\n则中位数:   有6个元素，n=6，则中位数的位置为6/2=3，第三个数为17，所以中位数为17\n\n均值等于(10+11+17+19+23+94)/6=29\n\nB国家，也有6个人，每个人的收入为：1 2 3 4 5 169\n\n均值也等于30，该国家的中位数为3\n\n对比AB这两个国家，虽然他们的平均收入都是29，但是B国的中位数收入为3，远小于A国的中位数收入17，这说明B国的贫富差距更大。中位数比平均值更能衡量一\n\n个国家中间阶层的收入状况。\n\n如果采用先排序再找中位数的方法，则找到中位数的算法复杂度为O(nlgn)，因为排序需要花nlgn的时间。有一种采用快速排序思想来求中位数的算法，可以达到O(n).\n\n本测试要求必须用快速排序的思想来解决该问题，算法如下：\n\n1.抽取数组的第一个元素作为中间值，用快速排序的思想进行一次调整，将比中间值小的放在中间值的左边，比中间值大的放在中间值的右边。\n\n2.如果中间值的索引等于数组长度的一半，那么就找到了。\n\n3.如果中位数的索引比数组长度的一半大的话，那么在中间值的索引到数组的结尾这个期间内找第（数组长度的一半-中位数）大的数。\n\n4.否则在数组的开始到中间值的索引这段期间内找第（数组长度的一半大）大的数。\n\n递归的调用上面的几步，就可以解决问题了！\n\n#### Input\n\n第1行输入一个整数n(<100)，表示有n个数\n第2行输入n个整数\n\n#### Output\n\n输出n个数的中位数\n输出n个数的均值(精确到三位小数)\n\n#### Sample Input\n```\n6\n19 10 94 11 23 17\n\n```\n\n#### Sample Output\n```\n17\n29.000\n\n```\n',1000,32768,'0',10,22,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1023','归并排序','#### Description\n归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。<br>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。<br>\n　　将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。<br>\n\n如　设有数列{6，202，100，301，38，8，1} <br>\n　　初始状态： [6] [202] [100] [301] [38] [8] [1] 比较次数<br>\n　　i=1 [6 202 ] [ 100 301] [ 8 38] [ 1 ]　3<br>\n　　i=2 [ 6 100 202 301 ] [ 1 8 38 ]　4<br>\n　　i=3　[ 1 6 8 38 100 202 301 ] 4<br>\n　　总计：　11次<br>\n归并排序具体工作原理如下（假设序列共有n个元素）：<br>\n1.	将序列每相邻两个数字进行归并操作，形成floor(n / 2)个序列，排序后每个序列包含两个元素<br>\n2.	将上述序列再次归并，形成floor(n / 4)个序列，每个序列包含四个元素<br>\n3.	重复步骤2，直到所有元素排序完毕<br>\n归并操作的过程如下：<br>\n1.	申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列<br>\n2.	设定两个指针，最初位置分别为两个已经排序序列的起始位置<br>\n3.	比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置<br>\n4.	重复步骤3直到某一指针达到序列尾<br>\n5.	将另一序列剩下的所有元素直接复制到合并序列尾<br>\n\n#### Input\n第1行输入一个整数n(<100)，表示有n个数\n第2行输入n个整数\n\n#### Output\n输出第1趟（进行第一次归并排序后）和最后一趟（也即最终）的归并结果\n\n#### Sample Input\n```\n7\n6 202 100 301 38 8 1\n\n```\n\n#### Sample Output\n```\n6 202 100 301 8 38 1\n1 6 8 38 100 202 301\n\n```\n',1000,32768,'0',10,23,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1024','求2的n次方','#### Description\n此题面试时常有：<br>\n解答方法有以下两种：<br>\n1。 直接迭代求解，这个很简单，复杂度O(n)。<br>\n1。 分治法。复杂度 logn<br>\n原理是：a的n次方可以分别对应两种情况:<br>\n	1。 n为偶数  那么 a^n= (a*a)^n/2 \n	2。n为奇数 那么  a^n=  a*a^n-1\n本次要求使用分治法。<br>\n比如5^5=5*5^4=5*(5*5)^2=5*25^2=5*(25*25)=5*625=3125<br>\n总共计算了3次乘法。(有同学会疑惑n/2也需要计算乘除法。实际上n/2的运算一般用移位操作来完成，移位操作的所花时间与加减法类似，远小于乘除法所用时间。在C++中，用n>>1计算n/2)<br>\n而如果直接迭代求解，则要计算5^5=5*5*5*5*5，要计算4次乘法。\n\n#### Input\n第一行a(<100)\n第二行n(<100)\n\n#### Output\n给出a^n的结果(答案可能超出int的表示范围,用double即可）\n\n#### Sample Input\n```\n5\n4\n\n```\n\n#### Sample Output\n```\n625\n```\n',1000,32768,'0',10,24,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1025','大数相乘','#### Description\n计算两个n位整数a和b的积，其中n=2^k。我们从中间把数字一分为二，我们把a的前半部份记为a1，后半部分记做a0，b同理。在这种记法中，\na＝a1a0意味着a＝a1*10^n/2＋a0， b＝b1*10^n/2＋b0，<br>\n故c=a*b <br>\n=(a1a0)(b1b0)<br>\n=(a1*b1)10^n+(a1*b0+b1*a0)10^n/2＋(a0*b0)<br>\n=c2*10^n＋c1*10^n/2＋c0<br>\n其中，c2 ＝ a1*b1, c0 = a0*b0, c1 = (a1-a0)*(b0-b1)+(c2+c0) <br>\n该算法会作多少次位乘呢？因为n位数的乘法需要对n/2位数作三次乘法运算，乘法次数M(n)的递推式是:<br>\nM(n) = 3*M(n/2) + O(n), M(1) = 1 <br>\n递推得到M(n) = O(n^log3) = O(n^1.585) <br>\n\n如果输入的位数不是2^k，则可以通过给n前面加上若干位来达到2^k。比如，如果输入是1234567，只有7位，那么可以变成01234567，这样n为8位，a1=0123，a0=4567。然后进行后续的处理。\n\n#### Input\n第一行输入一个n位的整数表示a, \n第二行输入一个n位的整数表示b\n(n<50)\n\n#### Output\n给出a*b的结果\n\n#### Sample Input\n```\n1234567\n7654321\n\n```\n\n#### Sample Output\n```\n9449772114007\n```\n',1000,32768,'0',10,25,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1026','Magic Matrix','#### Description\nIn a magic kingdom, Jimmy has many old magic boxes. He wants to open it, but there is a magic matrix on it. Now you should help him to open these magic boxes.\nThe magic matrix of N X N (N = 2^k, k=0,1,2…9). First you should transform it to a N/2 X N*2 matrix, until it was transformed to a 1 X N*N matrix by the same rule.\n[[File:K26.jpg]]\n\n#### Input\nThe first line of input contains T (1<T<50), the number of magic boxes. For each box, first line of each test case contains one integer K (0<=K<10), mean the magic matrix is of 2^K-order. The following is a 2^K X 2^K matrix, and the matrix elements are non-negative, and less than 100,000.\n\n#### Output\nFor each test case, you should output two lines. The first line is \"Box #:\", # means the number of the test case. The second line is the solution, sample for more.\n\n#### Sample Input\n```\n2\n1\n3 9\n1 2\n2\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n```\n\n#### Sample Output\n```\nBox 1:\n2 1 9 3\nBox 2:\n7 8 5 6 15 16 13 14 3 4 1 2 11 12 9 10\n```\n',1000,65536,'0',10,26,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1027','Simple Count','#### Description\nM likes math very much. But he is very lazy like most people. One day, he want to find out all the number X that satisfy X%10=n (0<=n<10).\n\nAs M is a lazy person, he turns to you for help. M just care about how many X exist from 0 to m and 0 and m are included, and your job is quite simple, just output how many number of X (0<=X<=m) that satisfy X%10=n (% is modulo that in mathematical). For example, 19%10=9, 8%6=2.\n\n#### Input\nThe first line of the input is a positive integer t (1<=t<=100), which means there are t test cases. There is only line for each test case. It contains only two integers n, m（0<=n<10, 0<=m<=10^100）.\n\n#### Output\nFor each test case, output the number required.\n\n#### Sample Input\n```\n3\n1 0\n8 18\n9 18\n```\n\n#### Sample Output\n```\n0\n2\n1\n```\n',1000,65536,'0',10,27,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1028','Travel Problem','#### Description\nAfter SzuHope take part in the 36th ACMICPC Asia Chendu Reginal Contest. Then go to QingChengShan for fun. QCS has many spot as the picture following, each spot has its unique value for SzuHope, they will get the value just once if and only if they had been there. From one spot will exists some roads to other spots, it means that one road link two spots without direction. SzuHope can choose any spot to travel at beginning, but then they can go to next spot only by roads. Can you help them make the travel’s total value biggest?\n[[File:qcs.jpg]]\n\n#### Input\nThere are less than 100 test cases. For each case, the first line has two numbers M,N.describe the number of spots and roads(1<=N<=1000, 0<=M<=N*N) , the spots are numbered with 1,2,3…N; the second line has N numbers describe the value xi of each spot(0<xi<1000); the next M line, each line has two numbers U,V(1<= U,V<=N) means U,V is connected. 0 0 for end.\n\n#### Output\nFor each test case, you should output two lines. The first line is \"Case #:\", # means the number of the test case. The second line is the result.\n\n#### Sample Input\n```\n0 1\n5\n1 3\n1 3 2\n1 3\n0 0\n```\n\n#### Sample Output\n```\nCase 1:\n5\nCase 2:\n3\n```\n',4000,65536,'0',10,28,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1029','Divide apple','#### Description\nIn a kindergarten, a number of children and you are sitting beside an apple tree. The kindergarten teacher will divide the apples to you (include all children). He will give an apple from heavier to lighter to different person one by one, and take turn to divide the apple until there wasn’t any apple can give. Because you are the eldest in the crowd, you will be the last one to get an apple from teacher in each round.\nThese M apples have different weight. Given the weight of them, you should tell me which one you will take (tell me the index of apples from smaller to larger). The index of apples is from 1 to M.\n\n#### Input\nThe first line of input contains T (1<T<30), the number of test cases. First line of each test case contains two integers N (1<N<100), M (N<M<1000), denotes the number of children (include you) and the number of apples on the tree. The following line contains M positive integers (w1,w2,w3…wm) (0<wi<10,000), denotes the weight.\n\n#### Output\nFor each test case, you should output two lines. The first line is \"Case #:\", # means the number of the test case. The second line is the solution, sample for more.\n\n#### Sample Input\n```\n3\n2 7\n19 20 18 16 6 11 13 \n3 7\n14 1 3 2 18 6 17\n2 7\n4 7 5 6 1 2 3\n\n```\n\n#### Sample Output\n```\nCase 1:\n1 4 6\nCase 2:\n1 4\nCase 3:\n1 4 6\n\n```\n',1000,65536,'0',10,29,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('103','Obstructed Rook Circuits','#### Description\nA board is a rectangular array of squares such as on a chessboard, with possibly some squares blocked off. A rook\ntour of a board is a path that visits each empty square of the board exactly once, moving at each step to an empty\nadjacent square (North, South, East or West but not diagonally). A rook tour is a rook circuit if it starts and ends on\nthe same square. In the figures below, let the + symbol be the rook, and the X symbol be an obstruction. The\nfollowing are descriptions of each figure: (a) is a board with no rook circuit, (b) and (c) give distinct rook circuits of\nthe same board and (d) gives the unique (up to direction) rook circuit of another board.\n\n[[Image:B02.jpg|center]]\n\nWrite a program, which takes as input the description of a board and either finds a rook circuit or determines that\nthere is no rook circuit.\n\n#### Input\nInput consists of a sequence of board descriptions and starting points. The first line of the input is\n\n\'\'\'\'\'Nrows Ncols Nblocks StartX StartY\'\'\'\'\'\n\nwhere \'\'Nrows\'\' is the number of rows in the rectangular array, \'\'Ncols\'\' is the number of columns in the rectangular\narray, \'\'Nblocks\'\' is the number of blocked off squares on the board and (\'\'StartX, StartY\'\') is the position on the board\nwhere the path is to start (and end). \'\'StartX\'\' and \'\'StartY\'\' are 0 based (\'\'StartX\'\' ranges from 0 to \'\'Ncols\'\' – 1). Following\nthe first line there are \'\'Nblocks\'\' lines giving the coordinates of the blocked off squares, one per line. The coordinates\nof these points are 0 based and are of the form X Y. The final line of each board description is a blank line.\nThe last line of the input is line of 5 zeros.\n\n#### Output\nIf there is no rook circuit for the corresponding board, the output is a line “\'\'\'NO SOLUTION\'\'\'” followed by a blank\nline. Otherwise, the output is a sequence of the letters \'\'\'N, S, E, W\'\'\' giving the moves from the starting point to\ntraverse a rook circuit and return to the starting point. (\'\'\'N\'\'\' indicates moving to the previous row, \'\'\'S\'\'\' moving to the\nnext row, \'\'\'E\'\'\' moving to the next column and \'\'\'W\'\'\' moving to the previous column.) If more than 40 moves are\nrequired, the moves will be output 40 to a line (except possibly for the last line). The move output is to be followed\nby a blank line.\n\n#### Some Facts:\n+  The Parity Principle. If we checker the squares of the array black and white (white if (x+y) is even, black if (x+y) is odd), each unit step in a rook circuit must go from a white square to a black square and vice versa. Thus any rook circuit must have the same number of white and black squares. Board (a) above has 8 white and 6 black unblocked squares so cannot have a rook circuit.\n+  The Two Neighbor Principle. If a square has only two neighbors, then it must be visited via those neighbors. When a circuit gets to one of the neighbors, it must pass next to the two -neighbor square and then to the other neighbor. In board (d), the (0,0), (3, 0), (0, 2), (1,3), (2,3), (3,3) and (3,2) squares each have two neighbors. Thus the path is forced to include (1,0)-(0,0)-(0,1)-(0,2)-(1,2)-(1,3)-(2,3)-(3,3)-(3,2)-(3,1)-(3,0)-(2,0) in either order.\n+  The Cul-de-Sac Principle. Never draw segments that leave a square with only one exit.\n+  The Early Closing Principle. Never close a circuit until all squares have been visited.\n\n#### Sample Input\n```\n4 4 2 0 0\n1 2\n3 0\n\n4 4 0 2 2\n\n4 4 0 0 0\n\n4 4 2 1 2\n0 3\n2 2\n\n8 8 0 0 0\n\n0 0 0 0 0\n```\n\n#### Sample Output\n```\nNO SOLUTION\n\nNENWWWSESWSEEENW\n\nEEESWWSEESWWWNNN\n\nWNNESENESSSWWN\n\nEEEEEEESWWWWWWSEEEEEESWWWWWWSEEEEEESWWWW\nWWSEEEEEESWWWWWWWNNNNNNN\n```\n\n#### Hints\nThe first four boards and solutions correspond to the pictures in the figures above. Note that the same board may\nhave several rook circuits. Your program need only find any one (correct) rook circuit.\n',10000,32768,'0',1,2,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1030','Game','#### Description\nLet’s play game together! \n\nWe have a long box with N cells, they are numbered with 1,2,3…N. Each cell has some balls at first, and we can move some balls from the Ith cell to the Jth cell. Specially, the distance of I and J is M (J-I=M) and I is before J (I<=J). Obviously, the number of balls that you can move to Jth cell is less or equal than the number of balls in the Ith cell, and more or equal than 0. It is very simple, now here comes the problem: you are given two status of the box, can you tell if you can move to the second status from the first status with the method given above. Output Yes or No in a line.\n\n#### Input\nThere are about 100 test cases. Each test case has 3 lines.\n \nThe first line is M, N (0<=M<N<=100000).Then will come two status of the box. Each line contains N numbers (a1,a2,a3…an) (0<=ai<=1000), ai is the number of balls in ith cell. EOF for end.\n\n#### Output\nFor each test case, you should output two lines. The first line is \"Case #:\", # means the number of the test case. The second line is the result, sample for more.\n\n#### Sample Input\n```\n1 1\n1\n2\n1 2\n1 2\n1 2\n2 4\n3 2 1 2\n1 1 3 3\n```\n\n#### Sample Output\n```\nCase 1:\nNo\nCase 2:\nYes\nCase 3:\nYes\n```\n',2000,65536,'0',10,30,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1031','A Strange Tree','#### Description\nAt that moment, a boy Chess get lost in a forest unfortunately. And he find a tree with n (0<n<=10000) nodes. A tree with n nodes means there are only n-1 edges to connect each node, and each node can through the edge to arrive any other nodes. There are many fruits in each node. At that time, Chess feel very hungry so he wants as many fruits as he can in order to eat! But, it is strange that if he picks up the fruits in one node, then all the fruits in the adjacent nodes (exist an edge to connect the node you picked directly) would disappear! So, you the wise can you help Chess to maximize the number of fruits he can get. To simplify the problem, you just need to tell Chess the fruits he able to get most.\n\n#### Input\nThe first line of the input is a positive integer t (2<=t<=30), which means there are t test cases. For each test case, the first line contain an integer n (2<=n<=10000) which means that the tree has n nodes. The next line contain n numbers means the number of fruits in the i-th node (1<=i<=n), all the fruit number in each node is less than 100. Then follow n-1 lines describe the tree. Each line contain 2 integer number u, v (1<=u, v<=n) means the node u and v are adjacent. It’s sure that all the test case is legal.\n\n#### Output\nFor each test case, output the maximum number of fruits that Chess can get by picking up the fruit in the tree.\n\n#### Sample Input\n```\n2\n3\n1 5 2\n1 2\n2 3\n3\n3 1 2\n1 2\n2 3\n```\n\n#### Sample Output\n```\n5\n5\n```\n',1000,65536,'0',10,31,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1032','A simple problem with square pattern','#### Description\nYou have N square patterns of size 3 X 3, P1,P2,…,PN. You need to deal with two kinds of operations. One type of operation is to transform some rules to each square pattern in a given interval. The other is to ask for the square pattern in a given location.\n\nThe transform rules are:<br>\n•	1: 90 Degree Rotation: The pattern was rotated clockwise 90 degrees. <br>\n•	2: 180 Degree Rotation: The pattern was rotated clockwise 180 degrees. <br>\n•	3: 270 Degree Rotation: The pattern was rotated clockwise 270 degrees. <br>\n•	4: Reflection: The pattern was reflected horizontally (turned into a mirror image of itself by reflecting around a vertical line in the middle of the image).\n\n#### Input\nJust one case.\n\nThe first line contains two numbers N and Q. (1<=N<=50,000, 1<=Q<=100,000).\n\nThen the next 3*N lines represents N initial square patterns of size 3 X 3(P1,P2,…,PN). Each pattern contains 3 lines of 3 characters (each either ‘*’ or ‘-‘);\n\nEach of the next Q lines represents an operation.\n\n“C a b c” means using rule c to transform each of Pa,Pa+1,…,Pb.\n\n“Q a” means querying Pa.\n\n(1 <= a <= b <= N, 1 <= c <= 4).\n\n#### Output\nYou need to answer all Q commands in order. One answer contains 3 lines of 3 characters.\n\n#### Sample Input\n```\n4 6\n-*-\n+ -+ \n+ -+ \n--*\n--*\n+ --\n  - *\n-**\n+ -+ \n+ -+ \n---\n---\nC 3 4 3\nC 2 2 4\nC 3 4 2\nC 2 3 1\nQ 2\nQ 3\n```\n\n#### Sample Output\n```\n-**\n---\n+ --\n+ -+ \n  - -\n  - *\n```',3000,65536,'0',10,32,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1033','Chinese Zodiac','#### Description\nPlease Read (Problem C. Travel)’s description first!<br>\n\nFinally SzuHope come to LaoJunGe. But the doorman said to them: you must get the 12 zodiac animals’ help if you want to see TaiShangLaoJun. As we all know, the 12 zodiac animals is Rat、Ox Tiger、Hare、Dragon、Snake、Horse、Sheep、Monkey、Cock、Dog、Boar. They are numbered with 1,2,3…12, and they can be called by magic. But the magic can use only when some special animals all is here and the other animal is not. The effort of using magic is that some animals will appear and other will disappear. The magic’s cost is Y*Z. Y is the number of animals after the magic, Z is magic’s value. <br>\n\nFor example: the magic “FeiLongZaiTian” , its value is 10, it can used only when the dragon is here, after the magic, the Monkey and the Cock will come, but the dragon is fly always. This will cost 2*10. As SzuHope really want to meet LaoJun, can you help him with the lowest cost?\n\n#### Input\nThe first line of input contains T (T<30) test cases. For Each test case, the first line is the kinds of magic (K<100000). \n\nFollowing is the description of the magic. Each magic has 3 lines. The first line is the X, Y, Z. (0<=X, Y<=12, 0<Z<100). The second line has X numbers, means the magic can used when exactly the X animals is here. The third line has Y numbers, means after the magic Y animals is here.\n\n#### Output\nFor each test case, you should output two lines. The first line is \"Case #:\", # means the number of the test case. The second line is the lowest cost. Output -1 if SzuHope have no chance to meet LaoJun.\n\n#### Sample Input\n```\n1\n2\n0 3 1\n\n1 2 3\n3 12 1\n1 2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n```\n\n#### Sample Output\n```\nCase 1:\n15\n```\n',5000,65536,'0',10,33,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1034','ABC','#### Description\nThere are three persons. A, B, C is the name of each of them. One day, they all come to a same maze in different position. They are in a n*n (n<=100) maze. At first, they stand in different position in the maze. The rule is that they take turn to go. First is A, then B, then C, then A,…….and so on. Each turn each person can choose to go one step to the adjacent grid ( (x,y) is adjacent to (x-1,y),(x+1,y),(x,y-1),(x,y+1) ) or stand in the original position. And some grids in the maze are unable to go if it is ‘#’, some grid can go if it is ‘.’ . \n\nA grid can stand many person. If all the three of them stand at the same grid, then they meet. The distance of each person is how many steps they have gone. They just want to know how can the sum of distance of them when they all meet to be smallest if possible.\n\n#### Input\nThe first line of the input is a positive integer t (1<=t<=100), which means there are t test cases. For each test case, the first line contain an integer n (2<=n<=100) which means that it’s a n*n map. Then following n lines. Each line contains n characters. ’A’,’ B’, ’C’, which mean the three person. ’.’ means can go. ’#’means you can not go. All the person’s initial station can be go through by other person.\n\nThe input is sure that there must exist ‘A’,’B’,’C’, and each of them only exist once on one different grid. And the map would not contain other character that hasn’t been described above.\n\n#### Output\nFor each test case, output the smallest total distance of the three person when the three person meet in the sample grid. If they can not meet together just output -1.\n\n#### Sample Input\n```\n2\n3\nA..\n.B.\n..C\n3\nA#.\n1. .B\nC..\n```\n\n#### Sample Output\n```\n4\n-1\n```',1000,65536,'0',10,34,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1035','找零钱的问题','#### Description\n当售货员在为顾客找零钱的时候，顾客往往希望拿到最少张纸币。如顾客买了3元钱商品，拿给售货员10元，此时售货员应找回7元钱，当然，售货员可以拿7张一元，或者一张5元，一张2元，如果没有面值为7元的纸币，那么找回2张（一张5元，一张2元）就是最少的。\n#### Input\n第一行一个数n(n<100)，表示零钱的种类。第二行n个数，表示各种零钱的面值（单位为分）。\n第三行一个数m(m<100)。表示需要找m次零钱。第四行m个数，表示每次需要找还给顾客的零钱总数。\n#### Output\n对于每次找零，输出最少需要找回的纸币的张数。\n#### Sample Input\n```\n5\n1 5 10 50 20\n3\n70 40 4\n\n```\n\n#### Sample Output\n```\n2\n2\n4\n\n```\n',1000,1024,'0',10,35,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1036','最小生成树','#### Description\n一个有 n 个结点的生成树是一棵包含原图中的所有 n 个结点的树。所有生成树中边权值和最小的树称为最小生成树。\n最小生成树的kruskal算法：先构造一个只含 n 个顶点，而边集为空的子图，将边按权值从小到大的顺序添加到图里，如果添加某条边之后出现环，则该边不添加，继续尝试添加比它大的边，直到添加n-1条边为止。\n\n比如（如图），一个图中所有边按权值递增的排序如下：\n(1,3)1  (4,6)2  (2,5)3  (6,3)4 (1,4)5  (2,3)5 (4,3)5 (3,5)6  (1,2)6  (6,5)6  \n步骤1：将(1,3)的边加到生产树中\n步骤2：将(4,6)的边加到生产树中\n步骤3：将(2,5)的边加到生产树中\n步骤4：将(3,6)的边加到生产树中\n步骤5：将(1,4)的边加到生产树中，但发现这时出现了回路(1,4,6,3 顶点)，我们改用下条边(2,3)加到生产树中,现在已经连通了1 2 3 4 5 6 所有顶点，最小生产树建立完成。\n\n#### Input\n第一行为两个整数n，表示图有n（n < 100）个顶点。\n接下来是图的邻接矩阵，权值为0表示边不存在。（所有边的权值都不一样，即按kruskal算法得到的最小生成树是唯一的。）\n\n#### Output\nn-1行，每行2个数，v、u，表示kruskal算法得到的最小生成树里有边<v,u>。按边权值从小到大输出，对于每条边，编号小的点在前，编号大的在后。\n#### Sample Input\n```\n4\n0 1 3 8\n1 0 5 4\n3 5 0 2\n8 4 2 0\n\n```\n\n#### Sample Output\n```\n0 1\n2 3\n0 2\n```\n',1000,32768,'0',10,36,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1037','Huffman编码','#### Description\n以哈夫曼树——即最优二叉树，带权路径长度最小的二叉树，经常应用于数据压缩。 在计算机信息处理中，“哈夫曼编码”是一种一致性编码法（又称“熵编码法”），用于数据的无损耗压缩。这一术语是指使用一张特殊的编码表将源字符（例如某文件中的一个符号）进行编码。这张编码表的特殊之处在于，它是根据每一个源字符出现的估算概率而建立起来的（出现概率高的字符使用较短的编码，反之出现概率低的则使用较长的编码，这便使编码之后的字符串的平均期望长度降低，从而达到无损压缩数据的目的）。这种方法是由David.A.Huffman发展起来的。 例如，在英文中，e的出现概率很高，而z的出现概率则最低。当利用哈夫曼编码对一篇英文进行压缩时，e极有可能用一个位(bit)来表示，而z则可能花去25个位（不是26）。用普通的表示方法时，每个英文字母均占用一个字节（byte），即8个位。二者相比，e使用了一般编码的1/8的长度，z则使用了3倍多。倘若我们能实现对于英文中各个字母出现概率的较准确的估算，就可以大幅度提高无损压缩的比例。\n\n哈夫曼树的构造\n假设有n个权值，则构造出的哈夫曼树有n个叶子结点。 n个权值分别设为 w1、w2、…、wn，则哈夫曼树的构造规则为： <br\\>\n　　(1) 将w1、w2、…，wn看成是有n 棵树的森林(每棵树仅有一个结点)； <br\\>\n　　(2) 在森林中选出两个根结点的权值最小的树合并，作为一棵新树的左、右子树（权值较小的放在左子树），且新树的根结点权值为其左、右子树根结点权值之和；<br\\>\n　　(3)从森林中删除选取的两棵树，并将新树加入森林； <br\\>\n　　(4)重复(2)、(3)步，直到森林中只剩一棵树为止，该树即为所求得的哈夫曼树。<br\\>\n由上面算法可知，n 个权值构造哈夫曼树需n-1次合并，每次合并，森林中的树数目减1，最后森林中只剩下一棵树，即为我们求得的哈夫曼树。\n<br\\>编码：对树进行遍历，遍历左子树时，编码为0，右子树编码为1.\n\n#### Input\n第一行为一整数n(n<=26)，表示有多少个字母（小写）。当n小于26时，使用前n个小写字母。\n第二行n个整数，为各个英文字母的频率统计\n第三行一个字符串，长度小于100\n\n#### Output\n输出所输入的字符串的哈弗曼编码（测试数据保证哈弗曼编码唯一）\n#### Sample Input\n```\n3\n40  26  34\naabc\n```\n\n#### Sample Output\n```\n001011\n```\n',1000,32768,'0',10,37,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1038','第1题','#### Description\n求任意一个正确数学表达式的括号嵌套层数\n\n#### Input\n输入1个正确的数学表达式\n\n#### Output\n输出该数学表达式的括号嵌套层数的最大值。\n\n#### Sample Input\n```\n{(a+h)+[b-(c+d)]}/[e*(f-g)]\n\n```\n\n#### Sample Output\n```\n3\n\n```\n\n',1000,32768,'0',10,38,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1039','第2题','#### Description\n某公司编号为1,2,3,…,n的n个员工，依编号排队手牵手（编号小的在左手边，大的在右手边），然后队首队尾员工牵手行成一个圈，然后按以下规则选出k个人（k<=n）参加舞会：首先从编号为1的员工开始数数，往右手边的方向数到m(m<=n)的员工出队参加舞会，其左右相邻员工相牵继续围成圈，再从被选出的员工的右手边的第一个员工开始数数按同样规则选人，直至选出k个员工为止。\n\n#### Input\n输入三个数n k m, (k <= n, m <= n)\n\nn表示有n个人，编号为1,2,3,…,n\n\nk表示将要抽出的人数\n\nm表示数数选人的值\n\n#### Output\nk个参加舞会的员工编号。\n\n#### Sample Input\n```\n5 4 2\n\n```\n\n#### Sample Output\n```\n2 4 1 5\n\n```\n',1000,32768,'0',10,39,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('104','Rhyme Schemes','#### Description\nThe rhyme scheme for a poem (or stanza of a longer poem) tells which lines of the poem rhyme with which other\nlines. For example, a limerick such as\n\nIf computers that you build are quantum\n\nThen spies of all factions will want \'em\n\nOur codes will all fail\n\nAnd they\'ll read our email\n\n‘Til we\'ve crypto that\'s quantum and daunt \'em\nJennifer and Peter Shor \nHas a rhyme scheme of aabba, indicating that the first, second and fifth lines rhyme and the third and fourth lines\nrhyme.\nFor a poem or stanza of four lines, there are 15 possible rhyme schemes:\n\naaaa, aaab, aaba, aabb, aabc, abaa, abab, abac, abba, abbb, abbc, abca, a bcb, abcc, and abcd.\nWrite a program to compute the number of rhyme schemes for a poem or stanza of N lines where N is an input\nvalue.\nInput\nInput will consist of a sequence of integers N, one per line, ending with a 0 (zero) to indicate the end of the data. N\nis the number of lines in a poem.\nOutput\nFor each input integer N, your program should output the value of N, followed by a space, followed by the number\nof rhyme schemes for a poem with N lines as a decimal integer with at least 12 correct significant digits (use double\nprecision floating point for your computations).\n#### Input\nInput will consist of a sequence of integers N, one per line, ending with a 0 (zero) to indicate the end of the data. N\nis the number of lines in a poem.\n\n#### Output\nFor each input integer N, your program should output the value of N, followed by a space, followed by the number\nof rhyme schemes for a poem with N lines as a decimal integer with at least 12 correct significant digits (use double\nprecision floating point for your computations).\n\n#### Sample Input\n```\n1\n2\n3\n4\n20\n30\n10\n0\n```\n\n#### Sample Output\n```\n1 1\n2 2\n3 5\n4 15\n20 51724158235372\n30 846749014511809120000000\n10 115975\n```\n',10000,32768,'0',1,3,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1040','第3题','#### Description\n给出一棵二叉树的先序遍历，0表示孩子为空， 用递归方法建立一颗字符二叉树，输出所有叶子节点，以及它们的父节点（如重复只需输出一次）。\n\n#### Input\n输入二叉树的先序遍历\n\n#### Output\n第一行输出所有叶子节点\n\n第二行输出所有叶子节点的父节点（如重复只需输出一次）\n\n#### Sample Input\n```\nABC00D00EF00G00       (先序遍历，0表示孩子为空)\n\n```\n\n#### Sample Output\n```\nCDFG						(叶子节点)\n\nBE						(叶子的父节点)\n\n```\n',1000,32768,'0',10,40,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1041','第4题','#### Description\n给定一个含有8个结点（A, B, C, D, E, F, G, H）的有向图的邻接矩阵，从A结点开始，按邻接结点中编号字母顺序小的结点优先访问的次序，输出该图深度遍历的第k个结点编号（k<=8）。\n\n例如，有一个有向图为如下：\n\n[[File:Final4graph.jpg]]\n\n#### Input\n第1行起到第8行输入一个8x8的邻接矩阵，其中Matrix[i,j]=1表示第i个结点有边指向第j个结点，否则不存在边\n\n第9行输入k（k<=8），表示需要输出深度遍历的第k个结点\n\n#### Output\n深度遍历该图的第k个结点值\n\n\n#### Sample Input\n```\n0 1 1 1 0 0 0 0\n\n0 0 0 1 0 0 0 0\n\n0 0 0 1 1 0 0 0\n\n0 0 0 0 0 1 0 0\n\n0 0 0 0 0 1 0 0\n\n0 0 0 0 0 0 1 1\n\n0 0 0 0 0 0 0 1\n\n0 0 0 0 0 0 0 0\n\n4\n\n```\n\n#### Sample Output\n```\nF\n\n```\n',1000,32768,'0',10,41,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1042','第5题','#### Description\n求n个数从小到大排序后的第k个数的值\n\n#### Input\n第一行输入n，表示下面将输入n个数\n\n第二行输入n个数{a1, a2, a3, …, an}\n\n第三行输入k, (k<=n)。\n\n#### Output\n输出n个数从小到大排序后的第k个值。\n\n#### Sample Input\n```\n9\n\n71 19 67 31 53 43 39 23 11\n\n3\n\n```\n\n#### Sample Output\n```\n23\n\n```\n',1000,32768,'0',10,42,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1043','第6题','#### Description\n任意给定一个无序序列：S={s1，s2，…，sn}， n为序列元素个数（n > 2），建立一颗二叉排序树T，输出s_(n-1)（倒数第二个数）在排序树的位置，即s_(n-1)在树中第几层，层中的第几个元素（相对完全二叉树位置）。\n\n#### Input\n第一行输入n值，表示有n个数\n\n第二行输入n个数的值{ s1，s2，…，sn }\n\n#### Output\n输出s_(n-1)（倒数第二个数）在排序树的位置i 和j，表示s_(n-1)在排序树的第i层，为层中第j个元素\n\n#### Sample Input\n```\n9\n\n71 19 67 31 53 43 39 23 11\n\n```\n\n#### Sample Output\n```\n5 5                （23为排序树的第5层，第5个元素）\n\n```\n',1000,32768,'0',10,43,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1044','附加题1','#### Description\n给定一个含有8个结点（A, B, C, D, E, F, G, H）带权有向图的邻接矩阵，从A结点开始，输出花费路程不超过L就能到达的所有节点。\n\n例如，下图：\n\n[[File:Final7graph.jpg]]\n\n#### Input\n第1行起到第8行输入一个8x8的邻接矩阵，其中Matrix[i,j]=x (x>0)表示第i个结点有边指向第j个结点且其距离为x，否则(x<=0)表示不存在边。\n\n第9行输入L，表示从A节点到某个结点允许花费的最大路程。\n\n#### Output\n输出所有能到达的结点（按字母顺序从小到大输出）\n\n如果没有节点满足则输出N\n\n#### Sample Input\n```\n0 20 20 80 0 0 0 0\n\n0 0 0 50 0 0 0 0\n\n0 0 0 70 50 0 0 0\n\n0 0 0 0 0 90 0 0\n\n0 0 0 0 0 20 0 0\n\n0 0 0 0 0 0 60 100\n\n0 0 0 0 0 0 0 30\n\n0 0 0 0 0 0 0 0\n\n100\n\n```\n\n#### Sample Output\n```\nBCDEF\n\n```\n',1000,32768,'0',10,44,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1045','附加题2','#### Description\n任意给定一个无序序列：S={s1，s2，…，sn}，n为序列元素个数(n>=6)，给定一个Gap的值g（g<=n/2），输出使用希尔排序算法基于g值对该序列进行一趟希尔排序后的结果。\n\n#### Input\n第一行输入n值，表示有n个数(n>=6)\n\n第二行输入n个数的值{ s1，s2，…，sn }\n\n第三行输入Gap的值g（g<=n/2）\n\n#### Output\n使用希尔排序算法对该序列进行一趟排序后的结果\n\n#### Sample Input\n```\n6\n\n31 26 18 55 45 49\n\n2\n\n```\n\n#### Sample Output\n```\n18 26 31 49 45 55\n\n```\n',1000,32768,'0',10,45,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1046','圣诞礼袜','#### Description\n\n小王是工艺厂的员工，他正在设计一种名为趣味圣诞礼袜的产品。趣味圣诞礼袜的设计想法是这样：有红、橙、黄、绿等等颜色不同但大小相同的袜子，首先把一种颜色的一只袜子，例如红色袜子，装到另一种颜色如橙色的袜子里面，再把（装了红色袜子的）橙色袜子装到黄色袜子里面，再反复继续这个过程，直到最后又是红色袜子，并且每种颜色的袜子刚好有2只。小王希望最里面的那只袜子的颜色跟最外面的那只袜子的颜色相同，里面倒数第2只袜子的颜色又跟外面倒数第2只袜子的颜色相同。现有许多不同颜色的袜子，请你帮他设计好袜子的装配方案，使得人们在拆礼物，取出袜子进行配对的过程中，能够按他所希望的次序依次得到一双双颜色不同的袜子。\n\n[[File:socks.jpg]]\n\n#### Input\n\n第1行输入1个数字k，表示有k个测试用例，1<=k<=100\n\n第2行输入1个数字n，表示有n对袜子，1<=n<=100\n\n第3行输入n个表示颜色的字符串，串长<=20，表示希望依次得到配对的袜子，\n\n#### Output\n\n对每个测试用例，每行输出袜子的装配次序\n\n#### Sample Input\n```\n1\n4\nred orange yellow green\n```\n\n#### Sample Output\n```\ngreen yellow orange red red orange yellow green\n```\n',1000,32768,'0',10,46,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1047','树的遍历与构造','#### Description\n\n给定一颗二叉树前序和中序遍历的结果，输出后序遍历的结果\n\n[[File:tree.jpg]]\n\n\n#### Input\n\n第1行输入1个数字k，表示有k个测试用例，1<=k<=100\n\n第2行输入二叉树的前序遍历结果（1<=结点数<=26，结点用单个字母A…Z表示）\n\n第3行输入二叉树的中序遍历结果（1<=结点数<=26，结点用单个字母A…Z表示）\n\n#### Output\n\n输出每个二叉树的后序遍历结果\n\n#### Sample Input\n```\n1\nABDC\nBDAC\n\n```\n\n#### Sample Output\n```\nDBCA\n\n```\n',1000,32768,'0',10,47,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1048','鲁滨逊与荒岛','#### Description\n\n鲁滨逊被困在一个荒岛上。按他的体力，他每次下海只能游m公里（<=m）。现已知海上各个荒岛及岛间的距离。若不出其他意外，请问鲁滨逊在他有生之年，能不能游回大陆。\n\n[[File:lbs.jpg]]\n\n#### Input\n\n第1行输入1个数字k，表示有k个测试用例，1<=k<=100\n\n第2行输入数字n和m，表示有n-1个荒岛和1片大陆，（1<=n<=100），其中鲁滨逊在第一个荒岛上，大陆则是最后一个点，m表示鲁滨逊最大游泳距离<=m。\n\n接下来n行是一个n×n的邻接矩阵，aij=0表示荒岛i和j间有浅滩连接，鲁滨逊可从荒岛i涉水步行至荒岛j，aij=w(1<=w<=255)表示荒岛i和j间的游泳距离。\n\n#### Output\n\n对每个测试用例，输出Yes表示鲁滨逊最终能游回大陆，No表示不能。\n\n#### Sample Input\n```\n2\n2 10\n0 12\n12 0\n3 10\n0 6 6\n6 0 6\n6 6 0\n\n```\n\n#### Sample Output\n```\nNo\nYes\n\n```\n',1000,32768,'0',10,48,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1049','紧急采购','#### Description\n\n小吴是个精明的采购员，他现要紧急采购若干吨钢材。经过询价，他已经知道若干家钢材厂运送1吨钢材到目的地的报价。但是，有些钢材厂现在存货不足采购量，请问他应该如何进行采购，才能使得总采购成本最低。\n\n[[File:shopping.jpg]]\n\n#### Input\n\n第1行输入一个整数k，表示有k组测试数据，1<=k<=100\n\n第2行输入整数n和m，表示有n家钢材厂，1<=n<=1000和钢材采购量m，1<=m<=1000000\n\n第3行到第n+2行每行输入2个整数，第1个整数表示报价(<=1000000)，第2个整数表示库存(<=3000000)\n\n#### Output\n\n采购方案（题目输入保证有满足条件的输出）\n\n#### Sample Input\n```\n1\n4 300000\n10 100000\n30 250000\n20 150000\n40 500000\n\n```\n\n#### Sample Output\n```\n10 100000\n20 150000\n30 50000\n\n```\n',1000,32768,'0',10,49,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('105','Fully Diversified Sequences of Sets','#### Description\nGiven a positive integer n, let N be the set of integers from 1 to n. A finite sequence A1, …, Ak of subsets of N is\nfully diversified if:\n\na. Each subset Ai has an even number of elements.\n\nb. For each element m in N, there are exactly m sets\n\nAi in the sequence with m as a member.\nFor example, the sequence of subsets {1,3}, {2,3}, {2,3} is a fully diversified sequence of subsets of {1,2,3}. (Note\nthat subsets in the sequence may be the same.)\nA fully diversified sequence of subsets of N is minimal if no other fully diversified sequence of subsets of N has a\nsmaller sequence count. The example above is minimal since the element 3 must occur in 3 different sets.\nWrite a program, which, given an integer n, determines whether there is a fully diversified sequence of subsets of\nthe corresponding set N and, if there is a fully diversified sequence, finds a minimal fully diversified sequence of\nsubsets of N.\n#### Input\nThe input will be a sequence of positive integers n, one per line followed by a zero (0) (on another line) indicating\nthe end of the input.\n#### Output\nIf there is no fully diversified sequence of subsets of the corresponding set N, output a 0 on one line followed by a\nblank line.\nIf there is a fully diversified sequence of subsets of the corresponding set N, output the number of sets in your\nminimal sequence on one line, followed by the sets, one per line, followed by a blank line.\nThe elements of each set should be output in increasing order with a single space between numbers. The sets of\nsequences should be output in lexicographical order. There may be many possible solutions to each problem.\n#### Sample Input\n```\n8\n9\n11\n17\n23\n0\n```\n\n#### Sample Output\n```\n8\n1 3 5 6 7 8\n2 4 5 6 7 8\n2 4 5 6 7 8\n3 4 5 6 7 8\n3 4 5 6 7 8\n6 8\n7 8\n7 8\n\n0\nOutput (continued)\n\n11\n1 5 7 8 9 11\n2 5 7 8 10 11\n2 5 7 8 10 11\n3 5 7 9 10 11\n3 6 7 9 10 11\n3 6 7 9 10 11\n4 6 8 9 10 11\n4 6 8 9 10 11\n4 6 8 9 10 11\n4 6 8 9 10 11\n5 7 8 9 10 11\n\n0\n\n23\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n5 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n9 11 12 13 14 15 16 17 18 19 20 21 22 23\n10 11 12 13 14 15 16 17 18 19 20 21 22 23\n10 11 12 13 14 15 16 17 18 19 20 21 22 23\n12 13 14 15 16 17 18 19 20 21 22 23\n13 15 16 17 18 19 20 21 22 23\n14 15 16 17 18 19 20 21 22 23\n14 15 16 17 18 19 20 21 22 23\n16 17 18 19 20 21 22 23\n17 19 20 21 22 23\n18 19 20 21 22 23\n18 19 20 21 22 23\n20 21 22 23\n21 23\n22 23\n22 23\n```\n',10000,32768,'0',1,4,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1050','汉诺塔','#### Description\n\n传说古代有一个梵塔，塔内有三个座A、B、C，A座上有64个盘子，盘子大小不等，大的在下，小的在上。有一个和尚想把这64个盘子从A座移到C座，但每次只能允许移动一个盘子，并且在移动过程中，3个座上的盘子始终保持大盘在下，小盘在上。在移动过程中可以利用B座。现输入盘子个数，要求输出移动盘子的具体步骤。\n\n[[File:hanno.jpg]]\n\n#### Input\n\n第1行输入一个整数k，表示有k组测试数据，1<=k<=100\n\n第2行输入数字n(1<=n<=64)，表示盘子的个数\n\n#### Output\n\n移动盘子的次序\n\n#### Sample Input\n```\n1\n2\n\n```\n\n#### Sample Output\n```\nA->B\nA->C\nB->C\n\n```\n',1000,32768,'0',10,50,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1051','语法树的句柄（附加题）','#### Description\n\n语法树是编译器中一个非常重要的数据结构。对一颗语法树，我们称在语法树上最左边的、高度为2的子树为语法树的句柄。由于语法树是一颗多叉树，小张同学在实验过程中，采用“左孩子、右兄弟”的方法，将多叉的语法树变成一颗二叉树。现在问题是，如何在这新的二叉树上，找到句柄。\n\n[[File:handler.jpg]]\n\n#### Input\n\n第1行输入1个数字k，表示有k个测试用例，1<=k<=100\n\n第2行输入每个二叉树的先序遍历，用0表示孩子为空\n\n#### Output\n\n输出语法树句柄对应的产生式（ ->箭头左侧为语法树中子树的根，箭头右侧为叶子串）\n\n#### Sample Input\n```\n1\nAB0C000\n\n```\n\n#### Sample Output\n```\nA->BC\n\n```\n',1000,32768,'0',10,51,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1052','路由表（附加题）','#### Description\n\n在计算机网络中，路由器根据收到数据包中的网络层地址以及路由器内部维护的路由表决定下一跳地址。现在刘技术员经过前期调查，确定了路由器间的连通和时延情况。请根据路由图，帮刘技术员制定静态路由表，使得从给定路由器发出的数据包，能够以最快的速度传输到目的地。\n\n[[File:router.jpg]]\n#### Input\n\n第1行输入1个数字k，表示有k个测试用例\n\n第2行输入1个数字n，表示有n个路由器，1<=n<=500\n\n第3行到第n+2行输入一个n×n的邻接矩阵，aij=0表示路由i和j间没有通路，aij=w(1<=w<=255)表示路由i和j间存在时延为w的通路。\n\n#### Output\n\n1号路由器的路由表\n\n#### Sample Input\n```\n1\n4\n0 1 2 0\n3 0 0 4\n5 0 0 6\n0 7 8 0\n\n```\n\n#### Sample Output\n```\n2 4 : 2\n3 : 3\n\n```\n',1000,32768,'0',10,52,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1053','回文串判断','#### Description\n回文串是指正读和反读均相同的字符序列，例如“abba”和“abcba”均是回文串，但“banana”就不是回文串。现要求使用堆栈来判断一个字符串是否是回文串，即一半字符入栈和后一半比较，建议使用C++自带的STL对象stack。\n\n#### Input\n第一行输入一个t，表示下面将有t行字符\n第二行起输入t行字符，每行字符长度不少于6，不大于100，字母区分大小写\n\n#### Output\n输出每一行的结果，每行结果包括三部分：第一部分是判断结果，如果是回文串则输出333，不是回文串则输出444；第二部分是比较次数，表示一共做了多少次比较，注意若发现不匹配会立刻中断比较，无须完全比较；第三部分是进栈次数，表示做了多少次进栈操作，注意只有把要比较的部分字符压入堆栈后才开始比较，不能只压入一部分就开始比较。\n\n#### Sample Input\n```\n3\nAAABCBAAA\nA2ABBA3A\n3accbbcca3\n\n```\n\n#### Sample Output\n```\n333 4 4\n444 3 4\n333 5 5\n\n```\n',1000,32768,'0',10,53,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1054','循环队列','#### Description\n循环队列是采用数组实现队列功能的一种数据结构，它将整个队列的存储单元首尾相连，通过指针front和rear表示队头和队尾，front总是指向队头，rear总是指向下一个空白位置。当front = rear，表示循环队列空。当(rear+1) % n = front，表示循环队列满，n为数组总长度。front和rear初始化为0。\n提示循环队列的最后一个空间是被浪费的，只能存储n-1个数据。\n要求实现循环队列的以下命令：\n\n1、	ENQ x，表示一个新数据x进入队列，插入队尾，rear = (rear+1)%n，无输出；若队列满不执行插入，rear值不变，输出444表示插入失败。\n\n2、	DEQ，表示队头数据出队，fron = (front+1)%n，无输出；若队列空，front值不变，输出444表示删除失败。\n\n3、	STOP，表示停止执行命令，输出队列现有的数据。\n\n4、	STAT，表示输出front和rear的值\n\n#### Input\n第一行输入n，表示数组总长度，3<n<10\n第二行起输入任意指令，直到输入STOP停止执行\n\n#### Output\n根据指令输出相应结果\n\n#### Sample Input\n```\n4\nENQ 101\nENQ 102\nENQ 103\nENQ 104\nSTAT\nDEQ\nDEQ\nENQ 105\nSTAT\nSTOP\n\n```\n\n#### Sample Output\n```\n444\n0 3\n2 0\n103 105\n```\n\n结果说明：\n第一行输入n=4，队列长度为4，只能存3个数据\n\n后面三行插入101、102、103三个数据成功\n\n第5行插入数据104失败，所以rear值不改变，输出444\n\n第6行输出front和rear值，因为没执行DEQ命令，所以front不变，一直为0，执行了3次插入，所以rear为3\n\n第7行执行出队操作，101被删除\n\n第8行执行出队操作，102被删除\n\n第9行执行插入操作，105被插入\n\n第10行输出front和rear值，因为执行了两次DEQ命令，所以front为2，因为执行一次ENQ命令，所以(rear+1)%4为0\n\n第11行结束操作，输出最终结果103 105 \n\n',1000,32768,'0',10,54,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1055','树叶和','#### Description\n给定一颗二叉树的先序遍历结果，空树用字符‘0’表示，例如AB0C00D00建立该二叉树的二叉链式存储结构，见下图。每个结点都有编号和权值，编号用A\\B\\C\\D等字母表示，权值用正整数表示，计算出所有叶子结点的权值总和。\n\n[[File:Biotree1.jpg]]\n#### Input\n第一行输入二叉树的先序遍历结果，最多26个结点，用大写字母和0表示\n第二行输入每个结点的权值，与先序遍历结果的字母对应输入权值\n\n#### Output\n输出所有叶子结点的权值总和。\n\n#### Sample Input\n```\nAB0C00D00\n8 10 12 6\n```\n\n#### Sample Output\n```\n18\n```\n从输入可以看出A的权值是8，B的权值是10，C的权值是12，D的权值是6\n建立二叉树后，进行遍历判断（可采用先序遍历），判断哪些结点是叶子，判断条件是左右孩子均为空。可以判断出C和D是叶子，所以权值总和为18\n',1000,32768,'0',10,55,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1056','最远城市','#### Description\n已知多个城市的道路连接情况，某货车从指定城市出发，根据汽油容量计算出能跑到的最远城市。\n例如下图，从城市0出，假设汽油只能跑9公里，通过迪杰斯特拉算法计算出0其他城市的最短路径：0到1是5公里；0到2的路径是0-1-2，距离为10公里；0到3是7公里；0到4的最短路径是0-3-4，距离是8公里。因此城市0能跑到的最远城市是4。\n[[File:city1.jpg]]\n\n#### Input\n第一行参数n、A、k，参数n表示图有多少个顶点，顶点自动从0开始编号到n-1，4<n<20；参数A表示出发的城市编号；参数k表示货车的汽油最多能跑多少公里。\n第二行起连续输入n行，表示图的邻接矩阵\n\n#### Output\n找出能跑到的最远城市编号，如果符合条件的城市有多个，选择编号最小的；如果找不到任何一个城市符合条件，输出444\n输出从起点到最远城市的完成路径\n\n#### Sample Input\n```\n5 0 9\n0 5 0 7 15\n0 0 5 0 0\n0 0 0 0 0\n0 0 0 0 1\n0 0 0 0 0\n\n```\n\n#### Sample Output\n```\n0 3 4\n\n```\n',1000,32768,'0',10,56,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1057','最长简单路径','#### Description\n简单路径是指一条路径上不存在重复顶点。已知一个图的邻接矩阵，找出该图最长简单路径，即搜索一条经过最多顶点的路径。算法思路：从任意一个顶点出发做深度优先遍历，找出该顶点为起点的最长简单路径，然后比较找出最长值\n例如从下图可以找出两条最长简单路径：0-4-3-5和1-2，经比较得到该图最长简单路径是0-4-3-5，共包含4个顶点。\n[[File:city2.jpg]]\n\n#### Input\n第一行参数n表示图有多少个顶点，顶点自动从0开始编号到n-1，4<n<20\n第二行起连续输入n行，表示图的邻接矩阵\n\n#### Output\n输出该图的最长简单路径包含的顶点数量，若找到多条最长简单路径的顶点数量都相同，则输出1个数量即可\n\n#### Sample Input\n```\n6\n0 0 0 0 1 1\n0 0 1 0 0 0\n0 1 0 0 0 0\n0 0 0 0 1 1\n1 0 0 1 0 1\n1 0 0 1 1 0\n\n```\n\n#### Sample Output\n```\n4\n\n```\n',1000,32768,'0',10,57,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1058','哈希查找','#### Description\n哈希查找是把记录关键字通过哈希函数的计算直接得到访问地址，而不需要逐个查找记录来找到记录位置。哈希查找主要涉及两个问题：哈希函数设计和地址冲突。常用的哈希函数有除留余数法、平方取中等。\n地址冲突是指不同的记录通过哈希函数计算出来的地址相同，因此产生冲突。解决冲突常用开放定址法，开放定址法又包括线性探测再散列、二次探测再散列等方法。\n本题采用除留余数法作为哈希函数，使用线性探测再散列来解决地址冲突问题。线性探测是指当发生地址冲突，将冲突地址+1，往后探测是否有空白，若仍冲突继续+1探测直到探测出空白位置。在地址+1过程中若到达哈希表末尾，则取模返回表头再往下探测\n\n例如给定关键字集合19、1、23、14、55、68、11、82、36，设定哈希函数H(key)=key MOD 11 (表长=11)，最终插入结果如下图所示：\n数据19模11得余数8，因此19放在位置8，同理数据01放在位置1\n数据23经取模后得到哈希地址为1，与01冲突，地址+1得到地址2为空，不冲突则插入\n数据14、55取模得到地址都无冲突，放在位置3和位置0\n数据68取模得到地址2，与数据23冲突，地址+1后与数据14冲突，地址再+1为空，不冲突则插入\n数据11取模得到地址0，与55冲突，地址经过5次+1，找到空白位置5插入 \n数据82取模得到地址5，与11冲突，地址+1后找到空白位置6插入\n数据36取模得到地址3，与14冲突，地址经过4次+1，找到空白位置7插入\n\n[[File:hash1.jpg]]\n \n从上图可以推出，若查找数据19、01、14、55，都是经过哈希函数直接算出，就是只查找1次就成功；若查找数据23，先是查找到数据01，然后往后搜索找到23，共查找2次才成功；若查找数据11，先是查找到数据55，往后搜索5次找到11，共查找6次才成功\n\n#### Input\n第一行输入参考k和n，参数k表示共有多少个数据，参数n表示哈希表总长度，4<k<n<100\n第二行输入k个互不相同的整数数据\n第三行输入要查找的一个整数（输入的数据要求在第二行中）\n\n#### Output\n第一行输出整张哈希表的数据\n第二行输出要查找的数据位置和查找次数，不考虑查找失败的情况，位置从0开始编号\n\n#### Sample Input\n```\n9 11\n19 1 23 14 55 68 11 82 36\n55\n\n```\n\n#### Sample Output\n```\n55 1 23 14 68 11 82 36 19\n0 1\n\n```\n',1000,32768,'0',10,58,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1059','简单选择排序','#### Description\n简单选择排序是选择排序中最简单的一种，算法思路是每一趟(例如第i趟，i=1,2,…,n-1)在后面n-i+1个待排序记录中通过n-i次比较，选出关键字最小的记录，与第i个记录交换。\n例如当前序列为21、25、49、37、16、08\n第1趟，从第1个记录到第n个记录找出最小记录08和第1个记录交换位置，得到排列为08、25、49、37、16、21\n第2趟，从第2个记录到第n个记录找出最小记录16和第2个记录交换位置，得到排列为08、16、49、37、25、21\n在第i趟若找到的最小记录已经在第i个位置，则无需交换\n以此类推，经过n-1趟扫描可以得到由小到大的排序结果\n\n\n#### Input\n第一行输入参数n表示有多少个数据，4<n<20\n第二行输入n个数据\n\n#### Output\n第一行输出由小到大的排序结果\n第二行输出共执行了多少次交换\n\n#### Sample Input\n```\n6\n21 25 49 37 16 8\n\n```\n\n#### Sample Output\n```\n8 16 21 25 37 49\n4\n\n```\n',1000,32768,'0',10,59,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('106','EXOCENTER OF A TRIANGLE','#### Description\nGiven a triangle $$$ABC\\,$$$, the Extriangles of $$$ABC\\,$$$ are constructed as follows:\nOn each side of $$$ABC\\,$$$, construct a square ($$$ABDE\\,$$$, $$$BCHJ\\,$$$ and $$$ACFG\\,$$$ in the figure below).\nConnect adjacent square corners to form the three Extriangles ($$$AGD\\,$$$, $$$BEJ\\,$$$ and $$$CFH\\,$$$ in the figure).\nThe Exomedians of $$$ABC\\,$$$ are the medians of the Extriangles, which pass through vertices of the original triangle,\nextended into the original triangle ($$$LAO\\,$$$, $$$MBO\\,$$$ and $$$NCO\\,$$$ in the figure. As the figure indicates, the three\nExomedians intersect at a common point called the Exocenter (point $$$O\\,$$$ in the figure).\nThis problem is to write a program to compute the Exocenters of triangles.\n[[Image:B05.jpg|center]]\n\n#### Input\nThe first line of the input consists of a positive integer n, which is the number of datasets that follow. Each dataset\nconsists of 3 lines; each line contains two floating point values which represent the (two -dimensional) coordinate of\none vertex of a triangle. So, there are total of (n*3) + 1 lines of input. Note: All input triangles wi ll be strongly\nnon-degenerate in that no vertex will be within one unit of the line through the other two vertices.\n#### Output\nFor each dataset you must print out the coordinates of the Exocenter of the input triangle correct to four decimal\nplaces.\n#### Sample Input\n```\n2\n0.0 0.0\n9.0 12.0\n14.0 0.0\n3.0 4.0\n13.0 19.0\n2.0 –10.0\n```\n\n#### Sample Output\n```\n9.0000 3.7500\n-48.0400 23.3600\n```\n',10000,32768,'0',1,5,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1060','折半插入排序','#### Description\n折半插入排序是直接插入排序的改进，是指在查找记录插入位置时，采用折半查找算法，折半查找比顺序查找快, 所以折半插入排序在查找上性能比直接插入排序好，但需要移动的记录数目与直接插入排序相同。\n算法思路：当插入第i(i≥2)个对象时，假定前面i-1个数据已经排好序，对第i个数据用折半查找定位它在前i-1个数据中的位置，找到后，把其他记录后移，然后把第i个记录插入相应位置。\n为避免最终统计结果有误差，规定位置编号从1开始\n\n\n#### Input\n第一行输入参数n表示有多少个数据，4<n<20\n第二行输入n个数据\n\n#### Output\n第一行输出由小到大的排序结果\n第二行输出共执行了多少次折半，因为折半查找算法中必然包含类似代码\n“mid = (low+high)/2”，统计这句代码的执行次数\n\n#### Sample Input\n```\n6\n21 25 49 37 16 8\n\n```\n\n#### Sample Output\n```\n8 16 21 25 37 49\n9\n\n```\n\n折半次数的分析：\n第1趟直接插入数据21，无需折半\n第2趟有数据21 25，其中21是已排序的，25是待插入的，则low=1，high=1，所以mid=1；比较25>21，所以执行low=mid+1=2；因此得到low>high，跳出折半查找，执行1次折半\n第3趟有数据21 25 49，其中21 25是已排序的，49是待插入的，则low=1，high=2，所以mid=1；比较49>21，所以执行low=mid+1=2，所以再次折半，得到mid=2；比较49>25，所以执行low=mid+1=3，因此得到low>high，跳出折半查找，本趟执行2次折半\n以此类推…\n',1000,32768,'0',10,60,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1061','链式基数排序','#### Description\n基数排序：借助“分配”和“收集”对单个关键字进行排序的一种方法\n链式基数排序方法：用链表作存储结构的基数排序\n设置10个队列，f[i]和e[i]分别为第i个队列的头指针和尾指针\n第i趟分配：根据第i位关键字的值，改变记录的指针，将链表中记录按次序分配至10个链队列中（采用队尾插入法）；每个队列中记录关键字的第i位关键字相同\n第i趟收集：改变所有非空队列的队尾记录的指针域，令其指向下一个非空队列的队头记录，重新将10个队列链成一个链表\n如下图，序列如图中初始状态，可知每个数据最大为3位数，从最右往左，先选择个位数进行分配，把个位为0的数据都放入第0号队列，个位为1的数据都分配到第1号队列，若有多个数据属于同个队列则采用队尾插入，分配完后，进行收集，把e[0]指针指向f[1]，把e[1]指针指向f[2]，以此类推，从而得到收集后的序列 \n\n[[File:lsort1.jpg]]\n\n第二趟分配与收集如下图，是针对十位数进行的\n\n[[File:lsort2.jpg]]\n\n \n第三趟分配与收集如下图，是针对百位数进行的\n \n[[File:lsort3.jpg]]\n\n#### Input\n第一行输入参数n表示有多少个数据，4<n<20，每个数据均是正整数且不大于100000\n第二行输入n个数据\n\n#### Output\n输出每趟收集后的结果\n\n#### Sample Input\n```\n10\n278 109 63 930 589 184 505 269 8 83\n\n```\n\n#### Sample Output\n```\n930 63 83 184 505 278 8 109 589 269\n505 8 109 930 63 269 278 83 184 589\n8 63 83 109 184 269 278 505 589 930\n\n```\n',1000,32768,'0',10,61,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1062','四叉树','#### Description\n\n四叉树是一种用于描述图像的数据结构，树的根结点对应一整张图，然后把图四等分成为四个格子，根据每个格子的颜色用不同数值表示，四个格子对应根结点的四个孩子。若要更准确地描述图像，可以把每个格子再继续四等分，相当于树的结点在派生四个孩子，然后每个小格子的颜色再用数值表示。\n实际上格子的划分就相当于图像精度，每个格子等于图像的每个像素，当一次四等分，图像划分为2×2，即图像只有4个像素；当二次四等分，图像划分为4×4，即图像有16个格子，即16个像素；当三次四等分，图像划分为8×8，即图像有64个格子，即64个像素；以此类推。\n当一张图像划分到一定程度，每个格子的颜色可以只用黑或白表示。一张图的样子可以用每个格子颜色来表示，也就可以用一颗四叉树来表示。格子编号如下图所示。\n \n[[File:quad1.jpg]]\n\n如下所示，左图划分为4×4个格子，四叉树的表示则如右图，其中根结点表示整张图，下边四个孩子表示图的第一次四等分，其中编号1和2的格子都是黑白相间的，所以需要做第二次划分；编号3和4的格子是全黑全黑全白，所以对应的结点无需派生孩子，直接用全黑或全白表示。编号1的格子第二次划分后格子123是白的，格子4是黑的，所以第1个孩子结点的四个孙结点是3白1黑，同理第2个孩子结点的四个孙结点是2黑2白\n\n[[File:quad2.jpg]]\n       \n\n四叉树的表示往往采用先序遍历，每个结点根据不同状态用不同字母表示\n若结点非叶子结点用字母p表示，若结点是叶子，则结点非黑即白，黑用f表示，白用e表示。上图的先序遍历结果是：ppeeefpffeefe\n\n实际中常需要合并两张图，在合并前往往需要统计出图片的黑色范围，即两张图总共包含多少个黑色格子。以10×10作为图片的最大划分，即每张图包含1024个像素，计算出两图合并后的黑色覆盖范围。\n如下所示，下面三张图都是做4×4划分，因此每个格子包含64个像素，左1图共有7个格子是黑色，即448个像素为黑，左2图有5个格子是黑色，即320个像素为黑，合并后有10个格子为黑色，即640个像素为黑。\n \n[[File:quad3.jpg]]\n\n#### Input\n第一行输入第1个图的四叉树的先序遍历结果\n\n第二行输入第2个图的四叉树的先序遍历结果\n\n#### Output\n输出两图合并后的黑色像素总数。\n\n#### Sample Input\n```\nppeeefpffeefe\npefepeefe\n\n```\n\n#### Sample Output\n```\n640\n\n```\n',1000,32768,'0',10,62,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1063','猴子选大王','#### Description\nn只猴子围坐成一个圈，按顺时针方向从1到n编号。然后从1号猴子开始沿顺时针方向从1开始报数，报到m1的猴子出局，再从刚出局猴子的下一个位置重新开始报数，报到m2的出局，如此重复，直至剩下一个猴子，它就是大王。给定n，m1、m2、……、mn-1，给出当选猴王的猴子的编号。\n\n\n\n#### Input\n第一行n（n<50）；\n第二行为n-1个数，m1、m2、……、mn-1。\n\n\n#### Output\n猴王编号\n\n#### Sample Input\n```\n5\n3 3 1 2\n\n```\n\n#### Sample Output\n```\n4\n\n\n提示：\n（1） 1 2 3 4 5  从1号猴子开始报数，1号猴子报1，2号猴子报2，以此类推。m1 = 3，所以报3的猴子（就是3号猴子）出局，下面接着从4号猴子重新报号\n（2） 4 5 1 2  从4号猴子接着开始报数，4号猴子报1，5号猴子报2，以此类推。m2 = 3，所以报3的猴子（就是1号猴子）出局，下面接着从2号猴子重新报号\n（3）2 4 5  从2号猴子接着开始报数，2号猴子报1，4号猴子报2，以此类推。m3 = 1，所以报1的猴子（就是2号猴子）出局，下面接着从4号猴子重新报号\n（4）4 5  从4号猴子接着开始报数，4号猴子报1，5号猴子报2，以此类推。m4 = 2，所以报2的猴子（就是5号猴子）出局，下面接着从4号猴子重新报号\n（5）最后剩下4号猴子。\n\n\n```\n',1000,32768,'0',10,63,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1064','最近公共祖先','#### Description\n\n给定一颗二叉树的逻辑结构（先序遍历的结果，空树用字符‘0’表示，例如AB0C00D00），建立该二叉树的二叉链式存储结构。然后计算对于树的两个节点，返回他们的最近公共祖先。 \n\n[[File:2012-4-2.jpg]]\n\n比如，图中B和C的最近公共祖先为B，B和D的最近公共祖先为A，C和D的最近公共祖先为A。\n\n#### Input\n\n第一行输入二叉树的先序遍历\n第二行起输入一个整数t，表示有t个测试数据\n第三行开始输入两个节点的名称，共有t行\n\n\n#### Output\n输出每两个节点的公共祖先节点\n\n#### Sample Input\n```\n\nAB0C00D00\n2\nB C\nC D\n\n```\n\n#### Sample Output\n```\nB\nA\n\n```\n',1000,32768,'0',10,64,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1065','折半查找','#### Description\n给定一个一个任意序列（通常为无序）：S{s1，s2，…sn}，n为表元素的个数，首先对该序列按照升序进行排序（排序方法不限），使其变为一个静态有序查找表，输出该有序查找表。\n给定一个需要查找的值Key，使用折半查找从静态查找表S中查找Key，且：\n当Key在S中时，返回Key的位置。当Key不在S中时，返回小于Key的最大元素位置i和大于Key的最小元素位置j，如果i或者j不存在，则输出0。\n此外，不管查找成功还是失败，需输出查找过程中进行了几次比较操作。\n例： S={37, 80, 21, 92,19, 88,56,64, 5,75, 13}，n = 11\n首先给出排好序的序列：\nS={5,13,19,21,37,56,64,75,80,88,92}\n\nKey=64\n表中有64, 查找成功，为第7个元素，共折半比较了3次。因此，输出为 7 3\n\nKey=59\n表中没有59, 查找不成功，比59小的最大元素为56，位置为6，比59大的最小元素为64，位置为7，共折半比较了3次。因此，输出为 6 7 3\n\nKey=94\n表中没有94, 查找不成功，比94小的最大元素为92，位置为11，比94大的元素不存在，位置记为0，共折半比较了4次。因此，输出为 11 0 4\n\nKey=3，表中没有3，查找不成功，比3小的元素不存在，位置为0，比3大的元素为5，位置为1，共折半比较了3次，。因此，输出为 0 1 3\n\n#### Input\n第一行输入一个整数n，表示有n个数据\n第二行输入n个数据\n第三行输入一个整数t，表示后面有t个待查找数据Key\n第四行开始t行，每行输入一个待查找的Key\n\n\n#### Output\n\n输出按升序排列的数据\n输出每个Key的查找结果，每行输出一个Key的结构\n\n#### Sample Input\n```\n11\n37 80 21 92 19 88 56 64 5 75 13\n4\n64\n59\n94\n3\n\n```\n\n#### Sample Output\n```\n5 13 19 21 37 56 64 75 80 88 92\n7 3\n6 7 3\n11 0 4\n0 1 3\n\n```\n',1000,32768,'0',10,65,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1066','N度空间','#### Description\n人和人之间的关系可以用图来表示。\n比如，微博和社交网络上最有趣的方式是关注（follow）。通过关注你感兴趣的人，你可以获得关于这个人的一些信息。假如A关注了B，则我们画一条从B到A的有向箭头，表示信息会从B流向A。如图：蔡树斌关注了小S，则我们画一条从小S到蔡树斌的箭头，表明小S被蔡树斌所关注。\n \n[[File:2012-4-4.jpg]]\n\n现在来计算两个人之间的距离。以图中的某个点a为根节点，给定1个点b，判断b与a之间隔了几个人。如果这个b与a之间有边，则表明他们是相隔0度（直接认识）；如果之间的路径上有两条边，则表明他们相隔1度（要经过一个中间人）。如果之间没有路径，则相隔无穷度。如果该点到根节点有多条路径，则计算度数最短的那条路径。自己到自己的距离假定为0度。\n比如图中，以小S为根节点，则蔡树斌的距离为0度，白鉴聪的距离为1度。从小S到卢亚辉有两条路径：小S到蔡康永到卢亚辉（1度），小S到蔡树斌到白鉴聪到卢亚辉（2度），所以卢亚辉的距离为1度。\n本例中，五个节点的度数分别为0 0 0 1 1。\n6度空间理论是指，平均来说，任意两个人之间距离不超过6度（你和任何一个陌生人之间所间隔的人不会超过六个，或者说，通过不超过6个人你就可以认识这个世界上的任何一个人，包括奥巴马或者涛哥）。现在意大利的研究团队根据facebook上的关注情况进行研究发现，平均只要经过4.74个人就能找到你想找的人！也即，在facebook上，实际是4.74度空间。网络拉近了人与人之间的距离。\n本例中，到小S的平均度数为0.4，也即平均来说，通过0.4个人就可以关注到小S。\n\'\'\'使用广度优先搜索来计算图中节点的度数。也即，从根节点出发，先搜索距离为0度的节点，然后搜索距离为1度的节点，等等。\'\'\'\n\n#### Input\n第一行为一整数n(n<=30)，表示图上有多少个顶点。编号为0，1，2，……，n-1。\n接下来为一个邻接矩阵，0表示没边，1表示有边。\n\n#### Output\n输出n个节点与根之间相隔的度数。（0号节点为根节点，不存在不通的情况）\n输出n个节点与根之间相隔的平均度数。（n个节点的度数的平均值,精确到小数点后1位.）\n\n#### Sample Input\n```\n5\n0 1 1 0 0\n1 0 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n0 0 0 0 0\n\n```\n\n#### Sample Output\n```\n0 0 0 1 1\n0.4\n\n```\n',1000,32768,'0',10,66,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1067','出栈队列合法性','#### Description\n给定一组数，这组数按顺序入栈；判断给定的出栈序列是否合法，即是否存在一种出栈顺序，使得出栈结果为给定序列。\n如，入栈顺序1,2,3,4 \n（1）	出栈顺序能否为 4 3 21？可以。通过push 1， push 2， push 3， push 4, pop， pop， pop ，pop, 就可以得到出栈顺序为4 3 2 1\n（2）	出栈顺序能否为 2 1 3 4？ 可以。 通过push 1， push2， pop， pop， push 3， pop，push 4，pop，就可以得到出栈顺序为 2 1 3 4\n（3）	出栈顺序能否为 1 2 3 4？可以。通过 push 1， pop， push 2， pop， push 3， pop，push 4, pop， 就可以得到出栈顺序为 1 2 3 4\n（4）	出栈顺序能否为 3 4 2 1？可以。通过 push 1， push 2， push 3， pop，push 4, pop，pop，pop， 就可以得到出栈顺序为3 4 2 1\n（5）	出栈顺序能否为4 1, 2 3？不能。因为4要第一个出栈，就必须执行push 1， push2， push 3，push 4， pop ，这之后执行pop，只能得到3，不能得到1\n（6）	出栈顺序能否为3 4, 1 2？不能。因为3要第一个出栈，就必须执行push 1， push2， push 3，pop，这之后执行push 4，pop，可以得到4，但是之后再执行pop，只能得到2，不能得到1.\n\n注意本题只要求入栈操作的顺序必须满足 1 2 3 4这样的入栈的顺序，而出栈操作可以在任意时刻执行。之所以能得到不同的序列，是因为pop操作夹杂在push操作中，形成了不同的出栈序列。\n\n#### Input\n第一行一个数n，表示测试数据的个数。\n第二行输入n个数据\n第三行输入一个整数t，表示有t组数据\n以后t行，每行给出一个出栈序列\n\n#### Output\n对于每组测试数据，如果出栈顺序合法，输出1，否则输出0。\n\n#### Sample Input\n```\n4\n1 2 3 4\n4\n4 3 2 1\n1 2 3 4\n3 4 2 1\n4 1 2 3\n\n```\n\n#### Sample Output\n```\n1\n1\n1\n0\n\n```\n',1000,32768,'0',10,67,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1068','平衡二叉查找树','#### Description\n给定S={56, 13, 64, 5, 36, 92, 21, 80, 19, 75, 88}， n=11，则建立的二叉查找树应为如下图\n\n [[File:2012-4-6.jpg]]\n\n中序遍历结果：5 13 19 21 37 56 64 75 80 88 92 （有序序列）\n\n在一个二叉查找树中，节点的平衡因子是它的左子树的高度减去它的右子树的高度。\n\n比如节点37的平衡因子为2（左子树高度为2，右子树高度为0），节点13的平衡因子为-2（左子树高度为1，右子树高度为3），节点56的平衡因子为0（左子树高度为4，右子树高度为4）。\n\n按中序遍历的方式输出所有节点的平衡因子：0 -2 0 1 2 0 -3 0 0 0 2\n\n现给定一个任意序列（通常为无序）：S{s1，s2，…sn}， n为序列元素个数\n1)	建立一颗二叉查找树T，输出其中序遍历的结果（应为有序序列）\n2）给出每个节点对应的平衡因子（按中序遍历的方式输出）\n\n#### Input\n第1行为输入序列的元素个数：n\n\n第2行为输入的序列：s1 s2 … sn\n\n#### Output\n第一行输出该二叉树中序序列\n\n第二行输出该二叉树的每个节点的平衡因子\n\n#### Sample Input\n```\n11\n56 13 64 5 36 92 21 80 19 75 88\n\n```\n\n#### Sample Output\n```\n5 13 19 21 37 56 64 75 80 88 92\n0 -2 0 1 2 0 -3 0 0 0 2\n\n```\n',1000,32768,'0',10,68,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1069','迷宫问题（附加题1）','#### Description\n定义一个二维数组： \n\nint maze[7][5] = {\n0, 0, 0, 1, 0,\n	0, 1, 1, 1, 0,\n	0, 0, 0, 0, 0,\n	0, 1, 0, 1, 0,\n	1, 0, 0, 1, 0,\n1, 0, 1, 0, 0,\n1, 0, 0, 0, 0,\n	\n};\n\n它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，可以横着走、竖着走、斜着走，也即中间的点可以走到邻近的八个点（上、下、左、右、左上、左下、右上、右下）上去。要求编程序找出从左上角到右下角的最短路线。\n\n#### Input\n第一行输入两个整数m和n(2<m，n<20)，表示一个m×n格的迷宫，行和列都从0开始编号，第（0，0）为起点，第(m-1，n-1)格为终点 第二行起输入每行n个格是空白还是有障碍，空白为0，有障碍为1，注意第（0，0）和第(m-1，n-1)格必然是0 输入n行\n#### Output\n左上角到右下角的最短路径，格式如样例所示。\n#### Sample Input\n```\n7 5\n0 0 0 1 0\n0 1 1 1 0\n0 0 0 0 0\n0 1 0 1 0\n1 0 0 1 0\n1 0 1 0 0\n1 0 0 0 0\n\n```\n\n#### Sample Output\n```\n0 0\n1 0\n2 1\n3 2\n4 2\n5 3\n6 4\n\n```\n\n',1000,32768,'0',10,69,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('107','Divisibility','#### Description\nOn the planet Zoop, numbers are represented in base 62, using the digits\n\n$$$0, 1, \\cdots , 9, A, B, \\cdots , Z, a, b, \\cdots , z$$$\n\nwhere:\n+ A (base 62) = 10 (base 10)\n+ B (base 62) = 11 (base 10)\n+ ...\n+ z (base 62) = 61 (base 10)\n\nGiven the digit representation of a number x in base 62, your goal is to determine if x is divisible by 61.\n\n#### Input\nThe input test file will contain multiple cases. Each test case will be given by a single string containing only\nthe digits ‘0’ through ‘9’, the uppercase letters ‘A’ through ‘Z’, and the lowercase letters ’a’ through ’z’. All\nstrings will have a length of between 1 and 10000 characters, inclusive. The end-of-input is denoted by a\nsingle line containing the word “end”, which should not be processed.\n\n#### Output\nFor each test case, print “yes” if the number is divisible by 61, and “no” otherwise.\n\n#### Sample Input\n```\n1v3\n2P6\nIsThisDivisible\nend\n```\n\n#### Sample Output\n```\nyes\nno\nno\n```\n\n#### Hints\n+ In the first example, 1v3 = 1 × 622 + 57 × 62 + 3 = 7381, which is divisible by 61.\n+ In the second example, 2P6 = 2 × 622 + 25 × 62 + 6 = 9244, which is not divisible by 61.\n',10000,32768,'0',1,6,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1070','求k位数（附加题2）','#### Description\nK位数是指将数据排序后，位置在第k位的数值。\n\n比如有8个数:19  10  94  11 23  17 11 23\n在将其排序后，得到有序序列：10 11 11 17 19 23 23 94\n则其第4位数为17，第7位数为23\n\n\n如果采用先排序再找中位数的方法，则找到第k位数的算法复杂度为O(nlgn)，因为排序需要花nlgn的时间。有一种采用快速排序思想来求k位数的算法，可以达到O(n).\n\n1.抽取数组的第一个元素m，用快速排序的思想进行一次调整，将比m小（或者等于m）的放在m左边，比m大的放在m的右边。在调整的同时，统计小于、等于、大于m的值的个数，假定分别为Cs，Ce，Cl。\n2.如果k<=Cs，则在小于m的数中求k位数。\n3. 如果k>Cs+Ce，则在大于m的数中求（k-Cs-Ce）位数 \n4.否则（这时Cs<k<=Cs+Ce），则k位数的值就是m的值。\n\n比如有8个数:19  10  94  11 23  17 11 23\n要求第4位数。\n首先选m=19，根据快拍的思想进行排序，得到\n11 10   17  11   19  23  94  23\n                     low \nhigh\nCs=4;Ce=1;Cl=3;\n\n因为k=4，k<=Cs，所以继续在11 10 17 11这四个数中查找\n选取m=11，根据快拍的思想进行排序，得到\n11 10 11 17\nCs=1;Ce=2;Cl=1;\nk=4，k>Cs+Ce，所以继续在17中查找第1（k-Cs-Ce）位数\n17就是所需要的数字\n\n#### Input\n第1行输入一个整数n(<100)，表示有n个数\n第2行输入n个整数\n第3行输入一个整数k\n\n#### Output\n输出每趟快排的结果\n输出k位数\n\n#### Sample Input\n```\n8\n19 10  94  11 23  17 11 23\n4\n\n```\n\n#### Sample Output\n```\n11 10 17 11 19 23 94 23\n11 10 11 17\n17\n\n```\n\n',1000,32768,'0',10,70,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1071','平衡二叉查找树','#### Description\n给定S={56, 13, 64, 5, 36, 92, 21, 80, 19, 75, 88}， n=11，则建立的二叉查找树应为如下图\n\n \n\n中序遍历结果：5 13 19 21 37 56 64 75 80 88 92 （有序序列）\n\n在一个二叉查找树中，节点的平衡因子是它的左子树的高度减去它的右子树的高度。\n\n比如节点37的平衡因子为2（左子树高度为2，右子树高度为0），节点13的平衡因子为-2（左子树高度为1，右子树高度为3），节点56的平衡因子为0（左子树高度为4，右子树高度为4）。\n\n按中序遍历的方式输出所有节点的平衡因子：0 -2 0 1 2 0 -3 0 0 0 2\n\n现给定一个任意序列（通常为无序）：S{s1，s2，…sn}， n为序列元素个数\n1)	建立一颗二叉查找树T，输出其中序遍历的结果（应为有序序列）\n2）给出每个节点对应的平衡因子（按中序遍历的方式输出）\n\n\n#### Input\n第1行为输入序列的元素个数：n\n第2行为输入的序列：s1 s2 … sn\n\n\n#### Output\n第一行输出该二叉树中序序列\n第二行输出该二叉树的每个节点的平衡因子\n\n#### Sample Input\n```\n11\n56 13 64 5 36 92 21 80 19 75 88\n```\n\n#### Sample Output\n```\n5 13 19 21 37 56 64 75 80 88 92\n0 -2 0 1 2 0 -3 0 0 0 2\n\n\n```\n',1000,32000,'0',10,71,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1072','平衡二叉查找树','',1000,32000,'0',10,72,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1073','加减乘除','== Important Notice==\n```\n			2012岗位实践(张小健老师班上)一期末分数安排\n\n==>说明：\n	1. 按表1规则计算，计算得到期末最终成绩\n	2. 如果最终分数超过100分，按100分计算\n	3. 练习过程中，发现有交明显雷同代码的，每人每次扣5分\n	4. 请修改用户名或者昵称为本人学号\n	（因为将按学号统计成绩，如果因为没发现学号而造成的0分，后果自负）\n\n==>表1：\n	编号	练习时间		内容		所占比例		总题数		总分数		分数计算\n	1	第15周		C语言基础	60%		18		120		8*10+10*4=120\n	2	第16周		递归专题		25%		12		100		8*10+4*5=100\n	3	第17周		数据结构		15%		8		100		4*15+4*10=100\n\n==>备注：\n	分数详情：(题数/分数)\n	18/120	17/116	16/112	15/108	14/104	13/100	12/96	11/92	10/88	9/84	8/80	7/70	6/60	5/50	4/40	3/30	2/20	1/10	0/0\n	12/100	11/95	10/90	9/85	8/80	7/70	6/60	5/50	4/40	3/30	2/20	1/10	0/0\n	8/100	7/90	6/80	5/70	4/60	3/45	2/30	1/15	0/0\n```\n\n#### Description\n输入两个数A，B，输出如下四个算式<br>\n```\nA+B=ANS1\nA-B=ANS2\nA*B=ANS3\nA/B=ANS4\n```\n如果B为0，ANS4值为-1<br>\nPS:本题分值25’\n\n#### Input\n第一行为测试组数T，接下来T行，每行两个数A,B<br>\n0<=T<=100, -100<=A,B<=100\n\n#### Output\n输出结果，每组测试四行\n#### Sample Input\n```\n1\n2 3\n```\n\n#### Sample Output\n```\n2+3=5\n2-3=-1\n2*3=6\n2/3=0\n```\n',1000,65536,'0',10,73,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1074','日期格式转换','#### Description\n输入y-m-d格式的日期，输出y\'.m\'.d\'格式，<br>\n需要满足y\',m\',d\'三个数都为2位，具体见sample.<br>\nPS:本题分值25’\n\n#### Input\n第一行为测试组数T，接下来T行，每行一个y-m-d格式的日期<br>\n0<=T<=100，0<=y=2012，1<=m<=12，1<=d<=31\n\n#### Output\n输出结果，每组测试一行\n#### Sample Input\n```\n1\n2009-10-1\n```\n\n#### Sample Output\n```\n09.10.01\n```\n',1000,65536,'0',10,74,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1075','最后一位一','#### Description\n输入一个数X，将X转换为二进制后，输出从低位往高位数到的第一个1的权值<br>\nEx: 6的二进制表示为110，那最后一位1权值为2<br>\nPS: 本题分值35’\n\n#### Input\n第一行为测试组数T，接下来T行，每行一个数X<br>\n0<=T<=100, INT_MIN<=X<=INT_MAX\n\n#### Output\n输出结果，每组测试一行\n#### Sample Input\n```\n2\n3\n4\n```\n\n#### Sample Output\n```\n1\n4\n```\n',1000,65536,'0',10,75,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1076','打印蜂巢','#### Description\n```\n输入一个数X，输出x*2+1层蜂巢，具体见实例\n```\n<strong>PS: 本次练习四道题，每题30分</strong>\n\n#### Input\n```\n第一行为测试组数T，接下来T行，每行一个数X\n0<=T<=10, 1<=X<=10\n```\n\n#### Output\n```\n输出结果，每组测试X*2+1行\n注意不要有任何多余的空格以及空行\n```\n\n#### Sample Input\n```\n2\n1\n5\n```\n\n#### Sample Output\n```\n _\n/ \\\n\\_/\n         _\n       _/ \\_\n     _/ \\_/ \\_\n   _/ \\_/ \\_/ \\_\n _/ \\_/ \\_/ \\_/ \\_\n/ \\_/ \\_/ \\_/ \\_/ \\\n\\_/ \\_/ \\_/ \\_/ \\_/\n  \\_/ \\_/ \\_/ \\_/\n    \\_/ \\_/ \\_/\n      \\_/ \\_/\n        \\_/\n```\n',1000,65536,'0',10,76,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1077','水仙花数','#### Before\n鉴于大家目前没练到循环结构，给出练习的程序框架如下\n```\n// 可能有多个头文件\n1. include<stdio.h> \n\nint main()\n{\n	int t;\n\n	scanf(\"%d\", &t);\n	while(t--)\n	{\n		// start here\n	}\n	return 0;\n}\n```\n<strong>PS：本次练习A、B、D三题每题20分，C、E两题每题30分</strong>\n\n#### Description\n水仙花数是指一个 n 位数 ( n≥3 )，它的每个位上的数字的 n 次幂之和等于它本身。<br>\n例如：1^3 + 5^3 + 3^3 = 153。输入一个三位数，判断其是不是水仙花数。\n\n#### Input\n第一行为测试组数T，接下来T行，每行一个三位数A<br>\n0<=T<=100，100<=A<=999\n\n#### Output\n如果给定数为水仙花数输出“YES”，否则输出“NO”，每组输出一行。\n#### Sample Input\n```\n2\n153\n100\n```\n\n#### Sample Output\n```\nYES\nNO\n```\n',1000,65536,'0',10,77,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1078','分段函数','#### Description\n定义y(x)=f(x)*g(x)，其中<br>\nf(x)=sign(x)=<br>\n{<br>\n　　　1，x>=0；<br>\n　　　-1，x<0<br>\n}<br>\ng(x)={<br>\n　　　sqrt(2*pi*x)*(x/e)^x， x>=1；// 这里^不是异或运算符，表示指数运算<br>\n　　　arcos(x)，-1<x<1；<br>\n　　　x*9/5+32，x<=-1<br>\n}<br>\n对给定输入的x值，输出其对应y值，y四舍五入到两位小数<br>\n<strong>本题题目有变化，请注意！！</strong> <br>\n<strong>提示：考虑到精度问题 pi大小为acos(-1.0), e大小为2.718281828459</strong>\n\n#### Input\n第一行为测试组数T，接下来T行，每行一个数X<br>\n0<=T<=100，-10<=X<=10\n\n#### Output\n\n输出Y值，每组测试案例输出一行\n\n#### Sample Input\n```\n2\n1\n-1\n```\n\n#### Sample Output\n```\n0.92\n-30.20\n```\n',1000,65536,'0',10,78,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1079','相似三角形','#### Description\n相似三角形：对应角相等，对应边成比例的两个三角形<br>\n对给定的两个三角形，判断它们是否相似<br>\n注意同一个三角形的边可以交换顺序\n\n#### Input\n第一行为测试组数T，接下来T行，每行6个数，<br>\n前三个表示第一个三角形三条边长度，<br>\n后三个表示第二个三角形三条边长度<br>\n0<=T<=100，0<=L<=100\n#### Output\n如果是相似三角形，输出“YES”<br>\n如果不是相似三角形，输出“NO”<br>\n如果其中一个不构成三角形，输出“-1”\n#### Sample Input\n```\n2\n1 2 3 4 5 6\n3 4 5 6 8 10\n\n```\n\n#### Sample Output\n```\n-1\nYES\n\n```\n',1000,65536,'0',10,79,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('108','Go','#### Description\nIn the game of Go, two players alternate placing black and white stones on lattice points of an n × n grid,\neach attempting to surround as much territory (i.e., regions of unfilled lattice points) as possible. At the\nend of the game, the score for each player is the total area of the territory surrounded by his or her stones.\nGiven the locations of black and white stones on a Go board at the end of a match, your task is to compute\nthe score of each player in order to determine the winner.(Note that the scoring of Go boards described here does not correspond exactly to the real game of Go: we make the\nsimplifying assumptions that all “disputes” have been settled so that any territories surrounded by stones of both colors are\nconsidered neutral, and that all groups on the board are considered “alive.”)\n\nFormally, two grid lattice points with coordinates (r, c) and (r\', c\') are adjacent if $$$|r-r\'|+|c-c\'|=1$$$. A\nconnected region of unfilled lattice points belongs to one player’s territory if all adjacent filled lattice points\ncontain stones belonging to that player (see Figure 1). Finally, a player’s score consists of the number of\nunfilled lattice points in his or her territory.\n\n[[Image:B07.jpg|center]]\n\n#### Input\nThe input test file will contain multiple cases, each consisting of three lines. Each test case begins with a line\ncontaining three integers, n (where $$$1 \\leq n \\leq 19$$$), b, and w (where $$$b \\geq 0, w \\geq 0$$$ and $$$1 \\leq b + w \\leq n^2$$$). Here,\nn denotes the size of the board, b is the number of black pieces placed, and w is the number of white pieces\nplaced. The second line of each test case contains b pairs of integers $$$r_1 \\ c_1 \\cdots r_b \\ c_b$$$ (where $$$1 \\leq r_i, c_i \\leq n$$$)\nindicating the positions of the b black stones. The third line of each test case contains w pairs of integers\n$$$r_1^\' \\ c_1^\' \\cdots r_w^\' \\ c_w^\'$$$ (where $$$1 \\leq r_i^\',c_i^\' \\leq n$$$) indicating the positions of the w white stones. No two stones will be\nlocated at the same lattice point. Input is terminated by a single line containing only the number 0; do not\nprocess this line.\n\n#### Output\nFor each test case, print either “White wins by ”, “Black wins by ”, or “Draw”.\n\n#### Sample Input\n```\n1 1 0\n1 1\n\n2 0 1\n\n1 1\n5 12 4\n1 1 1 2 1 3 2 1 2 3 3 1 3 3 4 1 4 3 5 1 5 2 5 3\n1 4 2 4 3 4 3 5\n0\n```\n\n#### Sample Output\n```\nDraw\nWhite wins by 3\nBlack wins by 1\n```\n',10000,32768,'0',1,7,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1080','日期问题','#### Description\n日期合法：在挂历中存在的日期即为合法<br>\n请注意：<br>\n1. 年、月、日的大小，其中，年份从0开始算起。<br>\n2. 闰年问题<br>\n判断给定的日期合不合法<br>\n<strong>提示：本题需要用到格式化输入：scanf(\"%d.%d.%d\", &year, &month, &date); </strong>\n\n#### Input\n第一行为测试组数T，接下来T行，每行一个（yyyy.mm.dd）格式的日期<br>\n0<=T<=100，-10000<=yyyy<=10000，-15<=mm<=15，-40<=dd<=40\n\n#### Output\n如果给定日期合法输出“YES”，否则输出“NO”\n#### Sample Input\n```\n3\n2012.2.29\n0.0.0\n2011.11.11\n```\n\n#### Sample Output\n```\nYES\nNO\nYES\n```\n',1000,65536,'0',10,80,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1081','算术算式','#### Description\n给定三个数，判断能不能用加、减、乘、除以及等于号，<br>\n连接成A ops B = C的算术算式。<br>\n注意数字位置可以交换。\n#### Input\n第一行为测试组数T，接下来T行，每行三个数A，B，C<br>\n0<=T<=100，0<=A，B，C<=100\n#### Output\n如果存在，输出正确算式，否则输出-1<br>\n如果存在多个，先按abc的值由小到大输出，再按+-*/顺序输出。\n```\n比如1 2 3可得到如下算式\n1+2=3\n2+1=3\n3-1=2\n3-2=1\n3/2=1\n\nPS：为了明确本题顺序，将24个算式（如果成立的话）显示如下：\n1+2=3\n1-2=3\n1*2=3\n1/2=3\n\n1+3=2\n1-3=2\n1*3=2\n1/3=2\n\n接下来是\n（2 1 3）\n（2 3 1）\n（3 1 2）\n（3 2 1）\n一共24种情况~\n```\n\n#### Sample Input\n```\n2\n1 2 3\n4 5 6\n```\n\n#### Sample Output\n```\n1+2=3\n2+1=3\n3-1=2\n3-2=1\n3/2=1\n-1\n```\n',1000,65536,'0',10,81,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1082','加减乘除','#### Description\n定义X/0=-1<br>\n初始ANS=0，对给定的n个实数依次做加减乘除运算<br>\n即ANS=ANS+(-、*、/)X，输出最终结果<br>\n<strong>PS：本次练习ABE每题20分，CD每题30分</strong>\n\n#### Input\n第一行为测试组数T，接下来T组测试数据，每组一行<br>\n第一个数字为改组测试的实数个数N，接下来为N个实数X<br>\n0<=T，N，X<=100\n\n#### Output\n输出最终结果ANS，保留两位小数，每组输出一行\n\n#### Sample Input\n```\n2\n2 1 2\n3 2 4 0\n```\n\n#### Sample Output\n```\n-1.00\n0.00\n```\n',1000,65536,'0',10,82,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1083','LBP编码','#### Description\n大家知道图像是由像素点矩阵构成<br>\n现在将原始图像编码成LBP图像，效果如下：<br>\n[[File:lbp2.jpg]]\n\n规则如下:<br>\n\n1、对每个像素点分别将其像素值（a）与其左上，正上，右上<br>\n正右，右下，正下，正左8个位置的像素值（b）进行对比<br>\n2、如果a>=b，则新像素点值加上b位置的权值，8个位置的权值<br>\n分别为1，2，4，8，16，32，64，128，新像素点初始值为0<br>\n3、如果该像素点是边上的点或者角上的点，那么将图像复制8份<br>\n到其左上，正上，右上，正右，右下，正下，正左8个位置，再比较\n\n例子如下:<br>\n<strong>注意：该例子对应的是a<=b的情况</strong><br>\n[[File:lbp1.jpg]]\n\n#### Input\n第一行为测试组数T，接下来T组测试数据<br>\n第一行为图像大小，N，M，接下来为图像的像素点矩阵<br>\n0<=T<=10, 0<=N，M<=100, 0<=pix<=255\n#### Output\n输出结果，每组N行M列\n\n#### Sample Input\n```\n2\n1 1\n8\n2 2\n231 0\n9 255\n```\n\n#### Sample Output\n```\n255\n170 0\n85 255\n```\n',1000,65536,'0',10,83,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1084','打印图像','#### Description\n请看图：\n```\n|-|| ||-|| ||-|\n| ||-|| ||-|| |\n| || ||-|| || |\n| ||-|| ||-|| |\n|-|| ||-|| ||-|\n```\n加强版例子，请不要复制后上交~\n```\n|-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|\n| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| |\n| || ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| || |\n| || || ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| || || |\n| || || || ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| || || || |\n| || || || || ||-|| ||-|| ||-|| ||-|| ||-|| || || || || |\n| || || || || || ||-|| ||-|| ||-|| ||-|| || || || || || |\n| || || || || || || ||-|| ||-|| ||-|| || || || || || || |\n| || || || || || || || ||-|| ||-|| || || || || || || || |\n| || || || || || || || || ||-|| || || || || || || || || |\n| || || || || || || || ||-|| ||-|| || || || || || || || |\n| || || || || || || ||-|| ||-|| ||-|| || || || || || || |\n| || || || || || ||-|| ||-|| ||-|| ||-|| || || || || || |\n| || || || || ||-|| ||-|| ||-|| ||-|| ||-|| || || || || |\n| || || || ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| || || || |\n| || || ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| || || |\n| || ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| || |\n| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| |\n|-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|| ||-|\n\n```\n\n定义图片size为水平方向‘-’的个数，则上图大小为3\n输入图形大小，输出图形，请保证图形的四个角都为‘|-|’\n\n#### Input\n第一行为测试组数T，接下来T组测试数据<br>\n每组一行，每行一个数字N，1<=T=20， 1<=N<=20\n\n#### Output\n输出图像，每组N*2-1行\n\n#### Sample Input\n```\n2\n1\n2\n```\n\n#### Sample Output\n```\n|-|\n|-|| ||-|\n| ||-|| |\n|-|| ||-|\n```\n',1000,65536,'0',10,84,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1085','仙四打怪','#### Description\n<strong>PS: 岗位实践所有题目均已开放，本题数据4份代码对拍过，数据应该没问题了<br>\n练习中关于本题的提交也已经重测，大家可以查看自己的练习排名以及状态<br>\n大家继续刷题吧，enjoy this game,  and love this game!!\n</strong>\n<br/>\n[[File:K85.jpg]]<br>\n仙四中玩家与怪物，实行轮流攻击的方式<br>\n也就是说一开始由我方攻击怪物，然后由怪物攻击我方<br>\n攻击时，所有成员轮流攻击怪物对方<br>\n每次可以选择对方中的一个进行攻击（没有学会群攻技能）<br>\n成员出场顺序为所有存活角色中生命值最小的最先出场<br>\n如果生命值相同，伤害力最大的最先出场<br>\n\n因为只要怪物中人数比较多，我方所受伤害必然很大<br>\n于是我们有如下策略：先攻击怪物中生命值最小的一个<br>\n如果生命值相同，则攻击怪物中伤害力最大的一个<br>\n\n当然，这也是怪物的策略！！<br>\n\n比如我方有2个人（云天河、韩菱纱），生命值分别为10，9，攻击值为4，3<br>\n对方有2只，生命值分别为7，10，攻击值为6，5。那么<br>\n第一轮中，我方韩菱纱、云天河攻击怪物1，这样便在第一轮中消灭了一个怪物<br>\n第二轮中，我方韩菱纱受到怪物2的攻击，生命值为4<br>\n第三轮中，我方韩菱纱、云天河攻击怪物2，怪物2生命值降为3<br>\n第四轮中，我方韩菱纱受到怪物2的攻击，生命值为0，挂了<br>\n第五轮中，我方云天河攻击怪物2，怪物2生命值为0，死亡，我方获胜<br>\n\n你的任务是判断我方能不能胜利\n\n#### Input\n第一行为测试组数T，接下来T组测试数据，每组6行<br>\n前三行描述我方情况，后三行描述怪物情况，这三行分别表示：<br>\n第一行为人数N，第二行为N人的生命值S，第三行为N人的攻击值A<br>\n1<=T<=10, 1<=N,S,A<=100\n\n#### Output\n如果我方能获胜，输出“Win”，否则输出“Lose”，每组输出一行\n\n#### Sample Input\n```\n1\n2\n10 9\n4 3\n2\n7 10\n6 5\n```\n\n#### Sample Output\n```\nWin\n```\n',1000,65536,'0',10,85,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1086','好数个数','#### Description\n定义好数，奇数位的积与偶数位的和相等<br>\n数位从左开始数,给定N，求1到N中好数的个数\n\n#### Input\n第一行为测试组数T，接下来T组测试<br>\n每组一行，每行一个数字N<br>\n1<T<=10, 1<=N<=1000\n#### Output\n输出结果，每组一行\n#### Sample Input\n```\n2\n5\n11\n```\n\n#### Sample Output\n```\n0\n1\n```\n',1000,65536,'0',10,86,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1087','鸡兔同笼','#### Description\n```\n故事：\n	鸡兔同笼是中国古代著名趣题之一。\n	大约在1500年前，《孙子算经》中就记载了这个有趣的问题。\n	书中是这样叙述的：“今有雉兔同笼，上有三十五头，下有九十四足，问雉兔各几何？”\n	这四句话的意思是：有若干只鸡兔同在一个笼子里，从上面数，有35个头；从下面数，有94只脚。\n	问笼中各有几只鸡和兔？\n\n算法1：\n	暴力方法。\n\n解释1：	假设i是鸡数，j是兔子数。那么它们的范围必定在0到总数之内。\n	两重循环，里面判断是否满足头数条件，和脚数条件即可。\n\n解释2：	假设i是鸡数，那么i在0到总数之内，兔子数=总数-鸡数。\n	一重循环，里面判断是否满足脚数条件即可。\n\n算法2：\n	（总脚数-总头数*2）/2=兔子数 总头数-兔子数=鸡数\n\n解释1：	\n	解二元一次方程组即可\n\n解释2：	\n	让兔子和鸡都抬起两只脚，这样笼子里的脚就减少了头数*2只，由于鸡只有2只脚，\n	所以笼子里只剩下兔子的，再除以2就是兔子数。\n```\n#### Input\n```\n输入：	第一行为测试组数T，接下来T行，每行两个数字XY分别表示头总数和脚总数\n	0<=T,X<=100 0<=Y<=1000\n```\n#### Output\n```\n输出：	输出正确解，第一个数表示鸡的个数，第二个数表示兔的个数；如果无解，输出impossible。每组一行\n```\n\n#### Sample Input\n```\n2\n2 6\n1 3\n```\n\n#### Sample Output\n```\n1 1\nimpossible\n```\n',1000,65536,'0',10,87,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1088','级数求pi','#### Description\n```\n定义：pi/4=1-1/3+1/5-1/7+...+1/(4*n+1)-1/(4*n+3)\n给定n，输出pi的值\n```\n#### Input\n```\n输入：第一行为测试组数T，接下来T行，每行一个数字N\n1<=T<=100 1<=N<=1111\n```\n#### Output\n```\n输出：输出pi的结果。保留3位小数，每组一行\n```\n#### Sample Input\n```\n4\n1\n11\n111\n1111\n```\n\n#### Sample Output\n```\n2.895\n3.100\n3.137\n3.141\n```\n',1000,65536,'0',10,88,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1089','勾股定理','#### Description\n```\n在我国，把直角三角形的两直角边的平方和等于斜边的平方这一特性叫做勾股定理或勾股弦定理，\n又称毕达哥拉斯定理或毕氏定理（Pythagoras Theorem）。数学公式中常写作a^2+b^2=c^2\n现在给定n，按照字典序输出所有的a,b,c满足1<=a,b,c<=n，并且a<=b<=c的所有abc值。\n```\n#### Input\n```\n输入：第一行为测试组数T，接下来T行，每行一个数字N\n1<=T,N<=100\n```\n#### Output\n```\n输出：输出所有满足条件的a，b，c，每组一行，如果没有，输出-1\n```\n#### Sample Input\n```\n2\n3\n10\n```\n\n#### Sample Output\n```\n-1\n3 4 5\n6 8 10\n```\n',1000,65536,'0',10,89,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('109','Game Dice','#### Description\nIn the game of Dungeons & Dragons, players often roll multi-sided dice to generate random numbers which\ndetermine the outcome of actions in the game. These dice come in various flavors and shapes, ranging from a\n4-sided tetrahedron to a 20-sided icosahedron. The faces of an n-sided die, called dn for short, are numbered\nfrom 1 to n. Ideally, it is made in such a way that the probabilities that any of its n faces shows up are\nequal. The dice used in the game are d4, d6, d8, d10, d12, and d20.\n\nWhen generating random numbers to fit certain ranges, it is sometimes necessary or desirable to roll several\ndice in conjunction and sum the values on their faces. However, we may notice that although different\ncombinations of dice yield numbers in the same range, the probabilities of rolling each of the numbers within\nthe range differ entirely. For example, a d6 and a d10 afford a range of 2 to 16 inclusive, as does two d8s,\nbut the probability of rolling a 9 differs in each circumstance.\n\nYour task in this problem is to determine the probability of rolling a certain number, given the set of\ndice used.\n\n#### Input\nThe input test file will contain multiple cases, with each case on a single line of input. The line begins with\nan integer d (where $$$1 \\leq d \\leq 13$$$), the number of dice rolled. Following are d descriptors of dice, which can\nbe any of “d4”, “d6”, “d8”, “d10”, “d12”, or “d20”. The last number on each line is an integer x (where\n$$$0 \\leq x \\leq 1,000$$$), the number for which you are to determine the probability of rolling with the given set of\ndice. End-of-input is marked by a single line containing 0; do not process this line.\n\n#### Output\nFor each test case, output on a single line the probability of rolling x with the dice, accurate to five decimal\nplaces. Note that even if there trailing zeros, you must show them (see Test problem for an example of\ndecimal formatting).\n\n#### Sample Input\n```\n1 d10 5\n2 d6 d6 1\n2 d10 d6 9\n2 d8 d8 9\n0\n```\n\n#### Sample Output\n```\n0.10000\n0.00000\n0.10000\n0.12500\n```',10000,32768,'0',1,8,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1090','Test Problem','#### Description\nThis is a test problem to make sure you can successfully solve one problem.  Your program for this section\nwill take as input a single number N and return the sum of all integers from 1 to N, inclusive.\n#### Input\nThe input test ﬁle will contain multiple test cases. Each test case is speciﬁed on a single line containing an\ninteger N, where −100 ≤ N ≤ 100. The end-of-ﬁle is marked by a test case with N = −999 and should not\nbe processed.\n#### Output\nThe program should output a single line for each test case containing the sum of the integers from 1 to N,\ninclusive.\n#### Sample Input\n```\n5\n-5\n-999\n```\n\n#### Sample Output\n```\n15\n-14\n```\n',1000,65536,'0',10,90,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1091','Scrabble','#### Description\nThe game of Scrabble is played with tiles. A tile either has a single letter written on it, or it is blank. In the\nlatter case, the tile may be used to represent a letter of your choice. On your turn, you arrange the tiles to\nform a word. Each tile may be used at most once, but not all tiles need to be used. Given several Scrabble\ntiles and a dictionary, determine how many words in the dictionary can be formed using the given Scrabble\ntiles.\n#### Input\nThe input test ﬁle will contain multiple test cases. In each test case, the ﬁrst line contains a positive integer\nn ≤ 1000 indicating the number of words in the dictionary. The following n lines each contain a single string\nwith between 1 and 7 uppercase letters, representing a word in the dictionary.  No word will appear in the\ndictionary twice.  The next line contains a single string giving the tiles you have available.  It will contain\nonly capital letters, representing tiles with that letter on it, and underscores, representing blank tiles.  The\nstring will contain between 1 and 7 characters, possibly including duplicate tiles.  The end-of-ﬁle is marked\nby a test case with n = 0 and should not be processed.\n#### Output\nFor each test case, write a single line with the number of dictionary words that can be spelled with the given\nScrabble tiles. For example:\n#### Sample Input\n```\n5\nPROGRAM\nCONTEST\nPIZZA\nZA\nPITA\n_PIZA\n3\nBANANAS\nCARROTS\nFIGS\nA__AA__\n0\n```\n\n#### Sample Output\n```\n3\n2\n```\n\n#### Hint\nIn the ﬁrst test case, PIZZA, ZA and PITA can be spelled as PIZ_A, ZA and PI_A. There are not enough letters to spell PROGRAM or CONTEST. In the second test case, BANANAS and FIGS can be spelled as _A_A_A_ and ____ On the other hand, CARROTS would require 6 blanks in addition to the A.\n',1000,65536,'0',10,91,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1092','Convex area','#### Description\nA 3-dimensional shape is said to be convex if the line segment joining any two points in the shape is entirely\ncontained within the shape. Given a general set of points X in 3-dimensional space, the convex hull of X is\nthe smallest convex shape containing all the points.\nFor example, consider X  = {(0, 0, 0), (10, 0, 0), (0, 10, 0), (0, 0, 10)}.  The convex hull of X  is the tetrahe-\ndron with vertices given by X.  Note that the tetrahedron contains the point (1, 1, 1), so even if this point\nwere added to X, the convex hull would not change.\nGiven X, your task is to ﬁnd the surface area of the convex hull of X, rounded to the nearest integer.\nNOTE: The convex hull of any point set will have polygonal faces.   For this problem, you may assume\nthere will be at most 3 points in X on any face of the convex hull.\n#### Input\nThe input test ﬁle will contain multiple test cases, each of which begins with an integer n (4 ≤ n ≤ 25)\nindicating the number of points in X.  This is followed by n lines, each containing 3 integers giving the x,\ny and z coordinate of a single point.  All coordinates are between -100 and 100 inclusive.  The end-of-ﬁle is\nmarked by a test case with n = 0 and should not be processed. \n#### Output\nFor each test case, write a single line with the surface area of the convex hull of the given points. The answer\nshould be rounded to the nearest integer (e.g., 2.499 rounds to 2, but 2.5 rounds to 3).\n#### Sample Input\n```\n5\n0  0  0\n10  0  0\n0  10  0\n0  0  10\n1  1  1\n9\n0  0  0\n2  0  0\n2  2  0\n0  2  0\n1  1  2\n1  1  -2\n1  1  -1\n1  1  0\n1  1  1\n0\n```\n\n#### Sample Output\n```\n237\n18\n```\n\n#### Hint\nTo avoid ambiguities due to rounding errors, the judge tests have been constructed so that all answers are\nat least 0.001 away from a decision boundary (i.e., you can assume that the area is never 2.4997).\n',1000,65536,'0',10,92,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1093','Nim','#### Description\nNim is a 2-player game featuring several piles of stones.  Players alternate turns, and on his/her turn, a\nplayer’s move consists of removing one or more stones from any single pile.  Play ends when all the stones\nhave been removed, at which point the last player to have moved is declared the winner.  Given a position\nin Nim, your task is to determine how many winning moves there are in that position.<br>\nA position in Nim is called “losing” if the ﬁrst player to move from that position would lose if both sides\nplayed perfectly.   A “winning move,” then,  is a move that leaves the game in a losing position.   There\nis a famous theorem that classiﬁes all losing positions.   Suppose a Nim position contains n piles having\nk1, k2, . . . , kn  stones respectively; in such a position, there are k1 + k2 + . . . + kn  possible moves.  We write\neach ki  in binary (base 2).  Then, the Nim position is losing if and only if, among all the ki’s, there are an\neven number of 1’s in each digit position. In other words, the Nim position is losing if and only if the xor of\nthe ki’s is 0.\n\n#### Example\nConsider the position with three piles given by k1  = 7, k2  = 11, and k3  = 13. In binary, these values are as\nfollows:\n111\n1011\n1101\nThere are an odd number of 1’s among the rightmost digits, so this position is not losing. However, suppose\nk3  were changed to be 12.  Then, there would be exactly two 1’s in each digit position, and thus, the Nim\nposition would become losing. Since a winning move is any move that leaves the game in a losing position,\nit follows that removing one stone from the third pile is a winning move when k1 = 7, k2 = 11, and k3 = 13.\nIn fact, there are exactly three winning moves from this position:  namely removing one stone from any of\nthe three piles.\n\n#### Input\nThe input test ﬁle will contain multiple test cases, each of which begins with a line indicating the number\nof piles, 1 ≤ n ≤ 1000.  On the next line, there are n positive integers, 1 ≤ ki  ≤ 1, 000, 000, 000, indicating\nthe number of stones in each pile.  The end-of-ﬁle is marked by a test case with n = 0 and should not be\nprocessed. \n#### Output\n\nFor each test case, write a single line with an integer indicating the number of winning moves from the given\nNim position.\n\n#### Sample Input\n```\n3\n7  11  13\n2\n1000000000 1000000000\n0\n```\n\n#### Sample Output\n```\n3\n0\n```\n',1000,65536,'0',10,93,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1094','Dropping tests','#### Description\nIn a certain course, you take n tests.  If you get ai  out of bi  questions correct on test i, your cumulative\naverage is deﬁned to be\n<br>\n100*sigma(ai)/sigma(bi).\n.<br>\nGiven your test scores and a positive integer k, determine how high you can make your cumulative average\nif you are allowed to drop any k of your test scores.\n\n#### Example\nSuppose you take 3 tests with scores of 5/5, 0/1, and 2/6.  Without dropping any tests, your cumulative\naverage is 100*(5+0+2)/(5+1+6)= 50. However, if you drop the third test, your cumulative average becomes 100*(5+0)/(5+1)≈83.33 ≈ 83.\n#### Input\nThe input test ﬁle will contain multiple test cases, each containing exactly three lines. The ﬁrst line contains\ntwo integers, 1 ≤ n ≤ 1000 and 0 ≤ k < n.  The second line contains n integers indicating ai  for all i.  The\nthird line contains n positive integers indicating bi for all i. It is guaranteed that 0 ≤ ai ≤ bi ≤ 1, 000, 000, 000.\nThe end-of-ﬁle is marked by a test case with n = k = 0 and should not be processed.\n#### Output\nFor each test case, write a single line with the highest cumulative average possible after dropping k of the\ngiven test scores. The average should be rounded to the nearest integer. \n#### Sample Input\n```\n3  1\n5  0  2\n5  1  6\n4  2\n1  2  7  9\n5  6  7  9\n0  0\n```\n\n#### Sample Output\n```\n83\n100\n```\n\n#### Hint\nTo avoid ambiguities due to rounding errors, the judge tests have been constructed so that all answers are\nat least 0.001 away from a decision boundary (i.e., you can assume that the average is never 83.4997).\n',1000,65536,'0',10,94,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1095','Box walking','#### Description\nYou are given a three-dimensional box of integral dimensions `x × `y  × `z  The edges of the box are axis-\naligned, and one corner of the box is located at position (0, 0, 0).  Given the coordinates (x, y, z) of some\narbitrary position on the surface of the box, your goal is to return the square of the length of the shortest\npath along the box’s surface from (0, 0, 0) to (x, y, z).\n\n#### Example\nIf `x  = 1, `y  = 2, and `z  = 1, then the shortest path from (0, 0, 0) to (1, 2, 1) is found by walking from\n(0, 0, 0) to (1, 1, 0), followed by walking from (1, 1, 0) to (1, 2, 1). The total path length is √8.\n\n#### Input\nThe input test ﬁle will contain multiple test cases, each of which consists of six integers `x, `y, `z, x, y, z where 1 ≤ `x, `y, `z  ≤ 1000.  Note that the box may have zero volume, but the point (x, y, z) is always\nguaranteed to be on one of the six sides of the box. The end-of-ﬁle is marked by a test case with `x = `y  =\n`z  = x = y = z = 0 and should not be processed. \n#### Output\nFor each test case, write a single line with a positive integer indicating the square of the shortest path length.\n(Note: The square of the path length is always an integer; thus, your answer is exact, not approximate.) \n#### Sample Input\n```\n1  1  2  1  1  2\n1  1  1  1  1  1\n0  0  0  0  0  0\n```\n\n#### Sample Output\n```\n8\n5\n```\n',1000,65536,'0',10,95,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1096','Colored stones','#### Description\nYou are given a row of m stones each of which has one of k different colors. What is the minimum number\nof stones you must remove so that no two stones of one color are separated by stones of a different color?\n\n#### Input\nThe input test ﬁle will contain multiple test cases. Each input test case begins with a single line containing\nthe integers m and k where 1 ≤ m ≤ 100 and 1 ≤ k ≤ 5. The next line contains m integers x1, . . . , xm  each\nof which takes on values from the set {1, . . . , k}, representing the k diﬀerent stone colors. The end-of-ﬁle is\nmarked by a test case with m = k = 0 and should not be processed. \n#### Output\nFor each input case, the program should the minimum number of stones removed to satisfy the condition\ngiven in the problem. \n#### Sample Input\n```\n10  3\n2  1  2  2  1  1  3  1  3  3\n0  0\n```\n\n#### Sample Output\n```\n2\n```\n\n#### Hint\nIn the above example, an optimal solution is achieved by removing the 2nd stone and the 7th stone, leaving\nthree “2” stones, three “1” stones, and two “3” stones. Other solutions may be possible.\n',1000,65536,'0',10,96,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1097','RSI','#### Description\nYou have the goal of becoming the world’s fastest two-ﬁngered typist.   In this problem, your goal is to\noptimize the movement of your ﬁngers when typing numeric values in order to ensure that you ﬁnish typing\na number in the shortest amount of time possible. Your numeric keyboard has the following layout:\n```\n7    8    9\n4    5    6\n1    2    3\n   0\n```\nFor convenience, we refer to the cells above according to their row and column; hence, the “5” key is at\nposition (2, 2), and the “0” key takes up both positions (4, 1) and (4, 2). At time 0, your left pointer ﬁnger\nis on the “4” key and your right pointer ﬁnger is on the “5” key. During each time interval, each ﬁnger may\npress the key underneath it, move vertically one position, or move horizontally one position. Although both\nﬁngers may move simultaneously within a single time interval,\n•  at most one key may be pressed during any given time interval,\n•  the left pointer ﬁnger’s column must always be less than the right pointer ﬁnger’s column at the end\nof each time interval, and\n•  both ﬁngers must always be above one of the 10 keys in the diagram at the end of each time interval\n(e.g., neither ﬁnger cannot hover over position (4, 3)).\nThe “0” key may be pressed by a ﬁnger at either positions (4, 1) or (4, 2).\n\n#### Examples\n•  Typing “56” takes three time units. At time 1, both left and right ﬁngers have moved one position to\nthe right and are on keys “5” and “6” respectively. Then, each key is pressed sequentially.\n•  Typing “71” takes ﬁve time units. During the ﬁrst two time units, the left ﬁnger moves up to the “7”\nand presses the key. However, the right ﬁnger is not allowed to be in the same column as the left ﬁnger,\nand hence the left ﬁnger takes two time units to get to the “1” key and one time unit to press it.\n#### Input\nThe input test ﬁle will contain multiple test cases. Each test case consists of a single line containing a string\nof between 1 and 100 digits.  The end-of-ﬁle is marked by a line containing the word “eof” and should not\nbe processed.\n#### Output\nFor each input case, output the minimum number of time units required to type the given digits.  \n#### Sample Input\n```\n56\n71\n902\neof\n```\n\n#### Sample Output\n```\n3\n5\n6\n```\n',1000,65536,'0',10,97,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1098','Do it!','#### Description\nYou are the boss of a small lighting ﬁxture company which has n employees. Inspired by Ben Stiller’s char-\nacter in Starsky and Hutch, you have recently taken on the habit of telling your employees to “do it!” when\nyou want things done.  While n+  of the n employees respond positively to your “do it!”s, n−  employees\nrespond negatively and n0  are neutral to your words.\nAt time 0, each of your employees begins working alone on building a lighting ﬁxture. Each lighting ﬁxture\ntakes 100 units of labor to ﬁnish.  Normally, each of your employees contributes r units of labor towards\nﬁnishing his/her lighting ﬁxture during each time interval (or the amount of labor units remaining for the\nﬁxture, whichever is smaller). Thus, an employee would normally take d100/re time intervals to ﬁnish his or\nher lighting ﬁxture. During an interval, however, if you yell “do it!” over the company intercom, employees\nwho respond positively to your command will do r + 2 units of labor during that time interval, whereas\nemployees who respond negatively will do r − 1 units of labor during the time interval.\nAssuming that each employee works on only his or her lighting ﬁxture, and assuming that you yell “do\nit!” at most once during each time interval, your goal is to plan a sequence of “do it!”s so as to ensure that\nthe sum of the times needed to ﬁnish all n lighting ﬁxtures is minimized.\n#### Input\nThe input test ﬁle will contain multiple test cases.  Each input test case will be given as a line containing\nfour integers, n+, n−, n0, and r (where 0 ≤ n+, n−, n0 ≤ 1000 and 1 ≤ r ≤ 100). The end-of-ﬁle is marked\nby a test case with n+ = n− = n0 = r = 0 and should not be processed. \n#### Output\nFor each input case, the program should print the minimum sum of times needed to ﬁnish all n lighting\nﬁxtures.\n#### Sample Input\n```\n3  1  1  2\n1  3  0  2\n0  0  0  0\n```\n\n#### Sample Output\n```\n188\n200\n```\n\n#### Hint\nIn ﬁrst test case, one optimal strategy is to yell “do it!”  in each of the ﬁrst 25 time intervals.  As a result,\nthe 3 positively-responding employees provide 4 units of labor per time interval and thus ﬁnish their ﬁxtures\nin 25 time units.  The 1 negatively-responding employee will provide 1 unit of labor per time interval for\nthe ﬁrst 25 time intervals, 2 units of labor per time interval afterwards, and thus will ﬁnish in 25 + 38 = 63\ntime units.  Finally, the neutral employee will always provide 2 units of labor per time interval and hence\nwill ﬁnish in 50 time units. This gives a total of 3(25) + 63 + 50 = 188 time units.\nIn the second test case, an optimal strategy is to never yell “do it!”.   Thus all four employees ﬁnish in\n50 time units so the total amount of time taken is 200 time units.\n',1000,65536,'0',10,98,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1099','fibnacci','== Important Notice==\n```\n			2012岗位实践(张小健老师班上)一期末分数安排\n\n==>说明：\n	1. 按表1规则计算，计算得到期末最终成绩\n	2. 如果最终分数超过100分，按100分计算\n	3. 练习过程中，发现有交明显雷同代码的，每人每次扣5分，超过5以上的，直接挂！！！\n	4. 请修改用户名或者昵称为本人学号\n	（因为将按学号统计成绩，如果因为没发现学号而造成的0分，后果自负）\n\n==>表1：\n	编号	练习时间		内容		所占比例		总题数		总分数		分数计算\n	1	第15周		C语言基础	60%		18		120		8*10+10*4=120\n	2	第16周		递归专题		25%		12		100		8*10+4*5=100\n	3	第17周		数据结构		15%		8		100		4*15+4*10=100\n\n==>备注：\n	分数详情：(题数/分数)\n	18/120	17/116	16/112	15/108	14/104	13/100	12/96	11/92	10/88	9/84	8/80	7/70	6/60	5/50	4/40	3/30	2/20	1/10	0/0\n	12/100	11/95	10/90	9/85	8/80	7/70	6/60	5/50	4/40	3/30	2/20	1/10	0/0\n	8/100	7/90	6/80	5/70	4/60	3/45	2/30	1/15	0/0\n==>附：点击contest list之后，会有三次练习，练习最右边的operate里面提供了大家平时练习的各种操作！！\n```\n\n#### Description\n```\n定义\nf[N]=f[N-1]+f[N-2]\nf[0]=0; f[1]=1;\n给定n，输出f[N]的值\n```\n\n#### Input\n```\n第一行为测试组数T，接下来T行，每行一个数字N\n1<=T<=26 0<=N<=25\n```\n\n#### Output\n```\n输出结果,每组一行\n```\n\n#### Sample Input\n```\n2\n0\n3\n```\n\n#### Sample Output\n```\n0\n2\n```\n',3000,65536,'0',10,99,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('11','Matrix chain','#### Description\nGiven two matrices A and B, we can determine the matrix C = A*B using the standard definition of matrix multiplication: \n$$$C_{i,j}=\\sum_{k} A_{i,k} \\times B_{k,j}$$$\n\nThe number of columns in the matrix A must be the same as the number of rows in the matrix B. Notationally, let\'s say that rows(A) and columns(A) are the number of rows and columns, respectively, in the A array. The number of individual multiplications required to compute the entire matrix C (which will have the same number of rows as A and the same number of columns as B) is then rows(A)*columns(B)*columns(A). \n\nTo perform multiplication of more than two matrices we have a choice of how to proceed. For example, if X, Y, and Z are matrices, then to compute $$$X \\times Y \\times Z$$$ we could either compute $$$(X \\times Y) \\times Z$$$ or $$$X \\times (Y \\times Z)$$$. Suppose X is a $$$4 \\times 5$$$ matrix, Y is a $$$5 \\times 4$$$ matrix, and Z is a $$$4 \\times 6$$$ matrix. Let\'s look at the number of multiplications required to compute the product using the two different sequences:\n\n+ $$$(X \\times Y) \\times Z$$$, total multiplications: $$$4 \\times 5 \\times 4 + 4 \\times 4 \\times 6 = 176$$$\n+ $$$X \\times (Y \\times Z)$$$, total multiplications: $$$5 \\times 4 \\times 6 + 4 \\times 5 \\times 6 = 240$$$\n\nClearly we\'ll be able to compute $$$X \\times (Y \\times Z)$$$ using fewer individual multiplications.\n\nGiven the size of each matrix in a sequence of arrays to be multiplied, you are to determine an optimal computational sequence. Optimality, for this problem, is relative to the number of individual multiplications required. \n\n#### Input\n+ The first number $$$T (1 \\leq T \\leq 100)$$$ will be the number of test case. \n+ For each test case, there are $$$N+1\\,$$$ lines.\n+ The first line will be the number $$$N(2 \\leq N \\leq 100)$$$ represent how many matrices are there in the sequence to be multiplied.\n+ The next $$$N\\,$$$ lines contains two integers $$$A_{i},B_{i}(1 \\leq A_{i},B_{i} \\leq 1000)$$$ denote the size of $$$i\\,$$$th matrix in the sequence. The order in which the size are given is the same as the order in which the matrices are to be multiplied.\n\n#### Output\n+ For each test case, output two integer in a line. \n  - First integer, the minimum numbers of individual multiplications required.\n  - Second integer, how many different ways to got the optimal solution modul 20082008. For the example above, there is only one way to got the optimal solution, that is $$$X \\times (Y \\times Z)$$$.\n\n#### Sample Input\n```\n2\n3\n4 5\n5 4\n4 6\n3\n3 3\n3 3\n3 3\n```\n\n#### Sample Output\n```\n176 1\n54 2\n```\n',10000,32768,'0',0,10,'',0,'4','2018-11-05 00:31:14','2018-11-05 00:48:07'),('110','Baking Cakes','#### Description\nTom’s birthday is coming up, and you have been put in charge of baking cakes for his monstrous birthday\nparty. However, you have a great number of cakes to make, and a very short amount of time, so you are not\nsure that you will even finish before the party!\n\nYou have a list of different cakes to make, each requiring a certain amount of time to bake. You also\nhave exactly 3 ovens to bake the cakes in, and each oven can only bake one cake at a time. Assuming that\nthe time required to take a cake out and put another one in is negligible, can you determine the smallest\namount of time you will need to spend baking, given the list of cakes to make?\n\n#### Input\nThe input test file will contain multiple cases, with each case on a single line. The line begins with an integer\nn (where $$$1 \\leq n \\leq 40$$$), the number of cakes to bake. Following are n integers, $$$t_1, \\cdots , t_n$$$ (where $$$1 \\leq t_i \\leq 30$$$),\nindicating the time in minutes required to bake each of your cakes. End-of-input is marked by a single line\ncontaining 0; do not process this line.\n\n#### Output\nFor each test case, output on a single line the smallest amount of time, in minutes, that you need to bake\nall of your cakes.\n\n#### Sample Input\n```\n1 30\n3 15 10 20\n5 6 7 8 9 10\n0\n```\n\n#### Sample Output\n```\n30\n20\n15\n```\n',10000,131072,'0',1,9,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1100','bubble','#### Description\n```\n冒泡排序的递归代码如下，请大家调用一下\n体验一下递归^.^...\nvoid bubble(int arr[], int k, int m)\n{\n	int i;\n	\n	if(k==m) return;\n	for(i=k; i<m; ++i)\n	{\n		if(arr[i]>arr[i+1]) \n			swap(arr[i], arr[i+1]);\n	}\n	// 到这里，最后一个数最大啦\n	bubble(arr, k, m-1);\n}\n```\n#### Input\n```\n第一行为测试组数T，接下来T行\n每行第一个数字为数据个数N，后面是N个需要排序的数\n1<=T<=26 0<=N,data<=100\n```\n#### Output\n```\n输出结果，每组一行\n```\n#### Sample Input\n```\n1\n5 1 3 5 4 2\n```\n\n#### Sample Output\n```\n1 2 3 4 5\n```\n',3000,65536,'0',11,0,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1101','走台阶','#### Description\n<strong>交过的代码已经重测</strong><br>\n<strong>题意是一开始在0位置，每次可以走a步或者b步，问走到n步的种数</strong><br>\n<strong>比如n=7,a=1,b=3时，零个3步有1种，一个3步有5种，2个3步有3种，一共9种</strong>\n```\n机器人每步只能向上走A或者B级(A!=B)台阶\n给定台阶级数N，求机器人走到最后一级的种数\n```\n\n#### Input\n```\n第一行为测试组数T，接下来T行，每行三个数字N,A,B\n1<=T<=26 0<=N,A,B<=25\n```\n#### Output\n```\n输出结果,每组一行\n```\n\n#### Sample Input\n```\n1\n2 1 2\n```\n\n#### Sample Output\n```\n2\n```\n',3000,65536,'0',11,1,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1102','全排列','#### Description\n```\n给定N,输出字典序1-N的全排列\n```\n#### Input\n```\n第一行为测试组数T，接下来T行，每行一个数字N\n1<=T,N<=8\n```\n\n#### Output\n```\n输出结果,每组N!行\n数与数之间一个空格\n```\n\n#### Sample Input\n```\n1\n3\n```\n\n#### Sample Output\n```\n1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1\n```\n',3000,65536,'0',11,2,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1103','C(n, m)','#### Before\n<strong>\n本次练习主题：递推\n感谢队友罗益旺的供题\n</strong>\n\n#### Description\n```\nC(N, M)表示从N个不同物品中选M个的组合数。\n有如下公式，C(N, M)=C(N-1, M)+C(N-1, M-1)。。\n解释，考虑最后一个物品，\n	如果选的话，那么前N-1个物品只需要选M-1个，\n	如果不选，那么前N-1个物品需要选M个。。\n请根据该公式递推出C(N,M)的值。。。\n注意，C(N, 0)=C(N, N)=1, N>=0\n```\n#### Input\n```\n第一行为组数T，接下来T行，每组两个数字N，M\n0<=M<=N<=20, 0<T<=250\n```\n#### Output\n```\nC(N, M)的值, 每组一行\n```\n#### Sample Input\n```\n3\n0 0\n5 1\n5 2\n```\n\n#### Sample Output\n```\n1\n5\n10\n```\n',1000,65536,'0',11,3,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1104','数字三角形','\n#### Description\n```\n一个数字三角形,想找出从三角形顶点到底某处的一条路径,\n使的该路径所经过的数字总和最大. 每一步可沿直线向下或右斜线向下. \n\n比如：\n7\n3 8\n8 1 0\n2 7 4 4\n4 5 2 6 5\n经过7，3，8，7，5，可得到最大和30\n\n解法：\n我们从上面往下递推，对每个点[i, j]，假设上面已经最优，\n那到该点的最优值是正上方[i-1, j]和左边[i-1, j-1]的\n两个值中的最大值与该点最大值的和。\n```\n#### Input\n```\n第一行为组数T，接下来T组测试数据,\n每组测试数据第一行为一正整数 L,\n接下来L行每行有Ki个数字(Ki=1,2,...,L).\n0<T, L, Ki<=50\n```\n#### Output\n```\n输出能得到的最大值，每组一行\n```\n#### Sample Input\n```\n2\n\n3\n1\n2 3\n5 6 4\n\n5\n7\n3 8\n8 1 0\n2 7 4 4\n4 5 2 6 5\n```\n\n#### Sample Output\n```\n10\n30\n```\n',1000,65536,'0',11,4,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1105','重复L个N的数','#### Description\n```\n定义：F(i)=NN…N，共重复i次N\nS=F(0)+F(1)+…+F(L)\n```\n\n#### Input\n```\n第一行为测试组数T，接下来T行，每行两个整数N，L\n1<=T<=100，0<=N, L<=9\n```\n#### Output\n```\n输出S，每组一行\n```\n#### Sample Input\n```\n2\n2 2\n1 1\n```\n\n#### Sample Output\n```\n24\n1\n```\n',1000,65536,'0',11,5,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1106','割分凸多边形','\n\n#### Description\n```\n给一个凸n多边形，用n-3条不相交的对角线把它分成n-2个三角形，求不同的方法数目\n比如n=4时，有2种割分方法。n=5时，有5种割分方法\n```\n\n#### Input\n```\n第一行为测试组数T，接下来T行，每行第一个整数N\n1<=T<=100，3<=N<=20.\n```\n#### Output\n```\n割分方法的数目，每组一行\n```\n#### Sample Input\n```\n3\n4\n5\n6\n```\n\n#### Sample Output\n```\n2\n5\n14\n```\n',1000,65536,'0',11,6,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1107','Function Game One','\n\n\n\n#### Description\n```\n定义：\nw(a,b,c)=\n	{	\n		a<=0 or b<=0 or c<=0,	1;\n		a>20 or b>20 or c>20,	w(20,20,20);\n		a<b and b<c,		w(a,b,c-1)+w(a,b-1,c-1)+w(a,b-1,c);\n		others,			w(a-1,b,c)+w(a-1,b-1,c)+w(a-1,b,c-1)-w(a-1,b-1,c-1);\n	}\n给定a，b，c，输出w(a,b,c)的值\n```\n\n#### Input\n```\n第一行为组数T，接下来每行三个数字，A，B，C\n0<=T<=50，0<=A，B，C<=10\n```\n#### Output\n```\n输出结果，每组一行\n```\n#### Sample Input\n```\n2\n1 1 1\n2 2 2\n```\n\n#### Sample Output\n```\n2\n4\n```\n',1000,65536,'0',11,7,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1108','Function Game Two','\n\n#### Description\n```\n定义：\nswrd(m, n)=\n		{\n			m-1,			n<=0;  \n			n-2,			m<=0;\n			(swrd(m-1, n) + \n			swrd(m-1, n-2) + \n			swrd(m, n-2))%2012,	n,m>0;\n		}\n给定n，m，输出swrd(m, n)的值\n如果n<=0 && m<=0, 安装n<=0处理，其优先级大\n```\n\n#### Input\n```\n第一行为组数T，接下来每行两个数字，N，M\n0<=T，N，M<=200\n```\n#### Output\n```\n输出结果，每组一行\n```\n#### Sample Input\n```\n2\n-1 -2\n38 81\n```\n\n#### Sample Output\n```\n-3\n1623\n```\n',1000,65536,'0',11,8,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1109','Find the Dragon','#### Description\nAs we all know, 2012 is the year of dragon. Swrd likes dragon very much, so he often read books about the dragon. Find the word “dragon” in a sentence is the most interesting thing to him. But a book has thousands of sentences. You are a good programmer, now give him a hand!\nYour task is to check the word “dragon” is the given sentence’s substring or not. Notice that the substring may not consecutive, and one string has 2^n substrings if its length is n.\n\n#### Input\nThe first line is an integer T indicates the number of the test cases. (0<=T<=100)\nEach case comes one sentence in one line. \nYou may assume the length of the sentence is less than 1000.\n\n#### Output\nOutput “Yes” if you find dragon, else output “No”.\nOne line for each case.\n\n#### Sample Input\n```\n2\nSwrd love the dragon.\nDragon is not dagon.\n```\n\n#### Sample Output\n```\nYes\nNo\n```\n',1000,65536,'0',11,9,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('111','Pool','#### Description\nBilliards, also commonly known as “pool,” is a popular game in North America. The game is played on a\nrectangular table with six pockets—one at each corner and one in the middle of each of the two longer sides\nof the table. The object of the game is to strike a cue ball so that it collides with other balls, knocking them\ninto the pockets.\n\nThe surface of our pool table measures 108” by 54”, and to facilitate computation, we place it on the\nCartesian plane with its southwest corner situated at (0, 0), and its northeast corner at (108, 54). Therefore,\nthe centers of the 6 pockets, numbered 1 through 6, will have coordinates of (0, 0), (54, 0), (108, 0), (0, 54),\n(54, 54), and (108, 54), respectively (see Figure 2). The billiard balls are spherical and measure 2” in diameter.\n\n[[Image:B10_1.jpg|center]]\n\nGiven the location of the cue ball, a target ball, and a number of other balls on the table, your task for this\nproblem is to write a program to determine whether or not you can successfully make a particular pool shot.\nThe cue ball can be struck in any direction in a straight line. We consider collisions between the balls to\nbe perfectly elastic, so that the target ball will always travel in a straight line, away from the point on its\nsurface contacted by the cue ball (see Figure 3).(You may assume that the cue ball disappears immediately after making contact with the target ball.)\n\n[[Image:B10_2.jpg|center]]\n\nA shot is considered possible if the cue ball can be struck so that it collides directly with the target ball, in\nturn sending the target ball directly into a pocket. Neither ball should collide with any other balls, bounce\noff the edges of the table (cushions), nor should their centers cross the boundaries of the table. In other\nwords, you are not to consider any bank shots, combination shots, spin shots, or any other trick shots in\nthis problem. Note that the difference between the incoming angle of the cue ball and the outgoing angle of\nthe target ball must be greater than $$$90^\\circ$$$. The target ball is considered to land in a pocket when its center\ncoincides with the center of that pocket.\n\n#### Input\nThe input test file will contain multiple cases. The first line of each test case contains four real numbers,\n$$$x_c \\ y_c \\ x_t \\ y_t$$$, where $$$(x_c, y_c)$$$ is the location of the cue ball and $$$(x_t, y_t)$$$ is the location of the target ball. The\nsecond line of the test case contains an integer n (where $$$0 \\leq n \\leq 14$$$), the number of additional balls on the\ntable, followed by n pairs of real numbers, $$$x_1 \\ y_1 \\cdots x_n \\ y_n$$$, where $$$(x_i, y_i)$$$ is the location of the ith additional\n(possibly obstructing) ball. No two balls overlap, and all balls are strictly in the interior of the table; in\nparticular, all provided coordinates obey $$$3\\, < x\\, < 105\\,$$$ and $$$3\\, < y\\, < 51\\,$$$.\n\nInput is terminated with a single line containing only the number 0; do not process this line.\n\n#### Output\nFor each test case, output on a single line the number(s) of the pocket(s) into which the target ball can be\nshot, sorted in ascending numerical order. Separate pocket numbers with a single space. If there are no\npockets for which a clear shot exists, output the words “no shot”.\n\n#### Sample Input\n```\n30 27 70 24\n0\n80 27 40 27\n2 38 28 38 26\n81.0 27.0 54.5 27.0\n1 54.0 33.3\n81.0 27.0 54.5 25.0\n1 54.0 33.3\n0\n```\n\n#### Sample Output\n```\n3 6\nno shot\n1 4\n1 2 4\n```',10000,32768,'0',1,10,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1110','Rectangular Cuboid Checking','#### Description\nIn geometry, a cuboid is a solid figure bounded by six faces.\nForming a convex polyhedron with eight vertexs.\nIn a rectangular cuboid, all angles are right angles, and opposite faces of a cuboid are equal.\n												--- from wikipedia\nHere comes the problem.\nYou are given eight vertex in 3-dimensional space. \nPlease tell if the cuboid with the eight vertex is a rectangular cuboid.\n\n#### Input\nThe first line is an integer T indicates the number of the test cases. (0<=T<=10)\nFor each case comes the eight points in two lines. \nEach point has the format (x, y, z), and there is one space between two points.\n\n#### Output\nOutput “Yes” if it is a rectangular cuboid, else output “No”. \nOne line for each case.\n\n#### Sample Input\n```\n2\n(0,0,0) (2,0,0) (2,1,0) (0,1,0)\n(0,0,1) (2,0,1) (2,1,1) (0,1,1)\n(0,0,0) (2,0,0) (2,1,0) (0,1,0)\n(0,0,1) (2,0,1) (2,1,1) (0,1,2)\n```\n\n#### Sample Output\n```\nYes\nNo\n```\n',1000,65536,'0',11,10,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1111','The Biggest Number','#### Description\n\n#### Input\n\n#### Output\n\n#### Sample Input\n```\n```\n\n#### Sample Output\n```\n```\n',1000,65536,'0',11,11,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1112','Cutting the Number','#### Description\nHappy likes challenge. Happy has n (1<=n<=1000) integer numbers. He want to spell all the number to product a biggest number.\nThe rule for spell a number: A and B can spell a number AB, when A’s tail digital is the same as B’s digital. For example, 12 and 23 can spell 1223, but 12 and 34 can’t spell 1234.\nYou have to note 2 point:\n1. You should use all the n numbers to spell the biggest number, if you can not spell a number just output “-1” in a line.\n2. all the n numbers, each of them has different digital number. For example, 123 is legal while 122 is illegal. And there will not leading zeros in the input.\n\n#### Input\nFor each test case, first line contains an integer number n. The next n line contains an integer number.\nn=0 is the end for all input.\n\n#### Output\nFor each test case, you should output the biggest number in a line. If not exist, just output “-1” in a line.\n\n#### Sample Input\n```\n3\n321\n341\n13\n2\n12\n34\n1\n123\n0\n```\n\n#### Sample Output\n```\n34113321\n-1\n123\n```\n',3000,65536,'0',11,12,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1113','Alec’s Game','#### Description\nAlec has a game. It is play with a plate and a machine. The special machine can squirt out three kind of color to the plate. What an amazing thing is the machine can absorb the color from the plate as well. Different color in the plate will mix into another new color. For example, red add green is yellow.\nCOMMANDS:\nsquirt color: squirt out the color to the plate.\nabsorb color: absorb the color from the plate.\nshow color: show the current color in the plate.\nNOTICE:\nThe squirt command is useless when the color is in the plate.\nThe absorb command is useless when the color is not in the plate.\nRULE:\nThe three colors are red, green and blue.\nInitialize: black\nred + green = yellow , red + blue = magenta ,\ngreen + blue = cyan, red + green + blue = white.\n\n#### Input\nThe first line of the input contains an integer N(0<N<=10000) which means the number of command. Then N lines follow, each line consist a command.\n\n#### Output\nFor each show command, output the current color.\n\n#### Sample Input\n```\n5\nsquirt red\nsquirt green\nshow\nabsorb red\nshow\n```\n\n#### Sample Output\n```\nyellow\ngreen\n```\n',1000,65536,'0',11,13,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1114','Delete Comments','#### Description\nWe all know that in C language, ‘//’ and ‘/* */’ is used to comment.\nIn this problem, you just need to delete the comment after ‘//’ when ‘//’ first time appear in a line.\n\n#### Input\nThere will many characters in a line. The number of characters in each line is less than 50, the number of all characters is less than 1000. \nEOF for end. You can get it in the sample input if you do not know how to scanf.\n\n#### Output\nFor each test case, you should output the text we require.\n Hints:\n‘\\n’ indicates the end of line, please mind the space and tab\nUse gets(s) will cause something wrong because the system, so use getchar to input\n\n#### Sample Input\n```\n1. include <stdio.h>\\n\n\\n\nint main()\\n\n{\\n\n	char c;\\n\n	//\\n\n	while((c=getchar())!=EOF)//input one char\\n\n	{\\n\n		putchar(c);         //output one char\\n\n	}\\n\n//\\n\n	/*Mind the Space*/\\n\n	/*///\\n\n	return 0;\\n\n}\\n\n```\n\n#### Sample Output\n```\n1. include <stdio.h>\\n\n\\n\nint main()\\n\n{\\n\n	char c;\\n\n	\\n\n	while((c=getchar())!=EOF)\\n\n	{\\n\n		putchar(c);          \\n\n	}\\n\n\\n\n	/*Mind the Space*/\\n\n	/*\\n\n	return 0;\\n\n}\\n\n\n```\n',1000,65536,'0',11,14,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1115','The Second Shortest Path','#### Description\nChess is a college student in Shenzhen University. There are many buildings and many paths. Obviously, if there is a path from A to B, then you can go from B to A. It means that the path is bidirectional.\nChess has knew all the path between his dormitory to all buildings. He always chooses the shortest road, but Chess find the road is crowed because many persons select it like him. Chess want to know the value of the second shortest path start from his dormitory.\nNote: the value of second shortest path is always not equal with the value of shortest path. He hates all roads with the value of the minimum one.\n\n#### Input\nThe first line of input contains integer number T, the number of test cases. \nFor each test case, first line contain three integer s,n,m (1<=s<=n, 1<=n<=1000, 1<=m<=n*n) s is the number of dormitory, n is the number of buildings, m is the number of path. In the next m line, each line contains u, v, c indicating there is a path from u to v, the distance is c.(1<=u,v<=n  1<=c<=1000)\nThen an integer number q (0<q<=n), means there are q querys. Then q integer numbers in next line. For each integer number, output the value of second shortest path.\n\n#### Output\nFor each test case, output the value of second shortest path that Chess want to know. If a building doesn’t exist the second shortest path, just output “-1” for the buildings.\n\n#### Sample Input\n```\n1\n1 3 3\n1 2 2\n3 1 1\n2 3 3\n3\n1 2 3\n```\n\n#### Sample Output\n```\n2 4 3\n```\n',1000,65536,'0',11,15,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1116','Recite Vocabulary','#### Description\nDopey prepare the GRE exam recently. And he must to recite the vocabulary before the exam. So he makes a plan to recite vocabulary.\n\n#### Input\nThe first line of the input contains an integer T (0<T<=10000) which means the number of test. Then T lines follow, each line consist start date, end date and the number of vocabulary. The date format is yyyy/mm/dd, and the number of vocabulary is less than 500000.\nIt is sure that all the date is legal, and the start date is less than the end date.\n\n#### Output\nPrint the average number of words that need to recite each day. Output 2 decimals after decimal point.\n\n#### Sample Input\n```\n2\n2012/03/24 2012/03/30 35\n2012/03/24 2012/04/02 100\n```\n\n#### Sample Output\n```\n5.00\n10.00\n```\n',1000,65536,'0',11,16,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1117','Love In WenShanLake','#### Description\nThere are two Lake in ShenZhen University. We called it Up WenShanLake and Down WenShanLake. Simply Up and Down for short. There are many lovers around WenShanLake when the evening comes. \nOne day a boy show love to his girl. But the girl gives him a problem, and answer to accepted the boy if his answer is accepted by the SZU’s Online Judge System. But the boy is not good at calculating. He is good at ask for help. Now he turns to you. He thinks you can help him, and you will help him, right?\nHere comes the girl’s problem. We considered the two lakes are rectangular with const bottom. Actually they are connected by a small pipe with switch. When we open the switch, the water can flow between them. \nNow the switch is closed. You are given bottom area of the two rectangular and their water’s heights. Just tell their water’s final heights after we open the switch. Notice that you can ignore the pipe’s volume when you are calculating.\n\n#### Input\nThe first line is an integer T (0<=T<=100) indicates the number of the test cases. \nFor each case, firstly comes four non-negative integers UA, UH, DA, DH, (0<=UA, UH, DA, DH<=1000) indicate the bottom’s area and the water’s height of the Up and Down.\n\n#### Output\nOutput the result in one line, and one space between two numbers. \nThe answer should be rounded to the nearest integer. (e.g.  2.499 rounds to 2, but 2.5 rounds to 3).\n\n#### Sample Input\n```\n2\n1 1 1 1\n1 1 2 0\n```\n\n#### Sample Output\n```\n1 1\n0 0\n```\n',1000,65536,'0',11,17,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1118','Survival Game','#### Description\nDeus is the god of space and time. He is dying, thus he choose some pepole to play a survival game. The one who win in the game can be the god!\nThere is an n*m map. ‘#’ is a stone that can’t through by people. ‘.’ means a point that can through by people.\nIn the map, the one who first go into the door in the map is the winner! But, the door is closed, they need to have a key to open it. ‘M’ means a people, ‘D’ means a door, ‘K’ means a key. \nThere is only one key in the map, but may exist many peoples and doors, and the magic key can open all doors. Now Deus just wants to know the shortest time he need to wait until a winner is born. A step indicates one time.\n\n#### Input\nThe first line of input contains integer number T(0<=T<=100), the number of test cases.\nFor each test case, the first line contains n, m (1<=n, m<=100). Then n lines contains m characters indicate the map. No other character will occur.\n\n#### Output\nFor each test case, you should output the shortest time. If no one can win in the game, just output “-1” in a line.\n\n#### Sample Input\n```\n2\n3 3\nM..\n.K.\n..D\n3 3\nK..\n.MM\n..D\n```\n\n#### Sample Output\n```\n4\n6\n```\n',1000,65536,'0',11,18,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1119','链表查询','#### Description\n```\n\n有一个数字连成的链表，初始为空\n有以下三个操作：\nrem a 	删除a节点\n			如果节点a不存在，不做任何操作\n			如果节点a存在多个，删除第一个\n			\nins a b 在节点a后面插入节点b\n			如果节点a不存在，插入到链表尾部\n			如果节点a存在多个，插入到第一个节点后面\n			\nque a 	给出第1+(a%len)个节点的数字， len是链表总长度\n			如果链表为空，不做任何操作\n\n```\n#### Input\n```\n第一行T 表示有T个操作(T<1000)\n接下来T行每行一个上述操作\n```\n#### Output\n```\n如果操作是que，输出结果\n```\n#### Sample Input\n```\nins 1 2\nins 2 3\nins 2 1\nrem 3\nque 1\n```\n\n#### Sample Output\n```\n1\n```\n',1000,65536,'0',11,19,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('112','Jogger','#### Description\nEvery morning, Joe the Jogger goes for a brisk run around his neighborhood. The houses in the neighborhood\n(which are numbered from 1 to n) are connected together by a set of roads with the property that\nbetween every two houses, there exists exactly one unique path. That is, the graph structure of the road\nnetwork is a tree of unknown topology, consisting of n leaf nodes (corresponding to each of the houses) and\nup to n−1 (but possibly fewer) internal nodes denoting intersections where roads split or merge (see Figure 4).\n\nIn this problem, your task is to help Joe plan a jogging route from one house in the neighborhood to\nanother house. Because Joe is a veteran jogger, he wants his route to take as long as possible. Given a\nmatrix of distances (in meters) between each pair of houses along the road graph, the number of seconds r\nit takes Joe to run one meter, and the number of seconds t it takes for Joe to cross each intersection along\nthe route, determine the pair of houses for which the total travel time is as long as possible.\n\n[[Image:B11.jpg|center]]\n\n#### Input\nThe input test file will contain multiple cases. Each test case begins with a line containing three integers:\nn (where $$$1 \\leq n \\leq 50$$$), the total number of houses in the neighborhood, r (where $$$1 \\leq r \\leq 10$$$), the number\nof seconds per meter traveled, and t (where $$$1 \\leq t \\leq 100$$$), the number of seconds needed to cross each intersection. \nThen, the next n lines each contain n values indicating the distances $$$d_{ij}\\,$$$ (where $$$1 \\leq d_{ij} \\leq 1,000$$$)\nbetween each pair of houses. The distances are specified in row-major order; i.e., the jth entry of the ith\nline is $$$d_{ij}\\,$$$ .\n\nYou are guaranteed that $$$d_{ii} = 0\\,$$$ for each i and that $$$d_{ij} = d_{ji}\\,$$$ for $$$i \\neq j$$$. Furthermore, you may\nassume that the distance matrix corresponds to path lengths along some valid tree, no house coincides with\nany internal node of the tree, each internal node of the tree has degree ≥ 3, and all edges in the tree have\npositive length. Input is terminated by a single line containing the number 0; do not process this line.\n\n#### Output\nFor each test case, you must print a single line of output containing the longest total travel time possible.\n\n#### Sample Input\n```\n9 1 5\n0 8 22 16 16 13 24 14 11\n8 0 20 14 14 11 22 12 9\n22 20 0 12 12 11 22 12 23\n16 14 12 0 4 5 16 6 17\n16 14 12 4 0 5 16 6 17\n13 11 11 5 5 0 13 3 14\n24 22 22 16 16 13 0 14 25\n14 12 12 6 6 3 14 0 15\n11 9 23 17 17 14 25 15 0\n0\n```\n\n#### Sample Output\n```\n38\n```\n',10000,32768,'0',1,11,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1120','链表反转','#### Description\n```\n\n有一个数字连成的链表，初始为空\n有以下三个操作：\nrem a 	删除a节点\n			如果节点a不存在，不做任何操作\n			如果节点a存在多个，删除第一个\n			\nins a b 在节点a后面插入节点b\n			如果节点a不存在，插入到链表尾部\n			如果节点a存在多个，插入到第一个节点后面\n			\nque a 	将链表反转，输出翻转后第1+(a%len)个节点的数字\n		len是链表总长度\n			如果链表为空，不做任何操作\n\n\n```\n#### Input\n```\n第一行T 表示有T个操作(T<1000)\n接下来T行每行一个上述操作\n```\n#### Output\n```\n如果操作是que，输出结果\n```\n#### Sample Input\n```\nins 1 2\nins 2 3\nins 2 1\nrem 3\nque 1\n```\n\n#### Sample Output\n```\n2\n```\n',1000,65536,'0',11,20,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1121','find robot','#### Description\n\nyangmie发明了一台很弱智的机器人，机器人只能向着其正前方行走， 或着转身，旋转180度转向相反方向。机器人每一个操作数据都会记录在yangmie的电脑上。某天醒来，yangmie发现这台弱智的机器人不见踪影 了，yangmie忙着泡妞，想请你帮忙找出机器人。 \n假设初始时机器人在一维坐标轴原点0的位置，面向着坐标轴的正方向。 \n\n#### Input\n输入只有一组数据。 \n第一行输入一个N (1 < N < 100)，表示yangmie电脑上按时间顺序记录了机器人N个操作。 \n接下来N行，每行输入一个整数s (s<0，表示机器人改变方向）\n#### Output\n\n输出只有一行，输出最后机器人所在的坐标值。\n#### Sample Input\n```\n4\n1\n2\n-1\n1\n```\n\n#### Sample Output\n```\n2\n```\n\nCategory:GDUT2012',1000,65536,'0',11,21,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1122','rating show','#### Description\n一些较大型的ACM赛事会用一种特别的形式去展示获奖情况，那就是把原本在比赛最后一个小时不再更新的排名榜的实际动态滚动再现。在这演示中，不时会看到有的队伍因在最后一小时里有所突破的排名一下子向上翻滚几十名的情形。 \n现假设有N支队进行比赛，排名在M1的队伍一下子向前进了L1名的情形发生了T1次（每次都有L1支队因此而排名下降）。在此之后，又见排在M2的队伍向前进了L2名的情形发生了T2次。问最终排名为R（R = 1为第一名）的队伍是什么。\n#### Input\n第一行输入一个整数，表示有T（1≤T≤150）组测试数据。 \n每组测试数据第一行为N和R（1≤R≤N≤10000），如上所述。 \n第二行输入M1、L1和T1，第三行输入M2、L2和T2，以空格分开。 \n1≤L1＜M1≤N, 1≤L2＜M2≤N, 0≤T1,T2≤100。 \n接下来有N行，每行输入一个队名，只包含英文字母，不含空格，最长15个字符，其次序即是封榜前的排名次序。 \n\n#### Output\n每行输出一个结果，即最终排名为R的队伍名。\n#### Sample Input\n```\n1\n9 1\n9 4 2\n5 4 1\nalgorithm\niostream\nstring\nGDUT\nnamespace\nstdlib\nfstream\nCodeSeed\nlist\n```\n\n#### Sample Output\n```\nCodeSeed\n```\n\nCategory:GDUT2012',1000,65536,'0',11,23,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1123','the tree of winter','#### Description\n\n如果你经常关注日向家的大小事情，那么你肯定会知道我们的冬树大人是非常喜欢超自然文化的。这一天，冬树大人和keroro一起出去露营，发现了一个遗迹，但是他们却找不到入口。好不容易他们发现了一块石碑，石碑上写了一个问题，解决了这个问题自然就会打开通向遗迹的门（所有悬疑片都是这么演的）。 \n \n经过翻译石碑上的古代文字，得到了题目的意思：给定一些只包含 ( ) ? 3种字符的序列，对于每个?必须使它变成(或者)，从而使得这个序列成为一个合法的括号序列。更麻烦的是，把每个?变成(和)所需要的代价是不一样的。冬树和keroro看着这个问题头都大了，所以他向你求救，希望以最小的代价来使得这段字符序列变成合法的括号序列。 \n一个合法的括号序列是指：对于任意的)，在此之前总有一个(与其对应，并且每个(和)的对应是唯一的。（不好描述，平时你的括号怎么写是对的就怎么合法。）例如：))(( 是不合法的，(()))也是不合法的，(()())是合法的。 \n#### Input\n第一行，即给定的序列。序列最多只有 ( ) ? 3种字符。字符串的长度不大于10^4。 \n接下来的x行，x表示第一行的序列中的?的个数。 \n每行有2个整数wi，qi，表示第i个 ? 变为 ( 和变为 ) 所需要花费的代价。0<=wi，qi<=1000。 \n\n#### Output\n输出只有一行，一个数，最小的代价。如果这个序列无法变成一个合法的括号序列，那么输出-1。\n#### Sample Input\n```\n(??)\n1 2\n2 8\n```\n\n#### Sample Output\n```\n4\n```\n\nCategory:GDUT2012',1000,65536,'0',11,24,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1124','escape','#### Description\n主人公仙石晃与同学们一起参加学校毕业旅行，但在回程的途中遭遇空难。主人公和同伴们被迫滞留在一个未知的小岛、蛮荒世界里。主人公和同伴们抱着种种疑问在这个弱肉强食、危机四伏的世界里挣扎求存。 \n为了简化问题，可以将整个小岛看成一个N * M的方格矩阵，每个方格里有一个整数，正数时表示主人公带领同伴离开该方格地型所需花费的时间（忽略进入方格所需时间），负数时表示该方格地型是障碍物，不可进入。很不幸，在其中一些方格里徘徊着一些凶猛上古猛兽，猛兽都拥有敏锐的臭觉，每个猛兽都有一个搜寻猎物能力值bi, 当有猎物出现其所在的方格地型里，猛兽就会穷追不舍，直到发现猎物，并瞬间吞杀所有猎物。初始时主人公与同伴在方格(1,1)里，只能往上下左右四个方向移动，如果途中移动到有猛兽的格子里，则会被这个猛兽追踪，在以后移动到的每个格子(包括该猛兽初始所在格子)里停留的时间不能超过K-sumB, K为一个整数常量，sumB为当前追踪主人公团队的所有猛兽的能力值总和。在方格(N,M)里有个安全的避难所，主人公要在最短的时间内带领同伴们安全抵达避难所,进入安全区域后不会受到攻击，并且避难所所在方格保证不为障碍物。 \n\n#### Input\n输入只有一组数据。 \n第一行输入两个整数N,M (0 < N, M < 100)。 \n接下来N行，每行有M个以空格分开的整数，每个整数的绝对值不超过1000。 \n接下来一行输入两个整数L, K（0 <= L <= 5， 0 <= K <= 1000)，L表示该小岛上猛兽的个数,K为题意所示的整数常量。 \n接下来L行，每行三个整数xi,yi,bi, (1<=xi<=N, 1<=yi<=M, 0<=bi<=1000)，(xi, yi)表示第i个猛兽初始时所在的方格为第xi行、yi列，bi表示第i个猛兽的搜寻猎物能力值。初始时保证同一个方格不会出现多于一个猛兽，并且猛兽在没有发现猎物之前会一直停留在这个方格里。 \n\n#### Output\n如果主人公仙石晃能安全抵达避难所，输出其到达避难所所用的最短时间。 \n否则，输出一行\"Oh~,poor boys and girls!\"，不包括双引号。 \n\n#### Sample Input\n```\n4 4\n7 9 8 1\n5 7 7 10\n8 -10 -7 5\n10 4 4 3\n2 8\n2 1 2\n3 4 1\n```\n\n#### Sample Output\n```\n40\n```\n\nCategory:GDUT2012',1000,65536,'0',11,25,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1125','area','#### Description\n莫斯科国立大学的数学系为了在面试中筛选出他们不想要的应试者（主要是犹太人），很多考官所出的一些题目描述简单有趣、解答过程极其巧妙而又出人意料的问题。这些问题极具杀伤力，民间戏称其为“棺材问题”(coffin problems)。这里出的就是其中一个“棺材问题”。 \n给定平面上的两条只有一个交点的相交直线。到这两条直线的距离之和为定值D的所有点将与直线共同围出一些封闭的区域，求这些封闭区域的面积。\n\n#### Input\n第一行给出测试数据组数T（1≤T≤100）。 \n每组测试数据的第一行输入以平面直角坐标给出两直线的交点坐标xo，yo； \n第二行输入点坐标x1，y1，表示以点(xo, yo)与点(x1, y1)确定其中一条直线； \n类似的，第三行输入点坐标x2，y2，以确定另一条直线。 \nxo, yo, x1, y1, x2, y2都是整数，-1000≤xo, yo, x1, y1, x2, y2≤1000，且保证这确定直线的三个点不重合，不共线。 \n最后一行输入定值D，D为整数且1≤D≤1000。\n\n#### Output\n每行输出一个所求区域的面积，保留两位小数。\n\n#### Sample Input\n```\n3\n0 0\n1 0\n0 1\n1\n\n1 -7\n-10 9\n10 -9\n2\n\n-9 1\n0 -8\n-8 2\n3\n```\n\n#### Sample Output\n```\n2.00\n11.74\n18.00\n```\n\nCategory:GDUT2012',1000,65536,'0',11,26,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1126','the simplest fraction','#### Description\n把在(0,1]间所有分母不大于N的最简分数列出来，并从小到大排列，给出序列中的一个最简分数，输出随后的L个在序列中的最简分数。\n\n#### Input\n第一行给出测试数据组数T（1≤T≤10）。 \n每组测试数据的第一行输入一个整数N，表示序列中出现的最大的分母； \n第二行输入序列中的一个最简分数，分子为A，分母为B，以空格分隔开； \n第三行输入一个整数L，表示要输出的序列中的最简分数的个数。 \n1≤A≤B≤2^31-1, 1≤N≤2^31-1，且A/B为最简分数；1≤L≤1000。 \n\n#### Output\n每组测试数据输出序列中最简分数A/B后随的L个最简分数，每行一个，保持序列原有的顺序。先输出分子，再输出分母，用空格分开。若最简分数超出(0,1]的范围，则不再继续输出。 \n最后输出一行字符串“End”再加一个空白行。 \n\n#### Sample Input\n```\n2\n2\n1 2\n1\n\n8\n1 8\n8\n```\n\n#### Sample Output\n```\n1 1\nEnd\n\n1 7\n1 6\n1 5\n1 4\n2 7\n1 3\n3 8\n2 5\nEnd\n\n```\n\nCategory:GDUT2012',1000,65536,'0',11,27,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1127','option course','#### Description\n你有n门课程可以选修，选修第i门课程需要先付相应的费用ci元。如果选修了某些编号连续的课程并都取得优异的成绩就获得一定的奖励，现在已知有m组奖励，请问采取最优的选课策略的最大收益是多少？ \n假设你很聪明，无论选修哪门课程都能取得优异成绩，你也可以不选修任何课程，这样你的收益是0。 \n\n#### Input\n输入的第一行是一个整数T，表示有T组数据。1 <= T <= 50 \n每组数据第一行输入一个整数n,第二行输入n个整数，表示选修第i门课程的花费ci \n第三行输入一个整数m，接下来有m行，表示m项奖励，每行输入三个整数 a, b, c， \n表示如果选修编号a到b之间（编号从1开始，包含a和b）的所有课程并取得优异成绩，就能获得奖励c元。 \n各项奖励互不影响，可以同时拿多项奖励。 \n1 <= n <= 100, 1 <= ci <= 10000, 1 <= m <= 100, 1 <= a <= b <= n, 1 <= c <= 10000 \n\n#### Output\n对于每组数据，输出一行，即最大收益。\n\n#### Sample Input\n```\n1\n3\n1 1 1\n2\n1 2 2\n2 3 2 \n```\n\n#### Sample Output\n```\n1\n```\n\nCategory:GDUT2012',1000,65536,'0',11,28,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1128','mine test','#### Description\n为了早日完成侵略蓝星的使命，Giroro最近新入手了一批地雷。为了测试地雷的可爆性（旁白：有这性质的？），Giroro在一些地方埋下了地雷，并让Tamama射出Tamama冲击波来引爆这些地雷。因为Tamama冲击波的威力是很大的，所以在距离Tamama冲击波距离不大于d的地雷都会爆炸。当一个地雷爆炸时，在这个地雷的爆炸范围内的地雷也会被引爆，而且地雷的爆炸半径各不相同。Giroro迫切想知道被引爆的地雷有多少个！一支大炮直接指向了Tamama…可怜的Tama仔只好找你解决这个问题了。 \nXxX_Stu帮忙把问题抽象成了计算机问题，描述如下：给点n个地雷的坐标，都为整数坐标，以及它们的爆炸半径。然后给定Tamama发射的纵坐标，以及d也是整数，默认Tamama站在世界的最左端面向世界的最右端水平向右发射冲击波，而且你可以认为Tamama冲击波是无限长的。 \n图示如下:\n[[Image:I.jpg|center]]\n\n#### Input\n数据有多组。读入直到文件结束。 \n对于每组数据：第1行，3个整数n，y，d。表示n个地雷，Tamama冲击波的纵坐标y，冲击波的波及范围d。接下来n行，每行3个整数xi，yi，ri。表示每个地雷的坐标和爆炸半径。0<=n<=200 ; 0<=y , d ,xi , yi , ri <=1000 . \n\n#### Output\n对于每组数据，输出一个整数。即地雷爆炸的个数。 \n\n#### Sample Input\n```\n1 1 2\n1 2 2\n2 1 1\n1 1 5\n1 3 1\n```\n\n#### Sample Output\n```\n1\n2\n```\n\nCategory:GDUT2012',1000,65536,'0',11,29,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1129','stay up','#### Description\n“从4月10日至22日，深圳急救中心共接到16单猝死病例，深圳市急救中心院前科科长徐粼表示，平均一天差不多就有1.5个非正常死亡案例，这段时间正好处于春夏交替，正是猝死病例的高发期。他提醒市民感冒一定要及时就医，切勿疯狂熬夜。” \nYangmie看到这则新闻后，为自己规定了每天的工作时间为8:00到22:00。 \nYangmie有一批预定要完成的任务，给出每件任务所需要花费的时间。Yangmie在某一天的8:00开始这些任务,任务不需要用连续时间完成，可以分段，可以不按顺序完成，只要累积足够所需花费时间即可。 \nYangmie会尽一切能力并且尽可能最早完成所有的任务，让你求出yangmie完成所有任务时的时间。 \n\n#### Input\n输入只有一组数据。 \n第一行输入一个整数n (0 < n < 100），表示有n个任务。 \n接下来n行，每一行输入两个整数h, m, (0 <= h<=100, 0<=m <60), 表示完成这个任务所需时间为h小时m分钟。 \n\n#### Output\n输出只有一行，输出Yangmie完成所有任务时的时间。使用24小时格式输出，输出格式为hh:mm，例如09:20，21:01等。\n\n#### Sample Input\n```\n6\n17 34\n10 29\n4 18\n18 22\n14 5\n5 1\n```\n\n#### Sample Output\n```\n21:49\n```\n\nCategory:GDUT2012',1000,65536,'0',11,30,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('113','Censorship','#### Description\nAs part of the new educational reform program, the CS department has decided to engage in censorship of\nschool texts. In this problem, you must help the department by writing a program which eliminates from\nan input text string all occurrences of strings from a set of words to be filtered.\n\nMore formally, a word w can be removed from another string s if w is a substring of s (i.e., the characters\nof w appear consecutively in s). Given a text string s and a set T of words to be filtered, return the\nlength of the shortest possible string that can result from iteratively removing words in T from s. Each word\nin T may be removed from s an unlimited number of times.\n\n#### Input\nThe input test file will contain multiple cases, with each case on a single line of input. Each test case begins\nwith a single integer n (where $$$1 \\leq n \\leq 50$$$) indicating the size of the set T followed by a text string s to be\nprocessed. Then, n strings $$$t_1 \\cdots t_n$$$ indicating the words of T follow. The text string and all of the filter\nwords are guaranteed to contain only the characters ‘a’ through ‘z’ and will have lengths between 1 and 50.\nAll filter words will be unique. Input is terminated by a single line containing the number 0; do not process\nthis line.\n\n#### Output\nFor each test case, print a single integer indicating the minimum length resulting string possible.\n\n#### Sample Input\n```\n1 ccdedefcde cde\n3 aabaab aa ba ab\n3 aabaab aa ba bb\n0\n```\n\n#### Sample Output\n```\n1\n0\n0\n```\n\n#### Hints\nPossible reductions giving the lengths shown for the three sample inputs are:\n+ $$$c\\underline{cde}defcde \\rightarrow \\underline{cde}fcde \\rightarrow f\\underline{cde} \\rightarrow f$$$\n+ $$$\\underline{aa}baab \\rightarrow \\underline{ba}ab \\rightarrow \\underline{ab} \\rightarrow \\epsilon$$$\n+ $$$\\underline{aa}baab \\rightarrow b\\underline{aa}b \\rightarrow \\underline{bb} \\rightarrow \\epsilon$$$\n+ where $$$\\epsilon \\,$$$ denotes the empty string.\n',10000,32768,'0',1,12,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1130','min','#### Description\n给出一个整数数组a1, a2, …, an，求数组中两个数的最小差值。即在数组中找 ai 和 aj ，使得 ai - aj 的值最小，并且 i < j 。\n\n#### Input\n输入的第一行是一个整数T，表示有T组数据。1 <= T <= 50 \n每组数据第一行输入一个整数n,第二行输入n个整数：a1,a2…,an \n1 <= T <= 50, 2 <= n <= 1000000, -1000000000 <= ai <= 1000000000 \n\n#### Output\n对于每组数据，输出一行，即最小差值。\n\n#### Sample Input\n```\n3\n2\n1 1\n3\n3 2 0\n4\n6 8 -4 10\n```\n\n#### Sample Output\n```\n0\n1\n-14\n```\n\nCategory:GDUT2012',1000,65536,'0',11,31,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1131','Minimal Tree','#### Description\nFor a tree, which nodes and edges are all weighted, the ratio of it is calculated according to the following equation.\n\n[[Image:mintree1.JPG|center]]\n\nGiven a complete graph of n nodes with all nodes and edges weighted, your task is to find a tree, which is a sub-graph of the original graph, with m nodes and whose ratio is the smallest among all the trees of m nodes in the graph.\n \n\n#### Input\nInput contains multiple test cases. The first line of each test case contains two integers n (2<=n<=15) and m (2<=m<=n), which stands for the number of nodes in the graph and the number of nodes in the minimal ratio tree. Two zeros end the input. The next line contains n numbers which stand for the weight of each node. The following n lines contain a diagonally symmetrical n×n connectivity matrix with each element shows the weight of the edge connecting one node with another. Of course, the diagonal will be all 0, since there is no edge connecting a node with itself.\n\n[[Image:mintree2.JPG|center]]\n\nAll the weights of both nodes and edges (except for the ones on the diagonal of the matrix) are integers and in the range of [1, 100].\n\nThe figure below illustrates the first test case in sample input. Node 1 and Node 3 form the minimal ratio tree. \n\n#### Output\nFor each test case output one line contains a sequence of the m nodes which constructs the minimal ratio tree. Nodes should be arranged in ascending order. If there are several such sequences, pick the one which has the smallest node number; if there\'s a tie, look at the second smallest node number, etc. Please note that the nodes are numbered from 1 .\n#### Sample Input\n```\n3 2\n30 20 10\n0 6 2\n6 0 3\n2 3 0\n2 2\n1 1\n0 2\n2 0\n0 0\n```\n\n#### Sample Output\n```\n1 3\n1 2\n```\n',1000,65536,'0',11,32,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1132','count','#### Description\n小I最近遇到一个难题,老师交给他很多单词(只有小写字母组成),现在老师要他统计出以某个字符串为后缀的单词数量\n#### Input\n输入数据的第一部分是一张单词表,每行一个单词,单词的长度不超过10,它们代表的是老师交给Ignatius统计的单词,一个空行代表单词表的结束.第二部分是一连串的提问,每行一个提问,每个提问都是一个字符串.\n\n注意:本题只有一组测试数据,处理到文件结束.\n#### Output\n对于每个提问,给出以该字符串为后缀的单词的数量.\n\n#### Sample Input\n```\nabcdef\nfegdef\nbeef\nabcf\naefckf\n\ndef\nef\ncf\ndd\n```\n\n#### Sample Output\n```\n2\n3\n1\n0\n```\n',3000,65536,'0',11,33,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1133','math','#### Description\n已知m,n,，并且有f(n)=a*f(n-1)+b*f(n-2),其中a是m的最大素因子，b是m的素因子个数，f(1)=1,f(0)=1。\n求f(n)%20122012\n\n#### Input\n第一行输入一个正整数t<=1000，表示有t组测试数据\n第二行输入两个正整数n<=100000000,m<=5000000\n\n#### Output\n对于每组测试数据，对应输出f(n)%20122012\n\n#### Sample Input\n```\n4\n0  100\n1  200\n2  10\n2  15\n```\n\n#### Sample Output\n```\n1\n1\n7\n7\n```\n',5000,65536,'0',11,34,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1134','the kth number','#### Description\n小d喜欢跟数字机玩数字游戏，数字机只有两种操作，一种是add操作，一个是ask操作，add s代表将s加到集合中，ask是求当前集合第k小元素（从小到大），小d就必须输出对应的元素，如果此元素不存在则输出error,一开始集合为空\n#### Input\n第一行输入一个正整数t<=10，表示有t组测试数据\n第二行输入两个数n,k,n代表有n个操作，k(k<=n)代表求每个ask要输出集中第k小的元素 n<=100000\n接下来n行对应n个操作。\n\n#### Output\n对于每个ask，输出对应结果\n\n#### Sample Input\n```\n1\n6 2\nadd 3\nask\nadd 5\nask\nadd 4\nask\n```\n\n#### Sample Output\n```\nerror\n5\n4\n```\n',1000,65536,'0',11,35,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1135','steal treasure','#### Description\n小m是小偷，一天他得到了一幅地下迷宫图，迷宫有很多房子， 房子里有宝藏，有些房子间有道路想通，但是这条路只有一个方向，而且如果你离开了一个房间后，就再也回不到这间房间来\n\n有些房子可以作为起点，有些可以作为终点，房间编号从1开始。\n\n小M只能选择从一个可作为起点的房间进入，然后经过途中可达的房间，把宝藏偷了，然后从一个可以作为终点的房间离开，他最多能偷到多少宝藏\n（数据保证不会出现环的情况）\n#### Input\n第一行： 我们会告诉你有M(1<M<=500)间房子\n第2——M+1行： 第一个数据为该房间里宝藏的价值，然后告诉你离开这间房子后可以达到的房子，数量在(0——M-1)，-1作为结束\n第M+2 行： 告诉你哪些房子可以作为入口，入口的数量在（1—M/2），-1 作为结束\n第M+3 行： 告诉你哪些房子可以作为出口，入口的数量在（1—M/2），-1 作为结束\n以EOF结束\n\n#### Output\n对于每组测试数据，输出对应偷到最多的宝藏量\n#### Sample Input\n```\n11\n6 4 -1\n4 5 -1\n5 6 -1\n1 7 -1\n1 8 -1\n2 9 -1\n9 10 -1\n7 11 -1\n4 11 -1\n2 -1\n4 -1\n1 2 3 -1\n10 11 -1\n\n\n19\n4 4 5 -1\n1 6 7 8 19 -1\n3 10 9 -1\n9 11 12 -1\n8 13 14 -1\n6 11 12 -1\n7 13 14 -1\n8 15 16 -1\n4 13 14 -1\n7 15 16 -1\n5 17 -1\n6 18 -1\n8 17 -1\n6 18 -1\n6 17 -1\n5 18 -1\n7 -1\n3 -1\n1 9 10 -1\n1 2 3 -1\n17 18 -1\n```\n\n#### Sample Output\n```\n18\n27\n```\n',1000,65536,'0',11,36,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1136','rating board','#### Description\n自从小L开发了Rating系统，他的Tetris事业更是如虎添翼，不久他遍把这个游戏推向了全球。\n\n为了更好的符合那些爱好者的喜好，小L又想了一个新点子：他将制作一个全球小T高手排行榜，定时更新，名堂要比福布斯富豪榜还响。关于如何排名，这个不用说都知道是根据Rating从高到低来排，如果两个人具有相同的Rating，那就按这几个人的RP从高到低来排。\n\n终于，小L要开始行动了，对N个人进行排名。为了方便起见，每个人都已经被编号，分别从0到N-1, \n同时小L从狗仔队里取得一些（M个）关于Rating的信息。这些信息可能有二种情况，分别是\"A > B\",\"A < B\"，分别表示A的Rating高于B,,小于B。\n\n现在Lele并不是让你来帮他制作这个高手榜，他只是想知道，根据这些信息是否能够完整确定出这个高手榜，是的话就输出\"YES\"，如果冲突则输出\"NO\",如果无法完整确定但又不冲突则就输出所有可能是第一名的人的编号,按递增的顺序\n\n#### Input\n本题目包含多组测试，请处理到文件结束。\n每组测试第一行包含两个整数N,M(0<=N<=10000,0<=M<=20000),分别表示要排名的人数以及得到的关系数。\n接下来有M行，分别表示这些关系\n\n#### Output\n对于每组测试，在一行里按题目要求输出\n\n#### Sample Input\n```\n3 3\n0 > 1\n1 < 2\n0 > 2\n4 3\n1 > 3\n2 > 0\n0 > 1\n3 3\n1 > 0\n1 > 2\n2 > 1\n4 2\n1 > 3\n0 > 2\n```\n\n#### Sample Output\n```\nYES\nYES\nNO\n0 1\n```\n',1000,65536,'0',11,37,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1137','Cow Beauty Pageant','#### Description\nHearing that the latest fashion trend was cows with two spots on their\nhides, Farmer John has purchased an entire herd of two-spot cows. \nUnfortunately, fashion trends tend to change quickly, and the most popular\ncurrent fashion is cows with only one spot!  \n\nFJ wants to make his herd more fashionable by painting each of his cows in\nsuch a way that merges their two spots into one.  The hide of a cow is\nrepresented by an N by M (1 <= N,M <= 50) grid of characters like this:\n\n................<br>\n..XXXX....XXX...<br>\n...XXXX....XX...<br>\n.XXXX......XXX..<br>\n........XXXXX...<br>\n.........XXX....<br>\n\nHere, each \'X\' denotes part of a spot.  Two \'X\'s belong to the same spot if\nthey are vertically or horizontally adjacent (diagonally adjacent does not\ncount), so the figure above has exactly two spots.  All of the cows in FJ\'s\nherd have exactly two spots.\n\nFJ wants to use as little paint as possible to merge the two spots into\none.  In the example above, he can do this by painting only three\nadditional characters with \'X\'s (the new characters are marked with \'*\'s\nbelow to make them easier to see).\n\n................<br>\n..XXXX....XXX...<br>\n...XXXX*...XX...<br>\n.XXXX..**..XXX..<br>\n........XXXXX...<br>\n.........XXX....<br>\n\nPlease help FJ determine the minimum number of new \'X\'s he must paint in\norder to merge two spots into one large spot.\n\n#### Input\n\n+  Line 1: Two space-separated integers, N and M.\n\n+  Lines 2..1+N: Each line contains a length-M string of \'X\'s and \'.\'s\n        specifying one row of the cow hide pattern.\n#### Output\n+  Line 1: The minimum number of new \'X\'s that must be added to the\n        input pattern in order to obtain one single spot.\n#### Sample Input\n```\n6 16\n................\n..XXXX....XXX...\n...XXXX....XX...\n.XXXX......XXX..\n........XXXXX...\n.........XXX....\n```\n\n#### Sample Output\n```\n3\n```\n',1000,65536,'0',11,38,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1138','Contest Timing','#### Description\nBessie the cow is getting bored of the milk production industry, and wants \nto switch to an exciting new career in computing.  To improve her coding\nskills, she decides to compete in the on-line USACO competitions.  Since\nshe notes that the contest starts on November 11, 2011 (11/11/11), she\ndecides for fun to download the problems and begin coding at exactly 11:11\nAM on 11/11/11.\n\nUnfortunately, Bessie\'s time management ability is quite poor, so she wants\nto write a quick program to help her make sure she does not take longer\nthan the 3 hour (180 minute) time limit for the contest.  Given the date\nand time she stops working, please help Bessie compute the total number of\nminutes she will have spent on the contest.\n#### Input\n+  Line 1: This line contains 3 space-separated integers, D H M,specifying the date and time at which Bessie ends the contest.D will be an integer in the range 11..14 telling the day ofthe month; H and M are hours and minutes on a 24-hour clock(so they range from H=0,M=0 at midnight up through H=23,M=59at 11:59 PM).\n\n#### Output\n+  Line 1: The total number of minutes spent by Bessie in the contest,or -1 if her ending time is earlier than her starting time.\n\n#### Sample Input\n```\n12 13 14\n```\n\n#### Sample Output\n```\n1563\n```\n',1000,65536,'0',11,39,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1139','Awkward Digits','#### Description\nBessie the cow is just learning how to convert numbers between different\nbases, but she keeps making errors since she cannot easily hold a pen\nbetween her two front hooves.  \n\nWhenever Bessie converts a number to a new base and writes down the result,\nshe always writes one of the digits wrong.  For example, if she converts\nthe number 14 into binary (i.e., base 2), the correct result should be\n\"1110\", but she might instead write down \"0110\" or \"1111\".  Bessie never\naccidentally adds or deletes digits, so she might write down a number with\na leading digit of \"0\" if this is the digit she gets wrong.\n\nGiven Bessie\'s output when converting a number N into base 2 and base 3,\nplease determine the correct original value of N (in base 10). You can\nassume N is at most 1 billion, and that there is a unique solution for N.\n\nPlease feel welcome to consult any on-line reference you wish regarding\nbase-2 and base-3 numbers, if these concepts are new to you.\n#### Input\n+  Line 1: The base-2 representation of N, with one digit written incorrectly.\n\n+  Line 2: The base-3 representation of N, with one digit written incorrectly.\n#### Output\n+  Line 1: The correct value of N.\n#### Sample Input\n```\n1010\n212\n```\n\n#### Sample Output\n```\n14\n```\n',1000,65536,'0',11,40,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('114','Change','#### Description\nSue is waiting in line at the grocery store. Being in a hurry, she wants to pay with exact change when she\ngets to the front of the line. However, she does not know how much her items are going to cost; instead, she\nonly knows an upper bound C on their total cost. Given a list of the various coins Sue has in her pocket,\nyour goal is to determine the minimum number of coins she must take out in order to ensure that she can\nmake exact change for every amount from 1 to C.\n\n#### Input\nThe input test file will contain multiple cases. Each test case begins with a single line containing two integers\nC (where $$$1 \\leq C \\leq 1,000,000,000$$$) and $$$m\\,$$$ (where $$$1 \\leq m \\leq 1,000$$$), where C is the maximum amount for which\nSue must be able to make change, and m is the number of unique coin denominations Sue has in her pocket.\nThe next m lines each contain two numbers, vi (where $$$1 \\leq v_i \\leq 1000$$$) and $$$n_i \\,$$$ (where $$$1 \\leq n_i \\leq 1,000$$$), where\n$$$v_i \\,$$$ is the value of the ith coin denomination, and $$$n_i \\,$$$ is the number of coins of that denomination that Sue\nhas in her pocket. Input is terminated by a single line containing the number 0; do not process this line.\n\n#### Output\nFor each test case, either print a single line containing the number of coins Sue must use in order to make\nexact change for all amounts up to C, or print “Not possible” if exact change cannot always be made with\nany combination of coins in Sue\'s pocket.\n\n#### Sample Input\n```\n4 2\n2 1\n1 3\n9 3\n1 5\n8 2\n7 1\n0\n```\n\n#### Sample Output\n```\n3\nNot possible\n```',10000,32768,'0',1,13,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1140','Cow Lineup','#### Description\nFarmer John has hired a professional photographer to take a picture of some\nof his cows.  Since FJ\'s cows represent a variety of different breeds, he\nwould like the photo to contain at least one cow from each distinct breed\npresent in his herd.\n\nFJ\'s N cows are all standing at various positions along a line, each\ndescribed by an integer position (i.e., its x coordinate) as well as an\ninteger breed ID.  FJ plans to take a photograph of a contiguous range of\ncows along the line.  The cost of this photograph is equal its size -- that\nis, the difference between the maximum and minimum x coordinates of the\ncows in the range of the photograph.  \n\nPlease help FJ by computing the minimum cost of a photograph in which there\nis at least one cow of each distinct breed appearing in FJ\'s herd.\n#### Input\n+  Line 1: The number of cows, N (1 <= N <= 50,000).\n+  Lines 2..1+N: Each line contains two space-separated positive integers specifying the x coordinate and breed ID of a single cow.  Both numbers are at most 1 billion.\n#### Output\n+  Line 1: The smallest cost of a photograph containing each distinct breed ID.\n#### Sample Input\n```\n6\n25 7\n26 1\n15 1\n22 3\n20 1\n30 1\n```\n\n#### Sample Output\n```\n4\n```\n',1000,65536,'0',11,41,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1141','Moo Sick','#### Description\nEveryone knows that cows love to listen to all forms of music.  Almost all\nforms, that is -- the great cow composer Wolfgang Amadeus Moozart\nonce discovered that a specific chord tends to make cows rather ill.  This\nchord, known as the ruminant seventh chord, is therefore typically avoided\nin all cow musical compositions.\n\nFarmer John, not knowing the finer points of cow musical history, decides\nto play his favorite song over the loudspeakers in the barn.  Your task is\nto identify all the ruminant seventh chords in this song, to estimate how\nsick it will make the cows.\n\nThe song played by FJ is a series of N (1 <= N <= 20,000) notes, each an\ninteger in the range 1..88.  A ruminant seventh chord is specified by a\nsequence of C (1 <= C <= 10) distinct notes, also integers in the range\n1..88.  However, even if these notes are transposed (increased or decreased\nby a common amount), or re-ordered, the chord remains a ruminant seventh\nchord!  For example, if \"4 6 7\" is a ruminant seventh chord, then \"3 5 6\"\n(transposed by -1), \"6 8 9\" (transposed by +2), \"6 4 7\" (re-ordered), and\n\"5 3 6\" (transposed and re-ordered) are also ruminant seventh chords.\n\nA ruminant seventh chord is a sequence of C consecutive notes satisfying\nthe above criteria. It is therefore uniquely determined by its starting\nlocation in the song. Please determine the indices of the starting\nlocations of all of the ruminant seventh chords.\n#### Input\n+  Line 1: A single integer: N.\n+  Lines 2..1+N: The N notes in FJ\'s song, one note per line.\n+  Line 2+N: A single integer: C.\n+  Lines 3+N..2+N+C: The C notes in an example of a ruminant seventh chord.  All transpositions and/or re-orderings of these notes are also ruminant seventh chords.\n#### Output\n+  Line 1: A count, K, of the number of ruminant seventh chords that appear in FJ\'s song.  Observe that different instances of ruminant seventh chords can overlap each-other.\n+  Lines 2..1+K: Each line specifies the starting index of a ruminant seventh chord (index 1 is the first note in FJ\'s song, index N is the last).  Indices should be listed in increasing sorted order.\n#### Sample Input\n```\n6\n1\n8\n5\n7\n9\n10\n3\n4\n6\n7\n```\n\n#### Sample Output\n```\n2\n2\n4\n```\n',1000,65536,'0',11,42,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1142','Tile Exchanging','#### Description\nFarmer John wants to remodel the floor of his barn using a collection of\nsquare tiles he recently purchased from the local square mart store (which\nof course, only sells square objects).  Unfortunately, he didn\'t measure\nthe size of the barn properly before making his purchase, so now he needs\nto exchange some of his tiles for new square tiles of different sizes.\n\nThe N square tiles previously purchased by FJ have side lengths A_1...A_N.\nHe would like to exchange some of these with new square tiles so that the\ntotal sum of the areas of the his tiles is exactly M.  Square mart is\ncurrently offering a special deal: a tile of side length A_i can be\nexchanged for a new tile of side length B_i for a cost of \n|A_i-B_i|*|A_i-B_i| units. However, this deal only applies to\npreviously-purchased tiles -- FJ is not allowed to exchange a tile that he\nhas already obtained via exchanging some other tile (i.e., a size-3 tile\ncannot be exchanged for a size-2 tile, which is then exchanged for a size-1\ntile). \n\nPlease determine the minimum amount of money required to exchange tiles so\nthat the sum of the areas of the tiles becomes M.  Output -1 if it is\nimpossible to obtain an area of M.\n#### Input\n+  Line 1: Two space-separated integers, N (1<=N<=10) and M (1<=M<=10,000).\n+  Lines 2..1+N: Each line contains one of the integers A_1 through A_N, describing the side length of an input square (1<=A_i<=100).\n#### Output\n+  Line 1: The minimum cost of exchanging tiles to obtain M units of total area, or -1 if this is impossible.\n#### Sample Input\n```\n3 6\n3\n3\n1\n```\n\n#### Sample Output\n```\n5\n```\n',1000,65536,'0',11,43,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1143','Cow Beauty Pageant again','#### Description\nHearing that the latest fashion trend was cows with three spots on their\nhides, Farmer John has purchased an entire herd of three-spot cows. \nUnfortunately, fashion trends tend to change quickly, and the most popular\ncurrent fashion is cows with only one spot!  \n\nFJ wants to make his herd more fashionable by painting each of his cows in\nsuch a way that merges their three spots into one.  The hide of a cow is\nrepresented by an N by M grid of characters like this:\n\n................<br>\n..XXXX....XXX...<br>\n...XXXX....XX...<br>\n.XXXX......XXX..<br>\n........XXXXX...<br>\n..XXX....XXX....<br>\n\nHere, each \'X\' denotes part of a spot.  Two \'X\'s belong to the same spot if\nthey are vertically or horizontally adjacent (diagonally adjacent does not\ncount), so the figure above has exactly three spots.  All of the cows in\nFJ\'s herd have exactly three spots.\n\nFJ wants to use as little paint as possible to merge the three spots into\none.  In the example above, he can do this by painting only four\nadditional characters with \'X\'s (the new characters are marked with \'*\'s\nbelow to make them easier to see).\n\n................<br>\n..XXXX....XXX...<br>\n...XXXX*...XX...<br>\n.XXXX..**..XXX..<br>\n...*....XXXXX...<br>\n..XXX....XXX....<br>\n\nPlease help FJ determine the minimum number of new \'X\'s he must paint in\norder to merge three spots into one large spot.\n\n#### Input\n+  Line 1: Two space-separated integers, N and M (1 <= N,M <= 50).\n+  Lines 2..1+N: Each line contains a length-M string of \'X\'s and \'.\' specifying one row of the cow hide pattern.\n#### Output\n+  Line 1: The minimum number of new \'X\'s that must be added to the input pattern in order to obtain one single spot.\n#### Sample Input\n```\n6 16\n................\n..XXXX....XXX...\n...XXXX....XX...\n.XXXX......XXX..\n........XXXXX...\n..XXX....XXX....\n```\n\n#### Sample Output\n```\n4\n```\n',1000,65536,'0',11,44,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1144','get the water','#### Description\n00 has many buckets, and he numbered them from 1 to n. One day 00 was bored, so he came out something interesting to do with the buckets. He used buckets to make some operations, just as follow.\n\n1. “add i X”: add X milliliter(S) water to the i-th buckets\n\n2. “add i j X”: add X milliliter(S) water the i-th to j-th buckets each\n\nAnd he has two ways to get water at anytime, and every time he will take out all the water from the bucket\n\n1. “get i”: get water in i-th bucket, and he want to know how much water he can get\n\n2. “get i X”: get water start from i-th bucket to n, until the water is not less than X milliliter(S), and 00 want to know how many buckets he should get water from them at least, if can’t get X milliliter(S), he want to how much water he can get at most.\n\nEvery time he finished to get water, and do the question, he put water back into the buckets where the water taken from. Firstly, all of buckets are empty.\n\n#### Input\nThe first line of input contains T (1<=T<=500), the number of test cases.\n\nThe first line of input contains N and C(1<=N,C<=100000), the number of buckets they has and the number of commands. Then there will follow C line. In each line, there is a command. All of the command happened in time order.\n\nIt may be \"add i X\" or \"add i j X\" or \"get i\" or \"get i X\". (1<=i, j<=N , 0<=X<=1000)\n\n#### Output\nFor each “get” operations, you should answer the question, and print the answer in one line.\n\n#### Sample Input\n```\n1\n5 5\nadd 3 2\nget 1 5\nadd 1 4 2\nget 3\nget 2 4\n```\n\n#### Sample Output\n```\n2\n4\n2\n```\n#### Hint\n\nFor “get 1 5”, he just can get 2 milliliter water from 3-th bucket.\n\nFor “get 3”, he can get 4 milliliter from 3-th bucket.\n\nFor “get 2 4”, he can get 2+4=6>4 milliliter water from 2-th and 3-th bucket, so he get water from two bucket.\n',60000,65536,'0',11,45,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1145','Another sort','#### Description\n00 defined many new descending orders of the lower case letters, just like this: \nq>w>e>r>t>y>u>i>o>p>a>s>d>f>g>h>j>k>l>z>x>c>v>b>n>m; \nThen he wants to sort the lowercase letters sequence in this order. \nFor example, we use the order defined above to sort this sequence,   \n\"abcdefghijklmnopqrstuvwxyz\"; \nIts result is \n\"qwertyuiopasdfghjklzxcvbnm\". \n\n#### Input\nThe first line of input contains T (1<=T<=100), the number of test cases. \nThere are two lines for each test case. The first line is the defined order of the 26 \nlower case letters in descending order. \nIn the second line, there are a sequence, contains N(1<=N<=1000000) lowercase \nletters only, which is require to sore. \n#### Output\nFor each test case, print the result on one line. \n#### Sample Input\n```\n2 \nabcdefghijklmnopqrstuvwxyz\nnba\nqwertyuiopasdfghjklzxcvbnm\nabcdefghijklmnopqrstuvwxyz\n```\n\n#### Sample Output\n```\nabn\nqwertyuiopasdfghjklzxcvbnm\n```\n\n',1000,65536,'0',11,46,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1146','Bitwise OR','#### Description\nYesterday,  teacher  taught  00  about  bit  operators:  bitwise  or  (|).  00  generated  a \nnon-negative integers sequence A[N], and wrote a program to calculate the matrix table \nb[N][N] using the or operator. The key function is the code showed below. \nfor(int i=1; i<=n; i++) \n      for(int j=1; j<=n; j++) \n            B[i][j] = A[i] | A[j]; \n00 thought his achievement would get teacher\'s attention. As he thought, his teacher \nraised lots of interests in his work and was surprised to his talented programming skills. \nAfter  deeply  thinking,  he  came  up  with  another  problem:  if  we  have  the  matrix  table \nb[N][N] at first, can you calculate out the table A[N]? \n#### Input\nThe first line of input contains T (1<=T<=500), the number of test cases. \nFor each test case, the first line contains one integer N (1<=N<=200), indicates the \norder of the square matrix. The next N line is the matrix B and each line exactly has N \ninteger, the jth integer in ith line indicating the element b[i][j] of matrix, and b[i][j] = \nb[j][i]. (0 <= b[i][j] <= 2^31 - 1) \n#### Output\nFor each test case, print n non-negative integers a1,a2……an  separated by space in \none line. \nIt is guaranteed that there is a sequence satisfies the problem conditions. If there are \nmultiple such sequences, you are allowed to print any of them. \n#### Sample Input\n```\n2\n2\n1 1\n1 1\n3\n0 0 0\n0 0 0\n0 0 0\n```\n\n#### Sample Output\n```\n1 1\n0 0 0\n```\n',1000,65536,'0',11,47,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1147','Calculationg the least operation','#### Description\n00 has learned many algorithms about sorting, such as bubble sort, quick sort and so \non. One day, he came up with an interesting method to sort a sequence. \nHe  calls  the  method  “reversal  sort”.  As  the  name  shows,  it  is  sorted  by  reverse \noperation.  A  reverse  operation  can  be  described  by  two  indexes  (i,  j),  1<=i<=j<=n, \nindicating that it reverts the order of the sequence within indexes from i to j, if it is applied \nin the sequence   \na1, a2,  „„, ai-1, ai, ai+1,  „„, aj-1, aj, aj+1,  „„an, \nWe can obtain the sequence \na1, a2,  „„, ai-1, aj, aj-1,  „„, ai+1, ai, aj+1,  „„,an.   \nBut in the reversal sort, j always equals n, that is said, we only reverts the order of the \nsequence within indexes from i to n(1<=i<=n).   \n00 wants to calculate the least number of reversal operations to make the sequence \nascending. \n#### Input\nThe first line of input contains T (1<=T<=500), the number of test cases. \nFor each test case, the first line contains a single integer n (1<=n<10), the next lines \ncontain n non-negative integers, which are different from each others. \n#### Output\nFor each test case, output the result in one line. \n#### Sample Input\n```\n2\n4\n1 2 3 4\n5\n5 4 3 2 1\n```\n\n#### Sample Output\n```\n0\n1\n```\n',3000,65536,'0',11,48,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1148','Determine a Spiral123 matrix','#### Description\n00 knows a new kind of square matrix spiral123, which has the following properties: \n•  its elements are from the {0, 1, 2, 3} set; \n•  each row and column contains each of the values 1, 2 and 3, exactly once and all \nthe other values are 0; \n•  starting from the upper-left corner going right, moving in spiral, show as followed, \nthe non-zero values will appear in the following order 1, 2, 3, 1, 2, 3, ... , 1, 2, 3. \n             \n[[Image:L45(1).jpg|left]][[Image:L45_1.jpg|center]]\n\n \n\n\nFor example a 5x5 spiral123 matrix is the above. Now 00 gives you a square matrix, \nplease determine whether it is a spiral123.\n\n#### Input\nThe first line of input contains T (1<=T<=500), the number of test cases. \nFor each test case the first number is n (1<=n<=200), indicates the size of the input \nmatrix. The next N line is the matrix and each line exactly has N integer. Every integer in \nthe matrix is non-negative. \n#### Output\nFor each test case, print “YES”, if it is spiral123 matrix, otherwise print “NO” in a line. \n#### Sample Input\n```\n1 \n5 \n0 1 0 2 3\n0 2 3 0 1\n1 3 0 0 2\n3 0 2 1 0\n2 0 1 3 0\n```\n\n#### Sample Output\n```\nYES\n```\n',1000,65536,'0',11,49,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1149','Equation','#### Description\n00 is a clever boy, and he is good at solving equations. But now he was confused by \nthis question. \nThere are n variables in this equation, each variable has a constraint. \nThe equation is like this: \nA1*X1 + A2*X2 + ... + An-1*Xn-1 + An*Xn = K, \nA1…An are positive integer and K is an integer. And for each variable, its constraint is \nXi >= Di, Di is an integer. \nThe question is there are how many integer solutions of this equation.\n\n#### Input\nThe first line of input contains T (1<=T<=100), the number of test cases. \nThere are two lines in each test case. In the first line, there are two integers n(1 <= n \n<= 100) and K(-1000 <= K <= 1000). \nIn the second line, there are n integers, 1<=A1,A2...An, Ai<=10. \nIn the third line, there are n integers, D1,D2...Dn, -10<=Di<=10. For i-th integer, that \nmeans Xi >= Di. \n#### Output\nFor each test case, print the result MOD 20121221 on one line.\n\n#### Sample Input\n```\n2\n1 0\n2\n-4\n2 2\n1 1\n0 1\n```\n\n#### Sample Output\n```\n1\n2\n```\n',3000,65536,'0',11,50,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('115','Awards','#### Description\nIn the Oscar, we always say that the Best Picture is the most important award of all the awards. Before the Oscar Night, we can\'t tell which film will win the Best Picture. Fortunately, we can dope it out from the Nominee List of all the awards other than the Best Picture. I suggest that you should follow my 3 rules here.\n+ All the films in the list have chances to win the Best Picture\n+ The film which will win the Best Picture is the film which has been nominated the most times in the list\n+ If there are more than one film which have been nominated the most times in the list, we will choose the first one which appears in the list\n\nLets\' see such a list below.\n+ VISUAL EFFECTS\n  - THE LORD OF THE RINGS: THE TWO TOWERS\n  - SPIDER-MAN\n  - STAR WARS EPISODE II ATTACK OF THE CLONES\n+ SOUND EDITING\n  - THE LORD OF THE RINGS: THE TWO TOWERS\n  - MINORITY REPORT\n  - ROAD TO PERDITION\n\nForm the list, we can find that \'\'\'THE LORD OF THE RINGS: THE TWO TOWERS\'\'\' has been nominated twice. And each of the other films has been nominated only once. so we can say that \'\'\'THE LORD OF THE RINGS: THE TWO TOWERS\'\'\' will win the Best Picture.\n\nYour task is to write a program to figure out the anticipatory winner from the list.\n\n#### Input\nThe input file will consist of several lists. The first line of each list contains only one integer $$$n(1 \\leq n \\leq 100)$$$, representing the number of awards in the list. Then you get n blocks. Each block indicated the nominees of a distinct award. The first line of each block is the name of the award which is not longer than 80. The second line is $$$m_i(1 \\leq m_i \\leq 10, 1 \\leq i \\leq n)$$$ - the number of nominated films. In the following lines are $$$m_i$$$ film names, one per line. For make the question simple, you can assume that there isn\'t any space in the film names.\n\nThe input is terminated by a line with one zero.\n\n#### Output\nFor each list, you are supposed to figure out the winner of the Best Picture in a single line.\n\n#### Sample Input\n```\n2\nVISUAL_EFFECTS\n3\nTHE_LORD_OF_THE_RINGS:_THE_TWO_TOWERS\nSPIDER-MAN\nSTAR_WARS_EPISODE_II_ATTACK_OF_THE_CLONES\nSOUND_EDITING\n3\nTHE_LORD_OF_THE_RINGS:_THE_TWO_TOWERS\nMINORITY_REPORT\nROAD_TO_PERDITION\n0\n```\n\n#### Sample Output\n```\nTHE_LORD_OF_THE_RINGS:_THE_TWO_TOWERS\n```',10000,32768,'0',1,14,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1150','Function','#### Description\nThis is a function, as what is shown below. It is easy to understand it, isn\'t it? \n```\nint f(int x, int y) { \n      if (x == 0) { \n            return y + 1; \n      } else if (x > 0 && y == 0) { \n            return f(y, x); \n      } else if (x > 0 && y > 0) { \n            return f(x - 1, f(x - 1, y - 1)); \n      } \n      return 0; \n}\n</pre> \n\nNow 00 gives you the x and y, you should tell he the answer.\n\n#### Input\nThe first line of input contains T (1<=T<=100), the number of test cases. \nFor each test case, there are two integers x and y(0<=x, y<=1000,000) in one line. \n#### Output\nFor each test case, print the result on one line. \n#### Sample Input\n```\n2\n0 0\n1 0\n```\n\n#### Sample Output\n```\n1\n2\n```',1000,65536,'0',11,51,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1151','Homework','#### Description\nWhen 00 finished the game and came back to school, he found there is much homework in the blackboard, and the deadlines was coming, so he must finish them as soon as possible.\n\nAssume that 00 has n (0<n<=20) homework, and the i-th homework should take 00 ti minutes (1<=i<=n) to finish. Because of the relation of some homework, some homework may take less time on it. For example, the j-th homework is associated with the i-th homework, and after 00 finish the i-th homework, he continue to do the j-th homework, it will only take 00 tj\'(0<tj\'<tj) minutes to finish the j-th homework.\n\n00 wants to finish as soon as possible, so he wants you to help him arrange the order of doing homework.\n\n#### Input\nThe first line of input contains T (1<=T<=500), the number of test cases.\n\nFor each test case, the first line contains a single integer n (1<=n<=16), the number of homework, the next line contains n positive, t1, t2, ……, tn(1<ti<=200).  \n\nThe third line contains an integer m, the following contain m lines. Each line contains three integer A, B and C, denote the B-th homework take 00 C(0<C<tB) minutes to do if after he just finished the A-th homework, he continue to do the B-th homework.\n\n#### Output\nFor each test case, output in one line the minimum number of minutes to finish all the homework.\n#### Sample Input\n```\n2\n1 \n2\n0\n2 \n5 6\n1\n1 2 2\n```\n\n#### Sample Output\n```\n2\n7\n```\n',120000,65536,'0',11,52,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1152','rating','#### Description\nGoddess SHEN recently fell in love with a game. When the game is over, it just shows the final score without the ranking. This makes SHEN unhappy.  \nSHEN wants to know her every score ranking in the rankings, for which she recorded the score of each game. So she can calculate the score ranked according to the score of each game, and can know how many times the score is greater than or equal to the score, and know the score of the other rankings.\n\n00 as one of the friends of the SHEN, he wants to help her solve this problem, but he doesn\'t know how to do, so please help him solve this problem.\n\n#### Input\nThe first line of input is a positive integer t (t <= 10), the number of test cases.\nThe first line of each test case, there is a positive integer N (N <100000), the number of operations.\nNext, there are N rows following, each of two integers A and B (1 <= A <= 3, 0 <= b <2 ^ 31).\nWhen A = 1, B is a score of the game, stored the score into the rankings and output the score ranking. (We guarantee the score of each race are different.)\nWhen A = 2, output how many score is greater than or equal to B so far.\nWhen A = 3, output the score of rank B so far. (We guarantee that exists.)\n\n#### Output\nFor each operation, you should print the answer in one line.\n#### Sample Input\n```\n1\n5\n1 1000\n1 500\n2 750\n1 800\n3 2\n```\n\n#### Sample Output\n```\n1\n2\n1\n2\n800\n```\n',5000,65536,'0',11,53,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1153','calculating the magical value','#### Description\nEach number is very magical and has a magical value. The magic value is the average of prime numbers.\n\nThe average of prime numbers is the sum of all the prime factors of the number divided by the number of the prime factors.\n\nIf a number hasn\'t a prime factor, its magic value is 0.	\n\nGive a positive integer n, calculated its magical value.\n\n00 doesn\'t know how to calculate, so please help him solve this problem.\n\n#### Input\nThe first line of input contains T (1<=T<=1000000), the number of test cases.\nFor each test case, only one line with one positive integer n (n <= 1000000)\n\n#### Output\nFor each test case, Output the magical value of the positive integer n in one line,   rounded up to two fractional digits.\n\n#### Sample Input\n```\n3\n1\n2\n6\n```\n\n#### Sample Output\n```\n0\n2.00\n2.50\n```\n',3000,65536,'0',11,54,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1154','getting the min','#### Description\nThis is a very simple problem; we believe all competitors are able to solve it. Good luck.\nHere is the problem. Here is an inequality:\n1 + 2 + ...... + n >= m (n, m are positive integers)\nNow, give you the value of m, you should find the minimum value of n.\n\n#### Input\nThe first line of input contains T (1<=T<=10000), the number of test cases.\nFor each test case, there are one integer m (0<m<=10000) in one line.\n\n#### Output\nFor each test case, print the result on one line.\n#### Sample Input\n```\n2\n55\n5\n```\n\n#### Sample Output\n```\n10\n3\n```\n',1000,65536,'0',11,55,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1155','working out the probability','#### Description\n00 likes a goddess SHEN for a long time, he wants to make friend with the goddess. When the value of 00\'courage reaches 100, he dared to tell goddess, \"Would you like to make friends with me?”, but now the value of 00\'courage is 0.\n\nThe value of 00\'courage will become 100, when he win m times in playing n rock-scissor-paper games with his good friend HOPPEN.\n\nPlease work out the probability of 00 said, \"Would you like to make friends with me?\" to the goddess Shen.\n\n#### Input\nThe first line of input contains T (1<=T<=100), the number of test cases.\nFor each test case, only one line with two integer n, m (0<n <= 10,0<=m<=n)\n\n#### Output\nFor each test case, the output corresponding to the answer * 2013 in one line, the result rounded up to four fractional digits.\n#### Sample Input\n```\n2\n1 1\n2 1\n```\n\n#### Sample Output\n```\n1006.5000\n1006.5000\n```\n',1000,65536,'0',11,56,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1156','the love to Shen','#### Description\n00 finally decided to express his love to Shen at a full moon night, with the right place, right time. Actually, Shen likes 00 too. It cannot be so easy to receive his love for her as she is the goddess. Only when he solves the following problem can she accept it.\n\nFor a given interval [X, Y], determined the number of integers satisfies the following conditions: the number is exactly equal to the sum of 3\'s n different integer power.\n\nI.e. the number of all positive integers that satisfy the following conditions:\n\nX <= Z <= Y\n\nZ = 3 ^ k1 +3 ^ k2 + ... +3 ^ kn \n\n(Where k1, k2 ... kn are integers and different from each other)\n\nFor example, when X = 5, Y = 30, n = 2, there are only the following four numbers satisfying the question:\n\n10 = 1 + 9\n\n12 = 3 + 9\n\n28 = 1 + 27\n\n30 = 3 + 27\n\n#### Input\nThe first line of input contains T (1<=T<=1000000), the number of test cases.\nFor each test case, there is only one line with three integers X, Y, and n (1 <=X <= Y < 2 ^ 31,1 <= n <= 20).\n\n#### Output\nFor each test case, print the result in one line.\n\n#### Sample Input\n```\n2\n1 4 1\n4 4 2\n```\n\n#### Sample Output\n```\n2\n1\n```\n',3000,65536,'0',11,57,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1157','the way to love','#### Description\n00 likes a goddess called Shen for a long time, and he wants to befriend Shen. However, someone who wants to make friends with her must meet the requirement that is he must be master of counting. That is said, so Shen asks 00 to solve a counting problem.\n\nThe counting problem as follow:\n\nGiven an n * m board and k chesses, put these k chesses into the chessboard, and make two of any chesses cannot be adjacent (we consider diagonal is not adjacent). \n\nThe task is found out how many ways to put the chesses into de chessboard.\n\n00 wants to achieve this requirement, so please help him to solve this problem.\n\n#### Input\nThe first line of input contains T (1<=T<=4000), the number of test cases.\nFor each test case, there is only one line with three integers n, m and k\n(0 < n <= 10, 0 < m <= 10, 0 <= k <= n * m).\n\n#### Output\nFor each test case, print the result MOD 2013 in one line.\n\n#### Sample Input\n```\n2\n2 2 0\n10 10 1\n```\n\n#### Sample Output\n```\n1\n100\n```\n',5000,65536,'0',11,58,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1158','color','#### Description\nAs we all known, in the additive method, there are three primary colors: Red, Green, and Blue. You can change the ratio of three colors to get every color you want. \nIf you add Red and Green together, you will get the color Yellow. When you add Red, Green and Blue, you will get White.\n\nTo simplify the problem, we assume that only 8 colors. There are Black, Red, Green, Blue, Cyan, Magenta, Yellow, and White. The simply additive principles are:\n\n1. Red + Green = Yellow\n\n2. Red + Blue = Magenta\n\n3. Blue + Green = Cyan\n\n4. Red + Green + Blue = White\n\n5. White + Black = White\n\nNote: in this problem, we assume that when the same color add together, only the same color will product. And every color adds with Black, only get itself.\nWhen given some colors, your task is to tell us what color they will product.\n\n#### Input\nThe first line of input contains an integer T ( 1<T<=1000), the number of test cases.\n\nThere is only one line for each test case. It contains an string like “Red+Blue+Green”, only 8 colors will appear, and each color is connect with “+”, no space will appear in the string. Each string contains at least one color. The length of the string is less than 1000.\n\n#### Output\nFor each test case, print the color it should be in one line.\n\n#### Sample Input\n```\n4\nBlack+Black\nRed+Black\nMagenta+Green\nBlue+White\n```\n\n#### Sample Output\n```\nBlack\nRed\nWhite\nWhite\n```\n',1000,65536,'0',11,59,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1159','XO Game','#### Description\nXO is a game play in 3*3 grids. There are only two player, they take turn to place X or O in the 3*3 grids. The first one gets the three consecutive chess in a line or diagonal line win the game. \n\nAssume that, one player‘s name is A and other player’s name is B. A always the first one to put ‘X’ in the game.\n\nYou are given a game status. In the status, we assume that the two players always play in the best way. When A must win the game, output “A win!”. If B must win the game, output “B win!”. If no one can win the game, output “A draw!”. If the game status is not legal, output “Illegal game status!”. Please output all the string in a line.\n\n(1) A win! (2)B win!  (3) A draw    (4) Illegal game status\n   X..        XXO        XXO        ...\n   OXO        XO.        OOX        .O.\n   ..X        O..        X..        ...\n\n#### Input\nThe first line of input contains an integer T ( 1<T<=1000), the number of test cases. \nThere are three lines for each test case. These three lines describe the game status. ‘X’,’O’,’.’, only three character it will contain. ‘X’ for A’s chess, ‘O’ for B’s chess, ‘.’ indicates none chess in the grid. \n\n#### Output\nFor each test case, print who must win the game, when everyone play the game in the best way! \n\n#### Sample Input\n```\n1\nX..\nOXO\n..X\n```\n\n#### Sample Output\n```\nA win!\n```\n',2000,65536,'0',11,60,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('116','Teacher\'s Number','#### Description\nA teacher and his students play a number game. He divides his students into two groups and each group has k persons. At first, he asks each of the students in Group 1 to tell an integer, and the $$$i^{th} (1 \\leq i \\leq k)$$$ student tells number $$$b_i$$$. Then, he appoints each of the students in Group 2 a positive integer, the $$$i^{th} (1 \\leq i \\leq k)$$$ student appointed number $$$m_i$$$ and the greatest common divisor of every pair of numbers $$$m_i$$$ and $$$m_j (1\\leq i \\leq j \\leq k)$$$ is one.\n\nWhen each student has his own number, the teacher tells them, \"Attention, everybody!\" I find an interesting thing. I have a nonnegative integer, and I find that when I subtract my number with $$$b_i$$$ the difference happens to be divided exactly by $$$m_i$$$. That happens with every pair of numbers $$$b_i$$$ and $$$m_i$$$. Now can anyone of you tell me what my number is?\"\n\nThe students think for a long time and fail to solve the problem. Can you help them? The answer may not be unique. To simplify the problem, you only need to find the smallest one.\n\n#### Input\nThe input contains several test cases. In each case, the first line is an integer $$$k(k<30)$$$, the number of students in each group. The second line contains k integers $$$b_1,b_2,\\cdots ,b_k$$$, the numbers chosen by the students in Group 1. The third line contains k positive integers $$$m_1,m_2,\\cdots ,m_k$$$, the numbers appointed to the students in Group 2.\n\nInput ends with k=0.\n\n#### Output\nFor each case, output one line containing the answer.\n\n#### Sample Input\n```\n3\n1 2 3\n2 3 5\n0\n```\n\n#### Sample Output\n```\n23\n```',10000,32768,'0',1,15,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1160','Alec’s Box Boutique','#### Description\nAlec sells boxes and lots of them. All her boxes are rectangular but come in many different sizes. Alec wants to create a really eye-catching display by stacking, one on top of another, as many boxes as she can outside her store. To maintain neatness and stability, she will always have the sides of the boxes parallel but will never put a box on top of another if the top box sticks out over the bottom one. For example, a box with base 5-by-10 cannot be placed on a box with base 12-by-4. Of course the boxes have three dimensions and Alec can orient the boxes anyway she wishes. Thus a 5-by-10-by-12 box may be stacked so the base is 5-by-10, 5-by-12, or 10-by-12. For example, if Alec currently has 4 boxes of dimensions 2-2-9, 6-5-5, 1-4-9, and 3-1-1, she could stack up to 3 boxes but not all four. (For example, the third box, the first box, then the last box, appropriately oriented. Alternatively, the second box could replace the third (bottom) box.)\n\nAlec’ stock rotates, so the boxes she stacks outside change frequently. It\'s just too much for Alec to figure out and so she has come to you for help. Your job is to find the most boxes Alec can stack up given her current inventory. Alec will have no more than 10 different sized boxes and will use at most one box of any size in her display.\n\n#### Input\nA positive integer n (n <= 10) will be on the first input line for each test case. Each of the next n lines will contain three positive integers giving the dimensions of a box. No two boxes will have identical dimensions. None of the dimensions will exceed 20. A line with 0 will follow the last test case.\n\n#### Output\nFor each test case, output the maximum number of boxes Alec can stack using the format given below.\n\n#### Sample Input\n```\n4\n2 2 9\n6 5 5\n1 4 9\n3 1 1\n3\n2 4 2\n1 5 2\n3 4 1\n0\n```\n\n#### Sample Output\n```\nCase 1: 3\nCase 2: 3\n```\n',3000,65535,'0',11,61,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1161','Brian’s Best location','#### Description\nJumping Brian is in charge of organizing a flash mob. The members of the ash mob move around town all day and part of the appeal of this group is they come together to do their thing whenever the mood strikes Brian. When the mood does strike, Brian sends a text message to the members to meet at a particular intersection in town in exactly one hour. The streets of the town run only north-south or east-west and are evenly spaced, forming a perfect grid like a sheet of graph paper. Due to the spontaneity, Brian wants to minimize the inconvenience and so picks an intersection to minimize the total distance traveled by the ash mob\'s members. Fortunately Brian has the locations of all the members via the GPS on their cell phones. Your job is to find the meeting location given all the members\' locations.\n\nEach intersection will be given by a pair of non-negative integers; the first coordinate is the east-west street and the second coordinate is the north-south street. The location of each ash mob member will be an intersection. Members can travel only north-south or east-west between intersections.\n\nFor example, suppose there are 5 mob members at locations (3; 4); (0; 5); (1; 1); (5; 5), and (5; 5). Then if Brian summons them all to location (3; 5), the total number of blocks traveled by the mob members would be 14. Brian could do no better - but sometimes the `best\' location may not be unique.\n\n#### Input\nInput for each test case will be a series of integers on one or more lines. The first integer, n (1 <= n <= 1000), indicates the number of mob members. There follow n pairs of integers indicating the location (intersection) of each member. The location coordinates are both between 0 and 106, inclusive. More than one member may be at the same intersection. A line containing 0 will follow the last test case.\n\n#### Output\nOutput one line for each test case in the format given below. The ordered pair is the coordinates of the location in the city where the total distance traveled (in blocks) is minimal. If there is more than one such location, output the one with the smallest first coordinate. If there is more than one `best\' location with the smallest first coordinate, output the one of those with the smallest second coordinate. The total number of blocks traveled by all the mob members follows the location.\n#### Sample Input\n```\n5 3 4 0 5 1 1 5 5 5 5\n4 100 2 100 2 100 2 1 20000\n0\n```\n\n#### Sample Output\n```\nCase 1: (3,5) 14\nCase 2: (100,2) 20097\n```\n',3000,65535,'0',11,62,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1162','Camille’s Problem','#### Description\nCamille is working on an AI program to play backgammon, and she has a small problem. At the end of the game, each player\'s 15 pieces are moved onto a set of 6 board positions called points, numbered 1 through 6. The pieces can be distributed in any manner across these points: all 15 could be on point 3; 5 could be on point 6, 2 on point 5, 3 on point 4 and 5 on point 2; etc. Camille wants to store all these possible configurations (of which there are 15504) into a linear array, but she needs a mapping from configuration to array location. It seems logical that the configuration with all 15 pieces on point 1 should correspond to array location 0, and the configuration of all 15 pieces on point 6 should correspond to the last array location. It\'s the ones in between that are giving her problems. That\'s why she has come to you.\n\nYou decide to specify a configuration by listing the number of pieces on each point, starting with point 6. For example, the two configurations described above could be represented by (0; 0; 0; 15; 0; 0) and (5; 2; 3; 0; 5; 0). Then you can order the configurations in lexicographic ordering, starting with (0,0,0,0,0,15), then (0; 0; 0; 0; 1; 14); (0; 0; 0; 0; 2; 13); : : : ; (0; 0; 0; 0; 14; 1); (0; 0; 0; 0; 15; 0); (0; 0; 0; 1; 0; 14), (0; 0; 0; 1; 1; 13), etc., ending with (15; 0; 0; 0; 0; 0). Now all you need is a way to map these orderings to array indices. Literally, that\'s all you need, because that\'s what this problem is all about.\n\n#### Input\nEach test case will consist of one line, starting with a single character, either `m\' or `u\'. If it is an `m\' it will be followed by a configuration and you must determine what array index it gets mapped to. If it is a `u\' then it will be followed by an integer array index i, (0 <= i < 15504), and you must determine what configuration gets mapped to it. A line containing the single character `e\' will end input.\n\n#### Output\nFor each test case, output the requested answer - either an array index or a configuration. Follow the format in the examples below.\n\n#### Sample Input\n```\nm 0 0 0 0 0 15\nu 15503\ne\n```\n\n#### Sample Output\n```\nCase 1: 0\nCase 2: 15 0 0 0 0 0\n```\n',1000,65535,'0',11,63,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1163','David’s Game','#### Description\nDavid is playing a game. He starts with a positive integer S. So long as it has more than one digit, he computes the product of its digits and repeat. \n\nFor example, if starting with 95, we compute 9 × 5 = 45. Since 45 have more than one digit, we compute 4 × 5 = 20. Continuing with 20, we compute 2 × 0 = 0. Having reached 0, which is a single-digit number, the game is over. \n\nAs a second example, if we begin with 396, we get the following computations: \n\n3 × 9 × 6 = 162 \n\n1 × 6 × 2 = 12 \n\n1 × 2 = 2 \n\nand we stop the game having reached 2.\n\nOK, let’s play the game with David.\n\n#### Input\nEach line contains a single integer 1 <= S <= 100000, designating the starting value. The value S will not have any leading zeros. A value of 0 designates the end of the input.\n\n#### Output\nFor each nonzero input value, a single line of output should express the ordered sequence of values that are considered during the game, starting with the original value.\n\n#### Sample Input\n```\n95\n396\n28\n4\n40\n0\n```\n\n#### Sample Output\n```\n95 45 20 0\n396 162 12 2\n28 16 6\n4\n40 0\n```\n',3000,65535,'0',11,64,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1164','Edward’s Alarm Clock','#### Description\nElectronic equipment commonly uses 7-segment elements to show numbers. A 7-segment element gets its name because it uses 7 line segments to show a shape: 3 horizontal segments and 4 vertical segments. Each segment can be independently switched on and off, making it possible to show any digit from 0 to 9.\n\nTo show more than 1 digit at the same time, a larger display is constructed by putting multiple 7-segment elements next to each other. In this case, each segment in each digit can be independently switched on and off. For example, electronic alarm clocks typically use four 7-segment elements to show the time of day: two digits for the hour (00 to 23) and two digits for the minutes (00 to 59).\n\nYour friend Edward managed to find an old alarm clock in a dusty corner of the basement. Unfortunately, it does not seem to work very well: it does not always show the correct time. He suspects that this is due to faulty wires in the 7-segment display.\n\nAs a result of the faults, some of the segments may not be working at all; they never light up, no matter which digits the clock tries to put on its display. On the other hand, the segments that do sometimes light up should all be working correctly. You thus assume that each of the 28 segments on the clock is either completely broken (never lights up) or is working perfectly fine (lights up precisely when it should).\n\nEdward want to know what time it is, of course, but the silly clock is not making it very easy. Edward have been watching the clock for some time, writing down the pattern of digits on its display every minute. (Note that it is possible that the display stays the same for a few minutes. When that happens, just writes down the same pattern several times.) Edward wants to find out what time the clock was really trying to show when wrote down the first pattern of the sequence. But you know Edward is not good at deal with this problem, so he ask you for help.\n\nThe answer must be consistent with all observations of the clock display, for the first minute as well as for the following minutes, under the assumption that each display segment is either completely broken (never lights up) or is working perfectly fine.\n\nThere may be multiple possible answers. In that case, you should make a list of all possible answers, in order of increasing time of day. \nIt is still possible that the clock is really broken in some other way than just faulty segments. In that case, it may happen that there is no possible answer which is consistent with all observations.\n\n\n#### Input\nFor each test case, there is one line of input containing the following items:\n\nA positive integer N (1 <= N <= 50), the number of minutes you have been watching the clock.\n\nN items, each representing a pattern of digits that was observed on the clock. \n\nEach pattern is formatted as two decimal digits, followed by a ‘:’ character, followed by two more decimal digits.\n\nThe patterns are listed in the order in which they were seen on the clock.\n\nIt is theoretically possible for a faulty 7-segment display to show a shape which does not correspond to any of the digits from 0 to 9. However, for some mysterious reason, this never happened during the time you were watching the clock. \n\n#### Output\nFor each test case, give one line of output.\n\nIf there is at least one possible answer, print a list of all possible answers separated by spaces. Each possible answer must be a valid 24-hour clock time, formatted as two digits (00 to 23), followed by a ‘:’ character, followed by two digits (00 to 59). The list of possible answers must be printed in order of increasing time of day.\n\nIf there is no possible answer, print the word ‘none’.\n\n#### Sample Input\n```\n1 88:88\n2 23:25 23:26\n3 71:57 71:57 71:07\n```\n\n#### Sample Output\n```\nnone\n23:25\n00:58 03:58 07:58 08:58\n```\n',3000,65535,'0',11,65,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1165','Ford’s Ball','#### Description\nThere are 2N white balls on a table in two rows, making a nice 2-by-N rectangle. Ford has a big paint bucket full of black paint. (Don’t ask why.) He wants to paint all the balls black, but he would like to have some math fun while doing it. (Again, don’t ask why.) First, he computed the number of diﬀerent ways to paint all the balls black. In no time, he ﬁgured out that the answer is (2N)! and thought it was too easy. So, he introduced some rules to make the problem more interesting.\n\n• The ﬁrst ball that Jon paints can be any one of the 2N balls.\n\n• After that, each subsequent ball he paints must be adjacent to some black ball (that was already painted). Two balls are assumed to be adjacent if they are next to each other horizontally, vertically, or diagonally.\n\nFord was quite satisﬁed with the rules, so he started counting the number of ways to paint all the balls according to them. Can you write a program to ﬁnd the answer faster than Ford?\n\n#### Input\nThe input consists of multiple test cases. Each test case consists of a single line containing an integer N, where 1 <= N <= 1,000. The input terminates with a line with N = 0. \n#### Output\nFor each test case, print out a single line that contains the number of possible ways that Jon can paint all the 2N balls according to his rules. The number can become very big, so print out the number modulo 1,000,000,007. \n\n#### Sample Input\n```\n1\n2\n3\n0\n```\n\n#### Sample Output\n```\n2\n24\n480\n```\n',3000,65535,'0',11,66,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1166','Goldbach’s Spread','#### Description\nYou may have heard of the Goldbach conjecture: Every even integer larger than 2 is the sum of two primes. For example, 6 = 3 + 3, 8 = 5 + 3 and 30 = 13 + 17. While this conjecture has been confirmed for large even integers, it remains unproven. For all but the smallest evens there is usually many ways to express the integer as the sum of two primes. For example, 100 = 3+97 = 11+89 = 17+83 = … =47+53. Note that the closest the two primes are here is 6 (= 53-47) while the farthest is 94 (= 97-3).\n\nThe difference between these two values we\'ll call the Goldbach’s spread. Thus the Goldbach’s spread of 100 is 88 and the Goldbach’s spread of 8 is 0, since 8 is uniquely the sum of two primes. Your job here is to find the Goldbach’s spread of various even integers.\n\n#### Input\nInput for each test case will be an even integer larger than 2 and no more than 1,000,000 on one line. A line with 0 will follow the last input.\n\n#### Output\nFor each test case output the Goldbach’s spread of the integer using the format given below.\n\n#### Sample Input\n```\n100\n8\n30\n0\n```\n\n#### Sample Output\n```\nCase 1: 88\nCase 2: 0\nCase 3: 12\n```\n',3000,65535,'0',11,67,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1167','Haley’s Integers','#### Description\nHaley has two lists of integers, namely a1, . . . , aN and b1, . . . , bM. Max wants to know what these numbers are, but Haley won’t tell him the numbers directly. So, Max asks Haley a series of questions of the form “How big is ai + bj?” Haley won’t even tell him that, though; instead, he answers either “It’s at least c,” or “It’s at most c.” (Right, Haley simply doesn’t want to give his numbers for whatever reason.) After getting Haley’s responses, Max tries to guess the numbers, but he cannot ﬁgure them out no matter how hard he tries. He starts to wonder if Haley has lied while answering some of the questions. Write a program to help Max.\n\n#### Input\nThe input consists of multiple test cases. Each test case begins with a line containing three positive integers N, M, and Q, which denote the lengths of the Haley’s lists and the number of questions that Max asked. These numbers satisfy 2 <= N + M <= 1,000 and 1 <= Q <= 10,000. Each of the next Q lines is of the form i j <= c or i j >= c. The former represents ai + bj <= c, and the latter represents ai + bj >= c. It is guaranteed that −1,000 <= c <= 1,000. The input terminates with a line with N = M = Q = 0.\n\n#### Output\nFor each test case, print a single line that contains “Possible” if there exist integers a1, . . . , aN and b1, . . . , bM that are consistent with Haley’s answers, or “Impossible” if it can be proven that Haley has deﬁnitely lied (quotes added for clarity). \n#### Sample Input\n```\n2 1 3\n1 1 <= 3\n2 1 <= 5\n1 1 >= 4\n2 2 4\n1 1 <= 3\n2 1 <= 4\n1 2 >= 5\n2 2 >= 7\n0 0 0\n```\n\n#### Sample Output\n```\nImpossible\nPossible\n```\n',3000,65535,'0',11,68,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1168','Ives steals jewels','#### Description\nIves, the master thief, aims to steal Evil Erwin’s jewels. Erwin has n jewels on display in his store. Every precious stone is of one of k distinct colors. The exposition is so large that we can treat it as the Euclidean plane with the jewels being distinct points. The display is secured by some quite expensive alarms.\n\nIves has invented a device: a big, robotic hand that can grab some of the Erwin’s jewels without triggering any of the alarms. The hand can make one (and only one) grab, taking all the jewels lying on some horizontal segment or below it (see the picture). Ives could easily take all the jewels this way, but he knows that the more he takes, the harder it will be to get rid of them. He decided that the safest way is to take a set of jewels that does not contain all the k colors.\n\nCompute how many jewels Ives can steal with one grab of his device, without taking jewels in every color.\n#### Input\nThe ﬁrst line of the input contains the number of test cases T. The descriptions of the test cases follow:\n\nEach test case starts with two integers n (2 <= n <= 200 000) and k (2 <= k <= n) denoting the number of jewels and the number of distinct colors. The next n lines denote the jewels’ positions and colors. The j-th line contains three space-separated integers xj, yj, cj (1 <= xj, yj <= 10^9, 1 <= cj <= k) meaning that the j-th jewel lies at coordinates (xj, yj) and has color cj.\n\nYou may assume that there is at least one stone of every color at the exposition.\n\n#### Output\nPrint the answers to the test cases in the order in which they appear in the input. For each test case print a single line containing the maximum possible number of stolen jewels.\n\n#### Sample Input\n```\n1\n10 3\n1 2 3\n2 1 1\n2 4 2\n3 5 3\n4 4 2\n5 1 2\n6 3 1\n6 7 1\n7 2 3\n9 4 2\n```\n\n#### Sample Output\n```\n5\n```\n',30000,65535,'0',11,69,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1169','A Quine or not','#### Description\nThe philosopher Willard Van Orman Quine (1908–2000) described a novel method of constructing a sentence in order to illustrate the contradictions that can arise from self-reference. This operation takes as input a single phrase and produces a sentence from that phrase. (The author Douglas R. Hofstadter refers to this process as to Quine a phrase.) We can define the Quine operation like so:\n\n   Quine(A) = \"A\" A\n\nIn other words, if A is a phrase, then Quine(A) is A enclosed in quotes (\"), followed by a space, followed by A. For example:\n\n   Quine(HELLO WORLD) = \"HELLO WORLD\" HELLO WORLD\n\nBelow are some other examples of sentences that can be created by the Quine operation. Note that Quining allows sentences to be indirectly self-referential, such as the last sentence below.\n\n   \"IS A SENTENCE FRAGMENT\" IS A SENTENCE FRAGMENT\n   \"IS THE NAME OF THIS PROBLEM\" IS THE NAME OF THIS PROBLEM\n   \"YIELDS FALSEHOOD WHEN QUINED\" YIELDS FALSEHOOD WHEN QUINED\n\nYour goal for this problem is to take a sentence and decide whether the sentence is the result of a Quine operation.\n\n#### Input\nThe input will consist of a sequence of sentences, one sentence per line, ending with a line that has the single word, END. Each sentence will contain only uppercase letters, spaces, and quotation marks. Each sentence will contain between 1 and 80 characters and will not have any leading, trailing, or consecutive spaces.\nYou must decide whether each sentence is the result of a Quine operation. To be a Quine, a sentence must match the following pattern exactly:\n\n1.	A quotation mark\n2.	Any nonempty sequence of letters and spaces (call this phrase A)\n3.	A quotation mark\n4.	A space\n5.	Phrase A—exactly as it appeared in (2)\n\nIf it matches this pattern, the sentence is a Quine of the phrase A. Note that phrase A must contain the exact same sequence of characters both times it appears.\n\nInput for each test case will be an even integer larger than 2 and no more than 1,000,000 on one line. A line with 0 will follow the last input.\n\n#### Output\nThere will be one line of output for each sentence in the data set. If the sentence is the result of a Quine operation, your output should be of the form, Quine(A), where A is the phrase to Quine to create the sentence.\n\nIf the sentence is not the result of a Quine operation, your output should be the phrase, not a quine.\n\n\n#### Sample Input\n```\n\"HELLO WORLD\" HELLO WORLD\n\"IS A SENTENCE FRAGMENT\" IS A SENTENCE FRAGMENT\n\"IS THE NAME OF THIS PROBLEM\" IS THE NAME OF THIS PROBLEM\n\"YIELDS FALSEHOOD WHEN QUINED\" YIELDS FALSEHOOD WHEN QUINED\n\"HELLO\" I SAID\nWHAT ABOUT \"WHAT ABOUT\"\n\" NO EXTRA SPACES \" NO EXTRA SPACES\n\"NO\"QUOTES\" NO\"QUOTES\n\"\"\nEND\n```\n\n#### Sample Output\n```\nQuine(HELLO WORLD)\nQuine(IS A SENTENCE FRAGMENT)\nQuine(IS THE NAME OF THIS PROBLEM)\nQuine(YIELDS FALSEHOOD WHEN QUINED)\nnot a quine\nnot a quine\nnot a quine\nnot a quine\nnot a quine\n```\n',3000,65535,'0',11,70,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('117','Chees','#### Description\n[[Image:B16_1.jpg|right|200px]]\nChess is a game for two players, one with the \"White\" pieces and one with the \"Black\" pieces. At the beginning of the game, the pieces are set up as pictured at right. (See diagrams below to identify pieces.) These hints will help you to remember the proper board setup:\n+ Opposing Kings and Queens go directly opposite each other.\n+ The square in the lower right hand corner is a light one (\"light on right\").\n+ The White Queen goes on a light square, the Black Queen on a dark square (\"Queen on color\"). \nWhite always moves first, and then the players take turns moving. Only one piece may be moved at each turn (except for \"castling,\" a special move that is explained later). The Knight is the only piece that can jump over other pieces. All other pieces move only along unblocked lines. You may not move a piece to a square already occupied by one of your own pieces. But you can capture an enemy piece that stands on a square where one of your pieces can move. Simply remove the enemy piece from the board and put your own piece in its place.\n\n=== The Pieces and How They Move ===\n==== The Queen ====\n[[Image:B16_2.jpg|center|150px]]\nThe Queen is the most powerful piece. She can move any number of squares in any direction — horizontal, vertical, or diagonal — if her path is not blocked. She can reach any of the squares with dots in this diagram.\n==== The Rook ====\n[[Image:B16_3.jpg|center|150px]]\nThe Rook is the next most powerful piece. The Rook can move any number of squares vertically or horizontally if its path is not blocked.\n==== The Bishop ====\n[[Image:B16_4.jpg|center|150px]]\nThe Bishop can move any number of squares diagonally if its path is not blocked. Note that this Bishop starts on a light square and can reach only other light squares. At the beginning of the game, you have one \"dark-square\" Bishop and one \"light-square\" Bishop.\n==== The Knight ====\n[[Image:B16_5.jpg|center|150px]]\nThe Knight\'s move is special. It hops directly from its old square to its new square. The Knight can jump over other pieces between its old and new squares. Think of the Knight\'s move as an \"L.\" It moves two squares horizontally or vertically and then makes a right-angle turn for one more square. The Knight always lands on a square opposite in color from its old square.\n==== The King ====\n[[Image:B16_6.jpg|center|150px]]\nThe King is the most important piece. When he is trapped, his whole army loses. The King can move one square in any direction — for example, to any of the squares with dots in this diagram. (An exception is castling, which is explained later.) The King may never move into check — that is, onto a square attacked by an opponent\'s piece.\n==== The Pawn ====\n[[Image:B16_7.jpg|center|150px]]\nThe pawn moves straight ahead (never backward), but it captures diagonally. It moves one square at a time, but on its first move it has the option of moving forward one or two squares. In the diagram, the squares with dots indicate possible destinations for the pawns. The White pawn is on its original square, so it may move ahead either one or two squares. The Black pawn has already moved, so it may move ahead only one square at a time. The squares on which these pawns may capture are indicated by an X.\n\nIf a pawn advances all the way to the opposite end of the board, it is immediately \"promoted\" to another piece, usually a Queen. It may not remain a pawn or become a King. Therefore, it is possible for each player to have more than one Queen or more than two Rooks, Bishops, or Knights on the board at the same time. But \'\'\'I DO NOT\'\'\' want you to consider such situation in this problem.\n\n=== Special Moves ===\n====Castling====\nEach player may \"castle\" only once during a game and when conditions are met. Castling is a special move that lets a player move two pieces at once — the King and one Rook. In castling, the player moves his King two squares to its left or right toward one of his Rooks. At the same time, the Rook involved goes to the square beside the King and toward the center of the board (see illustrations below). In order to castle, neither the King nor the Rook involved may have moved before. Also, the King may not castle out of check, into check, or through check. Further, there may not be pieces of either color between the King and the Rook involved in castling.\n\nCastling is often a very important move because it allows you to place your King in a safe location and also allows the Rook to become more active.\n\nWhen the move is legal, each player has the choice of castling Kingside or Queenside or not at all, no matter what the other player chooses to do.\n\n\'\'\'The diagrams below show what happens:\'\'\'\n{| align=center\n|[[Image:B16_8a.jpg|thumb|150px|Before Kingside Castling]]\n|[[Image:B16_8b.jpg|thumb|150px|After Kingside Castling]]\n|[[Image:B16_8c.jpg|thumb|150px|Before Queenside Castling]]\n|[[Image:B16_8d.jpg|thumb|150px|After Queenside Castling]]\n|}\n\n==== En Passant ====\n[[Image:B16_9.jpg|right|150px]]\nThis French phrase is used for a special pawn capture. It means \"in passing,\" and it occurs when one player moves a pawn two squares forward to try to avoid capture by the opponent\'s pawn. The capture is made exactly as if the player had moved the pawn only one square forward.\n\nIn the diagram, the Black pawn moves up two squares to the square with the dot. On its turn the White pawn may capture the Black one on the square marked with the X. If the White player does not exercise this option immediately — before playing some other move — the Black pawn is safe from \"en passant\" capture for the rest of the game. But new opportunities may arise for each pawn in similar circumstances.\n\n=== About Check and Checkmate ===\nThe main goal of chess is to checkmate your opponent\'s King. The King is not actually captured and removed from the board like other pieces. But if the King is attacked (\"checked\") and threatened with capture, it must get out of check immediately. If there is no way to get out of check, the position is a \"checkmate,\" and the side that is checkmated loses.\n\nYou may not move into check. For example, moving into a direct line with your opponent\'s Rook, when if there are no other pieces between the Rook and your King, is not a legal move. Otherwise, the Rook could \"capture\" the King, which is not allowed.\n\nIf you are in check, there are three ways of getting out:\n+ Capturing the attacking piece;\n+ Placing one of your own pieces between the attacker and your King (unless the attacker is a Knight);\n+ Moving the King away from the attack. \n\nIf a checked player can do none of these, he is checkmated and loses the game.\n\nIf a King is not in check, but that player can make no legal move, the position is called a stalemate and the game is scored as a draw, or tie.\n\n=== How to Read and Write Chess ===\n[[Image:B16_7.gif|right|200px]]\nThere are many different ways to write chess moves. The most popular method (described below) is called algebraic notation:\n\nThe main idea is that every square has a name like this:\n\nIt looks very complicated but it\'s not! Each square on a chessboard has a first name (a letter) and a last name (a number). The letter identifies a file (column) and the number identifies a rank (row). Now, the important part is to know how to identify the pieces you are moving. You just need to use a single capital letter:\n\n\'\'\'K = King Q = Queen R = Rook B = Bishop N = Knight\'\'\'\n\nNote that \"P\" is not used. Chess players have agreed that a move without a letter — such as e4 — is\nunderstood to be a pawn move. You are almost ready to start using chess notation. Just pay attention to the following symbols:\n+ \'\'\'x = Take or Capture\'\'\'\n+ \'\'\'0-0 = King-side castle\'\'\' \n+ \'\'\'0-0-0 = Queen-side castle\'\'\'\n+ \'\'\'+ = check\'\'\' \n+ \'\'\'# = checkmate\'\'\' \n+ \'\'\'! = good move\'\'\' \n+ \'\'\'? = bad move\'\'\' \n+ \'\'\'?? = blunder\'\'\'\nIt’s a great idea to note your games. You can analyze and learn from your mistakes. We all make a lot of mistakes when we are learning a new thing. Don’t worry! Mistakes will help you improve your chess skills. Let’s put in practice what you are learning. We will use the famous \"Scholar Mate,\" also called the four–move checkmate. \n\n{|align=center\n|[[Image:B16_6.gif|150px]]\n|[[Image:B16_5.gif|150px]]\n|[[Image:B16_4.gif|150px]]\n|[[Image:B16_3.gif|150px]]\n|-\n|[[Image:B16_2.gif|150px]]\n|[[Image:B16_1.gif|150px]]\n|[[Image:B16_8.gif|150px]]\n|}\n\nSo, we can write chess move like this:\n```\n7\ne4 e5 Bc4 h6 Qh5 a5 Qf7\n```\n\nFrom this, you can know that the player with the \"Withe\" pieces won the game. Your job here is to judge the result from the given chess moves.\n\n#### Input\nThe input will consist of a series games. Each game will start with a positive integer number n in a single line, which indicates the number of moves you will get in the game description. Then you can get a move list with n moves in the following n lines, a move in a line without any redundant spaces.\n\nThe input is terminated by a line with a single zero.\n\n#### Output\nFor each game, you are supposed to give a judgment in a single line. The judgment should be one of the following statements.\n{|cellspacing=\"0\" border=\"1\"\n|\'\'\'No.\'\'\'\n|\'\'\'Statement\'\'\'\n|\'\'\'Remark\'\'\'\n|-\n|1\n|White Win\n|The player with the \"White\" pieces wins the game at the end of game\n|-\n|2\n|Black Win\n|The player with the \"Black\" pieces wins the game at the end of game\n|-\n|3\n|Stalemate\n|You can find the details about stalemate in the problem description\n|-\n|4\n|Draw\n|No one won the game, and no stalemate happened\n|-\n|5\n|Dead Moves\n|After one play won the game or stalemate happened, there still are moves in the list\n|-\n|6\n|Puzzle Move\n|From the move you get, you can\'t decide which chess should be moved\n|-\n|7\n|Illegal Move\n|Some move is illegal\n|}\n\nIf the game ended normally, you will get a statement between No.1 and No.4. If the game didn\'t end normally, and there are not puzzle moves and illegal moves before where it should end, you will get a statement of No.5. Otherwise, output statement of No.6 or No.7 base on which you find first.\n\n#### Sample Input\n```\n7\ne4\ne5\nBc4\nh6\nQh5\na5\nQf7\n0\n```\n\n#### Sample Output\n```\nWhite Win\n```',10000,32768,'0',1,16,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1170','Kingdoms','#### Description\nSeveral kingdoms got into serious ﬁnancial troubles. For many years, they have been secretly borrowing more and more money from each other. Now, with their liabilities exposed, the crash is inevitable... \n\nThere are n kingdoms. For each pair (A, B) of kingdoms, the amount of gold that kingdom A owes to kingdom B is expressed by an integer number dAB (we assume that dBA = −dAB). If a kingdom has negative balance (has to pay more than it can receive), it may bankrupt. Bankruptcy removes all liabilities, both positive and negative, as if the kingdom ceased to exist. The next kingdom may then bankrupt, and so on, until all remaining kingdoms are ﬁnancially stable.\n\nDepending on who falls ﬁrst, diﬀerent scenarios may occur—in particular, sometimes only one kingdom might remain. Determine, for every kingdom, whether it can become the only survivor.\n\n#### Input\nThe ﬁrst line of the input contains the number of test cases T. The descriptions of the test cases follow: \n\nThe description of each test case starts with a line containing the number of the kingdoms n, 1 <= n <= 20. Then n lines follow, each containing n space-separated numbers. The j-th number in the i-th line is the number dij of gold coins that the i-th kingdom owes to the j-th one. You may assume that dii = 0 and dij = −dji for every 1 <= i, j <= n. Also, |dij| <= 10^6 for all possible i, j.\n\n#### Output\nPrint the answers to the test cases in the order in which they appear in the input. For each test case, print a single line containing the indices of the kingdoms that can become the sole survivors, in increasing order. If there are no such kingdoms, print a single number 0.\n\n#### Sample Input\n```\n1\n3\n0 -3 1\n3 0 -2\n-1 2 0\n```\n\n#### Sample Output\n```\n1 3\n```\n',15000,65535,'0',11,71,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1171','Chemist’s vows','#### Description\nChemist Clara swore a solemn vow—from now on, she can only speak atomic element symbols. Of course, this limits her ability to talk. She can say, for example, “I Am CLaRa” (as I is the symbol of iodine, Am is americium, C is carbon and so on). She can also say “InTeRnAtIONAl”, but she has a lot of trouble with “collegiate”, “programming” and “contest”.\n\nGiven a word, determine whether Clara can speak it (i.e. if it is a concatenation of atomic symbols). Without your help, she might as well have taken silence vows! You may identify upper- and lowercase letters, as Clara cannot speak uppercase anyway. In case you forgot the elements’ symbols, here is the complete periodic table:\n\nH                                                                   He\nLi  Be                                          B   C   N   O   F   Ne\nNa  Mg                                          Al  Si  P   S   Cl  Ar\nK   Ca  Sc  Ti  V   Cr  Mn  Fe  Co  Ni  Cu  Zn  Ga  Ge  As  Se  Br  Kr\nRb  Sr  Y   Zr  Nb  Mo  Tc  Ru  Rh  Pd  Ag  Cd  In  Sn  Sb  Te  I   Xe\nCs  Ba  *   Hf  Ta  W   Re  Os  Ir  Pt  Au  Hg  Tl  Pb  Bi  Po  At  Rn\nFr  Ra  **  Rf  Db  Sg  Bh  Hs  Mt  Ds  Rg  Cn  Fl  Lv\n\n+    La  Ce  Pr  Nd  Pm  Sm  Eu  Gd  Tb  Dy  Ho  Er  Tm  Yb  Lu\n  -   Ac  Th  Pa  U   Np  Pu  Am  Cm  Bk  Cf  Es  Fm  Md  No  Lr\n\n\n#### Input\nThe ﬁrst line of the input contains the number of test cases T. The descriptions of the test cases follow: Each test case is a single lowercase word over the English alphabet. The length of the word is positive and does not exceed 50 000.\n#### Output\nPrint the answers to the test cases in the order in which they appear in the input. For each test case print a single line containing the word YES if Clara can say the given word, and NO otherwise.\n#### Sample Input\n```\n4\ninternational\ncollegiate\nprogramming\ncontest\n```\n\n#### Sample Output\n```\nYES\nNO\nNO\nNO\n```\n',30000,65535,'0',11,72,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1172','Darts','#### Description\nConsider a game in which darts are thrown at a board. The board is formed by 10 circles with radii 20, 40, 60, 80, 100, 120, 140, 160, 180, and 200 (measured in millimeters), centered at the origin. Each throw is evaluated depending on where the dart hits the board. The score is p points (p ∈ {1,2, . . . ,10}) if the smallest circle enclosing or passing through the hit point is the one with radius 20 • (11 − p). No points are awarded for a throw that misses the largest circle. \n\nYour task is to compute the total score of a series of n throws.\n\n#### Input\nThe ﬁrst line of the input contains the number of test cases T. The descriptions of the test cases follow:\n\nEach test case starts with a line containing the number of throws n (1 <= n <= 10^6). Each of the next n lines contains two integers x and y (−200 <= x, y <= 200) separated by a space—the coordinates of the point hit by a throw.\n\n#### Output\nPrint the answers to the test cases in the order in which they appear in the input. For each test case print a single line containing one integer—the sum of the scores of all n throws.\n#### Sample Input\n```\n1\n5\n32 -39\n71 89\n-60 80\n0 0\n196 89\n```\n\n#### Sample Output\n```\n29\n```\n\n',3000,65535,'0',11,73,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1173','Equations of words','#### Description\nYou are given a text T and a pattern P. You want to check if you can erase some of the letters of T so that the remaining symbols produce exactly P. For example, the word programming can be partially erased to obtain pong or program or roaming (but not map, as the letters must remain in the same order). Both words consist of small letters of the English alphabet only.\n\nThere is just one catch: the text T is encoded by a system of equations. The equations use special symbols (every symbol is denoted by a word in capital letters), each of them encoding some word over the alphabet {a, . . . , z}. Each equation is of one of the following forms: \n\nA = a word over {a, . . . , z}\n\nor\n\nA = B + C\n\nwhere A, B, C can be any special symbols, and the + sign denotes the concatenation of words. The system is:\n\n• unambiguous – for a ﬁxed symbol A, there is exactly one equation with A on the left-hand side, and\n\n• acyclic – if you start from any symbol A and make substitutions according to the equations (right-hand side for left-hand side), you can never obtain an expression containing A again.\nSuch a system always has a unique solution. For example, in the system:\n\n• START = FIRST + SECND\n\n• FIRST = D + E\n\n• SECND = F + E\n\n• D = good\n\n• E = times\n\n• F = bad\n\nthe symbol START encodes the word goodtimesbadtimes.\n\nGiven a single word P as the pattern, a system of equations, and one particular starting symbol S of this system, determine whether the pattern P is present in the word encoded by S.\n\n#### Input\nThe ﬁrst line of the input contains the number of test cases T. The descriptions of the test cases follow:\n\nEach test case starts with a line containing a single integer k (1 <= k <= 500)—the number of equations. The next k lines contain equations. Each of them has one of the two forms given in the problem statement, with spaces separating words, plus signs, and equation signs. Each word (including symbol names) is at least one and at most ﬁve characters long.\n\nThe next line contains a single special symbol (a word in capital letters), while the ﬁnal line contains a non-empty word of at most 2 000 lowercase letters. These are the starting symbol and the pattern to ﬁnd, respectively.\n\n#### Output\nPrint the answers to the test cases in the order in which they appear in the input. For each test case print the answer in a separate line: YES if the pattern appears in the given encoded word, and NO otherwise.\n\n#### Sample Input\n```\n1\n6\nSTART = FIRST + SECND\nFIRST = D + E\nSECND = F + E\nD = good\nE = times\nF = bad\nSTART\ndebate\n```\n\n#### Sample Output\n```\nYES\n```\n\n',10000,65535,'0',11,74,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1174','Conservation','#### Description\nThe most famous painting in Byteland—a portrait of a lady with a computer mouse by Leonardo da Bitci—needs to be conserved. The work will be conducted in two narrowly specialized laboratories. The conservation process has been divided into several stages. For each of them, we know the laboratory in which it will take place.\n\nTransporting the very precious and fragile painting introduces additional risk; therefore, it should be avoided whenever possible. Ideally, all the work in the ﬁrst laboratory would be done, and then the painting would be moved to the second one. Unfortunately, there are several dependencies between the conservation stages—some of them need to be completed before others may begin. Your task is to ﬁnd an ordering of conservation stages that minimizes the number of times the painting needs to be moved from one laboratory to the other. The conservation can begin in any of the two laboratories.\n\n#### Input\nThe ﬁrst line of the input contains the number of test cases T. The descriptions of the test cases follow:\n\nThe ﬁrst line of each test case contains two space-separated integers n and m (1 <= n <=100 000, 0 <= m <= 1 000 000)—the number of conservation stages and the number of dependencies between them. In the next line there are n space-separated integers—the i-th of them is 1 if the i-th conservation stage will take place in the ﬁrst laboratory, and 2 otherwise. The following m lines contain pairs of integers i, j (1 <= i, j <= n), denoting that the i-th stage has to be completed before the j-th.\n\nYou may assume that it is always possible to order the conservation stages so that all the dependencies are satisﬁed.\n\n#### Output\nPrint the answers to the test cases in the order in which they appear in the input. For each test case, output a single line containing the minimal number of times the painting needs to be transported between the laboratories.\n#### Sample Input\n```\n1\n5 6\n1 2 1 2 1\n1 2\n1 3\n2 4\n3 4\n2 5\n3 5\n```\n\n#### Sample Output\n```\n2\n```\n\n',30000,65535,'0',11,75,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1175','Non-boring sequences','#### Description\nWe were afraid of making this problem statement too boring, so we decided to keep it short.\nA sequence is called non-boring if its every connected subsequence contains a unique element, i.e. an element such that no other element of that subsequence has the same value.\n\nGiven a sequence of integers, decide whether it is non-boring.\n\n#### Input\nThe ﬁrst line of the input contains the number of test cases T. The descriptions of the test cases follow:\n\nEach test case starts with an integer n (1 <= n <= 200 000) denoting the length of the sequence. In the next line the n elements of the sequence follow, separated with single spaces. The elements are non-negative integers less than 10^9.\n\n#### Output\nPrint the answers to the test cases in the order in which they appear in the input. For each test case print a single line containing the word non-boring or boring.\n\n#### Sample Input\n```\n4\n5\n1 2 3 4 5\n5\n1 1 1 1 1\n5\n1 2 3 2 1\n5\n1 1 2 1 1\n```\n\n#### Sample Output\n```\nnon-boring\nboring\nnon-boring\nboring\n```\n\n',30000,65535,'0',11,76,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1176','LRU Caching','#### Description\nWhen accessing large amounts of data is deemed too slow, a common speed up technique is to keep a small amount of the data in a more accessible location known as a cache. The first time a particular piece of data is accessed, the slow method must be used. However, the data is then stored in the cache so that the next time you need it you can access it much more quickly. For example, a database system may keep data cached in memory so that it doesn\'t have to read the hard drive. Or a web browser might keep a cache of web pages on the local machine so that it doesn\'t have to download them over the network.\n\nIn general, a cache is much too small to hold all the data you might possibly need, so at some point you are going to have to remove something from the cache in order to make room for new data. The goal is to retain those items that are more likely to be retrieved again soon. This requires a sensible algorithm for selecting what to remove from the cache. One simple but effective algorithm is the Least Recently Used, or LRU, algorithm. When performing LRU caching, you always throw out the data that was least recently used.\n\nAs an example, let\'s imagine a cache that can hold up to five pieces of data. Suppose we access three pieces of data—A, B, and C. As we access each one, we store it in our cache, so at this point we have three pieces of data in our cache and two empty spots (Figure 1). Now suppose we access D and E. They are added to the cache as well, filling it up. Next suppose we access A again. A is already in the cache, so the cache does not change; however, this access counts as a use, making A the most recently used. Now if we were to access F, we would have to throw something out to make room for F. At this point, B has been used least recently, so we throw it out and replace it with F (Figure 2). If we were now to access B again, it would be exactly as the first time we accessed it: we would retrieve it and store it in the cache, throwing out the least recently used data—this time C—to make room for it.\n\nYour task for this problem is to take a sequence of data accesses and simulate an LRU cache. When requested, you will output the contents of the cache, ordered from least recently used to most recently used.\n#### Input\nThe input will be a series of data sets, one per line. Each data set will consist of an integer N and a string of two or more characters. The integer N represents the size of the cache for the data set (1 ≤ N ≤ 26). The string of characters consists solely of uppercase letters and exclamation marks. An upppercase letter represents an access to that particular piece of data. An exclamation mark represents a request to print the current contents of the cache.\n\nFor example, the sequence ABC!DEAF!B! means to acces A, B, and C (in that order), print the contents of the cache, access D, E, A, and F (in that order), then print the contents of the cache, then access B, and again print the contents of the cache.\n\nThe sequence will always begin with an uppercase letter and contain at least one exclamation mark.\n\nThe end of input will be signaled by a line containing only the number zero.\n\n#### Output\nFor each data set you should output the line \"Simulation S\", where S is 1 for the first data set, 2 for the second data set, etc. Then for each exclamation mark in the data set you should output the contents of the cache on one line as a sequence of characters representing the pieces of data currently in the cache. The characters should be sorted in order from least recently used to most recently used, with least recently occuring first. You only output the letters that are in the cache; if the cache is not full, then you simply will have fewer characters to output (that is, do not print any empty spaces). Note that because the sequence always begins with an uppercase letter, you will never be asked to output a completely empty cache.\n#### Sample Input\n```\n5 ABC!DEAF!B!\n3 WXWYZ!YZWYX!XYXY!\n5 EIEIO!\n0\n```\n\n#### Sample Output\n```\nSimulation 1\nABC\nCDEAF\nDEAFB\nSimulation 2\nWYZ\nWYX\nWXY\nSimulation 3\nEIO\n```\n\n',3000,65535,'0',11,77,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1177','Another Rock-Paper-Scissors Problem','#### Description\nSonny uses a very peculiar pattern when it comes to playing rock-paper-scissors. He likes to vary his moves so that his opponent can’t beat him with his own strategy.\n\nSonny will play rock (R) on his first game, followed by paper (P) and scissors (S) for his second and third games, respectively. But what if someone else is using the same strategy? To thwart those opponents, he’ll then play paper to beat rock, scissors to beat paper, and rock to beat scissors, in that order, for his 4th through 6th games. After that, he’ll play scissors, rock, and paper for games 7–9 to beat anyone copying his last set of moves. Now we’re back to the original order—rock, paper, scissors—but instead of being predictable and using the same moves, do you know what would be better? You guessed it! Sonny then plays the sequence of moves that would beat anyone trying to copy his whole strategy from his first move, and on it goes...\n\nTo recap, in symbolic form, Sonny’s rock-paper-scissors moves look like this:\n\nR  P  S  PSR  SRP  PSRSRPRPS  SRPRPSPSR  PSRSRPRPSSRPRPSPSRRPSPSRSRP ...\n\nThe spaces are present only to help show Sonny’s playing pattern and do not alter what move he’ll play on a certain game.\n\nNaturally, your job is to beat Sonny at his own game! If you know the number of the game that you’ll be playing against Sonny, can you figure out what move you would need to play in order to beat him?\n\n#### Input\nEach line of the input contains a single integer N, 1 <= N <= 10^12, the number of the game you’ll be playing against Sonny. An integer N = 1 indicates it would be Sonny’s first game, N = 7 indicates it would be the 7th game, and so forth. The input terminates with a line with N = 0.\n\n#### Output\nFor each test case, output a single line which contains the letter corresponding to the move you would need to play to beat Sonny on that game.\n\n#### Sample Input\n```\n1\n7\n33\n0\n```\n\n#### Sample Output\n```\nP\nR\nS\n```\n\n#### Warning\nN may be large enough to overflow a 32-bit integer, so be sure to use a larger data type (i.e. long in Java or long long in C/C++) in your program.\n\n',30000,65535,'0',11,78,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1178','Idol','#### Description\nKarl is competing in the preliminary round of a talent show called North-Western European Idol (NWEI), and wants to advance to the next round: World Idol. In the talent show, each contestant gets 10 minutes to impress the judges. After all the contestants have performed, each of the judges will cast two distinct votes. A vote can be either in favour of a contestant (meaning this contestant should advance) or against a contestant (meaning this contestant should not advance). The number of contestants that advance to the next round is not known in advance; if there are only very bad contestants, then it is possible that nobody will advance, or if everybody is amazing, then everybody may advance.\n\nKarl is afraid that the judges will not appreciate his programming talents, and hence wants to use his other talent to advance to the next round: hacking. Having gained access to the jury system, Karl is capable of overriding the regular process of counting votes, and instead selecting exactly which contestants advance to the next round. The only problem is, he has to be careful not to arouse suspicion.\n\nEach judge expects that at least one of his (or her) own two votes corresponds to the outcome of the contest. If the outcome contradicts both votes, the judge becomes alarmed. As an example, assume judge Harry casts a vote in favour of Pete and a vote against Sally. If Sally advances and Pete does not, judge Harry will be alarmed and may discover Karl’s tampering with the system.\n\nSince Karl’s programming talents are limited (otherwise he would not have needed his hacking talents), he needs you to make a program that ﬁnds out if there is a set of contestants, which includes himself, that he can select to advance to the next round by hacking the jury system, such that it does not alarm any of the judges.\n\n#### Input\nFor each test case, the input is as follows: One line containing two positive integers: the number of contestants n (2 <= n < 1000) and the number of judges m (1 <= m < 2000). M lines containing the votes of each judge. Each of these line contains two integers: the numbers a (1 <=|a| <= n), and b (1 <=|b|<= n), the two votes of this judge (|a| ≠ |b|).\n\nA vote x < 0 means that the vote is against advancement of contestant |x|.\n\nA vote x > 0 means that the vote is in favour of contestant |x|.\n\nContestants are numbered 1 … n. Karl is contestant 1.\n\n#### Output\nFor each test case, print one line of output containing the word ‘yes’ if there is a set of contestants that advances to the next round that includes Karl, and does not alarm any of the judges. If there is no such set of contestants, the line should contain ‘no’.\n\n#### Sample Input\n```\n4 3\n1 2\n-2 -3\n2 4\n2 4\n1 2\n1 -2\n-1 2\n-1 -2\n```\n\n#### Sample Output\n```\nyes\nno\n```\n\n',30000,65535,'0',11,79,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1179','Checke Identity or not','#### Description\nYou likely have seen that x(sin2 x + cos2 x) − x = 0, and you may have seen that sin(2x) − 2 sin x cos x = 0. But did you know that tan (2x)(x − x tan2 x) − 2x tan x = 0? Would you believe that sin (2x) − 2 cos x = 0? That last one is false, but don’t just take our word for it; you should write a program that determines whether an algebraic expression simplifies to zero (whenever it is defined). \n#### Input\nThe input consists of multiple test cases, each on one line. Each test case starts with an integer N, the number of tokens that describes a formula. The next N tokens describe a formula in reverse polish notation. The notation works as follows. There is a stack that begins empty, and the following commands manipulate the contents of the stack:\n\n• “x” pushes the variable x to the stack.\n\n• “sin”, “cos”, and “tan” replace the top element of the stack with its sin, cos, and tan, respectively.\n\n• “+”, “-”, and “*” replace the top two elements of the stack (a on top, followed by b) with their sum (b + a), difference (b − a), and product (b   a), respectively.\n\nYou may assume that the input is valid, and results in a single item on the stack, which is the desired expression. The length of a line will be at most 300 characters. Function arguments can contain functions, so x sin sin is valid, but the recursion will not go any deeper than this. The input terminates with a line with N = 0.\n\n#### Output\nFor each test case, print out a single line that contains “Identity” if the expression is always zero, and “Not an identity” otherwise (quotes added for clarity).\n\n#### Sample Input\n```\n15 x sin x sin * x cos x cos * + x * x -\n16 x sin x cos * x sin x cos * + x x + sin -\n24 x x + tan x x tan x tan * x * - * x tan x * - x tan x * -\n10 x x + sin x cos - x cos -\n0\n```\n\n#### Sample Output\n```\nIdentity\nIdentity\nIdentity\nNot an identity\n```\n\n\n',3000,65535,'0',11,80,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('118','Magic Square','#### Description\nA magic square is an arrangement of the numbers from 1 to $$$n^2$$$ in an $$$n \\times n$$$ matrix, with each number occurring exactly onece, and such that the sum of the entries of any row, any column, or any main diagonal is the same.\n\nThis problem is focused on the odd-numbered magic squares. It means that n is odd. You will use such a method to construct the odd-numbered magic squares. The basic rule of doing so is that one counts diagonally upwards to the right. Let\'s do it step by step.\n\nLet\'s begin in the middle of the top row with the 1.(In this example, n=3,E for empty square)\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| E || 1 || E\n|-\n| E || E || E\n|-\n| E || E || E \n|}\n\nWe suppose that the bottom row is the row immediately above the top row. Moving diagonally upwards to the right means moving up one row and over one column to the right. So the 2 goes in the bottom row one column to the right of the column containing the 1.\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| E || 1 || E\n|-\n| E || E || E\n|-\n| E || E || 2 \n|}\n\nSimilarly, moving right one column from the  rightmost column puts us in the leftmost column, so the 3 must be placed in the leftmost column, and moving up one row we put the 3 in the row above the row containing the 2.\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| E || 1 || E\n|-\n| 3 || E || E\n|-\n| E || E || 2 \n|}\n\nWhat if there is a number already occupying the grid one would like to move into? When this happens, the rules is to abandon, just this once, the plan of moving diagonally upwards to the right and instead just drop down one grid from the grid one is in presently. So the 4 will be placed directly below the 3.\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| E || 1 || E\n|-\n| 3 || E || E\n|-\n| 4 || E || 2 \n|}\n\nThen:\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| E || 1 || 6\n|-\n| 3 || 5 || E\n|-\n| 4 || E || 2 \n|}\n\nSince 6 is in the top row, 7 would normally go in the bottom row. Since 6 is on the right edge, 7 would normally go on the left edge. The position which is in the bottom row and the left edge is the lower left corner. That is where we want to put the 7. Unfortunately, it is already occupied by the number 4. So there is a number in the way, and the rule is then to drop down to the square below the 6. So the 7 should be directly below the 6.\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| E || 1 || 6\n|-\n| 3 || 5 || 7\n|-\n| 4 || E || 2 \n|}\n\nThen:\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| 8 || 1 || 6\n|-\n| 3 || 5 || 7\n|-\n| 4 || 9 || 2 \n|}\n\nYour task here is to write a program to determine which number will be put in the lower right corner in the n magic square. Of course, you should use the above rules to construct magic squares.\n\n#### Input\nYou will get several n(n is odd natural number, n<1,000,000) from input. Each one is in a line by itself.\n\nAnd the input is terminated by a line with a single zero.\n\n#### Output\nFor each n, you should print exactly one number in ONE line, representing the number in lower right corner of the n magic square. \n\n#### Sample Input\n```\n3\n0\n```\n\n#### Sample Output\n```\n2\n```',10000,32768,'0',1,17,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1180','Skippy','#### Description\nSkippy is a two-player game whose \\board\" is a long string of characters, which is traversed via a game token left-to-right, until coming to the end. After each move in the game, the token is “sitting\" at a particular place in the string, which we\'ll call the current position (CP). (Initially the token is sitting to the left of the leftmost character.) In addition to the string, the players are given a positive integer k. On a player\'s turn, she picks a character c and then moves to the kth occurrence of character c to the right of the CP.\n\nPlayer A, moving first, tries to end the game as quickly as possible and so picks the character that will move the token furthest to the right. Player B, on the other hand, wants the game to go as long as possible and so picks the character that would move the token the smallest distance to the right. The game ends when a move either places the token at the rightmost character of the string, or the move moves the token past the end of the string. (We could think of this as the game ending in the middle of a turn, which often happens.) You are going to determine the number of turns in this particular game.\n\nFor example, let\'s suppose the string is abbabbbaaabbba and k = 2. Player A will pick the character a, which moves the CP to position 4. Player B then picks b, moving CP to position 6. A then picks b, moving CP to position 11. B again picks b, moving CP to position 13. Finally A picks either character which moves CP past the end of the string, ending the game in 5 turns.\n\n#### Input\nInput for each test case is given on one line of the form a n k s where a, n, and k are positive integers and s is a string. s is a string of length n over the alphabet consisting of the first a lower case letters. 1 <= a <= 26, 1 <= n <= 5000, and 1 <= k <= 100. A line with 0 will follow the input for the last test case.\n\n#### Output\nOutput one line for each test using the format given below, indicating the number of turns taken by the players using the strategies described above.\n\n#### Sample Input\n```\n2 14 2 abbabbbaaabbba\n2 5 2 abbab\n3 10 1 abbabcacba\n4 15 3 abdcbcbabcdbdac\n0\n```\n\n#### Sample Output\n```\nCase 1: 5\nCase 2: 2\nCase 3: 3\nCase 4: 2\n```\n\n',3000,65535,'0',11,81,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1181','Edge Case','#### Description\nIn graph theory, a matching or independent edge set in a graph G = (V, E) is a set of edges M ⊆ E such that no two edges in the matching M share a common vertex.\n\nRecently you saw in the news that “The Sveriges Riksbank Prize in Economic Sciences in Memory of Alfred Nobel” (informally, the Nobel Prize in Economics) for 2012 was awarded to Alvin E. Roth and Lloyd S. Shapley for, amongst other things, their algorithm for finding a matching satisfying certain criteria in a bipartite graph. Since you have also heard that matchings in cycle graphs have applications in chemistry your thoughts centre around a plan for a beautiful future where your Christmas shopping is more luxurious than ever! \n\nThe cycle graph, Cn, n >= 3, is a simple undirected graph, on vertex set {1, … , n}, with edge set E(Cn) = {{a, b} | |a – b| ≡ 1 mod n}. It is 2-regular, and contains n edges. The graphs C3, C4, C5, and C6 are depicted in Figure 1.\n\nFigure 1: The graphs C3, C4, C5, and C6.\n\nYour ﬁrst step towards Nobel Prize fame is to be able to compute the number of matchings in the cycle graph Cn. In Figure 2 the seven matchings of the graph C4 are depicted.\n\n\nFigure 2: The matchings of C4. The edges that are part of the respective matching are coloured green, while the edges left out of the matching are dashed. M1 = Ф;, M2 = {{2,1}}, M3 = {{3,2}}, M4 = {{4,3}}, M5= {{1,4}}, M6 = {{2,1},{4,3}}, and M7 = {{3,2},{1,4}}.\n\n#### Input\nFor each test case, you get a single line containing one positive integer: n, with 3 <= n <= 10000.\n#### Output\nFor each test case, a row containing the number of matchings in Cn.\n#### Sample Input\n```\n3\n4\n100\n```\n\n#### Sample Output\n```\n4\n7\n792070839848372253127\n```\n\n',3000,65535,'0',11,82,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1182','Jerry and Tom','#### Description\nJerry and Tom are building a robot for a course project and have discovered that they need to fit two pieces of Lego into an opening. The opening is x centimeters wide and the sum of the lengths of the two pieces has to be precisely equal to the width of the opening, or else the robot will break during the project demonstration, with catastrophic consequences for the grades of the two students.\n\nLuckily, Jerry and Tom were able to sneak into the physics laboratory late one night to measure the lengths of their remaining Lego pieces very accurately. Now they just need to select two pieces that will fit the opening perfectly.\n\n#### Input\nFor each test case, you get:\n\na line containing one positive integer: x, denoting the width of the opening in centimeters, with 1 <= x <= 20.\n\na line containing one non-negative integer: n, denoting the remaining number of Lego pieces Jerry and Tom have access to, with 0 <= n <= 1000000.\n\nn lines containing positive integers L, denoting lengths of Lego pieces in nanometers. Jerry and Tom have told you that no piece of Lego is longer than 10 centimeters, or 100000000 nanometers.\n\n#### Output\nFor each test case, a row containing the word ‘danger’ if no two pieces of Lego exist that precisely fit into the opening, or ‘yes L1 L2’, with L1 <= L2, should two such pieces of lengths L1 and L2 exist.\n\nIn case multiple solutions exist, a solution maximizing the size difference |L1 – L2| must be printed.\n\n#### Sample Input\n```\n1\n4\n9999998\n1\n2\n9999999\n```\n\n#### Sample Output\n```\nyes 1 9999999\n```\n\n',30000,65535,'0',11,83,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1183','Key Insight','#### Description\nAlice and Bob love to send each other messages, but they don’t like it when other people read their messages. Your friend Charles is very interested in what Alice and Bob send to each other, but since Alice and Bob are encrypting their messages he is unable to read them, even though he is able to intercept the encrypted messages (called “ciphertext”).\n\nRecently, Charles has not only intercepted an encrypted message, he also knows the original content of this message (which is called “plaintext”). To help him decrypt future messages between Alice and Bob, you are asked to write a program that will help him look for the encryption key.\n\nCharles has informed you that he knows that Alice and Bob are using a transposition block cipher. This means that for each block of k characters in the message, the characters within the block are re-ordered into one of k! possible permutations during encryption. Each permutation is determined by its unique corresponding encryption key. The key corresponding to the permutation shown in Figure 1 would be some representation of (123456) -> (514362). Since your only task is counting (possible) keys, the actual representation is not relevant.\n\nFortunately, Charles does know the block size k, and he knows that the plaintext and ciphertext that he intercepted consist of one or more full blocks of length k (i.e., no incomplete blocks) that have each been encrypted with the same key.\n\nGiven the plaintext M and ciphertext C that Charles has intercepted, your program will compute the number of possible encryption keys.\n\n#### Input\nFor each test case, the input contains three lines: One line containing a positive integer k, the block size (k >= 1). One line containing M, the plaintext (1 <= |M| <= 100; |M| is a multiple of k). One line containing C, the ciphertext (|C| = |M|).\n\nBoth plaintext and ciphertext consist only of lower-case letters.\n\n#### Output\nFor each test case, print one line containing the number of possible encryption keys of size k. This number will not exceed 2^63 - 1. If it is impossible to obtain M from C by a transposition cipher of block size k, print ‘0’ (the number zero).\n\n#### Sample Input\n```\n4\ntreewood\nertedowo\n1\nnwerc\nncrew\n6\nsecret\netrcse\n1\nimpossibru\nyoudontsay\n```\n\n#### Sample Output\n```\n1\n0\n2\n0\n```\n\n',3000,65535,'0',11,84,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1184','Hidden Code','#### Description\nIt’s time to put your hacking skills to the test! You’ve been called upon to help crack enemy codes in the current war on... something or another. Anyway, the point is that you have discovered the encryption technique used by the enemy; it is quite simple, and proceeds as follows. Note that all strings contain only uppercase letters of the alphabet.\n\n1. We are given a key K and a plaintext P which is encrypted character-by-character to produce a ciphertext C of the same length.\n\n2. If |K| is the length of the key K, then the first |K| characters of C are obtained by adding the first |K| characters of P to the characters of K, where adding two letters means interpreting them as numbers (A = 0, B = 1, and so on) and taking the sum modulo 26. That is, Ci = (Pi +Ki) mod 26 for i = 1, . . . , |K|. If |K| > |P|, then the extra characters in K are ignored.\n\n3. The remaining characters of P, i.e. Pi for i > |K|, are encrypted using the previous ciphertext characters by Ci = (Pi + Ci−|K|) mod 26 for i = |K| + 1, . . . , |P|.\n\nAs an example, consider the encryption of the string “STANFORD” using the key “ACM”:\nSTA NFORD\n+ ACM SVMFA\n---------------\nSVM FAAWD\n\nKnowing this, you are well on your way to being able to read the enemy’s communications. Luckily, you also have several pairs of plaintexts and ciphertexts which your team recovered, all of which are known to be encrypted with the same key. Help find the key that the enemy is using.\n\n#### Input\nThe input consists of multiple test cases. Each test case begins with a line containing a single integer N, 1 <= N <= 100, the number of plaintext and ciphertext pairs you will receive. The next N lines each contain two strings P and C, the plaintext and ciphertext, respectively. P and C will contain only uppercase letters (A-Z) and have the same length (at most 100 characters). The input terminates with a line with N = 0.\n\n#### Output\nFor each test case, print a single line that contains the shortest possible key or “Impossible” (quotes added for clarity) if no possible key could have produced all of the encryptions.\n\n#### Sample Input\n```\n1\nA B\n3\nSTANFORD SVMFAAWD\nAVOWIENR AXAWFEJW\nVAMRI VCYMK\n3\nABCDEFGHIJKLMNOPQRSTUVWXYZ AAAAAAAAAAAAAAAAAAAAAAAAAA\nY Y\nZ Z\n2\nA B\nB A\n0\n```\n\n#### Sample Output\n```\nB\nACM\nAZYXWVUTSRQPONMLKJIHGFEDCB\nImpossible\n```\n',3000,65535,'0',11,85,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1185','A Simple Math Problem','#### Description\n青蛙是一种不精通计算的生物，现在它希望你来帮它解决困扰着它的问题。\n\n#### Input\n第一行输入t(t<100)，其后为t个Case，每个Case占一行，每行输入两个整数n,m(0<n,m<100)\n\n#### Output\n对于每个Case，输出 $$$ \\frac{n}{m} + \\frac{n}{m+1}+ \\frac{n}{m+2}+ \\cdots + \\frac{n}{m*m-1}$$$，\n\n结果保留四位小数\n\n#### Sample Input\n```\n2\n3 3\n7 8\n```\n\n#### Sample Output\n```\n3.6536\n14.9479\n```\n\n',1000,65536,'0',11,86,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1186','Jump','#### Description\n大家都知道，青蛙最喜欢的就是跳。现在，青蛙在一个长度为n的跑道上的一端，那么，它的目标当然就是跳到另一端。但是，青蛙是一个奇怪的生物，它的跳有以下特点：\n\n1.每向前跳完一次后，它的向前速度会增加d个单位。\n\n2.每向前跳完后，它必须向后回跳x个单位。\n\n3.青蛙的初始速度为v。\n\n#### Task\n请计算青蛙到达另一端所须步数(包括回跳，我们保证青蛙能跳到另一端)\n#### Input\n第一行输入整数t(t<50)，以表Case数，每个Case占一行，分别输入整数n,d,x,v(0<n<2^31-1,0<d<10,0<x<10000,0<v<10)\n#### Output\n对于每一个Case，输出一行，以表该Case中青蛙到达另一端所需步数\n#### Sample Input\n```\n3\n1 1 1 1\n10 1 1 1\n1354354 2 30 31\n```\n\n#### Sample Output\n```\n1\n9\n2327\n```\n',1000,65536,'0',11,87,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1187','Jump Again','#### Description\n大家都知道，青蛙最喜欢的就是跳。现在，青蛙在一个长度为n的跑道上的一端，那么，它的目标当然就是跳到另一端。但是，青蛙是一个奇怪的生物，它的跳有以下特点：<br/>\n1.每向前跳完一次后，它的向前速度会增加d个单位。<br/>\n2.每向前跳完后，它必须向后回跳x个单位。<br/>\n3.青蛙的初始速度为v。\n\n#### Task\n请计算青蛙到达另一端所须步数(包括回跳，我们保证青蛙能跳到另一端)\n#### Input\n第一行输入整数t(<font color=red>t<1000000</font>)(注意，数据量增大)，以表Case数，每个Case占一行，分别输入整数n,d,x,v(0<n<2^31-1,0<d<10,0<x<10000,0<v<10)\n\n#### Output\n对于每一个Case，输出一行，以表该Case中青蛙到达另一端所需步数\n#### Sample Input\n```\n3\n1 1 1 1\n10 1 1 1\n1354354 2 30 31\n```\n\n#### Sample Output\n```\n1\n9\n2327\n```\n#### Init\n\n<font color=red>本题数据量较大，请不要用cin函数输入，而采用scanf函数，以下为scanf函数参考格式。\n\nscanf(\"%d\",&n);//输入整数 int\n\nscanf(\"%lf\",&n);//输入双精度浮点数 double</font>',3000,65536,'0',11,88,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1188','Frog Encoding','#### Description\n青蛙们发现在传输信件时经常会被别人偷看，愤怒的青蛙向码农们求救。于是，码农们为它们提供了一套加密和解密的方法，从而将它们的信件内容加密成一段莫尔斯电码。现在给出译码程序:<br>\n0.加密序列为：\n```\n----**----***--**---**---*------******--***--**---**---*----**---***---*****----***--**-----******--\n```\n1.每五个字符为一段的莫尔斯电码各对应着一个数字，将其转换为数字为：\n```\n91322173322123613273\n```\n2.将该串数字分拆为两个一小段的形式：\n```\n91 32 21 73 32 21 23 61 32 73\n```\n3.按以上每小段中的两个数字在手机上输出字母，当该两个数字为xy时，按y次数字键x即可得到对应字母(如91=\'w\')，以下为对应字母串：\n```\nWEAREACMER\n```\n至此，\"WEAREACMER(We are ACMer)\"即为解密序列，加密序列已解密成功。\n现在，你能将程序中所输入的一串加密序列解密吗？\n\n#### Input\n第一行输入Case个数t(t<500)，对于余下t行，每行输入一串莫尔斯电码序列(保证序列有效，序列长度为l，l为10的整数倍且l<5000)\n\n#### Output\n对于每个Case，输出一行，以表示其对应结果(所有字母用大写表示)\n#### Sample Input\n```\n1\n----**----***--**---**---*------******--***--**---**---*----**---***---*****----***--**-----******--\n```\n\n#### Sample Output\n```\nWEAREACMER\n```\n\n#### Init\n```\n莫尔斯电码表：\n0 ----- 1 *----\n2 **--- 3 ***--\n4 ****- 5 *****\n6 -**** 7 --***\n8 ---** 9 ----*\n\n手机键盘字母对应表：\n2 ABC   3 DEF\n4 GHI   5 JKL\n6 MNO   7 PQRS\n8 TUV   9 WXYZ\n```',3000,65536,'0',11,89,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1189','Min again','#### Description\n我们已经知道青蛙是一种不精通计算的生物，现在它又希望你来帮它解决困扰着它的问题：\n给一个n*n的矩阵A:	\n```\n									a[1,1] a[1,2],...,a[1,n]\n									a[2,1],a[2,2],...,a[2,n]\n									...\n									a[n,1],a[n,2],...,a[n,n]\n```\n在矩阵A中找两个数a[i,j]和a[x,y],使得a[i,j]-a[x,y]的值最小，并且满足以下2个条件之一：\n\n1.i>x\n\n2.i=x且j>y\n\n#### Input\n第一行输入t(t<10)，其后为t个Case，每个Case中第一行输入一个整数n(2<=n<=1000),接下来输入一个n*n的矩阵(矩阵中每个元素为一个大于-1000000000且小于1000000000的整数)。\n#### Output\n对于每个Case，输出满足条件的最小差值a[i,j]-a[x,y]。\n#### Sample Input\n```\n2\n2\n-3 3\n-3 3\n3\n0 8 -9\n7 -4 3\n1 5 -10\n```\n\n#### Sample Output\n```\n-6\n-18\n```\n\n#### Hint\n本题数据量较大，请不要用cin函数输入，而采用scanf函数，以下为scanf函数参考格式。\n\n<pre>scanf(\"%d\",&n);//输入整数 int</pre>',3000,65536,'0',11,90,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('119','Job Assignment','#### Description\nOne problem cones up when we are trying to assign jobs to staffs. Because some of them complain that the tasks assigned to them are so bother. This emotion will lead to very bad effect in sequence. So we try to satisfy every staff as possible as we can. At first, we make an investigation to get the information about staffs\' attitude towards every task. And then we evaluate each attitude as a point(a positive integer number not larger than 100). The higher the point is, the more the staff is satisfied. Because the staffs are very busy, they have only a little leisure time to finish the task. So we just assign one task to one person, of course, one task can not be assigned to different persons. Now we give you all the points and hope you can help us to assign the tasks to make the sum of the points which correspond the assignment is maximum.\n\n#### Input\nInput will contain several test cases. The first line of each test case only contains one integer number $$$N(0\\leq N \\leq 100)$$$. N is the number of staffs, also is the number of tasks. And then, the following N lines describe staffs\' attitude. Each line contains n positive integer numbers. The $$$j^{th}$$$ number in the $$$i^{th}$$$ line describes $$$i^{th}$$$ staff\'s attitude to the $$$j^{th}$$$ task.\n\nN=0 indicates the end of input.\n\n#### Output\nFor each test case you should output one line, and judge one number in this line. The number is the maximum.\n\n#### Sample Input\n```\n2\n10 90\n80 100\n3\n50 60 70\n70 75 80\n80 90 100\n0\n```\n\n#### Sample Output\n```\n170\n230\n```',10000,32768,'0',1,18,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1190','Checker Challenge','\n\n#### Description\nExamine the 6x6 checkerboard below and note that the six checkers\nare arranged on the board so that one and only one is placed in each\nrow and each column, and there is never more than one in any diagonal.\n(Diagonals run from southeast to northwest and southwest to northeast\nand include all diagonals, not just the major two.)\n\n<center><pre>\n          Column\n    1   2   3   4   5   6\n  -------------------------\n1 |   | O |   |   |   |   |\n  -------------------------\n2 |   |   |   | O |   |   |\n  -------------------------\n3 |   |   |   |   |   | O |\n  -------------------------\n4 | O |   |   |   |   |   |\n  -------------------------\n5 |   |   | O |   |   |   |\n  -------------------------\n6 |   |   |   |   | O |   |\n  -------------------------\n</pre></center>\n\nThe solution shown above is described by the sequence 2 4 6 1 3 5,\nwhich gives the column positions of the checkers for each row from 1 to\n6:\n\n<center>\n<table border=\"1\">\n<tr><td>ROW</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td></tr>\n<tr><td>COLUMN</td><td>2</td><td>4</td><td>6</td><td>1</td><td>3</td><td>5</td></tr>\n</table>\n</center>\n\nThis is one solution to the checker challenge. Write a program\nthat finds all unique solution sequences to the Checker Challenge\n(with ever growing values of N).  Print the solutions using the\ncolumn notation described above.  Print the the first three solutions\nin numerical order, as if the checker positions form the digits of a\nlarge number, and then a line with the total number of solutions.\n\n#### Input\nThe first number $$$T(1\\leq T \\leq 10)$$$ means how many test cases will followed. For every test case will be a single line that contains a single integer N (6 <= N <= 13) that is the dimension of the N x N checkerboard.\n\n#### Output\nFor each test cases, print the follow contains:\nThe first three lines show the first three solutions found, presented as N numbers with a single space between them. The fourth line shows the total number of solutions found.\n#### Sample Input\n```\n1\n6\n```\n\n#### Sample Output\n```\n2 4 6 1 3 5\n3 6 2 5 1 4\n4 1 5 2 6 3\n4\n```\n',3000,65536,'0',11,91,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1191','Knight Travel','#### Description\n设有一个n*m的棋盘（2≤n≤50，2≤m≤50），如下图，在棋盘上有一个中国象棋马。\n规定：<br/>\n1)马只能走日字<br/>\n2)马只能向右跳,而不能向左跳\n问给定起点x1,y1和终点x2,y2，求出马从x1,y1出发到x2,y2的合法路径条数%10007。<br/>\n[[File:L92.jpg]]\n\n#### Input\n第一行1个整数t(t<10000)<br/>\n以下有t组输入,每组输入格式为:<br/>\n第一行2个整数n和m(2<=n,m<=50)<br/>\n第二行4个整数x1,y1,x2,y2(1<=x1<=x2<=n,1<=y1<=y2<=m)\n\n#### Output\n对于每组数据,输出方案数%10007\n#### Sample Input\n```\n1\n30 30\n1 15 3 15\n```\n\n#### Sample Output\n```\n2\n```\n',10000,32768,'0',11,92,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1192','Strange Images','#### Description\nIn the forest, we find some huge strange images, and we speculate these images may be drawn by adults.<br/> After reserching, we notice that it may be some rules on these image. We show you the image of size 1, 2, 3 as below:<br/>\n[[File:Strange_Images.jpg]]<br/>\nAs you see, every image is made up with circles. Now can you tell us the number of circles in the image of size n?\n\n#### Input\nThe first line contain an integer $$$T (T \\leq 500)$$$ which means the test case number.<br/> And for every test case, there will be only one line containing a number $$$n (1 \\leq n \\leq 100)$$$.\n\n#### Output\nFor every case, output your answer in a line.\n\n#### Sample Input\n```\n2\n1\n2\n```\n\n#### Sample Output\n```\n1\n7\n```\n',1000,65536,'0',11,93,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1193','A Poor Bull','#### Description\nDo you know the bull? Yeah, bull is a strange animal that may rush to you when you\'re wearing your red dress. Now, a bull fell into a maze. We can imagine, in the maze, some grids are stones and the other are blank. In order to escape from the maze, the bull are rushed everywhere. And because it is a bull, it can not stop until it meet a stone in the maze. If the bull reaches out of the border, you can assume that it will die because of falling off the cliff ^.^ . However, rushing will consume the energy. We name it, a rushing cost a unit of energy.<br/>\nWith the information above, can you work out if the bull may escape from the maze?<br/>\nHint : When rushing, the bull can not stop although it meet the exit position.<br/>\n[[File:L94.jpg|center]]<br/>\n\n#### Input\nThe first line contain an integer $$$T (T \\leq 500)$$$ which means the test case number. And for every test case, there will be several lines as description below:<br/>\nThe first line is three integers $$$m\\,, n\\,, e,$$$ which means that it is a maze of $$$m\\,$$$ rows and $$$n\\,$$$ column and the bull has $$$e\\,$$$ unit of energy at first.$$$(1 \\leq m,n \\leq 300, 1 \\leq e \\leq 100)$$$<br/>\nThen follows $$$m\\,$$$ lines of $$$n\\,$$$ characters, each of them will be \'.\', \'#\', \'B\' or \'E\'. \'B\' means the start position, \'E\' means the position to exit, \'#\' means a stone and \'.\' means nothing on the position.\n\n#### Output\nFor every test case, output a line containing the word \"YES\" or \"NO\", telling if the bull may escape the maze.\n\n#### Sample Input\n```\n4\n7 7 3\nB.....#\n1. 1. 1. 1. 1. .1. \n1. 1. 1. 1. 1. .1. \n1. 1. 1. 1. 1. .1. \n1. 1. 1. 1. 1. .1. \n1. E....1. \n1. 1. 1. 1. 1. 1. 1. \n7 7 2\nB.....#\n1. 1. 1. 1. 1. .1. \n1. 1. 1. 1. 1. .1. \n1. 1. 1. 1. 1. .1. \n1. 1. 1. 1. 1. .1. \n1. E....1. \n1. 1. 1. 1. 1. 1. 1. \n7 7 3\nB.....#\n1. 1. 1. 1. 1. .1. \n1. 1. 1. 1. 1. .1. \n1. 1. 1. 1. 1. .1. \n1. 1. 1. 1. 1. .1. \n1. .E...1. \n1. 1. 1. 1. 1. 1. 1. \n7 7 7\n..B.##.\n1. E.....\n1. ......\n...#...\n.......\n......#\n.#.....\n```\n\n#### Sample Output\n```\nYES\nNO\nNO\nYES\n```\n',3000,32768,'0',11,94,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1194','Turtle Move','#### Description\nA turtle lives in a country named XXX. One day, this turtle wants to move from city \'S\' to city \'E\'. Country XXX have N cities, M land roads and K rivers , with both land roads and rivers unidirectional . The turtle can choose to walk or swim or both. However, because the turtle is hurt, it could only swim most once. Each road connects two cities and costs the turtle some minutes to pass. Similarly, each rivers connects two cities and costs the turtle some minutes to pass.<br/>\nThe turtle wants to travel from city \'S\' to city \'E\' in a minimum time. The cities is numbered from 0 to n-1. (It\'s possible that there are more than one road and more than one river between two cities!)<br/>\n\n#### Input\nThe first line is a integer $$$t(t \\leq 50)$$$, telling the number of test cases below.<br/>\nFirst line of each test case contains three integers $$$N(2 \\leq N \\leq 100),S ,E(0 \\leq S,E \\leq N-1),$$$ represent the total amount of cities, the Number of city \'$$$S\\,$$$\' , the Number of city \'$$$E\\,$$$\'.<br/>\nThe following line contains an integers $$$M(1 \\leq M \\leq 10000)$$$ which represent the total amount of land road . Each line in the following $$$M\\,$$$ line contains three integers $$$U\\, , V\\, , W\\,(0 \\leq U,V \\leq N-1,1 \\leq W \\leq 100000)$$$ which means there is a land road between city No.$$$U\\,$$$ and No.$$$V\\,$$$ and costs the turtle $$$W\\,$$$ minutes to pass.<br/>\nAlso, the following line contains a integers $$$K(1 \\leq K \\leq 10000)$$$ which represent respectively the total amount of river .Each line in the following $$$K\\,$$$ line contains three integers $$$U\\, , V\\, , W\\,(0 \\leq U,V \\leq N-1,1 \\leq W \\leq 100000)$$$ which means there is a river between city No.$$$U\\,$$$ and No.$$$V\\,$$$ and costs the turtle $$$W\\,$$$ minutes to pass.\n\n#### Output\nFor every test case, output a line including the minimum time required to travel from \'S\' to \'E\'. If it is impossible to do so, output \'-1\'.\n#### Sample Input\n```\n2\n3 1 2\n2\n0 1 3\n0 2 3\n2\n0 1 1\n0 2 2\n3 1 2\n1\n0 1 3\n0\n```\n\n#### Sample Output\n```\n4\n-1\n```\n',3000,32768,'0',11,95,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1195','The ith SJY Number','#### Description\n00 defines SJY number as: a positive number, and the product of each of its number digit is the multiple of the sum of each of its number digit. ( Notice that 0 is not the multiple of any number).<br/>\nFor example , for 235, the product of each of its number digit is 2*3*5=30, the sum of each of its number digit is 2+3+5=10. Because 30=3*10 , then 235 is SJY.<br/>\nThe first SJY is obviously 1,<br/>\nThe second SJY is obviously 2,<br/>\n...<br/>\nOutput the nth SJY.<br/>\n\n#### Input\nThe first line is a integer $$$t(t \\leq 10,000),$$$ telling the number of test cases below.<br/>\nEach test case contains a integers $$$n(1 \\leq n \\leq 100,000).$$$\n#### Output\nFor each test case , out put the nth SJY number.\n#### Sample Input\n```\n3\n1\n2\n3\n```\n\n#### Sample Output\n```\n1\n2\n3\n```\n',3000,32768,'0',11,96,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1196','Coprime SJY','#### Description\nThere is a sequence named SSS consisting of N numbers (a1,a2,…,a[N]). Two numbers are called coprime if their greatest common divisor equals 1. For example, 9 and 28 are coprime. Every number i in SSS owns a SJY sequence. Define SJY squence for i as below:<br/>\n1. SJY sequence is a continuous subsequence of SSS which includes a[i].<br/>\n2. Except a[i], each number in SJY sequence is coprime with a[i].<br/>\nThere is M queries. Each query is a positive integer i (1<=i<=N). For each query, output the maximum length of SJY squence for i.<br/>\n(Due to the large amount of input, please use \"scanf()\" and \"prinf()\" for input/output)\n#### Input\nThe first line is a integer t(t<10), telling the number of test cases below. First line of each test case contains a integers N(1<=N<=200,000). The following line contains N positive integers which represent respectively a[i](1<=i<=N), all of them are not greater than 200,000.The following line contains a positive integers M(1<=M<=200,000) which represent respectively the total amount of queries.The following line contains M positive integers which represent respectively as described above.\n#### Output\nFor every test case, output the answer of each query.\n#### Sample Input\n```\n2\n3\n2 1 4\n2\n2 3\n6\n3 6 1 2 5 3\n4\n4 5 6 1\n```\n\n#### Sample Output\n```\n3\n2\n4\n6\n4\n1\n```\n',3000,32768,'0',11,97,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1197','Tetris','#### Description\nHere comes a game which is known by all of you. It\'s tetris. In wikimedia, tetris (Russian: Тетрис) is a tile-matching puzzle video game originally designed and programmed by Alexey Pajitnov in the Soviet Union. If you don\'t understand by now, I will tell you that its Chinese name is \"E Luo Si Fang Kuai\", and you get it ^o^.<br/>\nIn tetris, we make the tiles in different shapes drop in different column one by one. A row will disappear only when it is full of bricks. Now there are several tiles, can you drop them down optimistically so that all the rows can disappear after all tiles fall down?<br/>\nFor convenience, we promise a tile can not move in horizontal direction anymore when its height is lower than the highest brick. As example:<br/>\n[[File:L98.1.jpg|center]]<br/>\nNow we sign every shape of tiles with a number, as below:<br/>\n[[File:L98.2.jpg|center]]<br/>\n#### Input\nThe first line contain an integer T (T<500) which means the test case number.<br/>\nAnd for every test case, there will be several lines as description below:<br/>\nThe first line is two integers m, n. n means that there are a container with n (2<=n<=10) column. m means that currently there are m (0<=m<=20) rows of bricks in the container. Then follows m lines of n characters, each of them will be \'.\', \'#\'. \'.\' means there is no brick and \'#\' means there is a brick.<br/>\nThen there is a line. The first number is k (1<=k<=5) and k number follow, descripting the tiles we give in order.<br/>\n#### Output\nFor every case, output a line containing a word \"YES\" or \"NO\", meaning that if you can empty the container with your optimistic strategy.\n#### Sample Input\n```\n4\n1 9\n1. .1. 1. .1. 1. .1. \n3 1 1 1\n0 10\n5 7 7 7 7 7\n3 5\n1. ....\n1. 1. ...\n1. 1. 1. .1. \n2 6 1\n3 5\n1. ....\n1. 1. ...\n1. 1. 1. .1. \n2 1 6\n```\n\n#### Sample Output\n```\nYES\nYES\nNO\nYES\n```\n\n',5000,32768,'0',11,98,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1198','The SJY of Sequence','#### Description\nGiven a sequence a1,a2,a3，„„,an-1,an, 00 defines the \"SJY value\" of this sequence as :<br/>\n```\nSJY = floor(abs(a1-a2))+floor(abs(a1-a3))+floor(abs(a1-a4))+……\n      floor(abs(a2-a3))+floor(abs(a2-a4))+floor(abs(a2-a5))+……\n      floor(abs(a3-a4))+floor(abs(a3-a5))+floor(abs(a3-a6))+……\n      floor(abs(an-1-an));\n```\nYour task is to output the SJY value of the sequence given.<br/>\n\n#### Input\nThe first line is a integer t(t<=10), telling the number of test cases below. First line of each test case contains a integers N(1<=N<=50,000) denoting the amount of numbers in the sequence. The following line contains N real number denoting a1,a2,a3，„„,an-1,an.(ai<100,000, ai is a real number with 4 decimals, that is, there are 4 digits after the decimal point).\n#### Output\nFor every test case, output the SJY value of each sequence.\n#### Sample Input\n```\n3\n3\n3.0014 2.0015 5.0001\n4\n1023.3345 1023.0005 1023.9994 1023.3845\n2\n1.0004 2.0004\n```\n\n#### Sample Output\n```\n3\n0\n1\n```\n#### Init\n```\nfloor(x) = is the largest integer not greater than x . \nabs(x)= |x| is the non-negative value of x without regard to its sign.\nEg: floor(3.9011)=3  floor(1.2343)=1  abs(-1.5)=1.5  abs(56.4)=56.4\n```',3000,32768,'0',11,99,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1199','Ant\'s Route','#### Description\nAn ant is finding cake in the forest. It is excellent in smelling and can easy to find out the place where the cake located. However, some walls are built in the strange forest.<br/>\nNow, we know that the ants are too stupid to find a correct route. So it sent an SOS information to us and ask for help. Wise as you are, can you find a shortest route for the ant so that it can reach the cake as soon as possible.<br/>\nTo simplify, in this situation, we promise there are at most one wall in the forest. We can regard the location of the ant and cake as a point and the wall as a segment.\n#### Input\nThe first line is a integer t(t<500), telling the number of test cases below. Then for every test case, it will be a line containing these 8 integer: x1, y1, x2, y2, x3, y3, x4, y4 (-10000 < x1, y1, x2, y2, x3, y3, x4, y4 < 10000)<br/>\nNotice:(x1, y1) is the ant\'s locate, (x2, y2) is the cake\'s locate, (x3, y3), (x4, y4) is the endpoints of the wall.<br/>\n#### Output\nFor every test case, output a line including the minimum distance. All the answer have an absolute error within 1e-4 will be consider as correct answer.\n#### Sample Input\n```\n2\n0 0 2 0 1 1 1 -1\n0 0 1 0 2 1 2 -1\n```\n\n#### Sample Output\n```\n2.8284\n1.0000\n```\n\n',3000,32768,'0',12,0,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('12','Sequence','#### Description\nWe are given a integer sequence, your job is find the length of the longest contiguous subsequence that is strictly increasing or strictly decreasing.\n\n#### Input\n+ First number $$$T (1\\leq T \\leq 100)$$$, represent how many test cases.\n+ For each test case the first number is $$$N (1\\leq N \\leq 50)$$$.\n+ Then $$$N\\,$$$ positive integers are followed, all of them are less than 101.\n\n#### Output\nFor each test case output the answer in one line.\n\n#### Sample Input\n```\n3\n3 1 1 1\n3 1 2 3\n4 4 3 2 1\n```\n\n#### Sample Output\n```\n1\n3\n4\n```\n',1000,32768,'0',0,11,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('120','Delivering Food','#### Description\nCollege students have wide freedom in many circumstances. For instance, nowadays, more and more students choose to order food from outside school, instead of eating in the school canteens. Owing to the rapid development of network communication, the ways students ordering food are multifarious. They can order food on the phone, as well as through network such as QQ or BBS. Ordering food is convenient and laborsaving, however, sometimes many students may complain about waiting too long time for the food and some students may even eat other food instead because of not being able to wait so long. As a result, the students who receive food late will be depressed and the benefit and credit of the fas food canteens will be debased.\n\nIvan and Cristy graduated from the same college recently. Considering the awful circumstances above, the establish a delivery company (named IC), which controls the food delivery of the fast food canteens. They hope the IC company provide students with good and fast services in scientific, rational and concentrative ways of delivery. Certainly, they hope to benefit at the same time.\n\nNow, let\'s suppose there are N places, one of which is the unique food delivery center and all the food are sent from it. The other N-1 places are dorms to which food must be delivered. Each dorm has a time limit after which food can not be accepted, that is to say, the food ordered by the students in a dorm must be received before the dorm\'s time limit. Because the IC company adopts scientific and concentrative methods, all the food needed are well prepared and there is no limit in the amount of food that can be delivered at a time. However, because the company has been set up only for a short time, there is only one delivery tram at work for the moment. In addition, in order to estimate the efficiency of delivery, the IC company will compute the time for delivery. They set the time when the food is just sent form the delivery center 0, and the distance between two places is denoted as the walking time between them. Because there may be more than one way connecting two places, the time need to walk from one place to another place may be not unique.\n\nNow,your job is to help the IC company to find out a delivery way, which will satisfy all the requests of the dorms (arrive at every dorm before the dorm\'s time limit) and minimize the total waiting time of all the dorms (the waiting time of a dorm is from 0 to the time the food is accepted by the students in the dorm). If there is no way satisfying all the requests of the dorms, the IC company will regard the delivery as a failure.\n\n#### Input\nInput will contain several test cases. Each test case begins with a line containing an integer $$$n(2\\leq n \\leq 30)$$$,representing the number of places, and we suppose the first place is the delivery center. In the following n lines, each line represents one place and contains n positive integers(include 0) separated by a single space. The $$$j^{th}$$$ integer of the $$$i^{th}$$$ line is the walking time from the $$$i^{th}$$$ place to the $$$j^{th}$$$ place. The next line after the n lines contains n-1 positive integers, representing the time limits of the dorms.\n\nThe last test case is followed by a line containing one zero. No extra spaces at the beginning or end of each line.\n\n#### Output\nFor each test case in the input you should output an integer, representing the minimum total waiting time of all the dorms. If no solution is found, you should output -1 in the corresponding line.\n\n#### Sample Input\n```\n4\n0 3 8 6\n4 0 7 4\n7 5 0 2\n6 9 3 0\n30 8 30\n3\n0 10 10\n10 0 1\n10 1 0\n10 10\n0\n```\n\n#### Sample Output\n```\n36\n-1\n```',10000,32768,'0',1,19,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1200','Finish Task','#### Description\nAt one time, one machine can only work on one task. Given N task, each of which require time T[i] to finish. Since there is only one machine, when a task is being worked on, others have to wait.<br/>\nTherefore, every task has to experience a \"waiting time\" and a \"working time\" before it could be finished. Define \"finish time\" to be \"waiting time\" + \"working time\". Order the sequence of tasks to be worked on so that the total amount of \"finish time\" is minimized.\n#### Input\nThe first line is a integer t(t<100), telling the number of test cases below. First line of each test case contains a integers N(1<=N<=100). The following line contains N positive integers, all of them are not greater than 1,000.\n#### Output\nFor every test case, output a line including the minium of the total amount of \"finish time\".\n#### Sample Input\n```\n2\n4\n3 4 5 6\n8\n6 5 4 3 2 1 3 5\n```\n\n#### Sample Output\n```\n40\n102\n```',3000,32768,'0',12,1,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1201','Chop Sticks','#### Description\nThere\'re N straight sticks lying in a straight line. Sticks may overlap with each other.\n\nHere\'s what happenned:\n\n1. For some stupid reason, you can not move any stick.\n\n2. For some stupid reason, you can chop into a point and seperate any stick acrossing that point precisely into two.\n\n3. For some stupid reason, you want to minimize the length of the longest stick after this chopping.\n\nAnd you wonder, what\'s the minimal length of the longest stick after the chopping, for some stupid reason.\n\n#### Input\nThere are multiple test cases.\n\nThe first line of the input is an integer T, which is the number of test cases following.\n\nThe description of each case starts with an positive integer N (1<=N<=100,000), which is the number of sticks, followed by N lines each decribing the location of a stick.\n\nSticks are described as intervals on X axis. The location of stick is given by two integers XL and XR (0<=XL<XR<=1,000,000,000), the coordinates of the left and right endpoint of the stick.\n\n#### Output\nFor each case, output a line containing the minimal length of the longest stick after the chopping, with 2 digits precision.\n#### Sample Input\n```\n2\n1\n0 5\n2\n0 4\n2 6\n```\n\n#### Sample Output\n```\n2.50\n3.00\n```\n',2000,32768,'0',12,2,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1202','Correct Sequence','#### Description\nivankevin loves sequences.\n\nA sequence of n element G is called a CORRECT SEQUENCE if:\n\n1. G is a proper sequence. That is the first k elements of G are all equal to an integer a, and the last n-k elements are all equal to another integer b, a>=b>=0, n>0, n>=k>=0.\n\n2. G is a graphic sequence. That is to say, G is sequence of numbers which can be the degree sequence of vertexes of some simple undirected graph.\n\nNow given a proper sequence G described by n,k,a, and b, ivankevin wants to know whether G is a correct sequence.\n\n#### Input\nThe first line is an integer T, the number of test cases.\n\nIn each case, there are four integers in an only line, which are n,k,a,b, as described. All the integers are nonnegative and no more than 1,000,000,000.\n#### Output\nFor each case, print \"YES\" in a line if G is a correct sequence. Otherwise, print \"NO\".\n#### Sample Input\n```\n2\n4 2 2 1\n4 1 2 1\n```\n\n#### Sample Output\n```\nYES\nNO\n```\n',2000,32678,'0',12,3,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1203','Previous Permutation','#### Description\nGiven a permutation A of 1..N (N<=20), now you need to find the K-previous permutation of A. We said that a permutation B is the 1-pervious permutation of A if and only if the next permutation of B is A in numerical order. In this way we can define 2-pervious permutation, 3-pervious permutation, etc. Please keep in mind that the permutation (1,2,...,N) does NOT have any pervious permutation.\n#### Input\nInput contains multiple test cases. \nFor each test cases, the first line of input contains two integers: N and K (0<k<=1,000,000,000), then the second line contains a permutation of 1...N. Input is terminated by a single line contains two zeros.\n#### Output\nFor each test case output the needed permutation n a single line. In case of none existence, just output -1 in a single line.\n#### Sample Input\n```\n5 4\n4 1 3 2 5\n5 1\n1 2 3 4 5\n5 119\n5 4 3 2 1\n0 0\n```\n\n#### Sample Output\n```\n3 5 4 1 2\n-1\n1 2 3 4 5\n```\n',1000,32768,'0',12,4,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1204','RP-path','#### Description\nThere are N islands connected by N-1 bridges.And for every two islands there\'s one and \nonly one unique path to travel between them through bridges. It\'s not difficult to figure\nout that there are N*(N-1)/2 paths in total.\n\nSome of the bridges are built a long time ago and it is dangerous to pass any of them.\nThose bridges are called RP-bridges,which means you need RP to pass them alive.\n\nIf the path connecting two islands includes at least one RP-bridges, this path is called\na RP-path.\n\nNow you want to minimize the number of RP-paths by rebuilding at most one bridge. What \nis the minimal number of RP-paths you can achive?\n#### Input\nThe input contains multiple cases.\n\nThe first line of each input is a positive integer N (1<=N<=200000), which is the number of islands.\n\nN-1 lines follow, each containing 3 integers: A,B and C, indicating there\'s a bridge connecting island A and island B. C=1 if this bridge is a RP-bridge, or C=0.\n#### Output\nFor each case, output the number of minimal number of RP-paths by rebuilding at most one bridge in one line.\n#### Sample Input\n```\n5\n3 5 1\n1 4 1\n5 2 1\n2 1 0\n```\n\n#### Sample Output\n```\n7\n```\n',2000,32768,'0',12,5,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1205','Summary','#### Description\nGiven a square of N*N, there is one bulb in each grid, which is not alight at first. There are  three opearations with the bulbs, which are as follows:\n\n0 x1 y1 x2 y2, turn off the bulbs between x1th row and x2th row(inclusive), and between y1th column and y2th column(inclusive);\n\n1 x1 y1 x2 y2, turn on the bulbs between x1th row and x2th row(inclusive), and between y1th\ny1th column and y2th column(inclusive);\n\n2 x1 y1 x2 y2, turn off the bulbs between x1th row and x2th row(inclusive), and between y1th column and y2th column(inclusive) which are alight at the moment; turn on the bulbs between x1th row and x2 throw(inclusive), and between y1th column and y2th column(inclusive) which are not alight at the moment.\n\nThe indexs of row and column are all begin with 0.\n\nYou are asked to count that how many bulbs are alight at last in each row and each column.\n\n#### Input\nThe first line of input contains an integer representing the number of test cases.\n\nEach test case consists of two parts. \nThe first part contains two integers, N(1<=N<=1000)\nand M(1<=M<=1000),which are mentioned above.\n\nThe second part contains M lines. Each line contains an operation. The format of operation is mentioned above.\n#### Output\nFor each test case, print two lines of integers. \nThe first line contains N integers, which are the number of alight bulb in each row, from 0 to N-1. \nThe second line contains N integers, which are the number of alight bulb in each column, from 0 to N-1.\n#### Sample Input\n```\n2\n4 2\n1 1 0 1 2\n2 2 1 3 3\n4 2\n1 1 0 1 2\n2 2 1 3 3\n```\n\n#### Sample Output\n```\n0 3 3 3\n1 3 3 2\n0 3 3 3\n1 3 3 2\n```\n',1500,32768,'0',12,6,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1206','Teleportation','#### Description\nAfter defeating Freeza, Son Goku managed to survive from the explosion of the planet Namek.He landed on the planet Yardrat.He found the people there have an interesting ability:teleportation, which can transmit one from a place to another instantly.He asked someone to each him this ability. Now they start practising.\n\nThere is a tall building, which can be considered as an n*m grid. The grid is labeled 0  ~ n-1 from top to bottom and 0 ~ m-1 from left to right. They start from the top of the building. The Yardrat teacher stands on the left and Goku on the right. Each time they teleport to some column of the next row below them. As Goku is a novice, there are some constraints. Firstly, the teacher should be left to Goku. Secondly, the distance between the teacher and Goku can neither be less than mi nor be more tha ma. That is to say, if the teacher is at the column i, Goku must be at the column in the range of [ i+mi , i+ma ]. Thirdly, not all the columns in the row is teleportable. Luckily, they know which column can be teleport to in each row.\n\nEach teleportation needs energy. When teleportation from column i to column j in the next row, the cost of energy is |i-j|. Goku wants to cost the least energy, but he is no so clever to plan the route of teleportation. So he turns to you. Please help Goku minimize the total energy cost of him and the teacher to teleport from row 0 to row n-1.\n#### Input\nThere are multiple input cases.\n\nThe first line is a positive integer, the number of test cases.\n\nIn each test case, the first line are 6 positive integers n, m, mi, ma, x, y (1<=n<=1000, 3<=m<=10, 1<=mi<=ma<m, 0<=x<y<m). x is the initial position of teacher and y is that of Goku.\n\nFollowing are n lines, each line has m characters. The characters can be \'*\' or \'.\'. \'*\' means Goku and the teacher can transport to the position while \'.\' means they can\'t.\n#### Output\nFor each test case, output an integer in a line. If the teacher an Goku can reach the bottom, output the least total energy cost of them, otherwise output -1.\n#### Sample Input\n```\n2\n6 4 1 2 0 2\n+ .+ + \n..**\n.*.*\n  -   - \n  - *.\n  - .*\n5 5 1 3 0 4\n  -   - *\n+ ..+ .\n  - *.*\n+ .+ .+ \n+ ....\n```\n\n#### Sample Output\n```\n6\n-1\n```\n',1000,32768,'0',12,7,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1207','Yu Ji','#### Description\nYu Ji is very annoying because he always ask others to guess his boring riddles. He will find different guys to guess his riddle for everyday. Unfortunately, he finds you to take\nthis boring job today. Here comes his riddle:\n\n\"Suppose there is a convex polygon with N vertexes, and K points inside the polygon, satisfying that no 3 points among these N+K ones are collinear. Then I add some segments connecting these point, such that the segments intersect each other only at these points and the polygon is divided into triangles. Do you know how many triangles there are after doing that? Guess it !”\n\nIs it very boxing? Absolutely! However, you still have to figure it out. Why? Let me tell you a story. Long long ago, there was a kid. One day, he was asked to guess a riddle by Yu Ji. He was not able to guess the answer. The next day, he died. His name is : Sun Ce.\n#### Input\nOn the first line of input, there is a single positive integer T(T<=100) specifying the number of test cases followed.\n\nFor each test case, there are two positive integer N(3<=N<=10000) and K(1<=K<=10000) in a line.\n#### Output\nYou should output an integer indicating the number of triangles in a line for each test case.\n#### Sample Input\n```\n1\n4 1\n```\n\n#### Sample Output\n```\n4\n```\n',1000,32768,'0',12,8,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1208','The Good Sequence','#### Description\nGive a sequence with n numbers: a[1],a[2],...,a[n]. We call it is a good sequence when exist three different numbers i,j,k(1<=i,j,k<=n) that make a[i]=a[j]+a[k].\nPlease judge if the given sequence is a good sequence. If it is a good sequence,output a string \"GOOD\".If not, output a string \"BAD\".\n\n#### Input\nThe first line is a integer t(t<50),which represent the number of test cases.\nFor each test case,the first line contains a integers: n (3 ≤ n ≤ 100). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100000000).\n\n#### Output\nFor each test case, if it is a good sequence,output a string \"GOOD\".If not, output a string \"BAD\".\n\n#### Sample Input\n```\n2\n5\n1 2 3 4 5\n6\n1 10 100 1000 10000 100000\n```\n\n#### Sample Output\n```\nGOOD\nBAD\n```\n',1000,65535,'0',12,9,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1209','Packing Toys','#### Description\nIn a toy factory, during every day myriad toys are being produced. Then they should be packed and output to everywhere. All of these toys have a same shape and volumn. So we provide a type of box. Per box can contain exactly two toy. That is to say we won\'t pack only one toy or over two toys in a box. However these toys may have different weight. With the information above, we plan to pack as many as toys in a way that the total weight of every box will not exceed a fixed value. Now, you, as a factory manager, is asked to give out a request number. Can you?\n\n#### Input\nThe first line contain a integer t (0 < t < 10), representing the number of test cases. In every test case, there will be two lines:\nThe first line is a integer n, m (0 < n < 1000000, 0 < m < 100000), the number of toys and the fixed value.\nThe second line contains n integer Wi (0 < Wi < 50000), means the weight of these toys.\n\n#### Output\nFor every case, now that every solution will be an even, you just need to print it divide 2 (the number of boxes used), in one line.\n\n#### Sample Input\n```\n1\n6 6\n1 6 2 4 3 3\n```\n\n#### Sample Output\n```\n2\n```\n',3000,65536,'0',12,10,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('121','Who\'s Winner?','#### Description\nNic and Susan play the game of multiplication by multiplying an integer p by one of the numbers from 2 to 9. Nic always starts with p=1, do multiplication. Then Susan multiplies the number, then Nic and so on. Before a game starts, they draw an integer $$$1 \\leq n < 4,294,967,295$$$ and the winner is who first reaches $$$p \\geq n$$$.\n\n#### Input\nEach line of input contains one integer number n.\n\n#### Output\nFor each line of input output one line either \'Nic wins.\' or \'Susan wins.\' Assume that both of them play perfectly.  \n\n#### Sample Input\n```\n162\n17\n34012226\n```\n\n#### Sample Output\n```\nNic wins.\nSusan wins.\nNic wins.\n```',10000,32768,'0',1,20,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1210','Turtle Move Again','#### Description\nA turtle lives in a country named XXX. One day, this turtle wants to move from city \'S\' to city \'E\'. Country XXX has N cities, M undirectional roads and every road has a length. The turtle need choose a path from city \'S\' to city \'E\' and the path will have a value P and a value Q.\nP is the longest road which is on the path. \nQ is the sum of all roads on the path.\n\nThe turtle wants to minimize the value P. And then, after this condition, how small the value Q can be?\n\n#### Input\nThe first line is a integer t(t<50),which represent the number of test cases.\nFor each case,the first line will hava 4 integers N(2<=N<=2000),M(0<=M<=50000),S(1<=S<=N),E(1<=E<=N),represent the the total amount of cities, the Number of city \'S\' , the Number of city \'E\'.\nAnd each line in the following M line contains three integers U(1<=U<=N),V(1<=V<=N),W(0<W<=10000),which means there is a road between city No.U and No.V, and the length is W.\n\n#### Output\nFor every test case, output the minimum Q.If it is impossible to do so, output \'-1\'.\n\n#### Sample Input\n```\n3\n3 3 1 2\n1 2 80\n1 3 40\n2 3 50\n3 3 1 2\n1 2 90\n1 3 10\n2 3 20\n4 5 1 4\n1 2 8\n1 4 9\n1 3 10\n2 4 7\n3 4 8\n```\n\n#### Sample Output\n```\n90\n30\n15\n```\n',2500,65536,'0',12,11,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1211','Polygon Land','#### Description\nIn an ancient country, a king owns a land looks like a polygon with n vertexs. The king is fond of triangle rather than polygon so that he ordered his prime minister to work out a way by which the land can be divided into triangles. And he require that every vertexs of every triangle must be the vertexs of the land. After dividing, he will names the triangle field with biggest area as the capital of the country.\nNow the prime minister is worry about that how he can work out a way to make the area of capital biggest.\nShow you the problem, can you solve out the area of capital?\n\n#### Input\nThe first line of input contains an integer t (1 < t < 100), the number of test cases. In every test case, there will be 4 integer n, Va, Vb, Vc (3 < n < 50, 1 <= Va, Vb, Vc <= n) in the first line, n means the vertex number of the polygon. Va, Vb, Vc means the vertex number of the selected triangle. Vertexs are numbered from 1.\n\n#### Output\nFor every test cases, you should print the area of capital work out by the prime minister in one line. Output should be specified to 2 decimal points.\n\n#### Sample Input\n```\n1\n4\n0 0\n0 1\n1 1\n1 0\n```\n\n#### Sample Output\n```\n0.50\n```\n',1000,65536,'0',12,12,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1212','Polygon Land Again','#### Description\nIn an ancient country, a king owns a land looks like a convex polygon with n vertexs. The king is fond of triangle rather than polygon so that he ordered his prime minister to work out a way by which the land can be divided into triangles. And he require that every vertexs of every triangle must be the vertexs of the land. After dividing, he will names the triangle field with biggest area as the capital of the country.\nNow the prime minister has known which triangle he will make to be capital, but he don\'t know how many ways to dividing the rest land.\nNow he ask for help from the smarter, you. Can you tell him the answer?\n\n#### Input\nThe first line of input contains an integer t (1 < t < 100), the number of test cases. In every test case, there will be 4 integer n, Va, Vb, Vc (3 < n < 50, 1 <= Va, Vb, Vc <= n) in the first line, n means the vertex number of the polygon. Va, Vb, Vc means the vertex number of the selected triangle. Vertexs are numbered from 1.\n\n#### Output\nFor every test cases, you should print the answer MOD 2014 in one line.\n\n#### Sample Input\n```\n1\n4 1 2 3\n```\n\n#### Sample Output\n```\n1\n```\n',1000,65536,'0',12,13,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1213','Finding The Water','#### Description\nJames is a little horse. He lives in a world made up with grids. In the world, the horses jump with a strange rule. (Description of the rule are shown by the picture below)\nOne day James go out to collect the water, which is located on a fixed grid. However, some grid contain big stones which will hinder his way. (From the game chess, we know horses can not jump over the grid in front of them where there is another chessman. You can see detail from picture below also)\nIn order to jump over the stone, James carry some magical arcanum, per milliliter can help him jump over a stone. James need to use the arcanum when there is a stone hindering his way. James can\'t jump into the grids with stones or jump out the map.\nNow, with the given arcanum, how can James get the water within least jumps.\n\n#### Input\nThe first line of input contains an integer t (1 < t < 100), the number of test cases.\nIn every test case, there will be 3 integer m, n, c (0 < m, n < 200, 0 <= c <= 10) in the first line, means there will be map of m rows and n columns. c means the volumn of arcanum.\nThen m lines follow, every lines contains n character. \'J\' means the location of James, \'S\' means the location of water source, \'#\' means in the grid there is a stone, \'.\' means there is nothing in the grid. (There will be only one \'J\' and \'S\' in the map)\n\n#### Output\nFor every test cases, print the number of minimum jumps if James can reach his target, otherwise you should print -1.\n\n#### Sample Input\n```\n3\n\n5 5 0\nJ....\n.....\n.....\n.....\n....S\n\n5 5 1\nJ#...\n1. ....\n..S..\n.....\n.....\n\n3 3 1\nJ#.\n1. ..\n..S\n```\n\n#### Sample Output\n```\n4\n4\n-1\n```\n',2000,65536,'0',12,14,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1214','The Longest Common Subsequence','#### Description\nA subsequence of a given sequence is the given sequence with some elements (possible none) removed.In a word, a subsequence can be a continuous substring or a discontinuous substring.\nGiven 2 strings A, B and a lowercase letter C, find the longest string D which satisfy the following rules:\na) D is the subsequence of A\nb) D is the subsequence of B\nc) D contain C\nYou need to output the length of D.\n\n#### Input\nThe first line of the input contains an integer T(T <= 50) which means the number of test cases.\nFor each test case, the first line only contains string A, the second line only contains string B, and the third only contains lowercase letter C.\nThe length of each string will not exceed 1000.\nAll the letters in each string are in lowercase.\n\n#### Output\nFor each test case,output the length of D.If D is not existence,output \'1\'.\n\n#### Sample Input\n```\n2\naaaaa\naaaa\na\nabcdef\nacebdf\nc\n```\n\n#### Sample Output\n```\n4\n4\n```\n',2000,65536,'0',12,15,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1215','Trees in a Row','#### Description\nThe Queen of England has n trees growing in a row in her garden. At that, the i-th (1 ≤ i ≤ n) tree from the left has height a[i] meters. Today the Queen decided to update the scenery of her garden. She wants the trees\' heights to meet the condition: for all i (1 ≤ i < n), a[i + 1] - a[i] = k, where k is the number the Queen chose.\nUnfortunately, the royal gardener is not a machine and he cannot fulfill the desire of the Queen instantly! For each tree, the gardener can either decrease the height of a tree to any positive integer height or increase the height of a tree to any positive integer height. But decreasing or increasing x meters will cost x pound.\nPlease help the royal gardener find the minmun cost.\n\n#### Input\nThe first line is a integer t(t<=10),which represent the number of test cases.\nThe next line contains two space-separated integers: n, k (2 ≤ n ≤ 1000000,1 ≤ k ≤ 1000). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100000000) — the heights of the trees in the row.\n\n#### Output\nFor each test case, output the minimum cost.\n\n#### Sample Input\n```\n3\n5 1\n1 2 3 4 5\n5 2\n3 6 9 18 27\n8 3\n50 60 21 32 41 33 100 70\n```\n\n#### Sample Output\n```\n0\n24\n153\n```\n',2000,65536,'0',12,16,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1216','喵喵要打水','#### Description\n喵喵晚上打水，高峰时刻需要排队，假设只有一个水龙头，每个人来到水龙头面前的时刻不一样。\n如果一个人来到水龙头面前发现没有人，那么他就可以立即打水，如果有人在打水，那么他就必须排在等水队伍的末尾，当正在打水的人\n\n打完水之后，排队队伍前面的第一个人就开始打水，如此轮流直到所有人都打完水。\n现在要求的是最后一个人打完水的时刻。\n\n#### Input\n输入t(t<=100),代表有t组测试数据，对于每一组数据，先输入\nn（n<=100），代表有n个人去打水,对于每个人，分别输入其到达时刻time(0到1000)，打水所需时间cost（1到10不等）。\n#### Output\n每组答案占一行，输出：最后一个人打完水的时刻。\n\n#### Sample Input\n```\n2\n2\n1 3\n7 2\n2\n1 3\n2 4\n```\n#### Sample Output\n```\n9\n8\n```\n',1000,65535,'0',12,17,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1217','喵喵爱数字','#### Description\n喵喵很喜欢数字，但是它又很懒，它需要你帮它在一堆数字中找出最小的一个\n\n#### Input\n先输入整数t(t<=1000)，表示有t组测试，然后输入整数n(n<=1000)，接着输入n个整数，保证每个数都不会超过100000\n\n#### Output\n每组答案占一行，你需要输出这些数里面最小的那个数，如果不止一个，就输出-1\n\n#### Sample Input\n```\n2\n3\n1 2 3\n4\n2 3 2 5\n\n```\n\n#### Sample Output\n```\n1\n-1\n```\n',1000,32768,'0',12,18,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1218','喵喵的积木','#### Description\n喵喵已经研究它的积木很久了，正如一般的积木一样，可以用一些等大的立方体搭积木，每个立方体或者直接放在地面的网格上，或者放在另一个立方体上面，喵喵现在脑海中有想要搭成积木的正视图和侧视图，你的任务是帮助喵喵用最少的立方体数的方块搭出喵喵脑海中的积木形状\n\n[[File:111.jpg]]  ==>\n[[File:112.jpg]]\n\n#### Input\n输入整数t(t<=100)，表示有t组测试，第二行输入w,h(1<=w,h<=10),用来表示立方体正视图和侧视图的宽度,接下来一行输入w个数字h1[i](1<=h1[i]<=20)，表示正视图第i个位置的积木高度，接下来一行输入h个数字h2[i](1<=h2[i]<=20)，表示侧视图第i个位置的积木高度\n\n#### Output\n每组答案占一行,输出满足正视图和侧视图的需要的最小方块数\n\n#### Sample Input\n```\n9\n5 5 \n1 2 3 4 5 \n1 2 3 4 5 \n5 5 \n2 5 4 1 3 \n4 1 5 3 2 \n5 5 \n1 2 3 4 5 \n3 3 3 4 5 \n3 3 \n7 7 7 \n7 7 7 \n3 3 \n4 4 4 \n4 3 4 \n4 3 \n4 2 2 4 \n4 2 1 \n4 4 \n2 8 8 8 \n2 3 8 3 \n10 10 \n9 9 9 9 9 9 9 9 9 9 \n9 9 9 9 9 9 9 9 9 9 \n10 9 \n20 1 20 20 20 20 20 18 20 20 \n20 20 20 20 7 20 20 20 20\n\n```\n\n#### Sample Output\n```\n15 \n15 \n21 \n21 \n15 \n13 \n32 \n90 \n186\n\n```\n',1000,65535,'0',12,19,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1219','喵喵放投影','#### Description\n喵喵是个老师，上课经常放投影。投影布是个a*b的矩形。\n现在要问的是，当喵喵想把书上的某一页（大小为c*d）投影到投影布上，应该怎样进行放大或缩小（宽高比例不变且不能颠倒）才能使得投影到屏幕上的面积最大。<br>\n（注意：投影之后通过投影布可以看到整个书页面，即不能出现投影到投影布外面的情况。）\n\n#### Input\nt(t<=100),代表有t组测试数据，对于每一组数据，输入a,b,c,d(1<=a,b,c,d<=1000)。\n#### Output\n每组答案占一行，输出投影到屏幕上的书页面占据整个投影布的最大比例（结果用最简分数形式表示）。\n\n#### Sample Input\n```\n2\n4 3 2 2\n1 1 3 2\n```\n\n#### Sample Output\n```\n3/4\n2/3\n```\n',1000,32768,'0',12,20,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('122','Sorting Algorithm','#### Description\nOne of the fundamental problems of computer science is ordering a list of items. There are a plethora of solutions to this problem, known as soring algorithms. Some sorting algorithm are simple and intuitive, such as the bubble sort. Others, such as the heap sort are not so simple, but produce lightening-fast results.\n\nIn the following is a list of some sorting algorithms. Of course, I can\'t tell you how to implement them here. You must use your own knowledge.\n+ Bubble sort\n+ Heap sort\n+ Insertion sort\n+ Merge sort\n+ Quick sort\n+ Selection sort\n+ Shell sort\n\nMy business here is to give you some numbers, and to sort them is your business. Attention, I want the smallest number at the top of the sorted list.\n\n#### Input\nThe input will consist of series data sets. Each data set has two parts. The first part contains two non-negative integers, $$$n(1\\leq n \\leq 100,000)$$$ and $$$m(1 \\leq m \\leq n)$$$,representing the total of numbers you will get an interval of the output sorted list. The second part contains n positive integers. I am sure that each integer in this part will be less than 2,000,000,000.\n\nThe input is terminated by a line with two zeros.\n\n#### Output\nFor one data set, you should output several numbers in \'\'\'ONE\'\'\' line. After you get the sorted list, you should output the first number of each m numbers, and you should print exact \'\'\'ONE\'\'\' space between two adjacent numbers. And please make sure that there should \'\'\'NOT\'\'\' be any blank line between outputs of two adjacent data sets.\n\n#### Sample Input\n```\n8 2\n3\n5\n7\n1\n8\n6\n4\n2\n0 0\n```\n\n#### Sample Output\n```\n1 3 5 7\n```',10000,32768,'0',1,21,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1220','喵喵变土豪','#### Description\n喵喵变成土豪了，它准备在大西洋中买2座岛，大西洋中岛的数量为n，每座岛屿都有自己的坐标（x,y），现在喵喵要从这n个岛中选择2个来作为自己的基地，但是他希望这2座岛之间的“距离”尽量大，我们将第i座岛(xi,yi)和第j座岛(xj,yj)的“距离”规定为|xi-xj|+|yi-yj|\n\n#### Input\n输入t(t<=100)，表示有t组测试，第二行输入整数n（2<=n<=100000）,表示岛的数量，接下来n行，每行输入整数x,y（-10000000<=x,y<=10000000），表示第i座岛的坐标\n#### Output\n每组答案占一行，输出喵喵所购买2座岛之间的最大“距离”\n\n#### Sample Input\n```\n2\n3\n1 2\n2 3\n5 1\n4\n6 1\n3 3\n-1 1\n2 1\n\n```\n\n#### Sample Output\n```\n5\n7\n\n```\n',5000,32768,'0',12,21,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1221','喵喵要AK','#### Description\n在acm比赛做题中，AC代表题目通过，其他都代表不通过（这是我们都不愿意看到的），如果一个人所有题都AC，那么此时就称为AK(这是很多人都梦寐以求的)。\n现在，喵喵已经做完前面所有题了，再做完此题便可AK。喵喵遇到的最后一个难题如下：\n有一个很长的字符串L，它是由‘A’和‘K’两种字母构成的（如：AAKAKKA），现在要求找出一个字典序最小的字符串，使得该字符串不是L的子串。<br>（所谓字典序，其实就是英文字典中的单词排序，越靠前的单词代表字典序越小。所谓字符串的子串，就是字符串中连续若干个字符构成的字符串，比如“abbc”就是“dabbcd”的子串，而“abcd”则不是“dabbcd”的子串）。\n\n#### Input\n输入t(t<=100),代表有t组测试数据，对于每一组数据，输入一个长度不超过10000的字符串L（只含有A和K两种字母）\n#### Output\n每组答案占一行，输出满足题意描述的字典序最小的字符串。\n\n#### Sample Input\n```\n1\nAKAK\n```\n\n#### Sample Output\n```\nAA\n```\n',1000,32768,'0',12,22,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1222','GPA','#### Description\nXueBaGe is a super scholar.To learn every course well is very important for him.He could take many professional courses in one semester.Now the semester ends, would you like to help him to calculate the average GPA of the courses? As you know, if a person get A in a course,then the gpa of this course is 4.0(B is 3.0,C is 2.0,D is 1.0).You may have a question: where is F going? As what I\'ve said,xuebage is a big scholar,so he never take F in any courses.\nNow give you a string just contains \'A\',\'B\',\'C\',\'D\' which is the rank of xuebage\'s courses.You are asked to calculate the average GPA of him.\n#### Input\nThe input contains an integer T on the first line, indicating the number of test cases.\nEach test case contains a string with n characters (1≤n≤100) on a line.\n#### Output\nFor each test case, output the answer on a single line, with 1 digit precision.\n#### Sample Input\n```\n2\nA\nAB\n\n```\n\n#### Sample Output\n```\n4.0\n3.5\n\n```\n',1000,65536,'0',12,23,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1223','A Math Problem Again','#### Description\nGiven a nonnegative integer a, and a positive integer N, we define:\nf(a,1)=a\nf(a,k)=f(a,k–1)×f(a,k–1)modN,k>1\nThere may or may not exist some positive integer k satisfying f(a,k)=0.\nYour task is, given a positive integer N, to determine how many a(0≤a≤N) there are, such that for some positive integer k, f(a,k)=0.\n#### Input\nThe input contains an integer T on the first line, indicating the number of test cases. Each test case contains only one positive integer N (1≤N≤1000000000) on a line.\n#### Output\nFor each test case, output the answer on a single line.\n#### Sample Input\n```\n6\n2\n12\n50\n180\n245\n361\n\n```\n\n#### Sample Output\n```\n2\n3\n6\n7 \n8\n20\n\n```\n',3000,65536,'0',12,24,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1224','The Kth Large','#### Description\nIn the P.E. class , n students listed in a line on the playground. However, they are not ordered by their height. As you know, some of them are higher, while others are shorter.\nIn this way, let’s define a function called F,which depend on the height of the ith students. The F of the ith student (we can call it Fi) with height hi is the sum of three parts:\nThe first part is a number 1,which means himself\nThe second part is: counting from the i-1th student to the 1st student until some one is shorter than the ith student.\nThe third part is: counting from the i+1th student to the last student until some one is shorter than the ith student.\nFor example, if the heights of the students are: 2 3 2 4 5\nThen F(1)=1+0+4=5,F(2)=1+0+0=1,F(3)=1+2+2=5,F(4)=1+0+1=2,F(5)=1+0+0=1\nNow the problem is very simple,just tell me the the kth large one among all the Fi.\n#### Input\nThe input contains several test cases.\nThe first line contains an integer T(T ≤ 100) denoting the number of test cases. Then T test cases follow.\nEach of them begins with a line containing two numbers n and k(1 ≤ k≤n ≤ 100000).The next line contains n integers h1,h2,..., hn where 1 ≤ hi ≤ 1000000000 is the height of i th student.\n#### Output\nFor each test case, output the kth large one among all the Fi.\n#### Sample Input\n```\n2\n5 2\n1 2 2 3 3\n5 2\n2 3 2 4 5\n\n```\n\n#### Sample Output\n```\n4 \n5 \n\n```\n',2000,65536,'0',12,25,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1225','Rock- Scissors- Paper','#### Description\nBob and Alice are playing a game called Rock-Paper-Scissors. As you know , Rock beats Scissors，Scissor beats Paper，Paper beats Rock. Bob and Alice have played many rounds and Bob has won X rounds, Alice has won Y rounds. The game will end when one of them won K rounds.The probability that Bob shows Rock is p1, Scissors is p2, Paper is p3 while the probability that Alice shows Rock is q1, Scissors is q2, Paper is q3. Could you tell me the probability that Bob win in the end?\n#### Input\nThe ﬁrst line of the input contains the number of test cases T(T<=60). The descriptions of the test cases follow:\nFor each case, The first line of input contains three integers: K, A and B (1000>=K>A,B>=0)\nThe second line of input contains three real numbers p1,p2,p3(p1+p2+p3=1)\nThe third line of input contains three real numbers q1,q2,q3(q1+q2+q3=1)\n#### Output\nFor each case,output the probability that Bob will win in the end with 4 digits precision.\n#### Sample Input\n```\n2\n2\n1 1\n0.400000 0.600000 0.000000\n0.000000 0.000000 1.000000\n3\n1 2\n1.000000 0.000000 0.000000\n0.000000 1.000000 0.000000\n\n```\n\n#### Sample Output\n```\n0.6000\n1.0000\n\n```\n',2000,65536,'0',12,26,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1226','A Prime Number','#### Description\nMengshen loves math very much,especially the prime number. He has solved many math problem about prime before and this is the newest one. He thought it is too easy for him, so he is disinclined to solve it but ask you to help him. The main idea of the problem was really simple: you only need to tell us whether x is a prime.\n#### Input\nThe input contains several test cases.\nThe first line contains an integer T(T ≤ 1000000) denoting the number of test cases. Then T test cases follow.\nEach of them contains only an integer x(2≤x≤10000000).\n#### Output\nFor each test case, output \"Yes\" if F(x) is a prime, else output \"No\".\n#### Sample Input\n```\n2\n2\n3\n\n```\n\n#### Sample Output\n```\nYes\nYes\n\n```\n',5000,65536,'0',12,27,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1227','Disappeared Building','#### Description\nThere are n buildings list on the ground, the i th building has height hi .\nOne day, the flood happened, and every second the height of water increased by 1. \n \nWe need to predict what will happen in the future.\nYou job is to tell us that how many parts the buildings will be separated into at the i th second.\n[[File:Disappeared Building.jpg]]\n\n#### Input\nThe input contains several test cases.\nThe first line contains an integer T(T ≤ 60) denoting the number of test cases. Then T test cases follow.\nEach of them begins with a line containing two numbers n and m(1 ≤ n, m ≤ 1000000), n is the number of buildings and m is the number of seconds which we wants to query.\nThe next line contains n integers h1,h2,..., hn where 1 ≤ hi ≤ 1000000000 is the height of i th building .\nThe third line of a single test case contains m numbers sj(0 ≤ s1 < s2 < ... < sm-1 < sm ≤ 1000000000).\n\n#### Output\nFor each test case, output one line containing \"Case #x: \" followed by m numbers x1,x2,...xj,...,xm, where xj is the number of parts at second sj.\n\n#### Sample Input\n```\n2\n4 3\n3 2 6 4\n0 1 2\n5 5\n1 3 5 1 3\n0 1 3 4 10\n\n```\n\n#### Sample Output\n```\nCase #1: 1 1 2 \nCase #2: 1 2 1 1 0\n\n```\n',2000,65536,'0',12,28,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1228','Map','#### Description\nThe legendary spy - QiangGe received a task, he needs to infiltrate a well-guarded location to steal a copy.\nThis place can be seen as an N*N grid, and there are some grids filled with obstacles and QiangGe can\'t move into these grids. In normal case, QiangGe can move from a grid to one of the four neighbor grids in a second. But this mission is not easy. There are some searchlights in the grids, these searchlights will monitor a cross area but not for every second, the searchlight will turn on/off for next second. QiangGe have to spend 1 second to go through a grid, and if QiangGe passed by the monitored grid, he have to use some covert means, which will spend 3 seconds. QiangGe also can stay in the same grid by 1 second.\nThere may be more than a searchlight on the map, each searchlight in the second that QiangGe into may be lighted, may also be shut. QiangGe move from a monitored grid or move to a monitored grid, all need to spend 3 seconds. Also, the grid that QiangGe into may be monitored, but QiangGe still cannot be found. (He is so diao) QiangGe wants to know the minimum time he complete the mission that not be found.\n#### Input\nThe first line of the input contains an integer T, denoting the number of testcases. Then T test cases follow. \nFor each test cases, the first line contains one integer N(2<=N<=50), in the following N lines, each line contains N characters, indicating the grids.\nThere will be the following characters:\n```\nQ: QiangGe\n.: empty grid.\n#: obstacle\nO: searchlight(on)\nF: searchlight(off)\nT: target\n```\n#### Output\nFor each test case, output the answer for one line. If QiangGe cannot complete the mission, output -1.\n#### Sample Input\n```\n2\n2\nQO\nOT\n2\nQO\nFT\n\n```\n\n#### Sample Output\n```\n4\n6\n\n```\n',1000,65536,'0',12,29,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1229','Rotating','#### Description\nThere are 3 different points placed at the plane. The i th point(xi, yi) can rotate 90 degrees counter-clockwise around some other point(ai, bi). Now the problem is very simple. What is the minimal number of moves required to make that the problem compact, if it\'s possible.The problem is compact when the these three points can form an isosceles triangle.\n#### Input\nThe first line contains an integer t (1 ≤ t≤ 100), the number of test case.\nFor each test case, input three lines:\nIn the i th line, input 4 integers xi, yi, ai, bi ( - 100≤ xi, yi, ai, bi ≤ 100). (1≤i≤3)\n#### Output\nFor each test case, output the answer described in the description.If it’s impossible to form an isossceles triangle,just output \"-1\".\n#### Sample Input\n```\n2\n1 10 -1 8\n-9 9 3 8\n-6 -1 -1 10\n-1 0 7 -4\n3 9 10 10\n-6 9 -9 -6\n\n```\n\n#### Sample Output\n```\n3\n-1\n\n```\n',1000,65536,'0',12,30,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('123','TYLY Language','#### Description\nWS(We Say), an Organization of UQU, is a famous professional language research organization, which is well known for being good at improving, updating and creating languages. Recently, the organization is working out a language, TYLY(Tell You Love You), which is used to express love between lovers.\n\nThe language TYLY is innovated on the basis of the current English Language. The words in TYLY is similar to English words, which is made up of alphabetic characters A,B, ... ,Z or a,b, ... z(case insensitive) and no word will be longer than 20 letters. Likewise, phrase is an important element in TYLY. A TYLY phrase is made up of exactly two different TYLY words and we call the first word in the phrase \'\'\'First Word\'\'\' and the second \'\'\'Last Word\'\'\'. For example, \'\'\'First Word\'\'\' of the phrase \"Love you\" is \"Love\", and \'\'\'Last Word\'\'\' is \"you\". Obviously, not every two words can form a phrase. The two words which can form a phrase must have special relations and the order of them is fixed. In TYLY, sentences are the most important. Each TYLY sentence is consisted of TYLY phrases which are end to end, that is to say, the \'\'\'First Word\'\'\' of any phrase (except the first phrase) in a TYLY sentence is the same with the \'\'\'Last Word\'\'\' of the phrase immediately previous to it. Moreover, no word will occur more than once in any sentence. In addition, for the sake of better expression, there is no punctuation in TYLY sentences.\n\n+ Now, let\'s see some TYLY words:\n  - I\n  - You\n  - Love\n  - Miss\n  - Very\n  - Much\n\n+ We define the following phrases:\n  - I Love\n  - Love You\n  - I Miss\n  - Miss You\n  - You Very\n  - Very Much\n\n+ So, we can have the following TYLY sentences:\n  - Love You\n  - I Love You\n  - Love You Very Much\n  - I Love You Very Much\n\n+ The sentences below are not correct TYLY sentences:\n  - I Love Very Much (phrases are not end to end)\n  - I You Very Much (no phrase \"I You\")\n  - I Love You, Very Much! (There is no punctuation in TYLY sentences.)\n\nThe lovers are hoping to express love as much as possible, and WS creates the language TYLY just in order to help them, so the lovers hope to use the longest TYLY sentences. You are one member in WS. Given the words and the phrases, your job is to find the longest TYLY sentences.\n\n#### Input\nInput will contain several test cases. Each test case consists of several lines. The first line contains two integers M an N, representing respectively the number of words of the TYLY Language, and the number of phrases of the TYLY Language $$$(1\\leq M \\leq 100)$$$. In the following M lines, each lines have a TYLY word. In the next N lines, each line has a TYLY phrase. \n\nThe input data for the last test case will be followed be a line containing two zeros.\n\n#### Output\nFor each test case in the input, you should output two lines. The first line is an integer, representing the length of the longest TYLY sentence (i.e. the number of words in the sentence). The second line is the longest TYLY sentence you find.\n\nThere is exactly one space between the words.\n\n#### Sample Input\n```\n6 6\nI\nYou\nLove\nMiss\nVery\nMuch\nI Love\nLove You\nI Miss\nMiss You\nYou Very\nVery Much\n3 1\na\nb\nc\na b\n0 0\n```\n\n#### Sample Output\n```\n5\nI Miss You Very Much\n2\na b\n```',10000,32768,'0',1,22,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1230','Cover circle','#### Description\nToday, xiaoming, a student in the kindergarden of Shenzhen University, was asked by his teacher a simple problem and he solved it,what about you?\nThe teacher want xiaoming to draw two same circles on the little blackborad while the two circles could not cross each other. It sounds really easy, right? Ok, now you only need to tell me the maximum radius of the circle.\n#### Input\nThe first line contains one integer t (1 ≤ t≤ 100), the number of test case.\nEach of the case contains only two integers w and h(1≤ w , h≤ 10000),which means the width of the little blackborad and the height of the blackboard.\n#### Output\nFor each test case, output the maximum radius of the circle, with 4 digits precision.\n#### Sample Input\n```\n2\n2 1\n1 4\n\n```\n\n#### Sample Output\n```\n0.5000\n0.5000\n\n```\n',1000,65536,'0',12,31,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1231','A Sample Problem','#### Description\nGiven a specific date of 2015, you are asked to find which week day it is.\n#### Input\nFor each test case, the input consists of a line which has format MM/DD.Proceed to the end of file.\n#### Output\nPrint the week day of the input date.\n#### Sample Input\n```\n04/11\n\n```\n\n#### Sample Output\n```\n6\n\n```\n',1000,65537,'0',12,32,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1232','IQ Test','#### Description\nGiven an array A of N elements , define an operation that consists of two parameters L and R such that Ai=Ai+i-L+1,L<=i<=R. You are asked to calculate the value of all elements in A after conducting all the operations. All initial Ai is 0.\n#### Input\nThe first line is a number T(1<=T<=10) which indicates the number of test cases.\nNext line is a number N(1<=N<=100000) which indicates the number of elements in the array and a number M(1<=M<=100000) which indicates the number of operations, following M lines, each line contains two number L, R(1<=L<=R<=N).\nProceed to the end of file.\n#### Output\nFor each test case output N numbers in a line, which are the value of elements mod 1000,000,007 in the array.\n#### Sample Input\n```\n2\n2 1\n1 1\n3 3\n1 2\n2 3\n1 3\n\n```\n\n#### Sample Output\n```\n1 0\n2 5 5\n\n```\n',5000,65537,'0',12,33,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1233','Abc Strings','#### Description\nLet’s define a kind of string of length N which only consists of characters ‘.’, ‘a’, ‘b’, ‘c’. Character ‘.’ must be replaced by ‘a’, ‘b’ or ‘c’. You are asked to count the number of ways to modify such kind of string such that for any ‘b’ in the string , the adjacent character on its right is not a ‘a’ and for any ‘c’ in the string, the adjacent character on its right is not a ‘b’. For example, “aabc” is valid, and “bac”, “acb” are invalid.\n#### Input\nThe first line is a number T(1<=T<=20) which indicates the number of test cases.\nFor each test case there is a number N(1<=N<=100000) which indicates the length of the string and the following line is the input string.\n#### Output\nIf the string contains ‘.’ and is impossible to construct such kind of string or the string itself is invalid, output “NO”,else print the number of all valid strings mod 1000,000,007.\n#### Sample Input\n```\n2\n3\n..b\n4\n.ba.\n\n```\n\n#### Sample Output\n```\n4\nNO\n\n```\n',2000,65537,'0',12,34,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1234','S Parts','#### Description\nGiven an array of N integer, define a query with one parameter S which means to split the Array into S parts such that the part  with the largest sum is smallest among all possible ways of splitting.\n#### Input\nThe first line is an number T which indicates the number of test cases.\nFor each test case there is a number N(1<=N<=1000000), the number of elements in the array.\nThe next line contains N integers ai(1<=ai<=1000) which are the value of elements in the array.Next line is a number M(1<=M<=100000) which indicates the number of queries.\nFollowing M lines, each line is a number S(1<=S<=500), the number of parts to split.\n#### Output\nFor each query, output the largest sum of a certain part such that it is smallest among all possible ways of splitting.\n#### Sample Input\n```\n2\n3\n1 2 3\n1\n2\n6\n6 5 4 3 2 1\n1\n2\n\n```\n\n#### Sample Output\n```\n3\n11\n\n```\n',10000,65537,'0',12,35,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1235','Digit Recurring Cycle','#### Description\nA unit fraction contains one as its numerator. Given a number N, you are asked to find the digit recurring cycle of the unit fraction 1/N.\nFor example, 1/2 = 0.5, which has no recurring cycle, 1/3 = 0.333333…, which has one digit recurring cycle, and 1/7=0.142857142857142857…, which has 6 digits recurring cycle.\n#### Input\nThe first is an integer T indicating the number of test cases.Following T lines, each line contains a number N(1<=N<=1000).\n#### Output\nFor each test case, output the answer.\n#### Sample Input\n```\n2\n3\n7\n\n```\n\n#### Sample Output\n```\n1\n6\n\n```\n',1000,65537,'0',12,36,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1236','Treasure','#### Description\nYou are playing a computer game and since you did very well in this game you have chance to get some treasures. The system will throw out treasures K times, and you can decide whether  to get it or not every time(You must make your decision before the system throw out the next treasure. If you don’t want to get the treasure thrown out for the ith time, you could not regret later. )There are totally N kinds of treasure and the probability that the system throws out which treasure is same and independent. If you decide to get the ith treasure, you will get Pi points, but you can only get it if you match some conditions. In other words, only when you had get some other treasures can you get the ith treasure.(If the system throw out a treasure which you have not qualification to get now, you lose the chance to get it.)Attention, Pi may be minus, so if the i+1th treasure(Pi+1 is very large) is depend on the ith treasure(Pi is minus), it may be better to get the ith treasure and then get the i+1th. Ok, now the problem is, if you take the best strategy, what is the expected point you can get?\n#### Input\nThe input contains several test cases.\nThe first line contains an integer T(T ≤ 30) denoting the number of test cases. Then T test cases follow.\nEach test case begins with a line containing two integers K and N(1 ≤ K ≤ 100, 1 ≤ N ≤15)(K means the times you can get the treasure, N means the kind of treasure).\nThen N lines follow. Each of them begin with an integer Pi(-10^4 ≤ Pi ≤ 10^4), follow by some integers Xi( 1≤ Xi ≤ N )represent the treasures which need to get before you get the ith treasue ,it will end with an integer 0.\n#### Output\nFor each test case, output one line containing the value of expectation you will get, with 6 digits precision.\n#### Sample Input\n```\n2\n1 2\n1 0\n3 0\n2 2\n-10 0\n20 1 0\n\n```\n\n#### Sample Output\n```\n2.000000\n0.000000\n\n```\n',5000,65537,'0',12,37,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1237','Tree Querys','#### Description\nThere is a tree with N nodes, the initial weight of all nodes is 0, and there are three kinds of operations:\n\n1  U  Disconnect U with its parent, so U and its child form a single tree\n\n2  U  VAL  Increase the weight of all nodes by VAL in the tree that U belongs to\n\n3  U  Output the weight of U\n#### Input\nThe first line are two numbers N(2<=N<=100000) ,which indicates the number of nodes and Q(1<=Q<=100000) which indicates the number of operations.\nNext N-1 lines contains two number, U, V, which means that V is the parent of U\nNext Q lines are Q operations which follow the format described above.\nProceed to the end of file.\n#### Output\nFor each Type 3 operation, output the weight mod 1000,000,007.\n#### Sample Input\n```\n2 4\n2 1\n3 1\n1 2\n2 1 10\n3 1\n\n```\n\n#### Sample Output\n```\n0\n10\n\n```\n',2000,65537,'0',12,38,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1238','Experiments','#### Description\nIt is all known that QiangGe is the best competitive programmer in SZU,but actually he is also a chemistry geek. He always devotes himself into different kinds of experiments. Recently he came across with an interesting problem. There are n tubes and each of them contains certain amount of some explosive liquid(is not water), and QiangGe will do several operations on the tubes. In each perform, QiangGe will pour some amount of water into the tubes, but he wants the tube that contains water with the largest volume of liquid(including water) to be the smallest among all possible ways of pouring. Since his is busy with the experiment, he asks you to help him figure out this problem.\n#### Input\nThe input contains an integer T on the first line, indicating the number of the test cases.Each test case contains an integer N (1<=N<=100000)indicating the number of bottles on the first line.\nThe next line contains N integers which indicate the initial volume of liquid(1<=N<=10000) of each bottle.\nThe next line contains a number M, which is the number of operations, following M lines, in each line there is a number V(1<=V<=10^9), which indicates the volume of water to pour.\n#### Output\nFor each operation output the largest volume of liquid of bottles that is smallest among all possible ways of pouring with 4digits precision.\n#### Sample Input\n```\n1\n3\n1 2 0\n2\n2\n3\n\n```\n\n#### Sample Output\n```\n1.5000\n2.0000\n\n```\n\nNotes:the first case you can add 0.5 volume of water to the first tube,and add 1.5 to the third tube,so the largest volume of liquid(including water) is 1.5.',5000,65537,'0',12,39,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('1239','Cover Area','#### Description\nThere is a square with length of side L, if we rotate the square around its center by angle A, what will the cover area of the two squares be?\n#### Input\nThe input contains several test cases.\nThe first line contains an integer T(T ≤ 100) denoting the number of test cases. Then T test cases follow.\nEach of them contains two numbers L and A(1 ≤ L ≤ 1000, 0 ≤ A ≤180)\n#### Output\nFor each test case, output the cover area S in one line, with 3 digits precision.\n#### Sample Input\n```\n2\n2 0\n3 90\n\n```\n\n#### Sample Output\n```\n4.000\n9.000\n\n```\n',1000,65537,'0',12,40,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('124','Dependencies among Jobs','#### Description\nAs everybody knows, staffs for the programming contest need to do a log of jobs to prepare. But i bet you can not image how terrible the arrange the jobs. We know, sometimes there are dependencies among the jobs. We say job 1 depends on job 2 that mens before starting job 1 we must finish job 2. We assume that there is only one job processing in one moment, and any job is dependent on no more than ten jobs.\n\nWhen we make up a jobs\' schedule, we should check whether it is valid. Now, Your task is to find out the earliest finish time of some jobs.\n\n#### Input\nInput will contain several rest cases. The first line of each test case contains two integer numbers $$$N(0\\leq N \\leq 10,000)$$$ and M. The jobs are numbered from 1 to N. You need to calculate the earliest finish time of job M. And then, the following N lines describe jobs. The first line is corresponding the job 1, second line is corresponding the job 2 and so on.\n\nEach job\'s describing line contains several positive integer numbers. The numbers are separated by spaces. The first one of the $$$i^{th}$$$ line shows the time($$$\\leq 100$$$) that $$$i^{th}$$$ job cost. The rest of numbers of the $$$i^{th}$$$ line are the jobs on which the job depends.\n\nN=0 indicate the end of input. We guaranteed there is no circle on dependency.\n\n#### Output\nFor each test case you should output one line, and just one number in this line. The number is the earliest finishing time of job M.\n\n#### Sample Input\n```\n2 2\n3\n2 1\n3 3\n3\n2 1\n4 1 2\n0\n```\n\n#### Sample Output\n```\n5\n9\n```',10000,32768,'0',1,23,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('125','Rock, Paper, or Scissors?','#### Description\nRock, Paper, Scissors is a two player game, where each player simultaneously chooses one of the\nthree items after counting to three. The game typically lasts a pre-determined number of rounds.\nThe player who wins the most rounds wins the game. Given the number of rounds the players\nwill compete, it is your job to determine which player wins after those rounds have been played.\nThe rules for what item wins are as follows:\n+ Rock always beats Scissors (Rock crushes Scissors)\n+ Scissors always beat Paper (Scissors cut Paper)\n+ Paper always beats Rock (Paper covers Rock)\n\n#### Input\nThe first value in the input file will be an integer t (0 < t < 1000) representing the number\nof test cases in the input file. Following this, on a case by case basis, will be an integer n (0 <\nn < 100) specifying the number of rounds of Rock, Paper, Scissors played. Next will be n\nlines, each with either a capital R, P, or S, followed by a space, followed by a capital R, P, or S,\nfollowed by a newline. The first letter is Player 1’s choice; the second letter is Player 2’s choice.\n\n#### Output\nFor each test case, report the name of the player (Player 1 or Player 2) that wins the game,\nfollowed by a newline. If the game ends up in a tie, print TIE.\n\n#### Sample Input\n```\n3\n2\nR P\nS R\n3\nP P\nR S\nS R\n1\nP R\n```\n\n#### Sample Output\n```\nPlayer 2\nTIE\nPlayer 1\n```\n',10000,32768,'0',1,24,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('126','Missile Command','#### Description\nAs Chief Bureaucrat at Missile Command, it has recently come to your attention that the existing\nperformance guidelines do not sufficiently penalize frivolous use of expensive ammunition.\nTherefore, you must write a new battle summary analysis tool which takes into account excess\nammunition consumption during battle.\n+ A battle consists of the following elements:\n  - Shots. A shot is a circularly explosive countermeasure. A shot has a fixed position and is active for 2 seconds, during which its radius varies from 0 to 1km and then back to 0 according to the formula: $$$r = \\sqrt{(1-(t-1)^2)}$$$\n  - The ground, at y = 0.\n  - Missiles. A missile is a point particle that moves at a constant velocity. If a missile collides with an active shot, the missile is neutralized (the shot persists). If a missile hits the ground before being neutralized, it is considered to have hit its target.\n+ Performance is evaluated on a simple point scale. The performance criteria are as follows:\n  - Every neutralized missile adds 1 point.\n  - Every missile allowed to hit its target subtracts 5 points.\n  - Every unnecessary shot subtracts 20 points. The number of unnecessary shots in a battle is the difference between the actual number of shots fired and size of the minimum subset of those shots that would have neutralized the same number of missiles.\n\n#### Input\nInput will be given in the following format (legend follows):\n```\nnb\nnm\nmx my mdx mdy mt\n...\nns\nsx sy st\n...\n...\n```\nIn the following legend, indentation denotes repetition of the indented block a number of times\nequal to the value of the preceding input item:\n+ nb (0 < nb) – number of battles\n  - nm (0 <= nm <= 20) – number of missiles\n  - *mx/my (0.0 < my) – initial missile position (in km)\n  - *mdx/mdy – missile velocity (in km/s)\n  - *mt (0.0 <= mt) – time since battle start of the missile\'s entrance (in seconds)\n  - ns (0 <= ns <= 20) – number of shots\n  - *sx/sy (1.0 <= sy) – shot position at time of detonation (in km)\n  - *st (0.0 <= st) – time since battle start of the shot\'s detonation (in seconds)\n\n#### Output\nFor each battle, output a line containing the score for that battle.\n\n#### Sample Input\n```\n2\n2\n4.0 8.0 0.0 -1.0 0.0\n4.0 8.0 1.0 -1.0 0.0\n1\n4.0 4.0 3.0\n3\n4.0 10.0 0.0 -1.0 0.0\n5.0 10.0 3.0 -6.0 4.0\n13.0 10.0 -3.0 -5.0 4.0\n3\n4.0 5.0 3.0\n7.0 8.0 4.0\n9.0 4.0 4.0\n```\n\n#### Sample Output\n```\n-4\n-17\n```\n',10000,32768,'0',1,25,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('127','Palindromic Primes Category in Jeopardy!','#### Description\nPrime numbers are defined as follows: a number is prime if it is greater than 1 and is evenly divisible only by itself and 1. Note that by definition neither zero nor one is a prime number.\n\nA palindromic number is one whose string  representation is a palindrome, that is, a string that reads the same backwards and forwards.\n\nYou are on the clue crew preparing questions for the category “Palindromic Primes” and are to write a program to generate the answer and responding question in Jeopardy! style.\n\n#### Input\nThe input file contains a series of number pairs (with white space separating them) specifying individual\nproblems, ending with a pair of zeroes. The first number gives the number of digits for the numbers to be\nconsidered, the second number gives the base in which the numbers are to be generated. The numbers are\nseparated by a single space. You are assured that all palindromic primes for this problem can be represented in\nthe range of a standard 32-bit signed integer. The bases allowed are integer bases between 2 and 36 — with\nbases above base ten handled as extensions of hexadecimal. This means that the valid numeric digits are in the\nrange [‘0’..‘9’] and [‘a’..‘z’].\n\n#### Output\nFor each number, generate one line giving the number of digits and the base as the answer and then on the next\nline the number of palindromic primes found as the question as shown in the sample output. Each output pair\nshould be separated by a blank line.\n\n#### Sample Input\n```\n1 10\n2 10\n3 10\n4 24\n5 4\n0 0\n```\n\n#### Sample Output\n```\nThe number of 1-digit palindromic primes < 2^31 in base 10.\nWhat is 4?\n\nThe number of 2-digit palindromic primes < 2^31 in base 10.\nWhat is 1?\n\nThe number of 3-digit palindromic primes < 2^31 in base 10.\nWhat is 15?\n\nThe number of 4-digit palindromic primes < 2^31 in base 24.\nWhat is 0?\n\nThe number of 5-digit palindromic primes < 2^31 in base 4.\nWhat is 10?\n```\n',10000,32768,'0',1,26,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('128','Pebbles','#### Description\nYou’re given an unlimited number of pebbles to distribute across an N x N game board (N drawn\nfrom [3, 15]), where each square on the board contains some positive point value between 10 and\n99, inclusive. A 6 x 6 board might look like this:\n\n[[Image:B27.jpg|center]]\n\nThe player distributes pebbles across the board so that:\n+ At most one pebble resides in any given square.\n+ No two pebbles are placed on adjacent squares. Two squares are considered adjacent if they are horizontal, vertical, or even diagonal neighbors. There’s no board wrap, so 44 and 61 of row three aren’t neighbors. Neither are 33 and 75 nor 55 and 92.\n\nThe goal is to maximize the number of points claimed by your placement of pebbles.\n\nWrite a program that reads in a sequence of boards from an input file and prints to stdout the\nmaximum number of points attainable by an optimal pebble placement for each.\n#### Input\nEach board is expressed as a series of lines, where each line is a space-delimited series of\nnumbers. A blank line marks the end of each board (including the last one)\n\n#### Output\nthen your program would print the maximum number of points one can get by optimally\ndistributing pebbles while respecting the two rules, which would be this (each output should be\nprinted on a single line and followed with a newline):\n\n#### Sample Input\n```\n71 24 95 56 54\n85 50 74 94 28\n92 96 23 71 10\n23 61 31 30 46\n64 33 32 95 89\n\n78 78 11 55 20 11\n98 54 81 43 39 97\n12 15 79 99 58 10\n13 79 83 65 34 17\n85 59 61 12 58 97\n40 63 97 85 66 90\n\n33 49 78 79 30 16 34 88 54 39 26\n80 21 32 71 89 63 39 52 90 14 89\n49 66 33 19 45 61 31 29 84 98 58\n36 53 35 33 88 90 19 23 76 23 76\n77 27 25 42 70 36 35 91 17 79 43\n33 85 33 59 47 46 63 75 98 96 55\n75 88 10 57 85 71 34 10 59 84 45\n29 34 43 46 75 28 47 63 48 16 19\n62 57 91 85 89 70 80 30 19 38 14\n61 35 36 20 38 18 89 64 63 88 83\n45 46 89 53 83 59 48 45 87 98 21\n\n15 95 24 35 79 35 55 66 91 95 86 87\n94 15 84 42 88 83 64 50 22 99 13 32\n85 12 43 39 41 23 35 97 54 98 18 85\n84 61 77 96 49 38 75 95 16 71 22 14\n18 72 97 94 43 18 59 78 33 80 68 59\n26 94 78 87 78 92 59 83 26 88 91 91\n34 84 53 98 83 49 60 11 55 17 51 75\n29 80 14 79 15 18 94 39 69 24 93 41\n66 64 88 82 21 56 16 41 57 74 51 79\n49 15 59 21 37 27 78 41 38 82 19 62\n54 91 47 29 38 67 52 92 81 99 11 27\n31 62 32 97 42 93 43 79 88 44 54 48\n\n```\n\n#### Sample Output\n```\n572\n683\n2096\n2755\n```\n',10000,32768,'0',1,27,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('129','Rubik’s Cube','#### Description\n[[Image:B28.jpg|right]]\nYou are a secret agent for the Eternally Indebted External\nIntelligence Office (EIEIO) of the country of Nomoneo.\nHeadquarters has disguised your one-time pad for\nencrypted communications in the form of a Rubik\'s\nCube®. (For those of you unfamiliar with the puzzle, a\nRubik\'s Cube® comes in the form of a cube where each\nface is divided into three rows and three columns (nine\n“squares”). Any of the six faces of the cube may be\nrotated either clockwise or counterclockwise, which also\nrotates the three nearest squares on each adjoining face\nonto a new face, respectively. When solved (or taken\nfrom the factory packaging), each face of the cube\ncontains squares of only one color. There is no way to\nchange the relationship between the colors of the central\nsquares on each face.) The cube has been pre-scrambled\nand you are to apply a certain set of moves to the cube\nbased on the message you want to return.\n\nThis diagram provides the relationship between the sides\nof the cube as well as the orientation of the faces for the\npurposes of input and output. It should be viewed as an\nunfolded cube with the text on the outside. The faces are\nindicated by the color of the central subdivision (square)\nand are White, Orange, Red, Blue, Green, and Yellow.\nThe corner with the dot is the top left corner for purposes\nof input and output.\n\n#### Input\nYour program should read the input data from input, which consists of several cases. The first line of\nthe input will give the number of these input cases (as a decimal integer without any punctuation),\nwhich will be greater than or equal to 1 and less than or equal to 10,000. Each case consists of three\nlines giving the initial state of the puzzle cube and one line giving the rotations you must apply to reach\nthe appropriate final state of the cube.\n\nEach of the three lines giving the initial state of the cube consists of 18 letters with a single space\nbetween each pair of letters. There is no space between the last letter and the end of the line. Each of\nthe letters is \'W\', \'O\', \'R\', \'B\', \'G\', or \'Y\' indicating the respective color. The faces are listed from left to\nright in the order (by central square color) White, Orange, Red, Blue, Green, Yellow. Thus, the first\nthree columns of letters give the state of the “White” face, and so forth.\n\nThe fourth line of the case gives the manipulations that you must apply to the cube. Each manipulation\nconsists of a single letter as above (\'W\', \'O\', \'R\', \'B\', \'G\', or \'Y\') indicating which face (selected by the\ncolor of the center) you should rotate. Each rotation thus indicated is a 90º clockwise rotation of the\nface with respect to the rest of the cube, looking at the face to be rotated. At least one and no more\nthan 1,000 manipulations will be specified.\n\n#### Output\nPrint to standard output the state of the cube after the indicated manipulations. Use the same format as\nfor input: three lines, each containing 18 color letters separated by a single space character. Do not put\na space after the final letter on the line. Print out the faces in the same order, left to right, as for input:\nWhite, Orange, Red, Blue, Green, Yellow. After each output case, print a line containing 35 \'=\'\ncharacters.\n\n#### Sample Input\n```\n2\nW W W O O O R R R B B B G G G Y Y Y\nW W W O O O R R R B B B G G G Y Y Y\nW W W O O O R R R B B B G G G Y Y Y\nRG\nY G G Y G W Y W B R W O R W G B G G\nO W R Y O B G R O R B O Y G R B Y Y\nO W O G O W Y B W B R W B B O R Y R\nGROWBOBGROW\n```\n\n#### Sample Output\n```\nO O O Y Y Y R R R Y Y Y G G G B Y O\nW W W O O O R R R B B B G G G B Y O\nB B B W W W R R R W W W G G G B Y O\n===================================\nW G R Y B G B R G B O W O R B R W R\nG W B G O R G R R Y B B O G O Y Y B\nG W R Y Y Y W W O G O W O Y B Y W O\n===================================\n```\n',10000,32768,'0',1,28,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('13','Jumping up and down','#### Description\nIn the kingdom of frog, the most popular sport is jumping up and down. Frog\nlikes to jump up(go higher) or jump down(go lower) but jump at the same height(not go higher,and not go lower).\nThe frog king wants to have a sport path for jumping. The Sport path is made \nby same size blocks which may have different height,when the frog on the path, he can only jumps from one block to the next adjacent block. For frog, perfect path for jumping are those same-height-jumps can be avoided. The Sport path can be represented by an integer sequence which denotes the height of blocks.The length of the sport path is the numbers of integer in the sequence.\n\n#### Task\nNow, it is your turn. You will have a integer sequence represent a sport path,\nplease output the longest perfect path we can find in the given sport path without\ncutting off.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases.\nThere are two lines for each test case. The first line contains an integer number\n$$$N(1 \\leq N \\leq 100)$$$ denoting how many blocks in the sport path. The second line\ncontains $$$N$$$ integer numbers (the height of blocks in the range $$$[-100,100]$$$).\n\n#### Output\nFor each test case, print a line contains the solution.\n\n#### Sample Input\n```\n2\n8\n1 1 3 5 5 7 9 8\n5\n1 2 3 4 5\n```\n\n#### Sample Output\n```\n4\n5\n```\n',10000,32768,'0',0,12,'',0,'5','2018-11-05 00:31:14','2018-11-05 00:48:07'),('130','Geek Challenge','#### Description\nGeek Challenge [SKRZAT] is an old, old game from Poland that uses a game console with two\nbuttons plus a joy stick. As is true to its name, the game communicates in binary, so that one\nbutton represents a zero and the other a one. Even more true to its name, the game chooses to\ncommunicate so that the base of the number system is minus two, not plus two, so we’ll call this\nrepresentation “Weird Binary”. Thus the bit positions label the powers of minus two, as seen in\nthe following five-bit tables:\n\n[[File:B29_1.png|center]]\n[[File:B29_2.png|center]]\n\nNumbers are presented on the screen in Weird Binary, and then numbers are accepted in\nresponse from the console as a stream of zeroes and ones, terminated by a five-second pause.\n\nYou are writing a computer program to support the novice geek in playing the game by\ntranslating numbers between decimal and Weird Binary.\n\n#### Input\nThe first line in the input gives the number of problems being posed without any white space. Following are that many lines. Each line will either be a conversion into Weird Binary or out of Weird Binary: the letter \"b\" indicates that the rest of the line is written in Weird Binary and needs to be converted to decimal; the letter \"d\" indicates that the rest of the line is written in decimal and needs to be converted to Weird Binary.\n\nThe input data are in the range to fit within a 15-bit Weird Binary number, which represents the decimal number range -10922 to 21845, inclusive. \n\n#### Output\nFor each conversion problem, show the type of problem, its input string, and the converted result in the format shown below, replicating even the spacing exactly as shown. Leading zeroes are not allowed. \n\n#### Sample Input\n```\n10\nb 1001101\nb 0111111\nb 101001000100001\nb 010010001000010\nb 100110100110100\nd -137\nd 137\nd 8191\nd -10000\nd 21000\n```\n\n#### Sample Output\n```\nFrom binary: 1001101 is 61\nFrom binary: 0111111 is -21\nFrom binary: 101001000100001 is 19937\nFrom binary: 010010001000010 is -7106\nFrom binary: 100110100110100 is 15604\nFrom decimal: -137 is 10001011\nFrom decimal: 137 is 110011001\nFrom decimal: 8191 is 110000000000011\nFrom decimal: -10000 is 10100100110000\nFrom decimal: 21000 is 101011000011000\n```\n',10000,32768,'0',1,29,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('131','Frogger','#### Description\nPhilip J. Frog just wanted to go for a mid-afternoon swim, but in typical frog fashion he\'s ended up in the middle of a busy street. Help Phil figure out how long he\'ll be hopping on hot asphalt before he finds his way to the nice cool water.\n\nPhil may hop one square horizontally or vertically per second. He may only hop onto road, grass, or water. Additionally, he cannot occupy any square occupied by a car. Phil and the cars move at the same time, meaning Phil can \"hop over\" an oncoming car. Phil can also remain in the same square if he wishes. All horizontal movement wraps (e.g., a rightward hop from the rightmost column places Phil in the leftmost column). Cars move horizontally in the direction indicated on the map (\' < \' means leftward, \' > \' means rightward) at a rate of one square per second and never collide with anything. \n\n#### Input\nInput begins with a single integer specifying the number of test maps. Each map begins with two integers R  and C  (0 < R, C < 30)  specifying the number of rows and columns, respectively, followed by R  lines each C  characters long, specifying the map. The possible map characters are:\n+ Phil (\'&\') - Phil\'s starting location. Each map contains exactly one. Always indicates road underneath.\n+ Tree (\'T\') - Impassable.\n+ Grass (\'.\') - Phil can move freely in the grass.\n+ Road (\'-\') - Hot!\n+ Car (\'<\', \'>\') - Always indicates road underneath.\n+ Water (\'~\') - Phil\'s goal.\n\n#### Output\nFor each map, output a line containing the fewest number of seconds Phil must spend on the road in order to reach the water, or the string \"Impassable\", if no path to water exists. \n\n#### Sample Input\n```\n3 \n2 1 \n~ \n& \n4 7 \n~TTTTTT \n.------\n-->-<--\n---&---\n3 5 \n~~~~~ \n..T.. \n>>&<<\n```\n\n#### Sample Output\n```\n1 \n6 \nImpassable\n```',10000,32768,'0',1,30,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('132','Bubble Gum','#### Description\nAlex and Karyn were at it again. The elementary school sisters were playing their favorite game to decide who gets to play on the computer next.\n\nThe rules of the game are quite simple. Given p people (p > 0) , one of the p people is chosen to pick a number n (n > p) representing the number of pieces of bubble gum desired. Once this value is chosen, the people are iterated through, one at a time, starting at 1, from \"left\" to \"right\", starting with the person who chose the number. Iterating is done in a circular fashion, meaning that once the person on the far right is reached, the next person in the iteration will be the person on the far left. Upon reaching n , the person at that location is the winner.\n\nGiven a list of names, followed by the name of the person choosing the number of pieces of bubble gum, followed by the number that person chose, determine who wins the game. \n\n#### Input\nThe first value in the input file will be an integer t  (0 < t < 1000)  representing the number of test cases in the input file. Following this, on a case by case basis, will be a list of the names of the people (p ), on a single line. Names will be no larger than 20 characters in length and all names are unique. There will be no more than 20 names. Each name is followed by a space, save for the last name, which is followed by a newline. On the next line is the name of the person choosing the number of pieces of bubble gum, followed by a newline. The test case is concluded with the number of pieces of gum n  (p < n < 1000) , which is also followed by a newline. \n\n#### Output\nFor each test case, report the name of the person that won the game, followed by a newline. \n\n#### Sample Input\n```\n3\nAlex Karyn Maude\nKaryn\n5\nAlex Karyn Maude\nAlex\n6\nAlex Karyn Zach Becca Maude\nZach\n8\n```\n\n#### Sample Output\n```\nMaude\nMaude\nMaude\n```\n',10000,32768,'0',1,31,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('133','Games R Us','#### Description\nGamesAreUs.com has just completed its outside audit for this year. One item that was caught was the lack of any business rules for assigning permissions to files on the company\'s shared file server. The analysts are working on setting up some roles for all employees and what permissions should be given to each role. Your team is to take a look at the existing situation so you can provide some input to the analysts.\n\nFortunately permission assignment has not been completely random. The most common way to set up a new employee is to ask that they be set up \"just like Joe\", effectively making an ad-hoc prototype system.\n\nYou will be given the access control lists (ACLs) for the top level directories of the shared file server. Using these, your team is to write a program to split the users up into equivalence classes where all members of a class have access to exactly the same directories.\n\nBecause of the several departments in GamesAreUs.com, there are multiple access control lists to be processed: one set of lists per department. \n\n#### Input\nThe first line of input to your program is a single integer n  (0 < n < 100) , by itself on the line without any white space, giving the number of departments. Following that are the data for those departments.\n\nACLs associated with one department is a sequence of ACLs ended by \"-1\" by itself. Each ACL is a line of unsigned integers ($$$1 \\leq x \\leq 2,147,483,647$$$) separated from each other by a single blank. The first integer on the line is the file id (FID) of the directory. The remaining numbers on the line are the user ids (UIDs) that have access. Each line will have a FID and at least one UID. There will be no duplicate UIDs on the line, but note the UIDs and FIDs are in separate spaces so a UID could be the same integer as a FID. The ACLs, and within an ACL the UIDs, appear in no particular order. In the full list of ACLs, a given FID will appear only once. There are at most 50 top-level directory ACLs and there are at most 100 UIDs. All FIDs and UIDs are greater than 0. \n\n#### Output\nFor each department, the first line of output identifies which case is being processed, beginning with 1. That line contain the word \"Case\", one blank, and the integer identifying which case it is.\n\nFor every class with at least 2 members, print a line with the number of members in the class with no sign or leading zeros, one space, and the smallest UID in the class with no sign, leading zeros, or trailing spaces. Sort the output by the number of members, descending, and then by the UIDs, ascending. If there are no such classes, print \"no prototypes found\". \n\n#### Sample Input\n```\n2 \n100 9 7 2 3 1 6 \n200 9 6 7 1 2 5 3 8 \n300 6 3 7 8 5 \n400 4 5 8 \n-1 \n100 1 \n200 37 \n-1\n```\n\n#### Sample Output\n```\nCase 1 \n3 1 \n3 3 \n2 5 \nCase 2 \nno prototypes found\n```\n',10000,32768,'0',1,32,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('134','Cover Up','#### Description\nIn the Price Is Right\'s game Cover Up, players test their luck to win a new car. To win, the player must produce the actual retail price of the car from a board of possible numbers like: \n\n[[File:B33_1.png|center]]\n\nThe player selects one number from each column to form a bid. Using the above board as an example, the first number in the price of the car is either 1 or 3; the second is one of 9, 4, 2; the third is one of 0, 6, 8, 4; and so on. Numbers may never move to a different column.\n\nAfter the player selects their bid, Drew Carey lights up the numbers in the bid which are correct. If the player has no numbers correct, the game ends and they lose; if they have at least one number correct, the game continues.\n\nWhen the game continues, the player is given another opportunity to select numbers from those columns that were incorrect. They will cover up the wrong bid numbers with different selections from the same columns. Again, Drew Carey will light up any new correct digits. If the player has no new numbers correct, the game ends and they lose; if they have at least one new number correct, the game continues.\n\nFor example: \n\n[[File:B33_2.png|center]]\n\nThe player selects an initial bid of $14677. The 1, 4 and first 7 are correct (c stands for correct, x for incorrect, and v designates a column that requires a subsequent selection in the example above). The player covers up the incorrect 6 and 7 with an 8 and a 3 for a second bid of $14873. The 3 is correct, but the 8 is wrong. At this point it\'s a 50/50 chance. The player will select the 4 or the 0 and either win the car or lose the game.\n\nThe show\'s sponsors would like to know how frequently their cars are given away. You are to use the assumption that players choose numbers uniformly from those remaining. \n\n#### Input\nThe sponsor will explore many variations, with prices up to 7 digits long. Therefore, the input file will begin with a line containing the integer  N$$$ \\leq$$$5000 , the number of test cases to be explored. The test cases follow.\n\nEach test case begins with the integer d , $$$0 < d \\leq 7$$$ , the number of digits in the price of the car. d lines will follow, with non-empty strings of * distinct* digits in the range from 0 through 9. Each of these lines represents a * column* of the digits in the game. The first line represents the leftmost column; the last the rightmost column. A 0 is possible as the first digit in the price of the car.\n\n#### Output\nYour program will print the probability of the player winning the car, rounded to 3 decimals. \n\n#### Sample Input\n```\n2\n2\n9\n19\n5\n13\n942\n0684\n34720\n947368\n```\n\n#### Sample Output\n```\n1.000\n0.321\n```\n',10000,32768,'0',1,33,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('135','Bridged Marble Rings','#### Description\n[[Image:B34.png|right|thumb|26 Marbles Ring]]\n26 marbles -- half yellow and half gray -- are distributed between two circles of 13 marbles each. The marbles in each circle can be freely rotated clockwise or counterclockwise. The upper and lower circles are bridged by a smaller circle, which rotates -- in the plane of the board -- 180 degrees, effectively exchanging the three bottommost marbles of the upper circle with the three uppermost marbles of the lower one. The goal is to get all gray marbles to the upper circle and all yellow marbles to the lower one while minimizing the number of times the bridging circle is rotated. \n\n#### Input\nThe input is a series of lines, where each line describes an initial board configuration. Each line is a permutation of 13 y\'s and 13 g\'s. The first half of the line describes the clockwise configuration of the upper circle, and the rest of the line describes the clockwise configuration of the lower one. Of course, each y corresponds to a yellow marble, and each g corresponds to a gray one.\n\nThe input file will include multiple test cases. Each test case consists of a single line containing some permutation of the string $$$y^{13} g^{13}$$$ . All lines (including the last one) are terminated with a newline. The newline immediately follows the last letter on the line. \n\n#### Output\nFor each input case, you should print the minimum number of bridge rotations on a single line. \n\n#### Sample Input\n```\ngggggggggggggyyyyyyyyyyyyy\nyyyyyggggggggyyyygggggyyyy\ngyyygyggyyygyyggyyggggyygg\nygygygygygygygygygygygygyg\n```\n\n#### Sample Output\n```\n0\n2\n5\n6\n```\n',10000,32768,'0',1,34,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('136','Suface Area','#### Description\nThere is a cuboid with length a, depth b and height c. Your job is to calculate its suface area.\n[[Image:B35.png|center|300px]]\n\n#### Input\nThe first line of the input is a positive integer T. T is the number of test cases followed. Each case contains three positive integers a,b and c. All numbers are smaller than 100.\n\n#### Output\nfor each test case, output the surface area on a single line.\n\n#### Sample Input\n```\n2\n1 2 3\n4 5 6\n```\n\n#### Sample Output\n```\n22\n148\n```\n',10000,32768,'0',1,35,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('137','Reading books','#### Description\nIn the summer vacation, LRJ wants to improve himself in computer science. So he finds out N books of computer science in the school library. The books are numbered from 0 to N-1.\n\nTo finish reading the i-th book, it takes LRJ time[i] minutes. But some books are similar in the content. If the i-th book and the j-th book are similar, then if LRJ has finished reading the i-th book, it will take him only $$$\\left \\lfloor \\frac{time[j]}{2} \\right \\rfloor$$$ minutes to finish reading the j-th book. Of course if LRJ has finished reading the j-th book, it will take him only $$$\\left \\lfloor \\frac{time[i]}{2} \\right \\rfloor$$$ minutes to finish reading the i-th book. Now you are asked to tell LRJ the minimal total time to finish reading all the N books.\n\n#### Input\nThe first line contains two integers $$$N(0\\leq N \\leq 100)$$$ and $$$M(0\\leq M \\leq N\\times (N-1)/2)$$$. N is the total number of books. M is the number of pairs which are similar. \n\nThen the following N lines describe $$$time[0],time[1],\\cdots,time[n-1](1\\leq time[i] \\leq 10^{5})$$$.\n\nNext comes M lines, each contains two integer (i,j), indicating that the i-th book and the j-th book are similar.\n\nInput is ended with EOF.\n\n#### Output\nFor each test case, just output the minimal total time on a single line.\n\n#### Sample Input\n```\n2 1\n6\n10\n0 1\n3 2\n1\n2\n3\n0 1\n1 2\n3 1\n2\n4\n6\n0 1\n```\n\n#### Sample Output\n```\n11\n3\n10\n```\n',10000,32768,'0',1,36,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('138','Coconuts','#### Description\n\"The Falling Coconuts\" is a traditional game played by a group of kids. Each time, one of kids drops a coconut from the coconut tree down to the ground. Suppose each coconut has a different weight. Initially coconuts are hanging on the tree which is extremely high. And they are locating on a single axis parallel to the ground.\n\nWhen the game begins, a coconut is dropped vertically to the ground at a given location. If a coconut X lands on the ground(Since the height of the ground is 0, so the height of coconut X on the ground is 1), it remains where it is. If it lands on top of another coconut Y, one of the following cases happens.\n\n+ If coconut Y is surrounded on both sides bu coconuts (denoted by \'O\'), coconut X remains where it is.\n  - [[Image:B36-1.svg|200px]]\n+ If no coconuts is directly placed on either side of coconut Y, and coconut X is heavier than coconut Y, then coconut X will replace the location of coconut Y and coconut Y will slide to the right side. But if coconut X is lighter than coconut Y, then coconut X will directly slide down to the left side of coconut Y. (\'--\' denotes an empty position)\n  - [[Image:B36-2.svg|200px]] (Weight X > Weight Y)\n  - [[Image:B36-3.svg|200px]] (Weight X < Weight Y)\n+ If there is only one coconut O placed on either side of coconut Y, similar situations will happen as below.\n  - [[Image:B36-4.svg|200px]] (Weight X > Weight Y)\n  - [[Image:B36-5.svg|200px]] (Weight X < Weight Y)\n  - [[Image:B36-6.svg|200px]] (Weight X > Weight Y)\n  - [[Image:B36-7.svg|200px]] (Weight X < Weight Y)\n\nNotice that each time when coconut X or coconut Y slides down to a different position, it will continue to slide until it remains in a place where it will not slide any further.\n\nYour task is to output the final position of each coconut.\n\n#### Input\nThe first line of the input is a positive integer T. T is the number of test cases followed. Each test case starts with an integer $$$N(1\\leq N \\leq 1,000)$$$, representing the quantity of falling coconuts. The next N lines each line contains two integers $$$P_i\\,$$$ and$$$ W_i(1\\leq P_i,W_i \\leq 1,000)$$$, $$$P_i\\,$$$ is the horizontal position of i-th coconut and $$$W_i\\,$$$ is its weight. No two $$$W_i\\,$$$ have the same value.\n\n#### Output\nFor each test case, output N lines, each line contains the position $$$(X_i,Y_i)\\,$$$ of i-th coconut, $$$X_i\\,$$$ describes its height, $$$Y_i\\,$$$ describes its horizontal position. Output a blank line between each test case.\n\n#### Sample Input\n```\n2\n2\n1 1\n1 2\n4\n1 1\n2 2\n1 3\n1 4\n```\n\n#### Sample Output\n```\n1 2\n1 1\n\n1 0\n1 2\n1 1\n2 1\n```\n',10000,32768,'0',1,37,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('139','Pancake','#### Description\nOne time, Anthony has made a pancake, whose shape is a simple polygon. Anthony wants to cut the pancake into pieces with a knife. He is wondering what the maximum number of pieces he can get after one single cut is. He needs your help.\n\nNotice that you can not cut the pancake through a vertex, as in Figure 1.\n#### Input\nThe input is a sequence of datasets, each has the following format.\n```\nn\nx1 y1\nx2 y2\n...\nxn yn\n```\nThe first line contains an integers n(3<=n<=100), which is the number of vertices. And the following n lines contains n, different point, each line represents a vertex. Edges of the polygon connect vertices given in two adjacent vertex data lines, and in the last and the first vertex data lines(-100 000 000<=xi, yi<=100 000 000, both are integers).\n\nEdges intersect only at vertices, Three vertex may stand on one line.\n\nThe input is ended by n=0.\n#### Output\nOutput one integer for each input case, representing the largest number of pieces.\n#### Sample Input\n```\n5\n0 0\n2 0\n2 2\n1 1\n0 2\n0\n```\n\n#### Sample Output\n```\n3\n```\n',5000,1024,'0',1,38,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('14','Frog Mathematic','#### Description\nFrog loves mathematics. Let’s have a look on a frog mathematics problem. First,\nthere are some definitions here.\nA is an n×n matrix. Mi,j is a (n−1)×(n−1) matrix from A by deleting the\nith row and the jth column. To do it along row $$$i$$$, say\n\n$$$Det(A) = \n\\begin{cases} \n  A_{1,1},  & \\mbox{if }n = 1 \\\\\n  A_{1,1} \\times A_{2,2} - A_{1,2} \\times A_{2,1}, & \\mbox{if }n = 2 \\\\ \n  \\sum\\limits_{j=1}^n A_{i,j} \\times (-1)^{i+j} \\times Det(M_{i,j}), & \\mbox{if }n \\geq 3\n\\end{cases}$$$\n\n#### Task\nYou are given a $$$n \\times n$$$ integer matrix $$$A(1 \\leq n \\leq 10),$$$ all numbers of matrix A are\nin the range of $$$[-100,100].$$$ Please calculate the Det(A) Mod 20082008. a Mod b\nboth a and b are integer, the answer of a Mod b is the remainder of a divides by b.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100),$$$ the number of test cases. There\nare n + 1 lines for each test case. The first line contains an integer number\n$$$n(1 \\leq n \\leq 10)$$$, the size of matrix A. The next n lines contain n integer numbers\neach, separated by a space.\n\n#### Output\nFor each test case, print a line contains the solution.\n\n#### Sample Input\n```\n2\n3\n0 2 -3\n0 1 3\n2 0 -1\n2\n1 1\n1 1\n```\n\n#### Sample Output\n```\n18\n0\n```\n',10000,32768,'0',0,13,'',0,'2','2018-11-05 00:31:14','2018-11-05 00:48:07'),('140','Subset','#### Description\n\nA simple graph is an undirected graph. It has no self loop edges and no parallel edges, which means that no two distinct edges have exactly the same pair of ends. Given a simple graph, in which each vertex has a weighted value, and each edge can only belong to at most one simple cycle. \n\nYou task is to find a set of vertices, no two vertices in this set are adjacent, and the sum of weights of the vertices in the set should be maximized.\n\n#### Input\nInput contains serveral cases.\n\nThe first line of each case contains an integer n (1<=n<=10000),which is the number of nodes.\n\nThe second line contains n integers(each equal to or larger than 0, less than 10000). The i-th number is the weight of the i-th node.\n\nThe third line contains an integer m, which is the number of edges.\n\nEach of the following m lines contains two integers a and b, 1<=a,b<=n, representing that there is an edge between a and b.\n\nThe input ended by n=0.\n\n#### Output\nOutput one integer for each input case, representing the total weight of the largest independent subset.\n\n#### Sample Input\n```\n5\n1 2 1 2 0\n6\n1 2\n2 3\n3 1\n2 4\n4 5\n5 2\n0\n```\n\n#### Sample Output\n```\n3\n```\n',1000,1024,'0',1,39,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('141','Fengshui','#### Description\nFengshui is an ancient subject in Chinese tradition. Someone considers it as science and someone criticizes it as blind faith. Who knows! However, in modern days, everyone should respect culture from our ancestor!\n\nFengshui focus on geography,environment and staffs\' position, all the theory come from a very old book named \"YI\". YI means change. Everything is always changing in the world. Fengshui wishes to guide changing, make life change to a better situation. Now let\'s look at Fengshui\'s changing.\n\nAt first we must know about the traditional five elements system which composed by GOLD,WOOD,GROUND,WATER and FIRE. Everything in the world can be represented by one and only one element. For example, river is represented by WATER, hill is represented by GROUND. Here, we only consider the elements. In this system, once element can kill another element, and one element can born anther element. Five elements compose as a circuit, as in Figure 1.\n\n[[Image:B40_1.PNG|center]]\n\nEvery place has eight direction - east, west, north, south, northeast, northwest, southeast and southwest. Every direction has a represented element. Now, our problem is about the elements at these eight directions which form a Fengshui situation. Figure 2 is an example of one Fengshui situation.\n\n+ But Fengshui situation can change! There\'re two change ways:\n  - TURN: The whole situation turn clockwise one step. Figure 3 shows the situation that situation in Figure 2 makes one TURN change.\n  - REBORN: Based on kill and born relation, one direction\'s element can be killed by another direction\'s (at any other place) element in the situation, and then the killed element will born out as the new element at its direction. Of course, kill and born are all according as the relation of the system as in Figure 1. In situation of Figure 3, WATER in east can kill FIRE in southeast, then southeast place change to be GROUND, as in Figure 4.\n\n[[Image:B40_2.PNG|center]]\n\nEach change, no matter TURN or REBORN, const one step.\n\nNow, there\'re two Fengshui situation, we want to know is it possible that first one can change to the second one? And if possible, how many steps it need at least?\n\n#### Input\nThere\'re several cases, the first line of input is the number of cases. Every case includes 6 lines, the first 3 lines indeicate the first Fengshui situation, the last 3 lines incicate the second Fengshui situation.\n\nThe format of one situation is as follow, there may be arbitrary blanks between adjacent directions.\n```\nnorthwest  north  northeast\nwest                   east\nsouthwest  south  southeast\n```\n\n#### Output\nFor every case, output the number of the least changing steps on a single line, if it is possible, or output -1.\n\n#### Sample Input\n```\n2\nGOLD WOOD WATER\nWATER     FIRE\nWOOD GOLD GROUND\nWATER GOLD WOOD\nWOOD       WATER\nGOLD GROUND GROUND\nWATER GROUND WOOD\nGOLD         FIRE\nGOLD  FIRE   GROUND\nGOLD  FIRE   FIRE\nGOLD         FIRE\nWATER GROUND WOOD\n```\n\n#### Sample Output\n```\n2 \n14\n```\n',10000,32768,'0',1,40,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('142','See You in Your Tube','#### Description\nLing and Janice are good friends since childhood. Despite their deep friendship, they are eager to compete with each other in every aspect, from study to sports, from divination to having dreams. Some day, they fall love with the same boy and get involved in a fierce(also boring ~)team game against each other.\n\nOn the first few rounds, Ling\'s team takes a 3 to 1 lead. This night, both teams come to a cemetery and start a new round, to distribute pies to ghost. Janice realizes she must win this round, or she will be beaten by Ling. There are N tombs in the cemetry, which are numbered from 1 to N. Both teams are at tomb 1.There are some tunnels connecting pairs of tombs, allowing one to climb from one end to the other. Each team should go to every tomb to leave some pies.\nIt\'s risky to climb in the tunnel, so Janice wants to minimize the total length of the tunnels which they will go through. Unfortunately, Ling is well trained for chinese Qigong, and she has the amazing capability to shorten one tunnel at a time. Janice is confused after that. So she turns to you, a menber of her team, to let her know the minimun total length every time something is changed.\n#### Input\nThere are multiple test cases. Each case start with a line containing two positive integers, $$$N(N\\leq10^{4})$$$ and $$$T(T\\leq10^{5})$$$, indicating the number of tombs and number of tunnels. T lines followed, each contains three numbers ui, vi and li, indicating that there is a tunnel of length li connecting tomb $$$ui ,vi (1 \\leq ui,vi \\leq N,ui \\neq vi, li>0)$$$.The next line contains one positive integer $$$Q(Q\\leq10^{4})$$$. Then Q lines followed, each line containing two positive numbers $$$ai, wi(1\\leq ai \\leq T,wi>0)$$$, means that the length of the ai-th tunnel in the input become wi, where wi will be strictly less than the tunnel\'s current length. The test data guarantees that all the tombs can be reached from tomb number 1. No two tunnels connect same pair of tombs. The total length of all the tunnels fits in a $$$32-bit$$$ unsigned integer. You should process to the end of file.\n#### Output\nFor each test case, first output a line containing the minimum total length of the tunnels to be use. Then for each time Ling using her Qigong, output a line to update the value. output one empty line after each test case.\n#### Sample Input\n```\n2 1\n1 2 3\n1 \n1 1\n5 6\n1 2 5\n2 3 3\n1 4 11\n2 4 6\n3 5 9\n4 5 12\n3\n3 3\n2 1\n6 8\n```\n\n#### Sample Output\n```\n3\n1\n\n23\n20\n18\n17\n```\n\n',1000,1024,'0',1,41,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('143','Union Set','#### Description\nThere are a number of sets. Each set is made up of integers and has the form {x|x=a+kd, k=0,1,2,... and x<=b}. \n\nThat is to say, a set is decided by constains a, b and d.\n\nYour task is to calculate the union set of given sets. Just tell me the size of the union set.\n\n#### Input\nThere are multiple test cases.\n\nFor each test case, there is an integer number n on the first line indicating the number of sets(0<=n<=10).\n\nEach of the following n lines contains three integers ai, bi and di. All integers are 32-bit signed integers and 0<=di<=30.\n\nInput is terminated by n=0.\n\n#### Output\nFor each test case, output the size of the union set on a single line.\n\n#### Sample Input\n```\n2\n1 3 2\n2 4 3\n0\n```\n\n#### Sample Output\n```\n3\n```\n',1000,1024,'0',1,42,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('144','Table Tennis','#### Description\nThe 49th World Table Tennis Championships was held in Guangzhou from February 24th to March 2nd. It was a chance not to be missed for the table tennis enthusiast. TZD and other table tennis enthusiast in Zhongshan University decided to watch the first day’s matches. That day when they got to the gymnasium, there was still an hour left. \n\nSo they decided to walk around. They found that not far away there were some children playing games round a table. This game was played like this: you stand by the table on one side, and on the other side there is a machine to serve you the balls one by one. Then you hit the balls. See Figure 2.9.1.\n\nOn the half of the table opposite to you, there are three circles of different size. From left to right, see Figure 2.9.2, we call them big circle, middle circle and small circle. If you hit the ball onto the area inside the big circle, you will get one point. For the middle circle you will get two points. And for the small circle three points. But if you hid the ball right onto the boundary of circles, you will not get any points. If you get enough points, you will be given a small gift!  TZD also wanted to have a try.\n\nWe assume that the circle are given by three integer    (x- coordinate of the center, y- coordinate of the center, radius.) From left to right the three circles are (30,30,20), (100,30,10), (170,30,5). And each hit is described by two integer (xpos,ypos), meaning that TZD hit the ball onto the position (xpos,ypos). Now please tell TZD how many points he got after N hits.\n\n#### Input\nThe first line contains a positive integer T . T is the number of test cases followed.\nFor each test case, there is a positive integer N(o<=N<=60) in\nThe first line, the number of TZD’S hits. Next come N pairs of integer (xpos,ypos), each pair in one line. (0<=xpos<=200, 0<=ypos<=200).\n\n#### Output\nFor each test case print the total points in one line.\n\n#### Sample Input\n```\n3\n2\n30 31\n100 32\n1\n30 50\n3\n30 30\n99 30\n170 30\n```\n\n#### Sample Output\n```\n3\n0\n6\n```\n',1000,1024,'0',1,43,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('145','Single Round Match','#### Description\nAssociation for Couples Match (ACM) is a non-profit organization which is engaged in helping single people to find his/her other half. As November 11th is “Singles Day”, on this day, ACM invites a large group of singles to the party. People round together, chatting with others, and matching partners.\n\nThere are N gentlemen and M ladies in the party, each gentleman should only match with a lady and vice versa. To memorize the Singles Day, ACM decides to divide people into 11 groups, each group should have the same amount of couples and no people are left without the groups.\n\nCan ACM achieve the goal?\n\n#### Input\nThe first line of the input is a positive integer T. T is the number of test cases followed. Each test case contains two integer N and M (0<=N ,M<=10^1000),which are the amount of gentlemen and ladies.\n\n#### Output\nFor each test case, output “YES” if it is possible to find a way, output “NO” if not.\n\n#### Sample Input\n```\n3\n1 1\n11 11\n22 11\n```\n\n#### Sample Output\n```\nNO\nYES\nNO\n```\n',1000,1024,'0',1,44,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('146','Minesweeper','#### Description\nHave you ever played Minesweeper? It\'s a cute little game which comes within a certain Operating System which name we can\'t really remember. Well, the goal of the game is to find where are all the mines within a MxN field. To help you, the game shows a number in a square which tells you how many mines there are adjacent to that square. For instance, supose the following 4x4 field with 2 mines (which are represented by an * character):\n```\n+ ...\n....\n.*..\n....\n```\n\nIf we would represent the same field placing the hint numbers described above, we would end up with:\n```\n+ 100\n2210\n1*10\n1110\n```\n\nAs you may have already noticed, each square may have at most 8 adjacent squares.\n\n#### Input\nThe input will consist of an arbitrary number of fields. The first line of each field contains two integers n and m (0 < n,m <= 100) which stands for the number of lines and columns of the field respectively. The next n lines contains exactly m characters and represent the field. Each safe square is represented by an \".\" character (without the quotes) and each mine square is represented by an \"*\" character (also without the quotes). The first field line where n = m = 0 represents the end of input and should not be processed.\n\n#### Output\nFor each field, you must print the following message in a line alone:\n\n\nField #x:\n\n\nWhere x stands for the number of the field (starting from 1). The next n lines should contain the field with the \".\" characters replaced by the number of adjacent mines to that square. There must be an empty line between field outputs.\n\n#### Sample Input\n```\n4 4\n+ ...\n....\n.*..\n....\n3 5\n  - ...\n.....\n.*...\n0 0\n```\n\n#### Sample Output\n```\nField #1:\n+ 100\n2210\n1*10\n1110\n\nField #2:\n  - 100\n33200\n1*100\n```\n',10000,32768,'0',1,45,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('147','How Many Fibs','#### Description\nRecall the definition of the Fibonacci numbers:\n\n    f1 := 1\n    f2 := 2\n    fn := fn-1 + fn-2     (n>=3) \n\nGiven two numbers a and b, calculate how many Fibonacci numbers are in the range [a,b].\n\n#### Input\nThe input contains several test cases. Each test case consists of two non-negative integer numbers a and b. Input is terminated by a=b=0. Otherwise, $$$a<=b<=10^{100}$$$. The numbers a and b are given with no superfluous leading zeros.\n\n#### Output\nFor each test case output on a single line the number of Fibonacci numbers fi with a<=fi<=b.\n\n#### Sample Input\n```\n10 100\n1234567890 9876543210\n0 0\n```\n\n#### Sample Output\n```\n5\n4\n```\n\n',10000,32768,'0',1,46,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('148','Big Integer I','#### Description\nPlease calculate the answer of A+B and the answer of A-B, both A and B are integer.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 1000)$$$, the number of test cases. There\nis two lines for each test case. Both of them contains one integers $$$A,B(-10^{1000} \\leq A,B \\leq 10^{1000})$$$.\n\n#### Output\nFor each test case, output two lines A+B and A-B.\n\n#### Sample Input\n```\n3\n1\n2\n1\n1\n-1\n-1\n```\n\n#### Sample Output\n```\n3\n-1\n2\n0\n-2\n0\n```\n',10000,32768,'0',1,47,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('149','Big Integer II','#### Description\nPlease calculate the answer of A*B, both A and B are integer.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 1000)$$$, the number of test cases. There\nis only line for each test case. It contains two integers $$$A,B(-10^{100} \\leq A,B \\leq 10^{100})$$$.\n\n#### Output\nFor each test case, output A*B in one line.\n\n#### Sample Input\n```\n3\n1 2\n1 1\n-1 -1\n```\n\n#### Sample Output\n```\n2\n1\n1\n```\n',10000,32768,'0',1,48,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('15','Dividing Coins','#### Description\nThere are $$$N(1 \\leq N \\leq 100)$$$ frogs, one day, they have got$$$M(1 \\leq M \\leq 1, 000, 000, 000)$$$\ncoins from the kind. They decided to divide the coins in this way, the first frog\ndivides the M coins into N equal piles, with K coins left over. He keeps the extra\nK coins and one pile of coin for himself, and puts the other piles of coins back\ninto a single pile. The other frogs then do the same thing one by one.\n\n#### Task\nGiven the number of frogs and coins, find out how many coins each frog will have,\nand how many coins are left after all.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. There\nis only one line for each test case, contains two integers N amd M, the number of\nfrogs and coins.\n\n#### Output\nFor each test case, find out the number of coins received by each frog separated by a space in one line (any order of is acceptable), \nfollowed by the total number of coins remained.\n\n#### Sample Input\n```\n2\n2 12\n3 10\n```\n\n#### Sample Output\n```\n6 3\n3\n4 2 2\n2\n```\n',10000,32768,'0',0,14,'',0,'3','2018-11-05 00:31:14','2018-11-05 00:48:07'),('150','Lamps','#### Description\nWe have a set of N coloured lamps numbered from 1 to N. The lamps are connected to four buttons:\n\n+ button 1, when this button is pressed, all the lamps change their state: those that are ON are turned OFF and those that are OFF are turned ON. \n+ button 2, changes the state of all the odd numbered lamps. \n+ button 3, changes the state of all the even numbered lamps. \n+ button 4, changes the state of the lamps whose number is of the form 3K+1 (with K>=0), i.e., 1,4,7,...\n \nThere is a counter C which records the total number of button presses. When the party starts, all the lamps are ON and the counter C is set to zero. \n\nYou are given the value of counter $$$C(1 \\leq C \\leq 10,000)$$$ and information on the final state of some of the lamps. Write a program to determine all the possible final configurations of the $$$N(10 \\leq N \\leq 100)$$$ lamps that are consistent with the given information, without repetitions. \n\n#### Input\nThere are four lines, describing the number N of lamps available, the number C of button presses, and the state of some of the lamps in the final configuration.\n\nThe first line contains the number N and the second line the final value of counter C. The third line lists the lamp numbers you are informed to be ON in the final configuration, separated by one space and terminated by the integer -1. The fourth line lists the lamp numbers you are informed to be OFF in the final configuration, separated by one space and terminated by the integer -1. \n\n#### Output\nThe output should contain all the possible final configurations (without repetitions) of all the lamps. Each possible configuration must be written on a different line, listed in lexicographical order(from smaller to larger).\n\nEach line has N characters, where the first character represents the state of lamp 1 and the last character represents the state of lamp N. A 0 (zero) stands for a lamp that is OFF, and a 1 (one) stands for a lamp that is ON. \n\n#### Sample Input\n```\n10\n1\n-1\n7 -1\n```\n\n#### Sample Output\n```\n0000000000\n0101010101\n0110110110\n```\n',1000,32768,'0',1,49,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('151','The Clocks','#### Description\n[[Image:B50_1.png|center]]\nThere are nine clocks in a 3*3 array (figure 1). The goal is to return all the dials to 12 o\'clock with as few moves as possible. There are nine different allowed ways to turn the dials on the clocks. Each such way is called a move. Select for each move a number 1 to 9. That number will turn the dials 90\' (degrees) clockwise on those clocks which are affected according to figure 2 below. \n[[Image:B50_2.png|center]]\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases.\n\nFor each test case, there are nine numbers in the input. These numbers give the start positions of the dials. 0=12 o\'clock, 1=3 o\'clock, 2=6 o\'clock, 3=9 o\'clock. The example in figure 1 gives as the sample input. \n\n#### Output\nFor each test case, output a shortest sequence of moves (numbers) in one line, which returns all the dials to 12 o\'clock. In case there are many solutions, only one is required.\n\n#### Sample Input\n```\n2\n3 3 0\n2 2 2 \n2 1 2\n3 3 0\n2 2 2 \n2 1 2\n```\n\n#### Sample Output\n```\n5849\n5849\n```\n',10000,65536,'0',1,50,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('152','Milking Cows','#### Description\nThree farmers rise at 5 am each morning and head for the barn to milk three cows. The first farmer begins milking his cow at time 300 (measured in seconds after 5 am) and ends at time 1000. The second farmer begins at time 700 and ends at time 1200. The third farmer begins at time 1500 and ends at time 2100. The longest continuous time during which at least one farmer was milking a cow was 900 seconds (from 300 to 1200). The longest time no milking was done, between the beginning and the ending of all milking, was 300 seconds (1500 minus 1200). \n\nYour job is to write a program that will examine a list of beginning and ending times for N (1 <= N <= 5000) farmers milking N cows and compute (in seconds): \n+ The longest time interval at least one cow was milked. \n+ The longest time interval (after milking starts) during which no cows were being milked.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases.\n\nFor each test:\n+ Line 1: The single integer  \n+ Lines 2..N+1: Two non-negative integers less than 1000000, the starting and ending time in seconds after 0500 \n\n#### Output\nFor each test case, output a single line with two integers that represent the longest continuous time of milking and the longest idle time. \n\n#### Sample Input\n```\n2\n3\n300 1000\n700 1200\n1500 2100\n3\n300 1000\n700 1200\n1500 2100\n```\n\n#### Sample Output\n```\n900 300\n900 300\n```\n',1000,32768,'0',1,51,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('153','Transformations','#### Description\nA square pattern of size N x N (1 <= N <= 10) black and white square tiles is transformed into another square pattern. Write a program that will recognize the minimum transformation that has been applied to the original pattern given the following list of possible transformations: \n\n+ 1: 90 Degree Rotation: The pattern was rotated clockwise 90 degrees. \n+ 2: 180 Degree Rotation: The pattern was rotated clockwise 180 degrees. \n+ 3: 270 Degree Rotation: The pattern was rotated clockwise 270 degrees. \n+ 4: Reflection: The pattern was reflected horizontally (turned into a mirror image of itself by reflecting around a vertical line in the middle of the image). \n+ 5: Combination: The pattern was reflected horizontally and then subjected to one of the rotations (#1-#3). \n+ 6: No Change: The original pattern was not changed. \n+ 7: Invalid Transformation: The new pattern was not obtained by any of the above methods. \n\nIn the case that more than one transform could have been used, choose the one with the minimum number above. \n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases.\n\nFor each test case:\n+ Line 1:  A single integer, N  \n+ Line 2..N+1:  N lines of N characters (each either `@\' or `-\'); this is the square before transformation \n+ Line N+2..2+ N+1:  N lines of N characters (each either `@\' or `-\'); this is the square after transformation \n\n#### Output\nFor each test case, output a single line containing the the number from 1 through 7 (described above) that categorizes the transformation required to change from the `before\' representation to the `after\' representation. \n\n#### Sample Input\n```\n2\n3\n@-@\n---\n@@-\n@-@\n@--\n--@\n3\n@-@\n---\n@@-\n@-@\n@--\n--@\n```\n\n#### Sample Output\n```\n1\n1\n```\n',1000,32768,'0',1,52,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('154','Palindromic Squares','#### Description\nPalindromes are numbers that read the same forwards as backwards. The number 12321 is a typical palindrome. \n\nGiven a number base B (2 <= B <= 20 base 10), print all the integers T (1<=T<=N<=30,000 base 10) such that the square of T is palindromic when expressed in base B; also print the value of that palindromic square. Use the letters \'A\', \'B\', and so on to represent the digits 10, 11, and so on. \n\nPrint both the number and its square in base B.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases.\n\nFor each test case, there is a single line with N and B (specified in base 10). \n\n#### Output\nFor each test case, output lines with two integers represented in base B. The first integer is the number whose square is palindromic; the second integer is the square itself. \n\n#### Sample Input\n```\n2\n300 10\n300 10\n```\n\n#### Sample Output\n```\n1 1\n2 4\n3 9\n11 121\n22 484\n26 676\n101 10201\n111 12321\n121 14641\n202 40804\n212 44944\n264 69696\n1 1\n2 4\n3 9\n11 121\n22 484\n26 676\n101 10201\n111 12321\n121 14641\n202 40804\n212 44944\n264 69696\n```\n',10000,32768,'0',1,53,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('155','Dual Palindromes','#### Description\nA number that reads the same from right to left as when read from left to right is called a palindrome. The number 12321 is a palindrome; the number 77778 is not. Of course, palindromes have neither leading nor trailing zeroes, so 0220 is not a palindrome. \n\nThe number 21 (base 10) is not palindrome in base 10, but the number 21 (base 10) is, in fact, a palindrome in base 2 (10101). \n\nWrite a program that reads two numbers (expressed in base 10): \n\n+ N (1 <= N <= 15) \n+ S (0 < S < 10000) \n\nand then finds and prints (in base 10) the first N numbers strictly greater than S that are palindromic when written in two or more number bases (2 <= base <= 10). \nSolutions to this problem do not require manipulating integers larger than the standard 32 bits. \n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases.\n\nFor each test case, there is a single line with space separated integers N and S. \n\n#### Output\nFor each test case output N lines, each with a base 10 number that is palindromic when expressed in at least two of the bases 2..10. The numbers should be listed in order from smallest to largest. \n\n#### Sample Input\n```\n2\n3 25\n1 25\n```\n\n#### Sample Output\n```\n26\n27\n28\n26\n```\n',10000,32768,'0',1,54,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('156','Arithmetic Progressions','#### Description\nAn arithmetic progression is a sequence of the form a, a+b, a+2b, ..., a+nb where n=0,1,2,3,... . For this problem, a is a non-negative integer and b is a positive integer. \n\nWrite a program that finds all arithmetic progressions of length n in the set S of bisquares. The set of bisquares is defined as the set of all integers of the form $$$p^2 + q^2$$$ (where p and q are non-negative integers). \n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases.\n\nFor each test case,there are two integers. N and M, $$$N (3 \\leq N \\leq 25)$$$, the length of progressions for which to search; $$$M (1 \\leq M \\leq 250)$$$, an upper bound to limit the search to the bisquares with $$$0 \\leq p,q \\leq M$$$.  \n\n#### Output\nFor each test case, If no sequence is found, output a singe line reading `NONE\'. Otherwise, output one or more lines, each with two integers: the first element in a found sequence and the difference between consecutive elements in the same sequence. The lines should be ordered with smallest-difference sequences first and smallest starting number within those sequences first. P.S: The output of each test case will not conatins more than 10,000 lines.\n\n#### Sample Input\n```\n2\n5 7\n5 7\n```\n\n#### Sample Output\n```\n1 4\n37 4\n2 8\n29 8\n1 12\n5 12\n13 12\n17 12\n5 20\n2 24\n1 4\n37 4\n2 8\n29 8\n1 12\n5 12\n13 12\n17 12\n5 20\n2 24\n```\n',10000,524268,'0',1,55,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('157','Mother\'s Milk','#### Description\nFarmer John has three milking buckets of capacity A, B, and C liters. Each of the numbers A, B, and C is an integer from 1 through 20, inclusive. Initially, buckets A and B are empty while bucket C is full of milk. Sometimes, FJ pours milk from one bucket to another until the second bucket is filled or the first bucket is empty. Once begun, a pour must be completed, of course. Being thrifty, no milk may be tossed out. \n\nWrite a program to help FJ determine what amounts of milk he can leave in bucket C when he begins with three buckets as above, pours milk among the buckets for a while, and then notes that bucket A is empty. \n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 1000)$$$, the number of test cases. For each test case, a single line with the three integers A, B, and C. \n\n#### Output\nFor each test case, output a single line with a sorted list of all the possible amounts of milk that can be in bucket C when bucket A is empty. \n\n#### Sample Input\n```\n2\n8 9 10\n2 5 10\n```\n\n#### Sample Output\n```\n1 2 8 9 10\n5 6 7 8 9 10\n```\n',10000,32768,'0',1,56,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('158','Packing Rectangles','#### Description\n[[Image:B57_1.gif|center]]\nFour rectangles are given. Find the smallest enclosing (new) rectangle into which these four may be fitted without overlapping. By smallest rectangle, we mean the one with the smallest area. \n\nAll four rectangles should have their sides parallel to the corresponding sides of the enclosing rectangle. Above figure shows six ways to fit four rectangles together. These six are the only possible basic layouts, since any other layout can be obtained from a basic layout by rotation or reflection. Rectangles may be rotated 90 degrees during packing. \n\nThere may exist several different enclosing rectangles fulfilling the requirements, all with the same area. You must produce all such enclosing rectangles\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. \n\nFor each test case, there are four lines, each containing two positive space-separated integers that represent the lengths of a rectangle\'s two sides. Each side of a rectangle is at least 1 and at most 50. \n\n#### Output\nFor each test case, output contains one line more than the number of solutions. The first line contains a single integer: the minimum area of the enclosing rectangles. Each of the following lines contains one solution described by two numbers p and q with p<=q. These lines must be sorted in ascending order of p, and must all be different. \n\n#### Sample Input\n```\n2\n1 2\n2 3\n3 4\n4 5\n1 2\n2 3\n3 4\n4 5\n```\n\n#### Sample Output\n```\n40\n4 10\n5 8\n40\n4 10\n5 8\n```\n',10000,32768,'0',1,57,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('159','Alec\'s Eggs','#### Description\n[[Image:B58.JPG|thumb|Eggs]]\nAlec has a lot of eggs. One day, he want to sort them in a ascending sequence by weight. But he only can switch two eggs which are adjoining by each other because he has two hands only. Now he ask for your help, and you are enthusiastic. You decide help him calculate the total numbers of switch he need at least.\n\nAttention: the weight of each egg less than 100,000,000 units.\n\n#### Input\nThere are multiply test case.The first line describe the number of test case $$$T(T \\leq 10)$$$. For each test case, the first line describe the number of eggs that Alec has, $$$N(1 \\leq N \\leq 100,000)$$$. The second line describe the weight of each eggs splited by a space.\n#### Output\nOutput the total number of switch that Alec need at least. One line for each test case. The total number may be very very large but fited in 64-bit integer.\n#### Sample Input\n```\n2\n2\n2 1\n2\n2 3\n```\n\n#### Sample Output\n```\n1\n0\n```',10000,32768,'0',1,58,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('16','Triple Free','#### Description\nWho can be the king in the kingdom of frogs? The one who can solve this problem\nin the shortest time. So, what’s the problem? The problem named as Triple-Free-\nOr-Not.\nYou are given a list of integer, you are asked to tell if the list is triple free or\nnot. Triple free means, no 3 integers in the list can form an increasing arithmetic\nsequence(a sequence of numbers such that the difference of any two successive\nmembers is a positive constant).\nThe old king wants to keep the position, he is asking your help.\n\n#### Task\nYou are given a list of integer numbers, write a program which can tell if it is\ntriple free or not.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. The\nfirst line of each test case will have an integer number $$$N(1 \\leq N \\leq 1, 000)$$$, the\nnumber of integers in the list. The second line will contain N integers separate by\nspaces, all of them are in the range of $$$[-2^{31},2^{31}-1]\\,$$$.\n\n#### Output\nFor each test case, print Triple-Free or Triple-NotFree in one line.\n\n#### Sample Input\n```\n2\n3\n1 2 3\n3\n3 4 6\n```\n\n#### Sample Output\n```\nTriple-NotFree\nTriple-Free\n```\n',10000,32768,'0',0,15,'',0,'4','2018-11-05 00:31:14','2018-11-05 00:48:07'),('160','Kaman\'s Eggs','#### Description\nKaman has a lot of eggs as Alec has. But Kaman does not like sort his eggs.  Kaman has two operation with his eggs.Operation #0 :select the lightest one and eat it; Operation #1: put a new egg together with the egg that he has.\n\n#### Input\nThe first line describe the number of eggs that he alreadly had.$$$ N(N \\leq 1,000,000).$$$ The second line describe the weight of each eggs. The weight will be less than $$$1,000,000,000$$$ units.\nThe third line describe the number of operations $$$M(M \\leq 1,000,000)$$$.\nThe next M line describe one operation . When operation #1 was given ,that will be an integer \ndescribe the weight of the new egg followed.\n\n#### Output\nOutput the weight of egg that will be eaten for each operation #0,in one line. No output for the operation #1.\n#### Sample Input\n```\n5\n2 1 5 4 3\n3\n0\n1 6\n0\n```\n\n#### Sample Output\n```\n1\n2\n```',10000,32768,'0',1,59,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('161','BuildTree\'s Eggs','#### Description\nAs we known, BuildTree has a lot of eggs with different ID (an integer).As his name, he likes to keep them like a binary tree. He can remember the sequence of his eggs in pre-order and in-order in his mind, except post-order. Now he ask for your help. He will tell you the pre-order and in-order sequence, then you must tell him the post-order.\n\n#### Input\nFirst line describe the number of test cases. For each test case, give you the number of egg in the first line $$$N(N \\leq 10,000)$$$. Describe the pre-order and in-order in next two lines.\n\n#### Output\nOutput the post-order for each test case.\n#### Sample Input\n```\n1\n3\n1 2 3\n3 2 1\n```\n\n#### Sample Output\n```\n3 2 1\n```\n\n\n',1000,32768,'0',1,60,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('162','Games','#### Description\nLet\'s play a game like Problem $$$A41$$$ again. The rule of this game is quite simple. Only three kinds of commands in this game,  $$$\'Add \\, k\\,\'$$$  , $$$\'Ask \\, k\\,\'$$$ and $$$\'Del \\, k\\,\'$$$. You will have a list of numbers. At beginning the list is empty. When you got the command $$$\'Add \\, k\'$$$, firstly, you must check if the number $$$\'k\'$$$, is in the list or not; secondly, if the number $$$\'k\'$$$, is not in the list, add it to the list or do nothing. When you got the command $$$\'Ask \\, k\'$$$ you should tell if the number in the list or not. When you got the command $$$\'Del\\, k\'$$$, firstly, you must check if the number $$$\'k\'$$$, is in the list or not; secondly, if the number $$$\'k\'$$$, is  in the list, delete it from the list or do nothing.\n\n#### Input\nThe first line of input contains $$$T \\,$$$, the number of test cases. The first line of each test case will have an integer number $$$N(1 \\leq N \\leq 1, 000, 000)$$$, the number of commands.$$$ N \\,$$$ lines followed, each contains one command $$$\'Add \\, k\'$$$ , $$$\'Ask \\, k\'$$$ and $$$\'Del \\, k\'$$$.  For every $$$k \\,$$$ fited in $$$32 \\,$$$-bit.\n\n#### Output\nFor each $$$\'Ask \\, k\'$$$ command, print $$$\'YES \\,\'$$$ when the number $$$k \\,$$$ in the list or print $$$\'NO \\,\'$$$ in one line. \n#### Sample Input\n```\n2\n5\nAdd 2\nAsk 3\nAsk 2\nDel 2\nAdd 3\n2\nDel 2\nAsk 1\n```\n\n#### Sample Output\n```\nNO\nYES\nNO\n```\n\n',10000,32768,'0',1,61,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('163','RPN','#### Description\nIn Reverse polish notation (RPN), the operators follow their operands. For instance, to add $$$a \\,$$$ and $$$b \\,$$$ would write $$$\' a \\, b \\, +\'$$$ rather than $$$a \\, + \\, b\'$$$. If there are multiple operations, the operator is given immediately after its second operand. So the expression written $$$\'a \\, - \\,b \\, + \\,c\'$$$ in conventional infix notation would be written $$$\'a\\, b-\\,c \\,+\'$$$ in RPN. Now, your missions is converse expression in infix notation to RPN.\n#### Input\nThere are multiple test cases T in the first line. Describe one expression in each followed line.Length of each line is no longer than 1000 characters and all of operands are single lower letter.\n#### Output\nOutput each RPN in one line.\n#### Sample Input\n```\n3\na+b\na-b+c\na+((b+c)*d)-e\n```\n\n#### Sample Output\n```\nab+\nab-c+\nabc+d*+e-\n```\n\n\n',10000,32768,'0',1,62,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('164','Numbers Ⅱ','#### Description\nLet\'s play a game like Problem B61 again. The rule of this game is quite simple. Only three kinds of commands in this game, $$$\'Add \\, k\\,$$$\' , $$$\'Ask \\,\'$$$ and $$$\'Del \\,\'$$$. You will have a list of numbers. At beginning the list is empty. When you got the command $$$\'Add \\, k\'$$$, you may add it to the list even though $$$k\\,$$$ has already existed. $$$\'Ask \\,\'$$$ you should tell the number in the middle position of the list sorted by ascending; If there are even numbers of the list ,the little one is right. When you got the command $$$\'Del\\, \'$$$, you should delete the number in the middle position of the list sorted by ascending; If there are even numbers of the list ,the little one is right.\n#### Input\nThe first line of input contains $$$T \\,$$$, the number of test cases. The first line of each test case will have an integer number $$$N(1 \\leq N \\leq 1, 000, 000)$$$, the number of commands. $$$N \\,$$$, lines followed, each contains one command $$$\'Add \\, k\'$$$ , $$$\'Ask \\,\'$$$ and $$$\'Del \\,\'$$$. For every $$$k \\,$$$ fited in signed $$$32 \\,$$$-bit. \n#### Output\nFor each \'Ask \\,\' command, print  the number k which in the middle position of list sorted by ascending. If there even numbers of the list ,the little one is right.\n#### Sample Input\n```\n1\n8\nAdd 1\nAdd 2\nAdd 3\nAdd 4\nAsk\nDel\nAdd 5\nAsk\n```\n\n#### Sample Output\n```\n2\n3\n```\n\n',15000,32768,'0',1,63,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('165','Network Connections','#### Description\nBob, who is a network administrator, supervises a network of computers. He is keeping a log connections between the computers in the network. Each connection is bi-directional. Two computers are interconnected if they are directly connected or if they are interconnected with the same computer. Occasionally, Bob has to decide, quickly, whether two given computers are connected, directly or indirectly, according to the log information. \n\nWrite a program which based on information input from a text file counts the number of successful and the number of unsuccessful answers to the questions of the kind :\nis computer $$$i \\,$$$ interconnected with computer $$$j\\,$$$ ? \n#### Input\nThe first line of the input contains the number of dataset, and it\'s followed by a blank line. Each dataset is defined as follows:\n\n+  The number of computers in the network $$$N\\,$$$($$$N \\leq 10,000$$$); \n+  A list of pairs of the form:\n  -  $$$c\\,$$$ computer $$$i\\,$$$ computer $$$j\\,$$$, where computer $$$i\\,$$$ and computer $$$j\\,$$$ are integers from $$$1\\,$$$ to $$$N\\,$$$. A pair of this form shows that computer $$$i\\,$$$ and computer $$$j\\,$$$ get interconnected. \n  -  $$$q\\,$$$ computer $$$i\\,$$$ computer $$$j\\,$$$, where computer $$$i\\,$$$ and computer $$$j\\,$$$ are integers from $$$1\\,$$$ to $$$N \\,$$$. A pair of this form stands for the question: is computer $$$i\\,$$$ interconnected with computer $$$j\\,$$$? \n\nThere\'s a blank line between datasets. \n\nEach pair is on a separate line. Pairs can appear in any order, regardless of their type. The log is updated after each pair of type (a) and each pair of type (b) is processed according to the current network configuration.\n\n#### Output\nFor example, the input file illustrated in the sample below corresponds to a network of 10 computers and 7 pairs. There are $$$N1\\,$$$ successfully answered questions and $$$N2\\,$$$ unsuccessfully answered questions. The program prints these two numbers to the standard output on the same line, in the order: successful answers, unsuccessful answers, as shown in the sample output. Print a blank line between datasets.\n\n#### Sample Input\n```\n1\n\n10\nc 1 5\nc 2 7\nq 7 1\nc 3 9\nq 9 6\nc 2 5\nq 7 5\n```\n\n#### Sample Output\n```\n1,2\n```',10000,32768,'0',1,64,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('166','Sending email','#### Description\nThere are n SMTP servers connected by network cables. Each of the m cables connects two computers and has a certain latency measured in milliseconds required to send an email message. What is the shortest time required to send a message from server S to server T along a sequence of cables? Assume that there is no delay incurred at any of the servers.\n\n#### Input\nThe first line of input gives the number of cases, N. N test cases follow. Each one starts with a line containing n (2<=n<=10,000), m (0<=m<=100,000) and S (0<=S<n). The next m lines will each contain 3 integers: 2 different servers (in the range [0, n-1]) that are connected by a bidirectional cable and the latency, w, along this cable (0<=w<=10000). \n\n#### Output\nFor each test case, output n lines. The Ith line contains the number of milliseconds required to send a message from server S to I. Print \"-1\" if there is no route from S to I. \n\n#### Sample Input\n```\n2\n3 2 0\n0 1 1\n1 2 1\n3 2 0\n0 1 1\n1 2 1\n```\n\n#### Sample Output\n```\n0\n1\n2\n0\n1\n2\n```\n',10000,32768,'0',1,65,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('167','Greedy Gift Givers','#### Description\nA group of NP ($$$2 \\leq NP \\leq 10$$$) uniquely named friends has decided to exchange gifts of money. Each of these friends might or might not give some money to any or all of the other friends. Likewise, each friend might or might not receive money from any or all of the other friends. Your goal in this problem is to deduce how much more money each person gives than they receive.\n\nThe rules for gift-giving are potentially different than you might expect. Each person sets aside a certain amount of money to give and divides this money evenly among all those to whom he or she is giving a gift. No fractional money is available, so dividing 3 among 2 friends would be 1 each for the friends with 1 left over -- that 1 left over stays in the giver\'s \"account\".\n\nIn any group of friends, some people are more giving than others (or at least may have more acquaintances) and some people have more money than others.\n\nGiven a group of friends, no one of whom has a name longer than 14 characters, the money each person in the group spends on gifts, and a (sub)list of friends to whom each person gives gifts, determine how much more (or less) each person in the group gives than they receive.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 1000)$$$, the number of test cases. For each test case:\n+ Line 1: 	  The single integer, NP\n+ Lines 2..NP+1:   Each line contains the name of a group member\n+ Lines NP+2..end: NP groups of lines organized like this:\n  - The first line in the group tells the person\'s name who will be giving gifts.\n  - The second line in the group contains two numbers: The initial amount of money (in the range 0..2000) to be divided up into gifts by the giver and then the number of people to whom the giver will give gifts, $$$NG_i$$$ ($$$0 \\leq NG_i \\leq NP-1$$$).\n  - If $$$NG_i$$$ is nonzero, each of the next $$$NG_i$$$ lines lists the the name of a recipient of a gift.\n\n#### Output\nFor each test, the output is NP lines, each with the name of a person followed by a single blank followed by the net gain or loss (final_money_value - initial_money_value) for that person. The names should be printed in the same order they appear on line 2 of the input.\n\nAll gifts are integers. Each person gives the same integer amount of money to each friend to whom any money is given, and gives as much as possible that meets this constraint. Any money not given is kept by the giver.\n\nThere is a blank line between the output of two test cases.\n\n#### Sample Input\n```\n2\n2\ndave\nlaura\nlaura\n100 1\ndave\ndave\n100 1\nlaura\n\n5\ndave\nlaura\nowen\nvick\namr\ndave\n200 3\nlaura\nowen\nvick\nowen\n500 1\ndave\namr\n150 2\nvick\nowen\nlaura\n0 2\namr\nvick\nvick\n0 0\n```\n\n#### Sample Output\n```\ndave 0\nlaura 0\n\ndave 302\nlaura 66\nowen -359\nvick 141\namr -150\n```\n\n',1000,32768,'0',1,66,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('168','Friday the Thirteenth','#### Description\nIs Friday the 13th really an unusual event?\n\nThat is, does the 13th of the month land on a Friday less often than on any other day of the week? To answer this question, write a program that will compute the frequency that the 13th of each month lands on Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday over a given period of N years. The time period to test will be from January 1, 1900 to December 31, 1900+N-1 for a given number of years, N. N is non-negative and will not exceed 400.\n\nThere are few facts you need to know before you can solve this problem:\n\n+  January 1, 1900 was on a Monday.\n+  Thirty days has September, April, June, and November, all the rest have 31 except for February which has 28 except in leap years when it has 29.\n+  Every year evenly divisible by 4 is a leap year (1992 = 4+ 498 so 1992 will be a leap year, but the year 1990 is not a leap year)\n+  The rule above does not hold for century years. Century years divisible by 400 are leap years, all other are not. Thus, the century years 1700, 1800, 1900 and 2100 are not leap years, but 2000 is a leap year. \n\nDo not use any built-in date functions in your computer language.\n\nDon\'t just precompute the answers, either, please. \n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. For each test case, there is one line with the integer N.\n \n#### Output\nFor each test case, output seven space separated integers on one line. These integers represent the number of times the 13th falls on Saturday, Sunday, Monday, Tuesday, ..., Friday.\n\n#### Sample Input\n```\n2\n20\n20\n```\n\n#### Sample Output\n```\n36 33 34 33 35 35 34\n36 33 34 33 35 35 34\n```\n',1000,32768,'0',1,67,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('169','Broken Necklace','#### Description\nYou have a necklace of N red, white, or blue beads (3<=N<=350) some of which are red, others blue, and others white, arranged at random. Here are two examples for n=29:\n\n```\n                1 2                               1 2\n            r b b r                           b r r b\n          r         b                       b         b\n         r           r                     b           r\n        r             r                   w             r\n       b               r                 w               w\n      b                 b               r                 r\n      b                 b               b                 b\n      b                 b               r                 b\n       r               r                 b               r\n        b             r                   r             r\n         b           r                     r           r\n           r       r                         r       b\n             r b r                             r r w\n            Figure A                         Figure B\n                        r red bead\n                        b blue bead\n                        w white bead\n```\n\nThe beads considered first and second in the text that follows have been marked in the picture.\n\nThe configuration in Figure A may be represented as a string of b\'s and r\'s, where b represents a blue bead and r represents a red one, as follows: brbrrrbbbrrrrrbrrbbrbbbbrrrrb .\n\nSuppose you are to break the necklace at some point, lay it out straight, and then collect beads of the same color from one end until you reach a bead of a different color, and do the same for the other end (which might not be of the same color as the beads collected before this).\n\nDetermine the point where the necklace should be broken so that the most number of beads can be collected.\n\nFor example, for the necklace in Figure A, 8 beads can be collected, with the breaking point either between bead 9 and bead 10 or else between bead 24 and bead 25.\n\nIn some necklaces, white beads had been included as shown in Figure B above. When collecting beads, a white bead that is encountered may be treated as either red or blue and then painted with the desired color. The string that represents this configuration will include the three symbols r, b and w.\n\nWrite a program to determine the largest number of beads that can be collected from a supplied necklace.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. For each test case, there are two lines.\n+ Line 1: 	N, the number of beads\n+ Line 2: 	a string of N characters, each of which is r, b, or w\n\n#### Output\nFor each test case, output a single line containing the maximum of number of beads that can be collected from the supplied necklace.\n\n#### Sample Input\n```\n2\n29\nwwwbbrwrbrbrrbrbrwrwwrbwrwrrb\n29\nwwwbbrwrbrbrrbrbrwrwwrbwrwrrb\n```\n\n#### Sample Output\n```\n11\n11\n```\n',1000,32768,'0',1,68,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('17','Three Jugs','#### Description\nFrogs start exploring the kingdom when the first frog land. Recently, explore\nteams find a locked door. There is no key to open the door, but there is a small\naltar in front of the door, and the inscription on a nearby wall tells them that\nthey need to fill up a water jug with exactly K gallons of water, and put it on the\naltar to open the door. The inscription also informs them that they have only one\nchance at trying to open the door.\n\nExplore teams have three water jugs of sizes A,B and C only, and limited water\nsource. How can they open the door? The team leader first lists out the possible\nactions:  \n       \n1)Fill up one of the jugs with water; \n\n2)Empty one of the jugs ,pour from it back into the water source; \n\n3)Pour from one jug into other till either the former is empty or the latter jug\nis full.\n\n#### Task\nYou are required to write a program that finds out the minimum amount of water\nrequired to open the door.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. There\nis one line only for each test case, it contains four positive integers, the first three\nintegers specifying the sizes of the jugs that can be used, and the fourth integer\nrepresent the target that needs to be achieved. All integers are in the range\n[1, 100].\n\n#### Output\nFor each test case, print a line contains the minimum amount of water required.\nIf it is not achievable, output -1.\n\n#### Sample Input\n```\n2\n4 9 13 10\n4 9 13 5\n```\n\n#### Sample Output\n```\n10\n9\n```\n',10000,32768,'0',0,16,'',0,'4','2018-11-05 00:31:14','2018-11-05 00:48:07'),('170','Positive Number','#### Description\nIn this problem your job is very simple, just find out how many positive numbers are there in the input.\n\n#### Input\n+ The first line of the input contains an integer $$$T(1 \\leq T \\leq 100)$$$, which indicates how many testcases are there.\n+ There is one line for each testcase.\n+ Each testcase starts with an integer $$$N(0 \\leq N \\leq 100)$$$, followed by $$$N$$$ integer numbers.\n\n#### Output\n+ For each testcae of input procuce one line. It contains the answer.\n\n#### Sample Input\n```\n2\n3 1 2 3\n2 1 -1\n```\n\n#### Sample Output\n```\n3\n1\n```\n\n#### Hint\n+ Is a number as large as 9,999,999,999,999,999,999,999,999,999 fit in your program?\n',1000,32768,'0',1,69,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('171','Matrix Transpose','#### Description\nThe transpose of an $$$m \\times n$$$ matrix A is another matrix $$$A^T$$$ which \n$$$\\mathbf{A}^\\mathrm{T}_{ij} = \\mathbf{A}_{ji}$$$ for $$$ 1 \\le i \\le n,$$$ $$$1 \\le j \\le m.$$$\n\n+ $$$\\begin{bmatrix}\n1 & 2  \\\\\n3 & 4 \\end{bmatrix}^{\\mathrm{T}} \\!\\! \\;\\!\n= \\,\n\\begin{bmatrix}\n1 & 3  \\\\\n2 & 4 \\end{bmatrix}.\n$$$\n\n+  $$$\n\\begin{bmatrix}\n1 & 2 \\\\\n3 & 4 \\\\\n5 & 6 \\end{bmatrix}^{\\mathrm{T}}  \\!\\! \\;\\!\n= \\,\n\\begin{bmatrix}\n1 & 3 & 5\\\\\n2 & 4 & 6 \\end{bmatrix}. \\;\n$$$\n\n#### Input\n+ The first line of the input contains an integer $$$T(1 \\leq T \\leq 100)$$$, which indicates how many testcases are there.\n+ Each testcase starts with two integers $$$N,M(1 \\leq N,M \\leq 100)$$$, followed by $$$N$$$ lines. Every line contains $$$M$$$ integers. All numbers are fit into a 32-bit signed integer.\n\n#### Output\nFor each testcase output the transpose matrix.\n\n#### Sample Input\n```\n2\n2 2\n1 3\n2 4\n2 3\n1 3 5\n2 4 6\n```\n\n#### Sample Output\n```\n1 2\n3 4\n1 2\n3 4\n5 6\n```',1000,32768,'0',1,70,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('172','Express Deliver','#### Description\nWhat is the most important property of express package? The answer is \'\'\'SPEED\'\'\'!!\n\nEach express package has a deadline, along with a penalty that must be paid if the deadline is missed. It takes one hour to deliver one package, and one courier can only deliver one package each time.\n\nThere are $$$N$$$ packages for a courier. You are asked to find a schedule for N packages deliver that minimizes the total penalty incurred for missed deadlines, for a courier.\n\n#### Input\n+ The first line of the input contains an integer $$$T(1 \\leq T \\leq 100)$$$, which indicates how many testcases are there.\n+ Each testcase starts with an integer $$$N(1 \\leq N \\leq 10,000)$$$, which indicates how many packages are waiting. Followed by $$$N$$$ lines, each line contains 2 integers deadline $$$d(1 \\leq d \\leq 1000,000)$$$ and penalty $$$p(1 \\leq p \\leq 100)$$$.\n+ Note: the deadline is in hour.\n\n#### Output\n+ Output the answer for each testcase in one line.\n\n#### Sample Input\n```\n2\n3\n1 10\n2 10\n3 10\n3\n1 10\n2 20\n2 10\n```\n\n#### Sample Output\n```\n0\n10\n```\n\n#### Hint\n+ For the first sample, all package can be delivered in time.\n+ For the second sample.\n  - package 1, can be delivered in the first hour, just in time;\n  - after the first hour, both package 2 and package 3 are on the cut edge of deadline\n  - both of them should be delivered right after the package 1, but the courier can only deliver one package each time, that means one of them will miss the deadline. \n  - In this testcase, there are three solutions for the courier, which he can deliver 2 packages.\n  - solution 1: p1 and p2, cost 10\n  - solution 2: p1 and p3, cost 20\n  - solution 2: p2 and p3, cost 10',10000,32768,'0',1,71,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('173','Read Code','#### Description\nI do believe most of you have learned about recursion already. Now it is time for you to show me how well you learned. Below you can see a program written in pure C, which takes as input up to 10,000 integers, all of them are positive integers less than 100. What you need to do is, show me the output of this program.\n\n<source lang=cpp line=1>\n1. include <stdio.h>\n1. define MAXN 10000\n\nint list[MAXN];\nint n;\n\nint recursion(int i,int j){\n  int t;\n  \n  if (i>=n || j>=n) return 0;\n  \n  if (i<j){\n    t=list[j]+recursion(i,j+1);\n    return t;\n  }\n\n  if (i>j){\n    t=list[i]+recursion(i+1,j);\n    return t;\n  }\n\n  if (i==j){\n    t=list[i]+\n      recursion(i,j+1)+\n      recursion(i+1,j)+\n      recursion(i+1,j+1);\n    return t;\n  }\n}\n\nvoid init(){\n  int i;\n  scanf(\"%d\",&n);\n  for (i=0;i<n;i++){\n    scanf(\"%d\",&list[i]);\n  }\n}\n\nint main(){\n  int t;\n  scanf(\"%d\",&t);\n  while (t--){\n    init();\n    printf(\"%d\\n\",recursion(0,0));\n  }\n  return 0;\n}\n</source>\n\n#### Input\n+ In the main function, the variable \'\'\'t\'\'\' is greater than 0 and less than 100.\n+ The global variable \'\'\'n\'\'\' is less than 10,000.\n+ All other numbers are integers and in the range [0,99].\n+ And no illegal input.\n\n#### Output\n+ Print out the output of the program, which takes the input you given.\n\n#### Sample Input\n```\n2\n5 1 2 3 4 5\n10 1 2 3 1 2 3 1 2 3 0\n```\n\n#### Sample Output\n```\n95\n174\n```',1000,32768,'0',1,72,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('174','Addition','#### Description\nI think most of us like to see \'\'\'Accepted\'\'\' on the status list. If you are one of us, you will enjoy this problem.\n\nYou have given two integer sequence \'\'\'A\'\'\' and \'\'\'B\'\'\', both of them have same size. Your job is give me the answer of\n$$$\\frac{D}{N}=\\sum_{i=1}^{n}\\frac{A_i}{B_i}$$$. Just output the D and N. \nMake sure the greast common divisor of N and D is 1, and N>0. When D=0, N=1.\n\n#### Input\n+ The first line of the input contains an integer $$$T(1 \\leq T \\leq 100)$$$, which indicates how many testcases are there.\n+ Each testcase starts with an integers $$$n(1 \\leq n \\leq 100)$$$, followed by two lines. Each line contains $$$n$$$ integers. All numbers are fit into a 32-bit signed integer.\n\n#### Output\n+ Print the answer in one line for each testcase. The answer will fit into a 32-bit signed integer.\n\n#### Sample Input\n```\n2\n3\n1 2 3\n3 2 1\n2\n1 1\n1 1\n```\n\n#### Sample Output\n```\n13 3\n2 1\n```\n\n',1000,32768,'0',1,73,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('175','Climb','#### Description\nThere are n points on the hill (the lowest point is 1), larger numbered points at higher positions on the hill.\nYou can climb up only, from point to point. The path for climb may split or merge, some\npaths will actually cross over others without meeting but we don’t have to worry about that.\nOur problem is simply to determine the number of different sequences of points we can \nclimb up the hill.\n\nFor example, there are 4 points with direct path from 1 to points 2 and 4;\nfrom 2 to 3 and 4; and from 3 to 4. There are 3 ways to climb up the hill, (1,2,3,4), (1,2,4) or (1,4).\n\n#### Input\nInput begins with a single integer $$$n (1 \\leq n \\leq 9999)$$$, on a line by itself, \nindicating the number of points. \nThe next lines contain point pairs of the of the form x y, where $$$1 \\leq x < y \\leq n$$$.\nThe last line of input will be indicated by point pair 0 0.\n\n#### Output\nThe output is an integer, which is the number of different paths from point 1 to point n. \nThe answer will fit into a 32-bits integer.\n\n#### Sample Input\n```\n4\n1 2\n2 3\n3 4\n2 4\n1 4\n0 0\n```\n\n#### Sample Output\n```\n3\n```',5000,32768,'0',1,74,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('176','Take Numbers','#### Description\nThere is a game called \'\'\'Take Numbers\'\'\'. A list with numbers lined up in a row.\nThe player is given a number of turns; each turn, the player can take a few consecutive and adjacent \nnumbers.\n\nFor example, the numbers on the list is: 2 8 5 9 6 9 \n\nIf the player was given two turns, each able to take three adjacent numbers, the maximum score\nthe player could achieve would be 39, the sum of two throws: 2 + 8 + 5 = 15, and 9 + 6 + 9 = 24.\n\n#### Input\nThe first line of input is $$$t(1 \\leq t \\leq 10)$$$, indicating the\nnumber of test cases in the input. \nThe first line of each test case contains three integers n k w. First\nis the integer $$$n(1 \\leq n \\leq 30,000)$$$, indicating the number of numbers lined up.\nThe second integer, $$$k(1 \\leq k \\leq 500)$$$, giving the number of turns available to each player.\nThe third and final integer is $$$w(1 \\leq w \\leq n)$$$, how many numbers can be taken.\nThe next n lines of each test case each contain a single non-negative integer less than 10000.\n\n#### Output\nFor each test case, output the maximum achievable score by the player. The answer will fit into a 32-bits integer.\n\n#### Sample Input\n```\n1\n6 2 3\n2\n8\n5\n9\n6\n9\n```\n\n#### Sample Output\n```\n39\n```',5000,32768,'0',1,75,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('177','Items in Boxes','#### Description\nEach box is a rectangular prism with a given length, width, and height. Each item is also a rectangular\nprism with a given length, width, and height. When the item packed, its faces must be\nparallel to the faces of the box. An item will fit into a box as long as its dimensions are equal to or\nless than the dimensions of the box.\n\nYou are given a fixed set of box sizes. Your task is to find the box size with the smallest volume, which an item will fit.\n\n#### Input\nThe first line of input will contain a single integer $$$n(1 \\leq n \\leq 999)$$$, the number of different sizes\nof boxes available. The next n lines will contain three integers each, giving the length, width, and\nheight of a box. The following line will contain a single integer $$$m(1 \\leq m \\leq 999)$$$, the number of\nitems to be packaged. The next m lines will contain three integers each, giving the length, width,\nand height of an item. All dimensions will be  in the range from 1 to 2000.\n\n#### Output\nOutput is to consist of m lines, one for each item in the input. For each item, output a line\ncontaining a single integer, the volume of the smallest box into which the item will fit.\nThe same size of box may be reused for any number of items. If an item does not fit in any box,\nprint the line: Item does not fit.\n\n#### Sample Input\n```\n3\n1 2 3\n2 3 4\n3 4 5\n5\n1 1 1\n2 2 2\n4 3 2\n4 3 3\n4 4 4\n```\n\n#### Sample Output\n```\n6\n24\n24\n60\nItem does not fit.\n```',1000,32768,'0',1,76,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('178','Ranks Average','#### Description\nWe are playing a game, with the objective of accumulating as many points as possible. \nAt the end of each game, the player\'s score and rank are displayed.\nThe score, an integer between 0 and 1,000,000,000, is that achieved by the player in the game just ended. \nThe rank is displayed as \"r of n\". n is the total number of games ever played, and r is the position of \nthe score for the just-ended game within this set. More precisely, r is one greater than the number of\ngames whose score exceeds that of the game just ended.\n\nYour job is simply, find out the average of the ranks (rounded to two digits after the decimal).\n\n#### Input\nThe first line of the input contains a positive $$$t(1 \\leq t \\leq 10)$$$, integer indicating the number of test cases in the input.\nFor each test case, the first line contains a positive integer, $$$n(1 \\leq n \\leq 100,000)$$$, the total number of games played. \nn lines follow, given the scores of these games, in order. \n\n#### Output\nOutput the average of the ranks (rounded to two digits after the decimal) in one line, for each test case. \n\n#### Sample Input\n```\n2\n5\n10\n20\n15\n17\n5\n5\n10\n20\n15\n17\n5\n```\n\n#### Sample Output\n```\n2.20\n2.20\n```\n\n#### Hint\n+ (1+1+2+2+5)/5=2.20',5000,32768,'0',1,77,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('179','Free All','#### Description\nFor this problem, a word is a sequence of lower-case letters of length between 1 and 25.\nA word X is a prefix of word Y if X consists of the first n characters of Y, in order, for\nsome n. That is, the word “cat” has prefixes “c”, “ca”, and “cat”. Similarly, a word X is\na suffix of Y if X consists of the last n characters of Y, in order, for some n.\n\n\'\'\'Free All\'\'\'\n+ A collection of words is prefix-free if no word is a prefix of any other word. \n+ A collection of words is suffix-free if no word is a suffix of any other word.\n+ A collection of words is free-all if it is both prefix-free and suffix-free.\n\n\n#### Input\nThe input will be 3N+1 lines: the first line will be the number N, and the remaining 3N\nlines will be the N collections of 3 words each.\n\n#### Output\nYour output will be N lines, each line containing either Yes (if that collection of words is free-all) or\nNo (if that collection is not free-all).\n\n#### Sample Input\n```\n2\nabba\naab\nbab\na\nab\naa\n```\n\n#### Sample Output\n```\nYes\nNo\n```',1000,32768,'0',1,78,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('18','Eggs','#### Description\nA frog mother laid $$$N(1 \\leq N \\leq 1, 000)$$$ eggs, different egg may have different\nweight, and all eggs come out in order one by one.\nShe has $$$M(1 \\leq M \\leq 1, 000)$$$ bags, all of them have same capacity $$$C(1 \\leq C \\leq\n1, 000)$$$. She is going to move to a new place for those eggs, and eggs could not\nmix, that means eggs should keep the order of coming out (i.e. all eggs put in the\nsecond bag or after, should be come out later than those put in the first one).\nShe wants to carry her eggs as many as possible.Some eggs can be dropped, e,g. eggs A,B,C,D,E, the mother may carry A,C,E only.\n\n#### Task\nYou are given the weight of all eggs in order. Please tell the frog mother how\nmany eggs can be moved at most.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. First\nline of the test case has three integers, the number of eggs $$$N(1 \\leq N \\leq 1, 000)$$$ and\n, the number of bags $$$M(1 \\leq M \\leq 1, 000)$$$, and the capacity $$$C(1 \\leq C \\leq 1, 000)$$$.\nThere are N integers in the second line separated by spaces, specifying the weight\nof eggs in order.\n\n#### Output\nFor each test case, print a line contains the solution.\n\n#### Sample Input\n```\n2\n2 1 1\n1 1\n10 3 5\n5 5 5 5 5 5 5 5 5 5\n```\n\n#### Sample Output\n```\n1\n3\n```\n',10000,32768,'0',0,17,'',0,'4','2018-11-05 00:31:14','2018-11-05 00:48:07'),('180','Is Anagram','#### Description\nAn anagram is a word or a phrase formed by rearranging the letters(distinguish lower letters from upper letters) of another phrase.\nTwo phrases may be anagrams of each other even if each phrase\nhas a different number of. Write a program to determine if two\nphrases are anagrams of each other.\n\n#### Input\nThe first line of input contains an integer n, n test cases will followed. \nEach test case have two phrases in two lines. The length of phrase less than 100.\n\n#### Output\nFor each test case print out one of two statements: ”Is an anagram.” or ”Is not an anagram.\" in on line.\n\n#### Sample Input\n```\n2\nHi there\nthere Hi\nabcd\ndcbe\n```\n\n#### Sample Output\n```\nIs an anagram.\nIs not an anagram.\n```',1000,32768,'0',1,79,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('181','Divisibility by Eleven','#### Description\nWrite a program which accepts as input a positive integer and checks, using the algorithm described below, to see whether or not the integer is divisible by eleven.\n\n```\nAlgorithm:\n    As long as the number being tested has more than two digits, form a new number by:\n        * deleting the units digit\n        * subtracting the deleted digit from the shortened number \n    The remaining number is divisible by 11 if and only if the original number is divisible by 11. \n```\n#### Input\nThe first number in the input indicates the number of positive integers that follow. Each positive integer has a maximum of 50 digits. You may assume no leading zeroes exist in the positive integers.\n\n#### Output\nFor each positive integer in the input, the output consists of a series of numbers formed as a digit is deleted and subtracted, followed by a message indicating whether or not the original number is divisible by 11. Outputs for different positive integers are separated by blank lines. (Leading zeroes should not be printed.)\n\n#### Sample Input\n```\n2\n123453\n100\n```\n\n#### Sample Output\n```\n123453\n12342\n1232\n121\n11\nThe number 123453 is divisible by 11.\n\n100\n10\nThe number 100 is not divisible by 11.\n```',1000,32768,'0',1,80,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('182','Crack Letter','#### Description\nHere we use letters to represent digits. An example is\n```\n SEND\n+MORE\n-----\nMONEY\n```\nwhich represents\n```\n 9567\n+1085\n-----\n10652\n```\n\nYour task is to read in sets of three “words” and assign unique digits to the letters in such a way as to\nmake the sum of the first two words equal to the third word.\n\n#### Input\nThe input begins with a line containing a positive integer n which is the number of test data sets\ncontained. Each data set consists of three lines, each of which contains one word with the third\nword being the sum of the first two. The words will contain no more than 20 upper case letters.\n\n#### Output\nThe output is to consist of n sets of lines each containing the numeric representation of each word in\nthe corresponding test data set. There will be exactly one correct solution for each data set. Leave an\nempty line after the output for each data set.\n\n#### Sample Input\n```\n2\nSEND\nMORE\nMONEY\nSEND\nMORE\nMONEY\n```\n\n#### Sample Output\n```\n9567\n1085\n10652\n\n9567\n1085\n10652\n```',10000,32768,'0',1,81,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('183','Distinct Substrings','#### Description\nHow many distinct substrings(all letters should be continued in the original string) does a given string S have?\n\nFor example, if S = \"abc\", S has 7 distinct substrings: {\"\",\"a\",\"b\",\"c\",\"ab\",\"bc\",\"abc\"}. Note that\nthe empty string and S itself are considered substrings of S.\n\n#### Input\nThe first line of the input file contains N, the number of test cases. For each test case, a line\nfollows giving S, the length of S does not greater than 1000.\n\n#### Output\nYour output consists of one line per case, giving the number of distinct substrings of S.\n\n#### Sample Input\n```\n2\nabc\naaa\n```\n\n#### Sample Output\n```\n7\n4\n```',1000,65536,'0',1,82,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('184','Program Chain','#### Description\nEvery program submit to the judge system will got two integer number as result, which indicating cpu time and memory used.\n\nA sequence of program (e.g. P1,P2,P3,...,Pn), can be called as a program chain, if and only if, both cpu time and memory for every program are larger than the early program in the sequence.\n\nYou will have the testing result of n programs. Your job is to write a program which can find out the size of longest program chain and how many different program chains are there.\n\n#### Input\nThe first line contains an integer $$$N (1 \\leq N \\leq 300,000)$$$, the number of programs.\nEach of the following N lines contains the result of one programs, two integers between 0 and $$$10^9$$$.\nNo two programs will have the same result.\n\n#### Output\nOn the first line output the size of the longest program chain.\nOn the second line output the number of difference program chians with largest size, modulo 1,000,000,007.\n\n#### Sample Input\n```\n6\n50 30\n40 40\n30 50\n10 30\n20 20\n30 10\n```\n\n#### Sample Output\n```\n2\n7\n```',3000,131072,'0',1,83,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('185','3n + 1','\n#### Before\n```\n本次练习专题：记忆化搜索\n记忆化搜索就是在递归过程中记录所有计算出来的状态的值\n这样，第二次访问到该状态时就不需要递归计算该状态的值\n\n保证：如果不用记忆化搜索直接递归的话会超时...\nCD题会相对简单一点...\n```\n<strong>\n可能题目不太好搞,看看这个吧:\nhttp://en.wikipedia.org/wiki/Memoization\n实在没找到讲得简单易懂的中文资料,抱歉....\n</strong>\n\n#### Description\nProblems in Computer Science are often classified as belonging to a certain class of problems (e.g., NP, Unsolvable, Recursive). In this problem you will be analyzing a property of an algorithm whose classification is not known for all possible inputs.\n\nConsider the following algorithm:\n\n1. input n\n1. print n\n1. if n = 1 then STOP\n1. if n is odd then n=3*n+1\n1. else n=n/2\n1. GOTO 2\n\nGiven the input 22, the following sequence of numbers will be printed 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1\n\nIt is conjectured that the algorithm above will terminate (when a 1 is printed) for any integral input value. Despite the simplicity of the algorithm, it is unknown whether this conjecture is true. It has been verified, however, for all integers n such that 0 < n < 1,000,000 (and, in fact, for many more numbers than this.)\n\nGiven an input n, it is possible to determine the number of numbers printed (including the 1). For a given n this is called the cycle-length of n. In the example above, the cycle length of 22 is 16.\n\nFor any two numbers i and j you are to determine the maximum cycle length over all numbers between i and j.\n\n#### Input\nThe input will consist of a series of pairs of integers i and j, one pair of integers per line. All integers will be less than 1,000,000 and greater than 0.\n\nYou should process all pairs of integers and for each pair determine the maximum cycle length over all integers between and including i and j.\n\nYou can assume that no operation overflows a 32-bit integer.\n\n#### Output\nFor each pair of input integers i and j you should output i, j, and the maximum cycle length for integers between and including i and j. These three numbers should be separated by at least one space with all three numbers on one line and with one line of output for each line of input. The integers i and j must appear in the output in the same order in which they appeared in the input and should be followed by the maximum cycle length (on the same line).\n\n\n#### Sample Input\n```\n1 10\n100 200\n201 210\n900 1000\n```\n\n#### Sample Output\n```\n1 10 20\n100 200 125\n201 210 89\n900 1000 174\n```\n',3000,32768,'0',1,84,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('186','The Blocks Problem','#### Description\nMany areas of Computer Science use simple, abstract domains for both analytical and empirical studies. For example, an early AI study of planning and robotics (STRIPS) used a block world in which a robot arm performed tasks involving the manipulation of blocks.\n\nIn this problem you will model a simple block world under certain rules and constraints. Rather than determine how to achieve a specified state, you will \'\'program\'\' a robotic arm to respond to a limited set of commands. \n\nThe problem is to parse a series of commands that instruct a robot arm in how to manipulate blocks that lie on a flat table. Initially there are n blocks on the table (numbered from 0 to n-1) with block $$$b_i$$$ adjacent to block $$$b_{i+1}$$$ for all $$$0 \\leq i < n-1$$$ as shown in the diagram below:\n\n[[Image:B85-1.gif|center]] \n\nThe valid commands for the robot arm that manipulates blocks are:\n+ move a onto b\n  - where a and b are block numbers, puts block a onto block b after returning any blocks that are stacked on top of blocks a and b to their initial positions.\n+ move a over b\n  - where a and b are block numbers, puts block a onto the top of the stack containing block b, after returning any blocks that are stacked on top of block a to their initial positions.\n+ pile a onto b\n  - where a and b are block numbers, moves the pile of blocks consisting of block a, and any blocks that are stacked above block a, onto block b. All blocks on top of block b are moved to their initial positions prior to the pile taking place. The blocks stacked above block a retain their order when moved.\n+ pile a over b\n  - where a and b are block numbers, puts the pile of blocks consisting of block a, and any blocks that are stacked above block a, onto the top of the stack containing block b. The blocks stacked above block a retain their original order when moved.\n+ quit\n  - terminates manipulations in the block world. \n\nAny command in which a = b or in which a and b are in the same stack of blocks is an illegal command. All illegal commands should be ignored and should have no affect on the configuration of blocks. \n\n#### Input\nThe input begins with an integer n on a line by itself representing the number of blocks in the block world. You may assume that 0 < n < 25.\n\nThe number of blocks is followed by a sequence of block commands, one command per line. Your program should process all commands until the quit command is encountered.\n\nYou may assume that all commands will be of the form specified above. There will be no syntactically incorrect commands. \n\n#### Output\nThe output should consist of the final state of the blocks world. Each original block position numbered i ( $$$0 \\leq i < n$$$ where n is the number of blocks) should appear followed immediately by a colon. If there is at least a block on it, the colon must be followed by one space, followed by a list of blocks that appear stacked in that position with each block number separated from other block numbers by a space. Don\'t put any trailing spaces on a line.\n\nThere should be one line of output for each block position (i.e., n lines of output where n is the integer on the first line of input). \n\n#### Sample Input\n```\n10\nmove 9 onto 1\nmove 8 over 1\nmove 7 over 1\nmove 6 over 1\npile 8 over 6\npile 8 over 5\nmove 2 over 1\nmove 4 over 9\nquit\n```\n\n#### Sample Output\n```\n 0: 0\n 1: 1 9 2 4\n 2:\n 3: 3\n 4:\n 5: 5 8 7 6\n 6:\n 7:\n 8:\n 9:\n```\n',3000,32768,'0',1,85,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('187','Ecological Bin Packing','#### Description\nBin packing, or the placement of objects of certain weights into different bins subject to certain constraints, is an historically interesting problem. Some bin packing problems are NP-complete but are amenable to dynamic programming solutions or to approximately optimal heuristic solutions.\n\nIn this problem you will be solving a bin packing problem that deals with recycling glass.\n\nRecycling glass requires that the glass be separated by color into one of three categories: brown glass, green glass, and clear glass. In this problem you will be given three recycling bins, each containing a specified number of brown, green and clear bottles. In order to be recycled, the bottles will need to be moved so that each bin contains bottles of only one color.\n\nThe problem is to minimize the number of bottles that are moved. You may assume that the only problem is to minimize the number of movements between boxes.\n\nFor the purposes of this problem, each bin has infinite capacity and the only constraint is moving the bottles so that each bin contains bottles of a single color. The total number of bottles will never exceed 2^31. \n\n#### Input\nThe input consists of a series of lines with each line containing 9 integers. The first three integers on a line represent the number of brown, green, and clear bottles (respectively) in bin number 1, the second three represent the number of brown, green and clear bottles (respectively) in bin number 2, and the last three integers represent the number of brown, green, and clear bottles (respectively) in bin number 3. For example, the line 10 15 20 30 12 8 15 8 31\n\nindicates that there are 20 clear bottles in bin 1, 12 green bottles in bin 2, and 15 brown bottles in bin 3.\n\nIntegers on a line will be separated by one or more spaces. Your program should process all lines in the input file. \n\n#### Output\nFor each line of input there will be one line of output indicating what color bottles go in what bin to minimize the number of bottle movements. You should also print the minimum number of bottle movements.\n\nThe output should consist of a string of the three upper case characters \'G\', \'B\', \'C\' (representing the colors green, brown, and clear) representing the color associated with each bin.\n\nThe first character of the string represents the color associated with the first bin, the second character of the string represents the color associated with the second bin, and the third character represents the color associated with the third bin.\n\nThe integer indicating the minimum number of bottle movements should follow the string.\n\nIf more than one order of brown, green, and clear bins yields the minimum number of movements then the alphabetically first string representing a minimal configuration should be printed. \n\n#### Sample Input\n```\n1 2 3 4 5 6 7 8 9\n5 10 5 20 10 5 10 20 10\n```\n\n#### Sample Output\n```\nBCG 30\nCBG 50\n```\n',3000,32768,'0',1,86,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('188','Stacking Boxes','#### Description\nSome concepts in Mathematics and Computer Science are simple in one or two dimensions but become more complex when extended to arbitrary dimensions. Consider solving differential equations in several dimensions and analyzing the topology of an n-dimensional hypercube. The former is much more complicated than its one dimensional relative while the latter bears a remarkable resemblance to its \'\'lower-class\'\' cousin.\n\n\nConsider an n-dimensional \'\'box\'\' given by its dimensions. In two dimensions the box (2,3) might represent a box with length 2 units and width 3 units. In three dimensions the box (4,8,9) can represent a box $$$4 \\times 8 \\times 9$$$ (length, width, and height). In 6 dimensions it is, perhaps, unclear what the box (4,5,6,7,8,9) represents; but we can analyze properties of the box such as the sum of its dimensions.\n\n\nIn this problem you will analyze a property of a group of n-dimensional boxes. You are to determine the longest nesting string of boxes, that is a sequence of boxes $$$b_1,b_2,\\dots,b_k$$$ such that each box $$$b_i$$$ nests in box $$$b_{i+1}$$$( $$$1 \\le i \\le k$$$ ).\n\n\nA box D = ( $$$d_1,d_2,\\dots,d_n$$$ ) nests in a box E = ( $$$e_1,e_2,\\dots,e_n$$$ ) if there is some rearrangement of the $$$d_i$$$ such that when rearranged each dimension is less than the corresponding dimension in box E. This loosely corresponds to turning box D to see if it will fit in box E. However, since any rearrangement suffices, box D can be contorted, not just turned (see examples below).\n\n\nFor example, the box D = (2,6) nests in the box E = (7,3) since D can be rearranged as (6,2) so that each dimension is less than the corresponding dimension in E. The box D = (9,5,7,3) does NOT nest in the box E = (2,10,6,8) since no rearrangement of D results in a box that satisfies the nesting property, but F = (9,5,7,1) does nest in box E since F can be rearranged as (1,9,5,7) which nests in E.\n\n\nFormally, we define nesting as follows: box D = ( $$$d_1,d_2,\\dots,d_n$$$ ) nests in box E = ( $$$e_1,e_2,\\dots,e_n$$$ ) if there is a permutation $$$\\pi$$$ of $$$1 \\dots n$$$ such that ( $$$d_{\\pi(1)},d_{\\pi(2)},\\dots,d_{\\pi(n)}$$$ ) \'\'fits\'\' in ( $$$e_1,e_2,\\dots,e_n$$$ ) i.e., if $$$d_{\\pi(i)} < e_{\\pi(i)}$$$ for all $$$1 \\le i \\le n$$$ .\n\n#### Input\nThe input consists of a series of box sequences. Each box sequence begins with a line consisting of the the number of boxes k in the sequence followed by the dimensionality of the boxes, n (on the same line.)\n\nThis line is followed by k lines, one line per box with the n measurements of each box on one line separated by one or more spaces. The $$$i^{th}$$$ line in the sequence ( $$$1 \\le i \\le k$$$ ) gives the measurements for the $$$i^{th}$$$ box.\n\nThere may be several box sequences in the input file. Your program should process all of them and determine, for each sequence, which of the k boxes determine the longest nesting string and the length of that nesting string (the number of boxes in the string).\n\nIn this problem the maximum dimensionality is 10 and the minimum dimensionality is 1. The maximum number of boxes in a sequence is 30. \n\n\n#### Output\nFor each box sequence in the input file, output the length of the longest nesting string on one line followed on the next line by a list of the boxes that comprise this string in order. The \'\'smallest\'\' or \'\'innermost\'\' box of the nesting string should be listed first, the next box (if there is one) should be listed second, etc.\n\nThe boxes should be numbered according to the order in which they appeared in the input file (first box is box 1, etc.).\n\nIf there is more than one longest nesting string then any one of them can be output. \n\n\n#### Sample Input\n```\n5 2\n3 7\n8 10\n5 2\n9 11\n21 18\n8 6\n5 2 20 1 30 10\n23 15 7 9 11 3\n40 50 34 24 14 4\n9 10 11 12 13 14\n31 4 18 8 27 17\n44 32 13 19 41 19\n1 2 3 4 5 6\n80 37 47 18 21 9\n```\n\n#### Sample Output\n```\n5\n3 1 2 4 5\n4\n7 2 5 6\n```\n',3000,32768,'0',1,87,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('189','Signal tower','#### Description\nThere are \'\'N\'\' signal towers build on one line. Each tower has a laser light, the people on different towers can use the laser light to connect with each other. However, there is a problem, different towers may have different height and all towers are on one line. That means some towers may not be able to use the laser light to make a connection. If and only if all towers between tower_A and tower_B with height less than or equal to both. \n\nYour job is going to find out how many pairs of tower can connect to each other via the laser light.\n\n#### Input\nThe first line contains an integer $$$T (1 \\leq T \\leq 100)$$$ indicate how many test cases will be followed.\n\nFor each test case:\n+ First line contains an integer $$$N (1 \\leq N \\leq 500,000)$$$, the number of towers.\n+ Second line contains $$$N$$$ integers, the height of towers in order. All height less than<font size=4> $$$2^{31}$$$</font>.\n\n#### Output\nFor each test case, output one line which contains the answer.\n\n#### Sample Input\n```\n3\n3\n1 2 3\n5\n2 2 1 5 4\n10\n1 1 5 2 5 3 4 3 5 5\n```\n\n#### Sample Output\n```\n2\n6\n17\n```\n',10000,32768,'0',1,88,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('19','Climb Well','#### Description\nOne day frog Frank fall into a deep well, the well is very deep. Everyday Frank\ntry to climb up, at day time, he can get himself $$$A\\,$$$ feet up, but when he fall sleep\nat night , he slipped $$$B\\,$$$ feet down. The well is L feet deep.\n\n#### Task\nNow, it is your turn. Frank is asking you to find out, how many days needed for\nhim to get out from the well. A day has two part, day time and night time. Frank\nmust get higher than the well, or it is not count as get out.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. There is\none line for each test case, contains three integer numbers $$$A,B,L(0 \\leq A,B,L \\leq 2^{31}-1)$$$\nas describe above.\n\n#### Output\nFor each test case, print a line contains the solution, how many days need for\nFrank to get out from the well.If there is no way out, please output −1.\n\n#### Sample Input\n```\n2\n2 1 2\n1 1 2\n```\n\n#### Sample Output\n```\n2\n-1\n```\n',10000,32768,'0',0,18,'',0,'7','2018-11-05 00:31:14','2018-11-05 00:48:07'),('190','Trick or Treat','#### Description\nHalloween is coming soon. Jack and his two brothers got a challenge from a neighborhood. How many different ways to divide $$$N(1 \\leq N \\leq 32,768)$$$ candies for Jack and his brothers, of course all of them should get at less one candy. The one who can tell the correct answer will get most candies.\n\nJack is asking your help. \n\n#### Input\nThe first line contains an integer $$$T (1 \\leq T \\leq 100)$$$ indicate how many test cases will be followed.\n\nFor each test case, contains an integer $$$N (1 \\leq N \\leq 32,768)$$$ in one line.\n\n#### Output\nFor each test case, output one line which contains the answer.\n\n#### Sample Input\n```\n2\n3\n4\n```\n\n#### Sample Output\n```\n1\n3\n```\n\n#### Hint\n+ The second test case, N=4.\n+ There are 3 ways.\n  - 1,1,2\n  - 1,2,1\n  - 2,1,1\n',10000,32768,'0',1,89,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('191','Guess Number','#### Description\nI am going to write down N consecutive positive integers on a piece of paper, no duplicates. I will erase one of the integers and show you the reset of integers.\n\nYou are asked to find out all possible numbers I might have erased. The numbers should be sorted in ascending order. BTW: I may make some mistakes, that means everything may happened.\n\n#### Input\nThe first line contains an integer $$$T (1 \\leq T \\leq 100)$$$ indicate how many test cases will be followed.\n\nFor each test case:\n+ First line contains an integer $$$N (1 \\leq N \\leq 100)$$$, how many integers remained.\n+ Second line contains $$$N$$$ positive integers. All integers less than $$$2^{31}$$$.\n\n#### Output\nFor each test case, output one line which contains the answer. If it is impossible, output -1 in one line.\n\n#### Sample Input\n```\n4\n5\n1 2 3 4 6\n5\n3 4 6 7 2\n3\n4 5 6\n3\n1 3 5\n```\n\n#### Sample Output\n```\n5\n5\n3 7\n-1\n```\n\n#### Hint\n+ 1,2,3,4,5 are consecutive positive integers.\n+ 2,4,5,3,6 are consecutive positive integers.\n+ 1,2,3,5,6 are not consecutive positive integers.\n',10000,32768,'0',1,90,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('192','Representable','#### Description\nGiven j and k, a quantity q is representable if $$$q = aj + bk$$$ for some nonnegative integers a and b.\n\n#### Input\nThe first line contains an integer $$$T (1 \\leq T \\leq 1,000)$$$ indicate how many test cases will be followed.\n\nFor each test case, contains two integers j and k ($$$2 \\leq j,k \\leq 200$$$).\n\n#### Output\nFor each test case, output one line which contains an integer representing the maximum nonrepresentable amount. \nIf no maximum non-representable amount exists, output -1.\n\n#### Sample Input\n```\n2\n21 15\n2 5\n```\n\n#### Sample Output\n```\n-1\n3\n```\n',10000,32768,'0',1,91,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('193','Sum the Dice','#### Description\nSuppose a bunch of dice (values 1 through 6) are rolled and arranged in an array. See if you can find\nthree contiguous dice whose sum is a given number. Dice are contiguous (touching) if one of their sides\nis touching. So, three contiguous dice would be three in a row, three in a column or three in an L-shape.\n\nFor example, the following array of dice has 8 appear as the sum of 3 dice in 8 ways. (Some overlap.)\n+ 2 3 1 4\n+ 6 6 6 5\n+ 1 1 2 3\n+ 2 2 5 5\n+ 1 1 1 1\n\n#### Input\nEach input set will start with a row of three integers r s n (with $$$2 \\leq r, s \\leq 10$$$). A value of n = 0\nindicates end of input. The next line will contain rs integers between 1 and 6, giving the r by s array\nof dice with the first row of s dice, left-to-right, then the second row, through to the rth row.\n\n#### Output\nEach input set should produce a line of the form.\n```\nArray a has the sum n appear k times.\n```\nwhere a is the input set number (starting at 1), and k is the number of times you find n being the sum\nof 3 contiguous dice.\n\n#### Sample Input\n```\n5 4 8\n2 3 1 4 6 6 6 5 1 1 2 3 2 2 5 5 1 1 1 1\n2 2 0\n```\n\n#### Sample Output\n```\nArray 1 has the sum 8 appear 8 times.\n```\n',10000,32768,'0',1,92,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('194','Sweet Tarts','#### Description\nSweet Tarts are a hard candy similar to Life Savers. They come in a roll with n Sweet Tarts per roll\nand there are four flavors (A, B, C, and D). The package is clear so you can see the order of the flavors\nin the roll. You can only get a Sweet Tart from either end of the roll; no breaking open the package\nin the middle. Furthermore, you immediately eat a Sweet Tart once you remove it from the package.\nNow you have a definite preference for the flavors and like to save your favorites until the end. Being\nthe computer science type, you’ve come up with a score for the order in which you eat the candies. You\ngive each of the flavors a number from 1 through 4, depending on your preference (4 is most favored, 1\nis least). The score for eating a Sweet Tart is the product of its preference number with the position\nyou ate it. For example if you ate a flavor B as the 5th Sweet Tart, and B had preference number 3,\nthen it’s score would be 15.\n\nAfter you’ve eaten the entire roll, the score is the sum of all the individual Sweet Tarts eaten. Of course,\nyou’d like to maximize the score. Given a particular roll of Sweet Tarts and the preference order of the\nfour flavors, you’ll compute the maximum score of the roll. (Note there may be more than one way of\nrealizing the score.)\n\n#### Input\nThere will be multiple input sets. Each input set will have 3 lines. The first line will contain n ($$$0 \\leq n \\leq 100$$$),\nthe number of Sweet Tarts in the roll. A value of n = 0 indicates there are no more input sets for this\nproblem. The second line will contain a permutation of {A,B,C,D} indicating preference for the flavors\n(most favored to least). The third line will contain the n flavors as they appear in the roll, from left to\nright. Note that it may be that not all flavors will be used.\n\n#### Output\nEach input set should produce one line of output of the form:\n```\nCase i has a maximum score of s.\n```\nwhere i is the number of the input set (starting at 1) and s is the maximum score you determine.\n\n#### Sample Input\n```\n4\nBCDA\nABCD\n5\nBACD\nAAAAA\n0\n```\n\n#### Sample Output\n```\nCase 1 has a maximum score of 30.\nCase 2 has a maximum score of 45.\n```\n',10000,32768,'0',1,93,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('195','The Taxman','#### Description\nTaxman is a one-person game played as follows: The game starts with the set of integers S = {1, 2, . . . , n}\nand the player picks any number in S with a proper divisor in S. The player gets the number picked\nand the taxman gets all the proper divisors in S. The number and its proper divisors are then removed\nfrom S. Play continues until the only numbers remaining have no proper divisors in S. The taxman\nthen gets all the numbers left. You win the game if the sum of your numbers is greater than the sum\nof the taxman’s numbers. The score of the game is the taxman’s sum subtracted from your sum.\nYou are going to test some strategies in playing taxman. We’ll call any number in S with proper divisors\nin S a live number.\n\n+ Strategy A: Pick the largest live number with divisors.\n+ Strategy B: Pick the live number whose sum of divisors left is the smallest. (If a tie, pick largest such live number.)\n+ Strategy C: Pick the live number with the fewest divisors. (If a tie, pick largest such live number.)\n\n#### Input\n\nThere will be multiple input sets for this problem. Input for each input set will be a single integer n\n($$$2 \\leq n \\leq 100$$$). n = 0 indicates end of input.\n\n#### Output\nEach input set will produce one output line of the form:\n```\nInput k: A B C\n```\nwhere k is the number of the input set (starting at 1) and A, B and C are the scores of the game using\nstrategies A, B, and C, respectively.\n\n#### Sample Input\n```\n10\n100\n5\n0\n```\n\n#### Sample Output\n```\nInput 1: -1 5 25\nInput 2: -932 620 890\nInput 3: 3 3 3\n```\n\n',10000,32768,'0',1,94,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('196','Squares','#### Description\nConsider the dots in the diagram below, which are all on lattice points (that is, points with integer\ncoordinates). The diagram also shows all the squares that can be created with vertices on four dots\nfrom those given.\n\n[[Image:B95.png|center]]\n\nThe problem here is to determine how many squares can be made with only the given dots as vertices.\n\n#### Input\nEach input set will consist of two lines. The first contains the integer n ($$$0 \\leq n \\leq 40$$$). A value of n = 0\nindicates end of input. The next line will contain n pairs of integers (both numbers between 0 and 40, inclusive),\neach representing the coordinates of a distinct dot.\n\n#### Output\nEach input set should produce a line of the form\n```\nCase k has s squares.\n```\nwhere k is the input set number (starting at 1) and s is the number of squares possible, as described\nabove.\n\n#### Sample Input\n```\n9\n1 0 3 0 1 2 3 2 3 4 3 5 5 2 6 3 4 0\n0\n```\n\n#### Sample Output\n```\nCase 1 has 3 squares.\n```\n\n',10000,32768,'0',1,95,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('197','Packing Boxes','#### Description\nBob, of Bob’s Big Box Barn, has many sizes of boxes. All are the usual rectangular boxes but various\ndimensions. Bob ships samples of these boxes for display purposes, and likes to ship as many as he can\nbut only wishes to ship them all in one box, to keep expenses down.\n\nWhen packing boxes, he starts with the smallest box and puts it entirely inside a larger one, closing\nthe flaps of the larger one. Then he takes that box and puts it inside another, closing the flaps, and\nso on. The last box is then closed and sealed and shipped. Bob wants to know the largest number of\ndifferent sized boxes he can pack this way. Note that Bob can set the inner box on any side inside the\nlarger box. So box A might not fit inside box B in one orientation, but would in another. \n\nFor example, a 3 by 4 by 5 box would fit inside a 5 by 6 by 4 box, but not in all orientations. To simplify things,\nwe’ll ignore thickness of the box sides. So, a 3 by 4 by 5 box will fit inside of another 3 by 4 by 5 box\n(although two boxes of the same dimension will not occur for us).\n\nFor example, if Bob has boxes of size 3 by 4 by 5, 5 by 6 by 3, 1 by 4 by 10, 4 by 4 by 4 and 6 by 6 by\n5, he could pack 3 in one box. This could be done by putting 3 by 4 by 5 in a 5 by 6 by 3 in a 6 by 6\nby 5. (There could be more than one way of doing this.)\n\n#### Input\nThere will be multiple input sets for this problem. Input for each set will start with one line containing\na single integer n ($$$0 \\leq n \\leq 50$$$). n = 0 indicates end of input. There will then follow n lines, each with three\npositive integers (all no greater than 100), representing the dimensions of a box. You may assume no\ntwo boxes will have the same dimensions.\n\n#### Output\nEach input set will produce one output line of the form:\n```\nSet k can pack b boxes.\n```\nwhere k is the number of the input set (starting at 1) and you compute b.\n\n#### Sample Input\n```\n5\n3 4 5\n5 6 3\n1 4 10\n4 4 4\n6 6 5\n3\n3 1 7\n5 1 4\n2 5 3\n0\n```\n\n#### Sample Output\n```\nSet 1 can pack 3 boxes.\nSet 2 can pack 1 boxes.\n```\n\n',10000,32768,'0',1,96,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('198','Square Digits','#### Description\nWhat’s the pattern in the following series: 4, 16, 37, 58, 89, 145, 42, 20, 4, 16, · · · ? (Don’t spend contest\ntime thinking about the answer...we’re about to tell you!). Each term is the sum of the squares of the\ndigits of the previous term (16 = 42, 37 = 12 + 62, 58 = 32 + 72, etc.). As you can see, the series above\nrepeats itself, with a cycle of length 8. It will always happen that this series will eventually repeat a\nnumber. The number of numbers in this repetitive loop is the cycle length. For this problem, you will\nbe given a starting integer and must determine the cycle length of the resulting series.\n\n#### Input\nInput will consist of multiple test cases. Each case will consist of a single line containing the starting\ninteger n for a series (a value of 0 will indicate end of input). The maximum value of n will be 10000000.\n\n#### Output\nEach input set will produce one output line of the form:\n```\nSet k has a cycle length of c.\n```\nwhere k is the number of the input set (starting at 1) and you compute c.\n\n#### Sample Input\n```\n4\n1\n0\n```\n\n#### Sample Output\n```\nSet 1 has a cycle length of 8.\nSet 2 has a cycle length of 1.\n```\n\n',10000,32768,'0',1,97,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('199','A Couple of Boxes','#### Description\nWelcome to the Shenzhen University Collegiate Programming Contest\' 2009. Please enjoy the game.\n\nWe need a lead role for the story of problems every year. No exception in this year. Let\'s introduce our lead role this year, BOXES!!\n\nThere are two rectangular boxes in this story, let\'s name it as BoxA and BoxB. Like us, we have height, weight and age etc. For boxes, they have some numbers too, height, length and width etc. and those numbers are very important for boxes. In the world of boxes, two rectangular boxes can be a couple if and only if one box can fit inside another box. Let\'s have a look on those numbers of BoxA and BoxB.\n\nBoxA is a $$$3\\times4\\times5$$$ box, BoxB is a $$$5\\times6\\times4$$$ box, then we can know BoxA can fit inside BoxB but not in all orientations. BoxA and BoxB do not need to fit in for all orientations. They can be a couple if there is an orientation to make them fit. To simplify things, we will ignore thickness of the box sides.\n\n#### Task\nYou will have those numbers for BoxA($$$A_1,A_2,A_3$$$) and BoxB($$$B_1,B_2,B_3$$$), all of them are integers and less than $$$2^{31}$$$. Please tell if they have any chance to be a couple.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 10,000)$$$, the number of test cases.\nFor each test case, there are two lines.\nThe first line contains the numbers of BoxA, $$$A_1, A_2, A_3$$$.\nThe second line contains the numbers of BoxB, $$$B_1, B_2, B_3$$$.\n\n#### Output\nFor each test case, if BoxA and BoxB have chance to be a couple, please output Yes , or output No in one line.\n\n#### Sample Input\n```\n3\n3 4 5\n5 6 4\n5 6 4\n3 4 5\n5 6 7\n7 4 7\n```\n\n#### Sample Output\n```\nYes\nYes\nNo\n```\n',10000,32768,'0',1,98,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('2','Bean Counting','#### Description\nThe CSC has decided to hold a contest to guess the number of beans in a given jar. To make it a wee bit more interesting, they decided to have the contestants guess the number of a particular kind of bean, the jar having many types of beans in it. Each participant would pay $2.00 per guess.\n\nIf the guess is one off (either one greater or less) than the actual count, they get a single share of the total pot. If the guess is right on, they get two shares of the total pot.\n\nYour task is to tally these guesses and print out how much each person wins.\n\n#### Input\nThe first line will containing hundreds of letters, from a-z, each representing one bean of that type of bean. There will only be 26 different type of beans. Each following line will be the guesses from a contestant. A contestant can guess as many times as they like. The line will begin with a single letter, in the range A-Z, leaving only 26 possible contestants. The first letter will be followed by a single space, and then up to five pairs of letter/number combinations, the letter representing the type of bean for this guess, and the number of that bean the contestant expects to find. The letter and the value of a guess will be separated by a \':\' and each guess on lines with more than one guess will be separated by a \',\'.\n\n#### Output\n+ The amount a contestant will receive is based on shares of a pot. The pot will consist of the total of all the guesses, at $2.00 pre guess. The fraction each person gets will be based on:\n  - TotNum: total number of guesses by all contestants\n  - TotShares: total number of shares from all contestants\n  - OffOne: number of off-by-one guesses by the contestant\n  - RightOn: number of right-on guesses by that contestant\n  - $$$\\frac{TotNum*$2.00}{TotShares} * (OffOne+(RightOn*2))$$$\n+ Print out all the winners, in alphabetical order, and their winnings, separated by a single space. Each winner should be on a line by itself.\n\n#### Sample Input\n```\naadddddddddddddddddddddddffffffffffffffffwwwwwwwwwwwwccccalalala\nA a:6,c:6\nB w:12\nC d:25\nD d:22,c:4,l:3,f:15\n```\n\n#### Sample Output\n```\nA 3.20\nB 3.20\nD 9.60\n```',1000,10240,'0',0,1,'',0,'3','2018-11-05 00:31:14','2018-11-05 00:48:07'),('20','Building','#### Description\nIn the kingdom of frogs, there are M buildings with different height. The king\nwants the difference between the highest building and the shortest building as\nsmall as possible. You can pull down at most N floors (may in different buildings).\nWhen all floors in a building were pulled down, the building does not count\nanymore.\n\n#### Task\nYou are given a list of M integer numbers denotes the height of M buildings.\nPlease find the smallest difference with pull down at most N floors.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 300)$$$, the number of test cases. There\nare two lines for each test case. The first line contains two integer numbers\n$$$N(1 \\leq N \\leq 100)$$$ and $$$M(1 \\leq M \\leq 100)$$$. The next line contain $$$M$$$ positive\nintegers, separated by a space, all of them less than 100.\n\n#### Output\nFor each test case, print a line contains the solution.\n\n#### Sample Input\n```\n3\n8 2\n20 10\n3 3\n2 1 3\n1 3\n2 2 1\n```\n#### Sample Output\n```\n2\n0\n0\n```',10000,32768,'0',0,19,'',0,'5','2018-11-05 00:31:14','2018-11-05 00:48:07'),('200','Birthday of Box','#### Description\nEvery box has a birthday. It will be printed on the box in this way, mm-dd-yyyy, mm for the month, dd for the day and yyyy for the year. It will be a right date most of the time. However, sometime they make mistakes printing a wrong date on the box.\n\nThere are few facts you need to know:\n\n+ Thirty days has September, April, June, and November, all the rest have 31 except for February which has 28 except in leap years when it has 29.\n+ Every year evenly divisible by 4 is a leap year ($$$1992 = 4\\times498$$$ so 1992 will be a leap year, but the year 1990 is not a leap year)\n+ The rule above does not hold for century years. Century years divisible by 400 are leap years, all other are not. Thus, the century years 1700, 1800, 1900 and 2100 are not leap years, but 2000 is a leap year.\n\n#### Task\nYou will have the date printed on a box, mm-dd-yyyy. All m,d,y are integer from 0 to 9. Please tell if it is a correct date.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 10,000)$$$, the number of test cases. There is one line for each test case, contains mm-dd-yyyy.\n\n#### Output\nFor each test case, if it is correct please output \'Yes\' or output \'No\' in one line.\n\n#### Sample Input\n```\n3\n04-11-2009\n11-04-2009\n22-12-1984\n```\n\n#### Sample Output\n```\nYes\nYes\nNo\n```\n',10000,32768,'0',1,99,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('201','Color Balls in Box','#### Description\n\nThere are three different kinds of ball in the box, red ball, yellow ball, and blue ball. There are $$$N_1$$$ red balls, $$$N_2$$$ yellow balls and $$$N_3$$$ blue balls. I will take $$$K$$$ balls out from the box randomly.\n\nLet\'s define $$$P(i,j)$$$ as the probability for there are $$$i$$$ red balls and $$$j$$$ blue balls in those $$$K$$$ balls which I take out from the box.\n\n#### Task\nYou will have the number $$$N_1,N_2,N_3$$$ and $$$K$$$. Please output a table which the $$$i_{th}$$$ row, $$$j_{th}$$$ column contains the probability $$$P(i,j)$$$, $$$0 \\leq i,j \\leq K$$$.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. There is one line for each test case, contains four integers $$$N_1,N_2,N_3$$$ and $$$K$$$ $$$(0 \\leq N_1,N_2,N_3 \\leq 10$$$ , $$$0 \\leq K \\leq N_1+N_3)$$$.\n\n#### Output\nFor each test case, please output the table. The difference between your answer of $$$P(i,j)$$$ and the correct $$$P(i,j)$$$ less than $$$10^{-4}$$$ will be considered as correct answer.\n\n#### Sample Input\n```\n2\n1 1 1 2\n1 1 1 2\n```\n\n#### Sample Output\n```\n0       0.33333 0\n0.33333 0.33333 0\n0       0       0\n0       0.33333 0\n0.33333 0.33333 0\n0       0       0\n```\n\n#### Note\nThe spaces between two numbers in the sample output for clarification only. You do not need that many blank spaces, one is enough.\n',10000,32768,'0',2,0,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('202','Determined the Max Scores','#### Description\nThere are a lot of boxes and $$$N$$$ balls, you can assume the number of boxes is larger than $$$N$$$. You can put those balls into any box you wish one by one, at the end, when you finished. You will get a score by multiply all the number of balls in those boxes which has at less one balls put inside.\n\nFor example, if the $$$N$$$ is 3, then you can put those balls in three ways, ($$$1\\times1\\times1$$$) or ($$$1\\times2$$$) and (3). Obviously, the max score is 3.\n\n#### Task\nYou will give the number $$$N (1 \\leq N \\leq 100,000)$$$, please find out the max score you can get. If the answer (A) larger than $$$2^{30}-1$$$, change it to (A modulo $$$20090411$$$).\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. There is one line for each test case, contains an integer $$$N$$$.\n\n#### Output\nFor each test case, output the answer on one line.\n\n#### Sample Input\n```\n2\n2\n3\n```\n\n#### Sample Output\n```\n2\n3\n```\n\n',10000,32768,'0',2,1,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('203','Eliminating Rectangular Box','#### Description\nLet me show you a game about rectangular boxes. There are $$$N \\times M$$$ boxes aligned on a big plane, to form a $$$N \\times M$$$ matrix. Each box has one color, there are at most 9 different color for all boxes. Then each box will have a location as (row number,column number) in the $$$N \\times M$$$ matrix.\n\n\nBoxA on the location $$$(a_i,a_j)$$$ and BoxB on the location $$$(b_i,b_j)$$$ are called as adjacent, if and only if $$$|a_i-b_i|+|a_j-b_j|=1$$$ and $$$(a_i,a_j) \\ne (b_i,b_j)$$$.\n\n\nBoxA on the location $$$(a_i,a_j)$$$ and BoxB on the location $$$(b_i,b_j)$$$ are called as connected, if and only if there is a sequence of boxes start at BoxA and end up with BoxB, at the same time all boxes in the sequence next to each other are adjacent and with same color. For example, a sequence of boxes like, (BoxA,Box1,Box2,BoxB), if BoxA and Box1 are adjacent, Box1 and Box2 are adjacent, Box2 and  BoxB are adjacent, then we said BoxA and BoxB are connected. \n\n\nWhen you are selecting a box (S) in the matrix, and all boxes connected to box (S) will be selected at once, including the box (S), all of the selected boxes will be eliminated at the same time. That means an empty space is created in the matrix. When there is an empty space in the matrix, the next two processes will happen step by step:\n\n1)	All boxes above the empty space will be drooped down in the same column.\n\n2)	After step 1, all boxes on the right side of empty space will be moved to the left in the same row.\n\n\nFor example, there is a $$$5 \\times 5$$$ matrix of boxes blow, the numbers in the matrix are the color of boxes in the matrix.\n\n{| border=\"1\"  cellpadding=\"20\" cellspacing=\"0\" width=90%\n ! Initial 5 X 5 matrix\n ! Select the box at location (3,4)\n ! Following the first process\n ! Following the second process\n |-\n |<center><pre>\n1 1 1 1 1\n1 2 1 2 1\n1 2 2 2 1\n1 1 1 1 1\n1 1 1 2 1\n</pre></center>\n |<center><pre>\n1 1 1 1 1\n1 0 1 0 1\n1 0 0 0 1\n1 1 1 1 1\n1 1 1 2 1\n</pre></center>\n|<center><pre>\n1 0 0 0 1\n1 0 1 0 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 2 1\n</pre></center>\n|<center><pre>\n1 1 0 0 0\n1 1 1 0 0\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 2 1\n</pre></center>\n|}\n\n#### Task\nYou will have the initial $$$N \\times M$$$ matrix with numbers from 1 to 9, inclusive. And a list of location, which you are asked to select one by one. If the location list on the list was an empty space, then skip it. Show the final $$$N \\times M$$$ matrix.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases.\n\nFor each test case, the first line contains two integers $$$N$$$ and $$$M$$$ $$$(1 \\leq N,M \\leq 100)$$$. \n\nEach of the follow $$$N$$$ lines, contains $$$M$$$ integers, all number in the matrix will in the range $$$[1,9]$$$.\nThe $$$N+2$$$ line contains an integer $$$K (1 \\leq K \\leq 1,000)$$$.\n\nEach of the follow K lines, contains 2 integers, the location of box selected. If the location of box was an empty space, skip it.\n\n#### Output\nFor each test case, output the final $$$N \\times M$$$ matrix, in $$$N$$$ lines.\n\n#### Sample Input\n```\n3\n5 5\n1 1 1 1 1\n1 2 1 2 1\n1 2 2 2 1\n1 1 1 1 1\n1 1 1 2 1\n1\n3 4\n5 5\n1 1 1 1 1\n1 2 1 2 1\n1 2 2 2 1\n1 1 1 1 1\n1 1 1 2 1\n2\n3 4\n2 2\n3 2\n1 2\n2 1\n1 2\n1\n1 1\n```\n\n#### Sample Output\n```\n1 1 0 0 0\n1 1 1 0 0\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 2 1\n\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n2 0 0 0 0\n\n2 0\n2 1\n1 2\n```\n\n',10000,32768,'0',2,2,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('204','Fancy Box','#### Description\nNot every box is rectangular. Let me show a different kind of box which named as fancy box. Before it, you may need to know something first.\n\nSimple polygon: a simple polygon is a closed polygonal chain of line segments that do not cross each other.\n\nPolyhedron: a polyhedron is traditionally a three-dimensional shape that is made up of a finite number of polygonal faces which are parts of planes; the faces meet in pairs along edges which are straight-line segments, and the edges meet in points called vertices.\n\nThe box can be called as a fancy box must:\n\n+  It is a polyhedron.\n+  The number of vertex must be even. Let it be $$$N$$$, and $$$N \\geq 6$$$.\n+  You can divide the vertices into two sets, name it as setA and setB. Both sets have same size. All vertices in the same set are on the same plane.\n+  Both vertex sets can use the edges of polyhedron to form a simple polygon.\n+  Let\'s denote the vertex in setA as {$$$(A_{xi},A_{yi},A_{zi})$$$}, the vertex in setB as {$$$(B_{xj},B_{yj},B_{zj})$$$}. We can rearrange the vertex of the set and make, $$$A_{xi^{\'}}-B_{xj}=C_x$$$, $$$A_{yi^{\'}}-B_{yj}=C_y$$$, $$$A_{zi^{\'}}-B_{zj}=C_z$$$. ($$$1 \\leq i,j,i^{\'} \\leq \\frac{N}{2}$$$) and $$$C_x,C_y,C_z$$$ are constants.\n\n#### Task\nYou will have the coordinates of vertices in setA, and $$$C_x$$$,$$$C_y$$$ and $$$C_z$$$. Please find out the volume of the fancy box.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. For each test case, the first list contains an integer $$$N (3 \\leq N \\leq 100)$$$. Then N lines followed, each contains three real numbers $$$(A_{xi},A_{yi},A_{zi})$$$ the coordinates of vertices in setA in order of simple polygon. The last line of each test case, contains three real numbers $$$C_x,C_y,C_z$$$. All coordinates in the input are between $$$-1,000$$$ and $$$1,000$$$.\n\n#### Output\nFor each test case, output the answer on one line. If the difference between your answer and the correct answer less than $$$-10^4$$$, then your answer will be considered as correct answer.\n\n#### Sample Input\n```\n1\n4\n0 0 0\n1 0 0\n1 1 0\n0 1 0\n0 0 1\n```\n\n#### Sample Output\n```\n1\n```\n',10000,32768,'0',2,3,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('205','Good Choice','#### Description\nBoxes are very useful, when you want to package something. But sometime the box may too large or too small for something. Here is an example.\n\nI want to use a rectangular box to pack my football. I have a lot of boxes, but I do not know which one is the best for my football. When we are talking about the best for my football, I mean the wasted space in the box will be minimumed.\n\n#### Task\nYou will have the radius of my football and the size of all my boxes. Please tell me which one is the best, if there is more than one best choice, show me all of them. To simplify things, we will ignore thickness of the box sides.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases.\nFor each test case, the first line contains a integer number $$$r (0 < r \\leq 300)$$$, the radius of my football in mm. The second line contains an integer $$$N (1 \\leq N \\leq 100)$$$ denotes how many boxes. The following $$$N$$$ lines, each of them contains three integer numbers, the size of my rectangular boxes, all of them less than $$$1,000$$$ in mm.\n\n#### Output\nFor each test case, print the 0-base index of best boxes. If there is more than one choice, print all indexes in increasing way, in one line. Print -1, if none fit the football.\n\n#### Sample Input\n```\n3\n1\n1\n3 3 1\n1\n2\n2 2 2\n3 3 3\n5\n3\n10 10 10\n20 20 20\n10 10 10\n```\n\n#### Sample Output\n```\n-1\n0\n0 2\n```\n\n',10000,32768,'0',2,4,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('206','How many different ways','#### Description\nI have 6 empty boxes and N same balls. I will put some balls into those boxes, every box will have at less one ball and no two boxes have same number of balls. I want to know how many different ways are there.\n\nFor example, I have 22 balls, and then I can put them into the boxes in the following two ways, $$$(1,2,3,4,5,6)$$$ and $$$(1,2,3,4,5,7)$$$.\n\n#### Task\nYou will have the number $$$N (1 \\leq N \\leq 6,000,000)$$$, the number of balls. Find out how many different ways to put those balls into 6 boxes. The answer may be huge, print it modulo $$$20090411$$$.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases.\nFor each test, there is one line only, contains the integer $$$N$$$.\n\n#### Output\nFor each test case, print the answer modulo $$$20090411$$$.\n\n#### Sample Input\n```\n2\n22\n23\n```\n\n#### Sample Output\n```\n2\n4\n```\n\n',10000,65536,'0',2,5,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('207','Rooks','#### Description\nGiven a chessboard $$$N \\times N$$$, on which the rooks are placed. You have to color those rooks in a minimal number of colors in that way – no horizontal and vertical line contains two rooks of the same color.\n\n#### Input\nFirst line of the input file contains an integer $$$S(0 < S < 10)$$$ that indicates how many sets of inputs are there. The description of each set is given below:\n\nThe first line of each input set contains number $$$N (0 \\leq N \\leq 100)$$$.\n\nThe next N lines contain a chessboard (array NxN), where an empty cell is marked as ‘.’, and a cell that contains a rook is marked as ‘*’(there are not blanks between the symbols in a line).\n\n#### Output\nThe description of output for each test case is given below:\n\nThe first line of the output for each test case contains number M- the minimal number of colors. The next N lines contain a chessboard, where an empty cell is marked as ‘0’, and a cell that contains a rook is marked as ‘K’, where K is a color of the rook. There can be more than correct solution  any valid solution will be accepted.\n\n#### Sample Input\n```\n2\n2\n+ .\n  - \n4\n+ .+ .\n+ .+ .\n  - *.\n..**\n```\n\n#### Sample Output\n```\n2\n2 0\n1 2\n4\n1 0 2 0\n3 0 1 0\n2 1 3 0\n0 0 4 1\n```\n\n',3000,65536,'0',2,6,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('208','Is There A Second Way Left?','#### Description\nNasa, being the most talented programmer of his time, can\'t think things to be so simple. Recently all his neighbors have decided to connect themselves over a network (actually all of them want to share a broadband internet connection :-)). But he wants to minimize the total cost of cable required as he is a bit fastidious about the expenditure of the project. For some unknown reasons, he also wants a second way left. I mean, he wants to know the second best cost (if there is any which may be same as the best cost) for the project. I am sure, he is capable of solving the problem. But he is very busy with his private affairs(?) and he will remain so. So, it is your turn to prove yourself a good programmer. Take the challenge (if you are brave enough).............. \n\n#### Input\nInput starts with an integer $$$t \\leq 1000$$$ which denotes the number of test cases to handle. Then follows t datasets where every dataset starts with a pair of integers $$$v(1 \\leq v \\leq 100)$$$ and $$$e(0 \\leq e \\leq 200)$$$. v denotes the number of neighbors and e denotes the number of allowed direct connections among them. The following e lines contain the description of the allowed direct connections where each line is of the form \"start end cost\", where start and end are the two ends of the connection and cost is the cost for the connection. All connections are bi-directional and there may be multiple connections between two ends\n\n#### Output\nThere may be three cases in the output - 1. no way to complete the task, 2. There is only one way to complete the task, 3. There are more than one way. Output \"No way\" for the first case, \"No second way\" for the second case and an integer c for the third case where c is the second best cost. Output for a case should start in a new line. \n\n#### Sample Input\n```\n4\n5 4 \n1 2 5\n3 2 5\n4 2 5\n5 4 5\n5 3\n1 2 5\n3 2 5\n5 4 5\n5 5 \n1 2 5\n3 2 5\n4 2 5\n5 4 5\n4 5 6\n1 0\n```\n\n#### Sample Output\n```\nCase #1 : No second way\nCase #2 : No way\nCase #3 : 21\nCase #4 : No second way\n```\n',3000,65530,'0',2,7,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('209','Shogi Tournament','#### Description\nYou are to compute, given a partially played Shogi tournament (Japanese chess), whether or not a particular player can still theoretically win the tournament and if so, the maximum number of points the player can be ahead of the player in second place. A tie is possible if two (or more) players get the same number of points; for this problem this is considered as a win with 0 points (no tiebreakers are used).\n\nThe tournament is a double round robin (everyone plays everyone else twice), and the only possible result in a game is either a win or a loss (draws very rarely occurs, and when they do, a new game is played to determine the winner). Any number of games may have been played so far in the tournament, and in any order.\n\n#### Input\nThe input will contain several tournaments. The first line of the input contains an integer n (n ≤ 20) which is the number of tournament.\n\nEach tournament description starts with a blank line followed by a line containing two integers m (2 ≤ m ≤ 50) and p (1 ≤ p ≤ m) describing the number of players in the tournament and for which player we want to determine if a win is possible.\n\nThen follows m lines describing a cross table of the tournament, each line containing m entries. The entry on line y column x in the cross table contains the result in the two games played between player y and x. A \'1\' means that y won the game, \'0\' that y lost the game and \'-\' that the game has not yet been played. Of course, since a player doesn\'t play against himself, the elements in the diagonal are always \'--\'.\n\nYou may assume that the cross table is \"complete\" in the sense that if player y won his first game against player x, the opposite result can be found for player x in his first game against player y.\n\n#### Output\nIf the player can\'t win the tournament, output only \"Player p can\'t win!\".\n\nOtherwise output \"Player p can with d point(s).\" where d is the maximum amount of points ahead of second place player p can get. You should also assign results to all remaining games in the tournament so this is achieved, and print out a cross table with these results. The cross table should have the same format as the input, except that you should also print the final score for each player, see the sample output for the exact format. There should be a blank line before each cross table.\n\nSeparate each tournament in the output with a blank line. \n\n#### Sample Input\n```\n3\n\n2 2\n-- -1\n-0 --\n\n4 1\n-- -0 0- 0-\n-1 -- 11 --\n1- 00 -- -0\n1- -- -1 --\n \n3 2\n-- -- --\n-- -- --\n-- -- --\n```\n\n#### Sample Output\n```\nPlayer 2 can win with 0 point(s).\n\n-- 01 : 1\n10 -- : 1\n\nPlayer 1 can\'t win!\n \nPlayer 2 can win with 3 point(s).\n\n-- 00 10 : 1\n11 -- 11 : 4\n01 00 -- : 1\n```\n\n',3000,65530,'0',2,8,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('21','Polynomial','#### Description\nFrogs love mathematics. In the kingdom of frogs, they are studying polynomial\nrecently. With some research on polynomial, frog Frank find something interesting.\nFor polynomial $$$P(x) = a_n\\,x^n+a_{n-1}\\,x^{n-1}+ \\cdots + a_1\\,x^1 + a_0\\,x^0$$$,when P(x) on an\ninterval $$$[a,b]$$$,it attains its maximum at xm such that $$$a \\leq x_m \\leq b$$$ and for all x\nwith $$$a \\leq x \\leq b$$$, $$$P(x) \\leq P(x_m).$$$\n\n#### Task\nGiven a polynomial P(x) and an interval [a, b], find out the xm of P(x) on the\ninterval [a, b].\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 10, 000)$$$, the number of test cases. There\nare three line for each test case. The first line contains an integer $$$n(1 \\leq n \\leq 5)$$$\ndenotes the degree of the polynomial. The next line contains n + 1 real number of the coefficient \n$$$a_n,a_{n-1},\\cdots,a_0$$$ in order. The last line of each test case contains two real number \ndenotes the interval [a, b]. All real number with one digit after the point.\n\n#### Output\nFor each test case, find out the xm of P(x) on the interval [a, b]. The relative error\nwithin 0.001%,\n\n$$$\\frac{|p(YourAns)-Maxp|}{|Maxp|} < 0.001%$$$\n\nwill be considered as correct answer. Output xm in a line with 4 digit after point\nfor each test case.\n\n#### Sample Input\n```\n2\n1\n1 2\n-10 10\n2\n-1 0 4\n10 -10\n```\n#### Sample Output\n```\n10.0000\n0.0000\n```',10000,32768,'0',0,20,'',0,'4','2018-11-05 00:31:14','2018-11-05 00:48:07'),('210','Asterix and Obelix','#### Description\nAfter winning a gruesome battle against the Romans in a far-away land, Asterix and his dearest friend Obelix are now returning home. However Obelix is not with Asterix now. He has left Asterix in order to deliver menhir to one of his international buyers (as you probably know, recently he has extended his trade to international markets). But he has promised to join Asterix on his way home and Asterix has promised to host a feast for Obelix (you know how fat he is!) in the city they meet. Obelix may meet Asterix in any city on his way home including the starting and the destination city.\n\n[[File:C09.jpg|center]]\n\nNow Asterix is sitting with a map and trying to figure out the cheapest route home. The map shows the cities and the cost (in sestertii) of going from one city to another if there is a road connecting them directly. For each city in the map Asterix has also calculated the cost (in sestertii) of hosting a feast for Obelix in that city. There will be only one feast and for safety Asterix has decided to set aside enough sestertii to host a feast in the costliest city on the route.\n\nSince Asterix does not have a computer, he seeks your help to find out the cheapest route home.\n\n#### Input\nThe input may contain multiple test cases.\n\nThe first line of each test case contains three integers $$$C (C \\leq 80)$$$, $$$R (R \\leq 1,000)$$$ and $$$Q (Q \\leq 6,320)$$$ where C indicates the number of cities (cities are numbered using distinct integers ranging from 1 to C), R represents the number of roads and Q is the number of queries.\n\nThe next line contains C integers where the i-th integer $$$f_i\\,$$$ is the cost (in sestertii) of hosting a feast in city i.\n\nEach of the next R lines contains three integers: $$$c_1\\,$$$, $$$c_2\\,$$$ and d indicating that the cost of going from city $$$c_1\\,$$$ to $$$c_2\\,$$$ (or from $$$c_2\\,$$$ to $$$c_1\\,$$$) is d sestertii.\n\nEach of the next Q lines contains two integers $$$c_1\\,$$$ and $$$c_2\\,$$$ asking for the cost (in sestertii) of the cheapest route from city $$$c_1\\,$$$ to city $$$c_2\\,$$$.\n\nThe input will terminate with three zeros form C, S and Q.\n\n#### Output\nFor each test case in the input first output the test case number (starting from 1) as shown in the sample output. Then for each query in the input print a line giving the minimum cost (in sestertii) of going from the first to the second city in the query. If there exists no path between them just print \"–1\".\n\nPrint a blank line between two consecutive test cases.\n\n#### Sample Input\n```\n7 8 5\n2 3 5 15 4 4 6\n1 2 20\n1 4 20\n1 5 50\n2 3 10\n3 4 10\n3 5 10\n4 5 15\n6 7 10\n1 5\n1 6\n5 1\n3 1\n6 7\n4 4 2\n2 1 8 3\n1 2 7\n1 3 5\n2 4 8\n3 4 6\n1 4\n2 3\n0 0 0\n```\n\n#### Sample Output\n```\nCase #1\n45\n-1\n45\n35\n16\n \nCase #2\n18\n20\n```\n',3000,65530,'0',2,9,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('211','War','#### Description\nA war is being lead between two countries, A and B. As a loyal citizen of C, you decide to help your country’s espionage by attending the peace-talks taking place these days (incognito, of course). There are n people at the talks (not including you), but you do not know which person belongs to which country. You can see people talking to each other, and through observing their behaviour during their occasional one-to-one conversations, you can guess if they are friends or enemies. In fact what your country would need to know is whether certain pairs of people are from the same country, or they are enemies. You may receive such questions from C’s government even during the peace-talks, and you have to give replies on the basis of your observations so far. Fortunately nobody talks to you, as nobody pays attention to your humble appearance.\n\n#### Abstract\n+ Now, more formally, consider a black box with the following operations:\n  - setFriends(x, y)   shows that x and y are from the same country\n  - setEnemies(x, y)   shows that x and y are from different countries\n  - areFriends(x, y)   returns true if you are sure that x and y are friends\n  - areEnemies(x, y)   returns true if you are sure that x and y are enemies\n  - The first two operations should signal an error if they contradict with your former knowledge.\n\n+ The two relations ‘friends’ (denoted by ~) and ‘enemies’ (denoted by + ) have the following properties:\n=== ~ is an equivalence relation ===\n  - If x ~ y and y ~ z then x ~ z  (The friends of my friends are my friends as well.)\n  - If x ~ y then y ~ x            (Friendship is mutual.)\n  - x ~ x                          (Everyone is a friend of himself.)\n\n=== * is symmetric and irreflexive ===\n  - If x * y then y * x             (Hatred is mutual.)\n  - Not x * x                       (Nobody is an enemy of himself.)\n  - If x * y and y * z then x ~ z   (A common enemy makes two people friends.)\n  - If x ~ y and y * z then x * z   (An enemy of a friend is an enemy.)\n\n+ Operations setFriends(x, y) and setEnemies(x, y) must preserve these properties.\n\n#### Input\n+ The first line contains a single integer, n, the number of people.\n+ Each of the following lines contains a triple of integers, c x y, where c is the code of the operation:\n  - c = 1, setFriends\n  - c = 2, setEnemies\n  - c = 3, areFriends\n  - c = 4, areEnemies\n  - and x and y are its parameters, which are integers in the range [0, n), identifying two (different) people. The last line contains 0 0 0.\n+ All integers in the input file are separated by at least one space or line break.\n\n#### Output\n+ For every ‘areFriends’ and ‘areEnemies’ operation write 0 (meaning no) or 1 (meaning yes) to the output. Also for every ‘setFriends’ or ‘setEnemies’ operation which contradicts with previous knowledge, output a –1 to the output ; note that such an operation should produce no other effect and execution should continue. A successful ‘setFriends’ or ‘setEnemies’ gives no output.\n+ All integers in the output file must be separated by at least one space or line break.\n+ n < 10000, the number of operations is unconstrained.\n\n#### Sample Input\n```\n10\n1 0 1\n1 1 2\n2 0 5\n3 0 2\n3 8 9\n4 1 5\n4 1 2\n4 8 9\n1 8 9\n1 5 2\n3 5 2\n0 0 0\n```\n\n#### Sample Output\n```\n1\n0\n1\n0\n0\n-1\n0\n```\n',3000,65530,'0',2,10,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('212','The Valentine\'s Day','#### Description\nAs you all know that Valentine\'s Day is celebrated on 14th February each year. But sadly, this year in Bangladesh there was Hartal (A sort of strike when motor vehicles sleep idle and people are reluctant to go outside) on 14th February so people could not celebrate it. Generally, the sale of flowers increases by ten times on this day but this year the sale was almost unchanged and the flower shop owners were in great pain. One of them said in frustration “I wish my flowers were all vegetables so that I could eat them.” but as you all know this was not to be. However, our problem is not related with this incident. Before stating the real problem we should look at the following history of Valentine\'s Day:\n\n<b>\nValentine\'s Day started in the time of the Roman Empire. Under the rule of Emperor Claudius II, Rome was involved in many bloody and unpopular military campaigns. Claudius the Cruel, as he was known at the time, was having a difficult time getting soldiers to join his military leagues. He believed that the reason was that roman men did not want to leave their loves or families. As a result, Claudius cancelled all marriages and engagements in Rome.\n\nThis was when a Christian priest named Valentine came to defend love in the empire. Valentine began to secretly marry couples despite the emperor\'s orders. When Emperor Claudius was informed of these ceremonies Valentine was sent to prison where he remained until his death on February 14 in 270 AD.\n\nIt wasn’t until a few hundred years later when Valentine\'s Day began to develop, as we know it. At the time, Christianity was beginning to take control of Europe. As part of this effort the Church sought to do away with pagan holidays. Valentine\'s Day came to replace a mid-February fertility festival called Lupercalia. In honor of his sacrifice for love Valentine was made a saint and Lupercalia renamed in his honor. To be specific we should assume in this problem that the celebration of Valentine\'s Day started in 470 AD.\n</b>\n\nOur problem is on a newly married couple Marsha and Bill. Both of them are service holders and the property of their job is that in every new month they are transferred to a new city, which is adjacent to the previous one or remains in the old city. The probability of being transferred to any one of the adjacent cities or not being transferred is equal. That is if a city C has four neighboring cities D, E, F, G then his probability of being transferred to city D the next month is 1/5 = 0.20. The same probability is for being transferred to E, F and G or remaining in C. You will have to find out the probability of their being in the same city in the next available (yet to come) Valentine\'s Day celebration. In a city with no neighbors (no adjacent city) no transfer occurs.\n\n[[File:C11.jpg|center]]\n\n#### Input\nThe input will contain an integer N that indicates the number of sets of input. Next there will be N sets of input.\n\nEach set begins with three integers Y (460<=Y<=10000) that is the initial year and M (1<=M<=12), which is the initial month. And D (1<=D<=31) and no invalid dates. Next there will be one integers R (R<=20) followed by R lines each containing two city names city1 and city2, which indicates that city1 and city2 are adjacent. If city1 and city2 are equal ignore the input as we have said before that after the end of a month the person may remain in his current city. There may be redundant inputs (the same pair of info twice), ignore them also. Some city names may be absent in these R lines of information but those cities are without neighbors. After these relations there will be two city names city1 and city2, which are the initial position of Marsha and Bill. City names will always be an uppercase character (A...Z) \n\n#### Output\nFor each set of input output in a single line the probability of their being in the same city (as stated before) on the next Valentine\'s Day. Output floats will have five digits after the decimal point. \n\n#### Sample Input\n```\n1\n1990 3 1\n12\nJ I\nJ H\nJ F\nH I\nH G\nI D\nD G\nG C\nG F\nC F\nC E\nC D\nJ C\n```\n\n#### Sample Output\n```\n0.13076\n```\n',3000,65530,'0',2,11,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('213','Many paths, one destination','#### Description\nIn life, one has many paths to choose, leading to many different lives. Philosophers have long thought about this problem, that can now be studied using computers and mathematics.\n\nThe objective of this task is to enumerate how many different lives one can live, given a specific set of choices at each point in time. One is given a list of events, and a number of choices that can be selected, for each event. The objective is to count how many ways exist to go from event zero (birth) to an event that has no choices (death). \n\n#### Input\nInput contains several test cases separated by a blank line. The first number in the each test case is the number of events. It is followed by a list of events. Each event is described by a number, n, (possibly 0) of choices. For every one of the n possible choices, follows a list of the next event (with sequence number larger than the present event) that will happen when that choice is picked. An event with no choices (n=0) represents a death. It has no further events in life. The first event, event number 0, represents birth. \n\n#### Output\nThe output for each test case is simply an integer that represents how many different ways it is possible to live that particular life. This number will always be less than 2 to the 30th. Print a blank line between test cases. \n\n#### Sample Input\n```\n6\n3 1 2 5\n3 2 3 4\n2 3 4\n0\n1 5\n0\n```\n\n#### Sample Output\n```\n7\n```\n\n',3000,65530,'0',2,12,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('214','Spreading the News','#### Description\nIn a large organization, everyone knows a lot of colleagues. However, friendship relations are kept with only a few of them, to whom news are told.\n\nSuppose that whenever an employee knows of a piece of news, he tells it to all his friends on the following day. So, on the first day, the source of the information tells it to his friends; on the second day, the source\'s friends tell it to their friends; on the third day, the friends of the source\'s friends\' tell it to their friends; and so on.\n\nThe goal is to determine: \n\n+ the maximum daily boom size, which is the largest number of employees that, on a single day, hear the piece of news for the first time; and \n\n+ the first boom day, which is the first day on which the maximum daily boom size occurs. \n\n#### Problem\n\nWrite a program that, given the friendship relations between the employees and the source of a piece of news, computes the maximum daily boom size and the first boom day of that information spreading process. \n\n#### Input\n\nThe first line of the input contains the number E of employees (1 <=E <=2500). Employees are numbered from 0 to E-1. \n\nEach of the following E lines specifies the set of friends of an employee\'s (from employee 0 to employee E-1). A set of friends contains the number of friends N (0 <=N <15), followed by N distinct integers representing the employee\'s friends. All integers are separated by a single space. \n\nThe next line contains an integer T (1 <=T <60), which is the number of test cases. \n\nEach of the following T lines contains an employee, which represents the (unique) source of the piece of news in the test case. \n\n#### Output\n\nThe output consists of T lines, one for each test case. \n\nIf no employee (but the source) hears the piece of news, the output line contains the integer 0. \n\nOtherwise, the output line contains two integers, M and D, separated by a single space, where M is the maximum daily boom size and D is the first boom day. \n\n#### Sample Input\n```\n6\n2 1 2\n2 3 4\n3 0 4 5\n1 4\n0\n2 0 2\n3\n0\n4\n5\n```\n\n#### Sample Output\n```\n3 2\n0\n2 1\n```\n',3000,65530,'0',2,13,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('215','Sorting Slides','#### Description\nProfessor Clumsey is going to give an important talk this afternoon. Unfortunately, he is not a very tidy person and has put all his transparencies on one big heap. Before giving the talk, he has to sort the slides. Being a kind of minimalist, he wants to do this with the minimum amount of work possible.\n\nThe situation is like this. The slides all have numbers written on them according to their order in the talk. Since the slides lie on each other and are transparent, one cannot see on which slide each number is written. \n\n[[File:C14.gif|center]]\n\nWell, one cannot see on which slide a number is written, but one may deduce which numbers are written on which slides. If we label the slides which characters A, B, C, ... as in the figure above, it is obvious that D has number 3, B has number 1, C number 2 and A number 4.\n\nYour task, should you choose to accept it, is to write a program that automates this process. \n\n#### Input\nThe input consists of several heap descriptions. Each heap descriptions starts with a line containing a single integer n, the number of slides in the heap. The following n lines contain four integers $$$x_{min}$$$, $$$x_{max}$$$, $$$y_{min}$$$ and $$$y_{max}$$$, each, the bounding coordinates of the slides. The slides will be labeled as A,B,C,... in the order of the input.\n\nThis is followed by n lines containing two integers each, the x- and y-coordinates of the n numbers printed on the slides. The first coordinate pair will be for number 1, the next pair for 2, etc. No number will lie on a slide boundary.\n\nThe input is terminated by a heap description starting with n = 0, which should not be processed. \n\n#### Output\nFor each heap description in the input first output its number. Then print a series of all the slides whose numbers can be uniquely determined from the input. Order the pairs by their letter identifier.\n\nIf no matchings can be determined from the input, just print the word none on a line by itself.\n\nOutput a blank line after each test case. \n\n#### Sample Input\n```\n4\n6 22 10 20\n4 18 6 16\n8 20 2 18\n10 24 4 8\n9 15\n19 17\n11 7\n21 11\n2\n0 2 0 2\n0 2 0 2\n1 1\n1 1\n0\n```\n\n#### Sample Output\n```\nHeap 1\n(A,4) (B,1) (C,2) (D,3)\n\nHeap 2\nnone\n\n```\n',3000,65530,'0',2,14,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('216','Network Wars','#### Description\nIt is the year 2126 and comet Swift-Tuttle has struck the earth as predicted. The resultant explosion emits a large cloud of high energy neutrons that eliminates all human life. The accompanying electro-magnetic storm causes two unusual events: many of the links between various parts of the electronic network are severed, and some postgraduate AI projects begin to merge and mutate, in much the same way as animal life did several million years ago. In a very short time two programs emerge, Paskill and Lisper, which move through the network marking each node they visit: Paskill activates a modified Prolog interpreter and Lisper activates the \'Hello World\' program. However \'Hello World\' has mutated into an endless loop that so ties up the node that no other program, not even Lisper, can re-enter that node and the Prolog interpreter immediately reverse compiles (and destroys) any program that enters. However, Paskill knows which nodes it has visited and never tries to re-enter them. Thus if Lisper attempts to enter a node already visited by Paskill it will be annihilated; neither can enter a node already visited by Lisper, if either (or both) cannot move both will halt and if they ever arrive at a node simultaneously they annihilate each other. Both programs move through the network at the same speed. \n\nWrite a program to simulate these events. All nodes in the the network are labelled with a single uppercase letter as shown below. When moving to the next node, Paskill searches alphabetically forwards from the current node, whereas Lisper searches alphabetically backwards from the current node, both wrapping round if necessary. Thus, (in the absence of the other) if Paskill enters the network below at A, it would visit the nodes in the order A, B, C, D, G, H, E, F; if Lisper enters the network at H it would visit them in the order H, G, E, F. Simulation stops when one or more of the above events occurs. If more than one event occurs, mention Paskill first. \n\n[[File:C15.gif|center]]\n\n#### Input\nInput will consist of a series of lines. Each line will describe a network and indicate the starting nodes for the two programs. A network is described as a series of nodes separated by \';\' and terminated by a period (\'.\'). Each node is described by its identifier, a \':\' and one or more of the nodes connected to it. Each link will be mentioned at least once, as will each node, although not all nodes will be \'described\'. After the period will appear the labels of the starting nodes--first Paskill and then Lisper. No line will contain more than 255 characters. The file will be terminated by a line consisting of a single #. \n\n#### Output\n+ Output will consist of one line for each network. Each line will specify the terminating event and the node where it occurs. \n+ The terminating event is one or two of the following: \n  - Lisper destroyed in node ?\n  - {Paskill/Lisper} trapped in node ?\n  - Both annihilated in node ?\n\n#### Sample Input\n```\nA:BD;C:BD;F:E;G:DEH;H:EG. A H\nE:AB. A B\nB:ACD. B D\nA:B;B:C;D:E. A D\n1. \n```\n\n#### Sample Output\n```\nPaskill trapped in node D Lisper trapped in node F\nBoth annihilated in node E\nLisper destroyed in node B\nLisper trapped in node E\n```\n',3000,65530,'0',2,15,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('217','Help!','#### Description\nMegaFirm Inc. has created a set of patterns to aid its telephone help-desk operators in responding to customers. A pattern is a phrase consisting of words and placeholders. A word is simply a string of letters. A placeholder is a word enclosed in angle brackets (that is < ... >). A phrase matches a pattern if each placeholder in the pattern can be systematically replaced by a word so as to make the pattern and phrase equal. By \"systematically replaced\" we mean that all placeholders enclosing the same word are replaced by the same word. \nFor example, the phrase \n\n+ to be or not to be\n\nmatches the pattern \n\n+ <foo> be <bar> not <foo> <baf>\n\nbecause we can replace <foo> by to, <bar> by or, and <baf> by be. \nGiven two patterns, you are to find a phrase that matches both. \n\n#### Input\nThe first line of input contains n, the number of test cases. Each test case consists of two lines of input; each a pattern. Patterns consist of lowercase words, and placeholders containing lowercase words. No pattern exceeds 100 characters. Words contain at most 16 characters. A single space separates adjacent words and placeholders. \n\n#### Output\nFor each test case, output a phrase that matches both patterns. If several phrases match, any will do. If no phrase matches, output a line containing \"-\" (a single minus sign). \n\n#### Sample Input\n```\n3\nhow now brown <animal>\n<foo> now <color> cow\nwho are you\n<a> <b> <a>\n<a> b\nc <a>\n```\n\n#### Sample Output\n```\nhow now brown cow\n-\nc b\n```\n\n',3000,65536,'0',2,16,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('218','Planarity','#### Description\n\nA graph is called planar if it can be drawn in the plane without any crossings. In a drawing of a graph, nodes are identified with points in the plane, and edges with lines connecting the corresponding end nodes. No edge is allowed to cross another edge or node in the drawing. \n\n\nRecall that Kuratowski\'s theorem provides an easy test for determining planarity: A graph is planar if and only if it is not homeomorphic to any graph that contains the subgraph K3, 3 or the subgraph K5. \n\n\nThe figure on the left depicts K3, 3 and the one on the right K5: \n\n[[File:C17_1.jpg|center]]\n\nThe simplest graph homeomorphic to a given one can be obtained by repeating the following procedure while possible: \n\n\n+ Remove a vertex of degree 1 and its incident edge. \n\n+ Remove a vertex v of degree 2 and its two incident edges, and replace them by a new edge that joins the two nodes adjacent to v. For instance, \n[[File:C17_3.jpg|center]]\n\n \nwould be reduced to \n\n[[File:C17_4.jpg|center]]\n \nNote that if edge {u, w} was already in the graph, it would not be added again. \n\nWrite a program that determines whether a given undirected graph is planar or not. \n\n#### Input\n\nInput consists of zero or more test cases. Each test case consists of a graph. \n\nA graph is given in the following way: First, a line contains two integers n and m, where n denotes the number of vertices of the graph, and m denotes its number of edges ( 1<=n<=20 and m>=0). Then follow m lines, one for every edge of the graph, each containing two integers u and v (with u!=v) meaning that the graph contains the edge {u, v}. Vertices in the graph are labelled from 1 to n. There are not repeated edges. \n\n#### Output\n\nFor each test case, print a line with the string YES if the graph is planar or with the string NO otherwise. \n\n#### Sample Input\n```\n7 10\n    5 7\n    7 4\n    3 1\n    5 1\n    2 4\n    2 1\n    2 6\n    5 6\n    3 4\n    3 6\n4 6\n    1 2\n    1 3\n    1 4\n    2 3\n    3 4\n    2 4\n```\n\n#### Sample Output\n```\nNO\nYES\n```\n',3000,65536,'0',2,17,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('219','Rational Resistors','#### Description\nGiven a network of resistors, what is the equivalent resistance between two given points in the network? More precisely, consider an undirected, weighted graph, where each edge is a wire with the edge weight representing its resistance, in Ohms. Given a pair of nodes, A and B, in this graph, imagine passing 1 Ampere of current from A to B. What will be the voltage between A and B, in Volts? \n\nA brief review of high school physics. For any pair of points, P and Q, in the network, the voltage between the points is the difference in potentials at the two points (V(P) - V(Q)) and is equal to the current from P to Q times the resistance between P and Q. For any point in the network, the sum of the currents entering the point is zero (conservation of charge). \n\n+ Warning! This problem is harder than it seems. \n\n#### Input\n\nThe first line of input gives the number of cases, N (N<30). N test cases follow. Each one starts with a description of a graph: \n\nn m (the number of nodes and wires in the graph)\n\nn will not be larger than 16. The next m lines contain 3 integers each: \nu v r\n\nspecifying that there is a wire with resistance r (0<r<10) connecting node u to node v. The nodes are numbered from 0 to n-1. There can be multiple wires connecting the same pair of nodes and wires connecting a node to itself. The next line of each test case will contain the number of queries, Q (0<=Q<=10). The next Q lines will list pairs of nodes A and B. \n\n#### Output\n\nFor each test case, output the line \"Case #x:\", where x is the number of the test case. Then print Q lines of the form \"Resistance between A and B is s/t.\", where s/t is a fraction in lowest terms. Print \"1/0\" if no current can go from A to B. Finally, print an empty line after each test case. \n\n#### Sample Input\n```\n4\n3 2\n0 1 1\n1 2 2\n2\n0 2\n1 0\n2 2\n0 1 1\n1 0 2\n1\n0 1\n2 0\n1\n0 1\n4 4\n0 1 1\n1 2 2\n2 3 3\n1 3 1\n1\n0 3\n```\n\n#### Sample Output\n```\nCase #1:\nResistance between 0 and 2 is 3/1\nResistance between 1 and 0 is 1/1\n\nCase #2:\nResistance between 0 and 1 is 2/3\n\nCase #3:\nResistance between 0 and 1 is 1/0\n\nCase #4:\nResistance between 0 and 3 is 11/6\n```\n',3000,65536,'0',2,18,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('22','Jumping Game','#### Description\nThere is a funny game in the kingdom of frogs. The game is played on a row\nof N blocks, numbered from 1 to N. All player start at block 1 and all of can\njump to other blocks. The first jump must be from block 1 to block 2. There are\ntwo directions for jumping, forward and backward. Each subsequent jump must\nsatisfy two conditions.\n\n+ Jump forward, must jump exactly one block longer than the preceding jump.\n+ Jump backward, must jump exactly the same length as the preceding jump.\n\nFor example, after the first jump you are at block 2, you can jump backwards\nto block 1 or forwards to block 4.\nDifferent blocks have different cost for jump in, the one who get to block N\nwith smallest total cost win.\n\n#### Task\nFrank takes part in the game, he is asking your help to find out the smallest total\ncost to win the game.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. The\nfirst line of each test case will have an integer number $$$N(2 \\leq N \\leq 1, 000)$$$,denotes\nhow many blocks are there on a row. The second line contains $$$N$$$ positive integer\nnumbers, represent the cost for jump in of every blocks in order, all of them are\nnot greater than 1,000.\n\n#### Output\nFor each test case, print the smallest total cost to win the game in a line.\n\n#### Sample Input\n```\n2\n6\n1 2 3 4 5 6\n3\n1 2 3\n```\n\n#### Sample Output\n```\n12\n6\n```\n#### Hint\nFor test case 1, Frank jump in this order, $$$1 \\to 2 \\to 1 \\to 3 \\to 6$$$ , total cost 12.\n',10000,32768,'0',0,21,'',0,'2','2018-11-05 00:31:14','2018-11-05 00:48:07'),('220','The Gossipy Gossipers Gossip Gossips','#### Description\n\nGossiping mechanism is quite simple, but effective. Everything starts with a master gossiper (most probably a she), who hears, witnesses, or makes up some extraordinary news. Whenever she meets another person, she tells him the news. As soon as these people meet others, they tell them the news. Soon, everybody is informed of the news, and the process finishes.\n\nGossipers meet each other daily at the same hours. We have information on when every pair of gossipers meet. For simplicity, days are divided into 100 instants. The first day goes from 0 to 99, the second from 100 to 199, and so on.\n\nSuppose the gossiping process starts at time 0. When will it finish? That is, when will all the people be informed of the news?\n\n#### Input\n\nThe first line of the input contains an integer N, indicating the number of test cases.\n\nFor each test case, the first line contains two integers M and K. M indicates the number of people in this case (numbered from 1 to M). The master gossiper is always number 1. K indicates the number of pairs of people who meet.\n\nNext, we have 2K lines (two lines for each pair of people who meet). The first line of each pair contains three integers, G1, G2 and V. This line means that gossipers G1 and G2 meet V times a day. The second line contains V numbers from 1 to 99, that indicate the instants when G1 and G2 meet daily.\n\nFor example, the pair: \n+ 3 7 2\n+ 28 88\n+ means: person 3 and person 7 meet twice a day, at instants 28 and 88 everyday (that is, at 28, 88, 128, 188, 228, 288, ...). \nYou can assume that M ≤ 20, K ≤ M*M, and V ≤ 12 .\n\n#### Output\n\nFor each test case, the output should consist of a single integer F in one line, indicating the instant when the process finishes. If the process does not finish (for example, there is some isolated person who will never be informed), the result should be -1.\n\n#### Sample Input\n```\n4\n4 3\n1 2 1\n60\n2 3 1\n40\n4 3 1\n30\n3 2\n1 2 1\n42\n2 3 1\n42\n5 5\n1 3 2\n60 70\n1 4 3\n20 22 24\n4 5 1\n10\n3 5 2\n12 80\n3 2 2\n55 78\n8 0\n```\n\n#### Sample Output\n```\n230\n42\n80\n-1\n```\n\n#### Warning\n\n+ \"gossips\" have nothing to do with \"ghost ships\". \n',3000,65536,'0',2,19,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('221','Nuts for nuts..','#### Description\n\nSo as Ryan and Larry decided that they don\'t really taste so good, they realized that there are some nuts located in certain places of the island.. and they love them! Since they\'re lazy, but greedy, they want to know the shortest tour that they can use to gather every single nut!\n\nCan you help them? \n\n#### Input\n\nYou\'ll be given x, and y, both less than 20, followed by x lines of y characters each as a map of the area, consisting sorely of \".\", \"#\", and \"L\". Larry and Ryan are currently located in \"L\", and the nuts are represented by \"#\". They can travel in all 8 adjacent direction in one step. See below for an example. There will be at most 15 places where there are nuts, and \"L\" will only appear once.\n\n#### Output\n\nOn each line, output the minimum amount of steps starting from \"L\", gather all the nuts, and back to \"L\". \n\n#### Sample Input\n```\n5 5\nL....\n1. ....\n1. ....\n.....\n1. ....\n5 5\nL....\n1. ....\n1. ....\n.....\n1. ....\n```\n\n#### Sample Output\n```\n8\n8\n```\n\n#### Hits\n\nLarry and Ryan will go south for a nut, then south again for another nut, then south twice for another nut, and then back where they are. \n',3000,65536,'0',2,20,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('222','AntiFloyd','#### Description\n\nYou have been hired as a systems administrator for a large company. The company head office has n computers connected by a network of m cables. Each cable connects two different computers, and there is at most one cable connecting any given pair of computers. Each cable has a latency, measured in micro-seconds, that determines how long it takes for a message to travel along that cable. The network protocol is set up in a smart way, so that when sending a message from computer A to computer B, the message will travel along the path that has the smallest total latency, so that it arrives at B as soon as possible. The cables are bi-directional and have the same latency in both directions. \n\nAs your first order of business, you need to determine which computers are connected to each other, and what the latency is along each of the m cables. You soon discover that this is a difficult task because the building has many floors, and the cables are hidden inside walls. So here is what you decide to do. You will send a message from every computer A to every other computer B and measure the latency. This will give you n(n-1)/2 measurements. From this data, you will determine which computers are connected by cables, and what the latency along each cable is. You would like your model to be simple, so you want to use as few cables as possible. \n\n#### Input\n\nThe first line of input gives the number of cases, N (at most 20). N test cases follow. Each one starts with a line containing n (0<n<100). The next n-1 lines will contain the message latency measurements. Line i will contain i integers in the range [1, 10000]. Integer j is the amount of time it takes to send a message from computer i+1 to computer j (or back). \n\n#### Output\n\nFor each test case, output a line containing \"Case #x:\". The next line should contain m - the number of cables. The next m lines should contain 3 integers each: u, v and w, meaning that there is a cable between computers u and v, and it has latency w. Lines should be sorted first by u, then by v, with u<v. If there are multiple answers, any one will do. If the situation is impossible, print \"Need better measurements.\" Print an empty line after each test case. \n\n#### Sample Input\n```\n2\n3\n100\n200 100\n3\n100\n300 100\n```\n\n#### Sample Output\n```\nCase #1:\n2\n1 2 100\n2 3 100\n\nCase #2:\nNeed better measurements.\n```\n',3000,65536,'0',2,21,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('223','Going in Cycle!!','#### Description\n\nYou are given a weighted directed graph with n vertices and m edges. Each cycle in the graph has a weight, which equals to sum of its edges. There are so many cycles in the graph with different weights. In this problem we want to find a cycle with the minimum mean.\n\n#### Input\n\nThe first line of input gives the number of cases, N. N test cases follow. Each one starts with two numbers n and m. m lines follow, each has three positive number a, b, c which means there is an edge from vertex a to b with weight of c.\n\n#### Output\n\nFor each test case output one line containing “Case #x: ” followed by a number that is the lowest mean cycle in graph with 2 digits after decimal place, if there is a cycle. Otherwise print “No cycle found.”.\n\n#### Constraints\n+ $$$n \\leq 50$$$\n+ $$$a, b \\leq n$$$\n+ $$$c \\leq 10,000,000$$$\n\n#### Sample Input\n```\n2\n2 1\n1 2 1\n2 2\n1 2 2\n2 1 3\n```\n\n#### Sample Output\n```\nCase #1: No cycle found.\nCase #2: 2.50\n```\n\n',3000,65536,'0',2,22,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('224','From D to E and back','#### Description\nTake any directed graph D with n vertices and m edges. You can make the Lying graph E of D in the following way. E will have m vertices, one for each edge of D. For example, if D has an edge uv, then E will have a vertex called uv. Now, whenever D has edges uv and vw, E will have an edge from vertex uv to vertex vw. There are no other edges in E. \n\nYou will be given a graph E and will have to determine whether it is possible for E to be the Lying graph of some directed graph D.\n#### Input\nThe first line of input gives the number of cases, N (N<220). N test cases follow. Each one starts with two lines containing m (0≤m≤300) and k. The next k lines will each contain a pair of vertices, x and y, meaning that there is an edge from x to y in E. The vertices are numbered from 0 to m-1 \n#### Output\nFor each test case, output one line containing \"Case #x:\" followed by either \"Yes\" or \"No\", depending on whether E is a valid Lying graph or not. Note that D is allowed to have duplicate edges and self-edges. \n#### Sample Input\n```\n4\n2\n1\n0 1\n5\n0\n4\n3\n0 1\n2 1\n2 3\n3\n9\n0 1\n0 2\n1 2\n1 0\n2 0\n2 1\n0 0\n1 1\n2 2\n\n```\n\n#### Sample Output\n```\nCase #1: Yes\nCase #2: Yes\nCase #3: No\nCase #4: Yes\n```\n',3000,65536,'0',2,23,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('225','Crimewave','#### Description\nNieuw Knollendam is a very modern town. This becomes clear already when looking at the layout of its map, which is just a rectangular grid of streets and avenues. Being an important trade centre, Nieuw Knollendam also has a lot of banks. Almost on every crossing a bank is found (although there are never two banks at the same crossing). Unfortunately this has attracted a lot of criminals. Bank hold-ups are quite common, and often on one day several banks are robbed. This has grown into a problem, not only to the banks, but to the criminals as well. After robbing a bank the robber tries to leave the town as soon as possible, most of the times chased at high speed by the police. Sometimes two running criminals pass the same crossing, causing several risks: collisions, crowds of police at one place and a larger risk to be caught. \n\n\n\nTo prevent these unpleasant situations the robbers agreed to consult together. Every Saturday night they meet and make a schedule for the week to come: who is going to rob which bank on which day? For every day they try to plan the get-away routes, such that no two routes use the same crossing. Sometimes they do not succeed in planning the routes according to this condition, although they believe that such a planning should exist. \n\n\n\nGiven a grid of (s*a)  and the crossings where the banks to be robbed are located, find out whether or not it is possible to plan a get-away route from every robbed bank to the city-bounds, without using a crossing more than once. \n[[File:p563.gif|center]]\n#### Input\nThe first line of the input contains the number of problems p to be solved. \n\nThe first line of every problem contains the number s of streets (1<=s<=50), followed by the number a of avenues (1<=a<=50), followed by the number b (b>=1) of banks to be robbed. \n\nThen b lines follow, each containing the location of a bank in the form of two numbers x (the number of the street) and y (the number of the avenue). Evidently 1<=x<=s and 1<=y<=a. \n#### Output\nThe output file consists of p lines. Each line contains the text possible or not possible. If it is possible to plan non-crossing get-away routes, this line should contain the word: possible. If this is not possible, the line should contain the words not possible. \n#### Sample Input\n```\n2\n6 6 10\n4 1\n3 2\n4 2\n5 2\n3 4\n4 4\n5 4\n3 6\n4 6\n5 6\n5 5 5\n3 2\n2 3\n3 3\n4 3\n3 4\n```\n\n#### Sample Output\n```\npossible\nnot possible\n```\n\n\n',3000,65536,'0',2,24,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('226','Internet Bandwidth','#### Description\nOn the Internet, machines (nodes) are richly interconnected, and many paths may exist between a given pair of nodes. The total message-carrying capacity (bandwidth) between two given nodes is the maximal amount of data per unit time that can be transmitted from one node to the other. Using a technique called packet switching, this data can be transmitted along several paths at the same time. \n\nFor example, the following figure shows a network with four nodes (shown as circles), with a total of five connections among them. Every connection is labeled with a bandwidth that represents its data-carrying capacity per unit time. \n[[File:c25.jpg|center]]\nIn our example, the bandwidth between node 1 and node 4 is 25, which might be thought of as the sum of the bandwidths 10 along the path 1-2-4, 10 along the path 1-3-4, and 5 along the path 1-2-3-4. No other combination of paths between nodes 1 and 4 provides a larger bandwidth. \n\nYou must write a program that computes the bandwidth between two given nodes in a network, given the individual bandwidths of all the connections in the network. In this problem, assume that the bandwidth of a connection is always the same in both directions (which is not necessarily true in the real world). \n\n#### Input\nThe input file contains descriptions of several networks. Every description starts with a line containing a single integer n (2 ≤n ≤100), which is the number of nodes in the network. The nodes are numbered from 1 to n. The next line contains three numbers s, t, and c. The numbers s and t are the source and destination nodes, and the number c is the total number of connections in the network. Following this are c lines describing the connections. Each of these lines contains three integers: the first two are the numbers of the connected nodes, and the third number is the bandwidth of the connection. The bandwidth is a non-negative number not greater than 1000. \n\nThere might be more than one connection between a pair of nodes, but a node cannot be connected to itself. All connections are bi-directional, i.e. data can be transmitted in both directions along a connection, but the sum of the amount of data transmitted in both directions must be less than the bandwidth. \n\nA line containing the number 0 follows the last network description, and terminates the input. \n\n#### Output\nFor each network description, first print the number of the network. Then print the total bandwidth between the source node s and the destination node t, following the format of the sample output. Print a blank line after each test case. \n#### Sample Input\n```\n4\n1 4 5\n1 2 20\n1 3 10\n2 3 5\n2 4 10\n3 4 20\n0\n```\n\n#### Sample Output\n```\nNetwork 1\nThe bandwidth is 25.\n```\n',3000,65536,'0',2,25,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('227','Power Transmission','#### Description\nDESA is taking a new project to transfer power. Power is generated by the newly established plant in Barisal. The main aim of this project is to transfer Power in Dhaka. As Dhaka is a megacity with almost 10 million people DESA wants to transfer maximum amount of power through the network. But as always occurs in case of power transmission it is tough to resist loss. So they want to use some regulators whose main aim are to divert power through several outlets without any loss. \n\nEach such regulator has different capacity. It means if a regulator gets 100 unit power and it\'s capacity is 80 unit then remaining 20 unit power will be lost. Moreover each unidirectional link( Connectors among regulators) has a certain capacity. A link with capacity 20 unit cannot transfer power more than 20 unit. Each regulator can distribute the input power among the outgoing links so that no link capacity is overflown. DESA wants to know the maximum amount of power which can be transmitted throughout the network so that no power loss occurs. That is the job you have to do. \n[[File:c26.jpg|center]]\n( Do not try to mix the above description with the real power transmission.)\n\n#### Input\nThe input will start with a postive integer N ( 1<=N<=100 ) indicates the number of regulators. The next few lines contain N positive integers indicating the capacity of each regulator from 1 to N. The next line contains another positive integer M which is the number of links available among the regulators. Following M lines contain 3 positive integers ( i j C) each. \'i\' and \'j\' is the regulator index ( 1<=i,j<=N) and C is the capacity of the link. Power can transfer from i\'th regulator to j\'th regulator. The next line contains another two positive integers B and D. B is the number of regulators which are the entry point of the network. Power generated in Barisal must enter in the network through these entry points. Simmilarly D is the number of regulators connected to Dhaka. These links are special and have infinite capacity. Next line will contain B+D integers each of which is an index of regulator. The first B integers are the index of regulators connected with Barisal. Regulators connected with Barisal are not connected with Dhaka.\n\nInput is terminated by EOF. \n\n#### Output\nFor each test case show the maximum amount of power which can be transferred to Dhaka from Barisal. Use a seperate line for each test case. \n\n#### Sample Input\n```\n4\n10 20 30 40\n6\n1 2 5\n1 3 10\n1 4 13\n2 3 5\n2 4 7\n3 4 20\n3 1\n1 2 3 4\n2\n50 100\n1\n1 2 100\n1 1\n1 2\n```\n\n#### Sample Output\n```\n37\n50\n```\n\n',3000,65536,'0',2,26,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('228','Councilling','#### Description\nEach resident of a particular town is a member of zero or more clubs and also a member of exactly one political party. Each club is to nominate one of its members to represent it on the town council so that the number of council members belonging to any given party does not equal or exceed half the membership of the council. The same person may not represent two clubs; that is there must be a 1-1 relationship between clubs and council members. Your job is to select the council members subject to these constraints.\n\n#### Input\nIn the first line of input there will be an integer T, giving the number of test cases. The next line will be blank. Each of the T test cases consists of up to 1000 lines, each naming a resident, a party, and a list of clubs to which the resident belongs. Names are alphanumeric and separated by a single space. Each resident appears in exactly one input line. Input lines do not exceed 80 characters. Every set of input ends with a blank line. \n\n#### Output\nFor each test case, follow the following format: Each line should name a council member followed by the club represented by the member. If several answers are possible, any will do. If no council can be formed, print the word \"Impossible.\" in a line. There will be a blank line in between two test cases. \n\n#### Sample Input\n```\n2\n\nfred dinosaur jets jetsons\njohn rhinocerous jets rockets\nmary rhinocerous jetsons rockets\nruth platypus rockets\n\nfred dinosaur jets jetsons\njohn rhinocerous jets rockets\nmary rhinocerous jetsons rockets\nruth platypus rockets\n```\n\n#### Sample Output\n```\nfred jetsons\njohn jets\nruth rockets\n\nfred jetsons\njohn jets\nruth rockets\n```\n',3000,65536,'0',2,27,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('229','Collector\'s Problem','#### Description\nSome candy manufacturers put stickers into candy bar packages. Bob and his friends are collecting these stickers. They all want as many different stickers as possible, but when they buy a candy bar, they don\'t know which sticker is inside. It happens that one person has duplicates of a certain sticker. Everyone trades duplicates for stickers he doesn\'t possess. Since all stickers have the same value, the exchange ratio is always 1:1. But Bob is clever: he has realized that in some cases it is good for him to trade one of his duplicate stickers for a sticker he already possesses.\n\nNow assume, Bob\'s friends will only exchange stickers with Bob, and they will give away only duplicate stickers in exchange with different stickers they don\'t possess. Can you help Bob and tell him the maximum number of different stickers he can get by trading stickers with his friends?\n\n#### Input\nThe first line of input contains the number of cases T (T<=20).\nThe first line of each case contains two integers n and m (2<=n<=10, 5<=m<=25). n is the number of people involved (including Bob), and m is the number of different stickers available.\nThe next n lines describe each person\'s stickers; the first of these lines describes Bob\'s stickers.\nThe i-th of these lines starts with a number ki<=50 indicating how many stickers person i has.\nThen follows ki numbers between 1 and m indicating which stickers person i possesses.\n\n#### Output\nFor each case, print the test case number together with the maximum number of different stickers Bob can get.\n\n#### Sample Input\n```\n2\n2 5\n6 1 1 1 1 1 1\n3 1 2 2\n3 5\n4 1 2 1 1\n3 2 2 2\n5 1 3 4 4 3\n```\n\n#### Sample Output\n```\nCase #1: 1\nCase #2: 3\n```\n\n#### Hint\n+ Explanation of the sample output:\n  - In the first case, no exchange is possible, therefore Bob can have only the sticker with number 1.\n  - In the second case, Bob can exchange a sticker with number 1 against a sticker with number 2 of the second person, and then this sticker against a sticker with number 3 or 4 of the third person, and now he has stickers 1, 2 and 3 or 1, 2 and 4.\n',3000,65536,'0',2,28,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('23','Party','#### Description\nFrog Frank is going to have a party, he needs a large empty rectangular place.\nHe ranted a large rectangular place in the forest, unfortunately the place is not\nempty, there are some trees in it. For solving the problem, he makes a map of the\nrectangular place with m × n grid, he paint the grid to black if there are some\ntrees in it. Now, all he needs to do is find the largest rectangular place in the map\ncontains no black grid.\n\n#### Task\nFrank is asking your help to find out, the area(the number of grids) of the largest\nrectangular place without black grid.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. For\neach test case, the first contains two integer number m and n $$$(1 \\leq m, n \\leq 10)$$$,\ndenotes the size of the map. In the next m lines, each line contains a string with\nn ’0’,’1’ characters, ’0’ denotes the empty grid, ’1’ denotes the black grid.\n\n#### Output\nFor each test case, print the area(the number of grids) of the largest rectangular\nplace in a line.\n\n#### Sample Input\n```\n2\n3 3\n111\n100\n111\n5 5\n10101\n00100\n00000\n00000\n00001\n```\n\n#### Sample Output\n```\n2\n12\n```\n',10000,32768,'0',0,22,'',0,'5','2018-11-05 00:31:14','2018-11-05 00:48:07'),('230','Data Flow','#### Description\nIn the latest Lab of IIUC, it requires to send huge amount of data from the local server to the terminal server. The lab setup is not yet ready. It requires to write a router program for the best path of data. The problem is all links of the network has a fixed capacity and cannot flow more than that amount of data. Also it takes certain amount of time to send one unit data through the link. To avoid the collision at a time only one data unit can travel i.e. at any instant more than one unit of data cannot travel parallel through the network. This may be time consuming but it certainly gives no collision. Each node has sufficient buffering capability so that data can be temporarily stored there. IIUC management wants the shortest possible time to send all the data from the local server to the final one.\n\n[[File:C29.gif|center]]\n\nFor example, in the above network if anyone wants to send 20 unit data from A to D, he will send 10 unit data through AD link and then 10 unit data through AB-BD link which will take 10+70=80 unit time. \n\n#### Input\nEach input starts with two positive integers $$$N (2 \\leq N \\leq 100)$$$, $$$M (1 \\leq M \\leq 5000)$$$. In next few lines the link and corresponding propagation time will be given. The links are bidirectional and there will be at most one link between two network nodes. In next line there will be two positive integers D, K where D is the amount of data to be transferred from 1st to N\'th node and K is the link capacity. Input is terminated by EOF.\n\n#### Output\nFor each dataset, print the minimum possible time in a line to send all the data. If it is not possible to send all the data, print \"Impossible.\". The time can be as large as $$$10^{15} \\,$$$.\n\n#### Sample Input\n```\n4 5\n1 4 1\n1 3 3\n3 4 4\n1 2 2\n2 4 5\n20 10\n4 4\n1 3 3\n3 4 4\n1 2 2\n2 4 5\n20 100\n4 4\n1 3 3\n3 4 4\n1 2 2\n2 4 5\n20 1\n```\n\n#### Sample Output\n```\n80\n140\nImpossible.\n```\n',3000,65536,'0',2,29,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('231','Software Allocation','#### Description\nA computing center has ten different computers (numbered 0 to 9) on which applications can run. The computers are not multi-tasking, so each machine can run only one application at any time. There are 26 applications, named A to Z. Whether an application can run on a particular computer can be found in a job description (see below).\n\nEvery morning, the users bring in their applications for that day. It is possible that two users bring in the same application; in that case two different, independent computers will be allocated for that application.\n\nA clerk collects the applications, and for each different application he makes a list of computers on which the application could run. Then, he assigns each application to a computer. Remember: the computers are not multi-tasking, so each computer must handle at most one application in total. (An application takes a day to complete, so that sequencing i.e. one application after another on the same machine is not possible.)\n\n+ A job description consists of\n  - one upper case letter A...Z, indicating the application.\n  - one digit 1...9, indicating the number of users who brought in the application.\n  - a blank (space character.)\n  - one or more different digits 0...9, indicating the computers on which the application can run.\n  - a terminating semicolon \';\'.\n  - an end-of-line. \n\n#### Input\nFor each day it contains one or more job descriptions, separated by a line containing only the end-of-line marker. The input file ends with the standard end-of-file marker. For each day your program determines whether an allocation of applications to computers can be done, and if so, generates a possible allocation. \n\n#### Output\nFor each day it consists of one of the following:\n+  ten characters from the set {\'A\'...\'Z\' , \'_\'}, indicating the applications allocated to computers 0 to 9 respectively if an allocation was possible. An underscore \'_\' means that no application is allocated to the corresponding computer.\n+  a single character \'!\', if no allocation was possible. \n\n#### Sample Input\n```\nA4 01234;\nQ1 5;\nP4 56789;\n\nA4 01234;\nQ1 5;\nP5 56789;\n```\n\n#### Sample Output\n```\nAAAA_QPPPP\n!\n```\n\n',3000,65536,'0',2,30,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('232','The Dog Task','#### Description\nHunter Bob often walks with his dog Ralph. Bob walks with a constant speed and his route is a polygonal line (possibly self- intersecting) whose vertices are specified by N pairs of integers $$$(X_i, Y_i)$$$ - their Cartesian coordinates.\n\nRalph walks on his own way but always meets his master at the specified N points. The dog starts his journey simultaneously with Bob at the point $$$(X_1, Y_1)$$$ and finishes it also simultaneously with Bob at the point $$$(X_N , Y_N)$$$.\n\nRalph can travel at a speed that is up to two times greater than his master\'s speed. While Bob travels in a straight line from one point to another the cheerful dog seeks trees, bushes, hummocks and all other kinds of interesting places of the local landscape which are specified by M pairs of integers $$$(X\'_j,Y\'_j)$$$. However, after leaving his master at the point $$$(X_i , Y_i)$$$ (where $$$1 \\leq i < N$$$) the dog visits at most one interesting place before meeting his master again at the point $$$(X_{i+1} , Y_{i+1})$$$.\n\nYour task is to find the dog\'s route, which meets the above requirements and allows him to visit the maximal possible number of interesting places. The answer should be presented as a polygonal line that represents Ralph\'s route. The vertices of this route should be all points $$$(X_i , Y_i)$$$ and the maximal number of interesting places $$$(X\'_j, Y\'_jX)$$$. The latter should be visited (i.e. listed in the route description) at most once.\n\nAn example of Bob\'s route (solid line), a set of interesting places (dots) and one of the best Ralph\'s routes (dotted line) are presented in the following picture: \n[[File:C31.gif|center]]\n\n\n#### Input\nThe first line of the input is an integer L, then a blank line followed by L datasets. There is a blank line between datasets.\n\nThe first line of each dataset contains two integers N and M, separated by a space $$$(2 \\leq N \\leq 100, 0 \\leq M \\leq 100)$$$. The second line contains N pairs of integers $$$X_1, Y_1, \\dots, X_N, Y_N$$$, separated by spaces, that represent Bob\'s route. The third line contains M pairs of integers $$$X\'_1, Y\'_1, \\dots, X\'_M, Y\'_M$$$, separated by spaces, that represent interesting places.\n\nAll points in the input file are different and their coordinates are integers not greater than 1000 by the absolute value. \n\n#### Output\nThe first line of each dataset should contain the single integer K - the number of vertices of the best dog\'s route. The second line should contain K pairs of coordinates $$$X\'\'_1, Y\'\'_1, \\dots, X\'\'_K, Y\'\'_K$$$, separated by spaces, that represent this route. If there are several such routes, then you may write any of them.\n\nPrint a blank line between datasets. \n\n#### Sample Input\n```\n1\n\n4 5\n1 4 5 7 5 2 -2 4\n-4 -2 3 9 1 2 -1 3 8 -3\n```\n\n#### Sample Output\n```\n6\n1 4 3 9 5 7 5 2 1 2 -2 4\n```\n',3000,65536,'0',2,31,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('233','A plug for Unix','#### Description\nYou are in charge of setting up the press room for the inaugural meeting of the United Nations Internet eXecutive (UNIX), which has an international mandate to make the free flow of information and ideas on the Internet as cumbersome and bureaucratic as possible.\n\nSince the room was designed to accommodate reporters and journalists from around the world, it is equipped with electrical receptacles to suit the different shapes of plugs and voltages used by appliances in all of the countries that existed when the room was built. Unfortunately, the room was built many years ago when reporters used very few electric and electronic devices and is equipped with only one receptacle of each type. These days, like everyone else, reporters require many such devices to do their jobs: laptops, cell phones, tape recorders, pagers, coffee pots, microwave ovens, blow dryers, curling irons, tooth brushes, etc. Naturally, many of these devices can operate on batteries, but since the meeting is likely to be long and tedious, you want to be able to plug in as many as you can.\n\nBefore the meeting begins, you gather up all the devices that the reporters would like to use, and attempt to set them up. You notice that some of the devices use plugs for which there is no receptacle. You wonder if these devices are from countries that didn\'t exist when the room was built. For some receptacles, there are several devices that use the corresponding plug. For other receptacles, there are no devices that use the corresponding plug.\n\nIn order to try to solve the problem you visit a nearby parts supply store. The store sells adapters that allow one type of plug to be used in a different type of outlet. Moreover, adapters are allowed to be plugged into other adapters. The store does not have adapters for all possible combinations of plugs and receptacles, but there is essentially an unlimited supply of the ones they do have.\n\n#### Input\nThe input will consist of several case. The first line of the input contains the number of cases, and it\'s followed bya blank line. The first line of each case contains a single positive integer n ( $$$1 \\leq n \\leq 100$$$) indicating the number of receptacles in the room. The next n lines list the receptacle types found in the room. Each receptacle type consists of a string of at most 24 alphanumeric characters. The next line contains a single positive integer m ( $$$1 \\leq m \\leq 100$$$) indicating the number of devices you would like to plug in. Each of the next m lines lists the name of a device followed by the type of plug it uses (which is identical to the type of receptacle it requires). A device name is a string of at most 24 alphanumeric characters. No two devices will have exactly the same name. The plug type is separated from the device name by a space. The next line contains a single positive integer k ( $$$1 \\leq k \\leq 100$$$) indicating the number of different varieties of adapters that are available. Each of the next k lines describes a variety of adapter, giving the type of receptacle provided by the adapter, followed by a space, followed by the type of plug.\n\nThere\'s a blank line between test cases. \n\n#### Output\nFor each case, print a line containing a single non-negative integer indicating the smallest number of devices that cannot be plugged in. Print a blank line between cases.\n\n#### Sample Input\n```\n1\n\n4\nA\nB\nC\nD\n5\nlaptop B\nphone C\npager B\nclock B\ncomb X\n3\nB X\nX A\nX D\n```\n\n#### Sample Output\n```\n1\n```\n',3000,65536,'0',2,32,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('234','Gopher II','#### Description\n[[Image:C33.jpg|right|thumb|Gopher]]\n\nThe gopher family, having averted the canine threat, must face a new predator.\n\nThe are n gophers and m gopher holes, each at distinct (x, y) coordinates. A hawk arrives and if a gopher does not reach a hole in s seconds it is vulnerable to being eaten. A hole can save at most one gopher. All the gophers run at the same velocity v. The gopher family needs an escape strategy that minimizes the number of vulnerable gophers.\n\n#### Input\nThe input contains several cases. The first line of each case contains four positive integers less than 100: n, m, s, and v. The next n lines give the coordinates of the gophers; the following m lines give the coordinates of the gopher holes. All distances are in metres; all times are in seconds; all velocities are in metres per second.\n\n#### Output\nOutput consists of a single line for each case, giving the number of vulnerable gophers. \n\n#### Sample Input\n```\n2 2 5 10\n1.0 1.0\n2.0 2.0\n100.0 100.0\n20.0 20.0\n```\n\n#### Sample Output\n```\n1\n```\n',3000,65536,'0',2,33,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('235','The Problem with the Problemsetter','#### Description\nThe number of students interested to participate in this year\'s Intra-BUET Programming Contest is huge. Since it is very difficult to accommodate such a large number of students in our labs, we have decided to arrange a Screening Test. The test will be paper-based and may include as many as 100 analytical problems from as many as 20 categories. I have been assigned the job of setting problems for this test.\n\nAt first, the job seemed to be very easy since I was told that I would be provided with a pool of about 1000 analytical problems already divided into appropriate categories. But after getting the problems I discovered that for many problems the original authors were not sure about the appropriate categories and so they wrote down multiple category-names in the category fields. Since in the Screening Test a problem cannot be placed under more than one category and the number of problems to be set under each category is fixed, setting problems for this test is not actually easy.\n\nI know that a program can be written that can do the job automatically. But since I don\'t like writing programs, I seek your help. \n\n#### Input\nThe input file may contain multiple test cases. Each test case begins with a line containing two integers: $$$n_k$$$ and $$$n_p$$$ ($$$2 \\leq n_k \\leq 20$$$, $$$n_k \\leq n_p \\leq 1,000$$$) where $$$n_k$$$ is the number of categories and np is the number of problems in the pool. The second line contains $$$n_k$$$ positive integers where the i-th integer specifies the number of problems to be included in category $$$i (1 \\leq i \\leq n_k)$$$ of the test. You may assume that the sum of these $$$n_k$$$ integers will never exceed 100. The j-th ($$$1 \\leq j \\leq n_p$$$) of the next $$$n_p$$$ lines contains the category information of the j-th problem in the pool. A category specification for a problem start with a positive integer not greater than $$$n_k$$$, specifying the number of categories in one of which this problem can be included, followed by the category numbers. Category numbers are positive integers not greater than $$$n_k$$$.\n\nA test case containing two zeros for $$$n_k$$$ and $$$n_p$$$ terminates the input.\n\n#### Output\nFor each test case in the input print a line containing either 1 or 0 depending on whether or not problems can be successfully selected form the pool under the given restrictions (1 for success and 0 for failure). In case of successful selection print nk additional lines where the i-th ($$$1 \\leq i \\leq n_k$$$) of these lines contains the problem numbers that can be included in category i. Problem numbers are positive integers not greater then np and two problem numbers must be separated by a single space character. Note that, in case of successful selection any valid selection will be accepted.\n\n#### Sample Input\n```\n3 15\n3 3 4\n2 1 2\n1 3\n1 3\n1 3\n1 3\n3 1 2 3\n2 2 3\n2 1 3\n1 2\n1 2\n2 1 2\n2 1 3\n2 1 2\n1 1\n3 1 2 3\n3 15\n7 3 4\n2 1 2\n1 1\n1 2\n1 2\n1 3\n3 1 2 3\n2 2 3\n2 2 3\n1 2\n1 2\n2 2 3\n2 2 3\n2 1 2\n1 1\n3 1 2 3\n0 0\n```\n\n#### Sample Output\n```\n1\n8 11 12\n1 6 7\n2 3 4 5\n0\n```\n\n',3000,65536,'0',2,34,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('236','Fire! Fire!! Fire!!!','#### Description\nThe ACM (Asian Cultural Museum) authority is planning to install fire exits in its galleries in order to handle the emergency situation arising in case of a sudden fire. The museum is a collection of numerous interconnected galleries. The galleries are connected by corridors in such a way that from any gallery there is exactly one path to reach any other gallery without visiting any intermediate gallery (a gallery that is on that path) more than once.\n\nHowever, in order to reduce installation cost, it has been decided that not every gallery will have a fire exit. Fire exits will be installed in such a way that if any gallery does not have a fire exit then at least one of its adjacent galleries must have one and for each corridor at least one of the two galleries it connects must have a fire exit.. You are hired to determine where to put the fire exits under this constraint.\n\nHowever, as a first step, you are expected to determine the minimum number of fire exits required.\n\n#### Input\nThe input file may contain multiple test cases. The first line of each test case contains an integer $$$N (1 \\leq N \\leq 1,000)$$$ indicating the number of galleries in this test case. Then follow N lines where the i-th ($$$1 \\leq i \\leq N$$$) line is the adjacency list of the i-th gallery (Each gallery is given a unique identification number from 1 to N for convenience). The adjacency list for gallery i starts with an integer $$$n_i (0 \\leq n_i \\leq N - 1)$$$ indicating the number of galleries adjacent to this gallery, followed by $$$n_i$$$ integers giving the identification numbers of those galleries.\n\nA test case containing a zero for N terminates the input. \n\n#### Output\nFor each test case in the input file print a line containing the minimum number of fire exits required to meet the given constraint.\n\n#### Sample Input\n```\n4\n3 2 3 4\n1 1\n1 1\n1 1\n16\n4 6 12 15 16\n3 3 8 10\n4 2 4 6 9\n1 3\n1 6\n3 1 3 5\n1 15\n1 2\n1 3\n1 2\n1 16\n1 1\n1 15\n1 15\n4 1 7 13 14\n2 1 11\n0\n```\n\n#### Sample Output\n```\n1\n6\n```\n',3000,65536,'0',2,35,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('237','Hyper Toy Soldiers','#### Description\n\nAlan\'s father has bought him a box of toy soldiers, k red soldiers, k green soldiers, and one gold soldier. There is a m x n board, each square has a height $$$h_{ij}\\,$$$,and all squares are big enough to hold all the soldiers. At first, each soldier is placed in a square (not neccesarily all different), and t goal squares are chosen, each assigned with an \'importance value\' ri. The goal is to move soldiers on these t squares so that the ith square has exactly ri soldier(s) on it. Each soldier has to be on one of the t squares, so it\'s guaranteed that the sum of all ri is equal to 2k+1. \n\nEach time, a soldier can move to an adjacent(north, south, east or west) square, but it can\'t move outside the board. Red soldiers can only climb up, so it can move only if the target square is not lower than the current square; Green soldiers can only jump down, so it can move only if the target square is not higher than the current square; The gold soldier can move freely on the board. \n\nSince it may be impossible to achieve the goal, Alan is allowed to use a kind of magic. Every time he uses the magic, he can do a permutation of all the soldiers(that is, he can do an arbitrary number of exchanges, but he cannot move any soldier). \n\nHelp Alan to use least possible number of magic to achieve the goal.\n\n#### Input\n\nThe first line of the input contains the number of test cases t (1<=t<=10). Each test case begins with a line containing 4 integers m, n, k, t (2<=m,n<=100, 1<=k<=50, 1<=t<=2k+1). The second line contains 2k+1 pairs (xi,yi) indicating the initial positions of the soldiers. The first k pairs describe red soldiers, the following k describe the green soldiers, and the last one describe the gold soldier. The third line contains t triples (xi,yi,ri) indicating the positions and importance value of the goal squares. The following m lines each contains n integers, indicating the heights of squares. The ith integer of the jth line is the height of square (xi,yj). Heights are integers between 0 and 100. \n\n#### Output\n\nFor each test case, print on a single line the least number of magic needed. \n\n#### Sample Input\n```\n3\n4 6 2 5\n1 1 1 5 4 1 4 5 3 3\n1 2 1 2 6 1 3 2 1 3 6 1 4 3 1\n3 2 6 1 3 5\n2 1 7 4 4 6\n2 3 1 4 3 4\n4 3 4 3 2 3\n4 3 3 7\n1 1 1 2 1 3 4 1 4 2 4 3 1 1\n1 1 1 2 1 1 2 2 1 2 3 1 3 1 1 3 2 1 3 3 1\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n8 11 3 7\n1 1 1 5 1 9 8 1 8 5 8 9 4 5\n1 3 1 1 7 1 1 11 1 4 5 1 8 3 1 8 7 1 8 11 1\n9 2 3 1 9 2 3 1 9 2 3\n1 1 1 1 1 1 1 1 1 1 1\n9 9 9 9 9 9 9 9 9 9 9\n1 1 1 1 1 1 1 1 1 1 1\n9 9 9 9 9 9 9 9 9 9 9\n1 1 1 1 1 1 1 1 1 1 1\n9 9 9 9 9 9 9 9 9 9 9\n1 8 7 9 1 8 7 9 1 8 7\n```\n\n#### Sample Output\n```\n1\n0\n2\n```\n',3000,65536,'0',2,36,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('238','Euler Circuit','#### Description\nAn Euler circuit is a graph traversal starting and ending at the same vertex and using every edge exactly once. Finding an Euler circuit in an undirected or directed graph is a fairly easy task, but what about graphs where some of the edges are directed and some undirected? An undirected edge can only be traveled in one direction. However, sometimes any choice of direction for the undirected edges may not yield an Euler circuit.\n\nGiven such a graph, determine whether an Euler circuit exists. If so, output such a circuit in the format specified below. You can assume that the underlying undirected graph is connected.\n\n#### Input\nThe first line in the input contains the number of test cases, at most 20. Each test case starts with a line containing two numbers, V and E: the number of vertices (1 <= V <= 100) and edges (1 <= E <= 500) in the graph. The vertices are numbered from 1 to V. Then follows E lines specifying the edges. Each such line will be in the format a b type where a and b are two integers specifying the endpoints of the edge. type will either be the character \'U\', if the edge is undirected, or \'D\', if the edge is directed. In the latter case, the edge starts at a and ends at b. \n\n#### Output\nIf an Euler circuit exist, output an order in which the vertices can be traversed on a single line. The vertex numbers should be delimited with a single space, and the start and end vertex should be included both at the beginning and the end of the sequence. Since most graphs have multiple solutions, any valid solution will be accepted. If no solution exist, output the line \"No euler circuit exist\". Output a blank line between each test case. \n\n#### Sample Input\n```\n2\n6 8\n1 3 U\n1 4 U\n2 4 U\n2 5 D\n3 4 D\n4 5 U\n5 6 D\n5 6 U\n4 4\n1 2 D\n1 4 D\n2 3 U\n3 4 U\n```\n\n#### Sample Output\n```\n1 3 4 2 5 6 5 4 1\n\nNo euler circuit exist\n```\n\n',3000,65536,'0',2,37,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('239','Double NP-hard','#### Description\n\nIn this problem, a graph is a set of n vertices together with a set of m edges, where an edge is an unordered pair of different vertices (edges are undirected). The two vertices that comprise an edge are said to be that edge\'s endpoints. A vertex cover of a given graph G is a subset C of its vertices, such that each edge of G has at least one of its endpoints in C. An independent set of a given graph G is a subset S of its vertices, such that no edge of G has both of its endpoints in S. \n\nThe problem of finding a minimum vertex cover (that is, a vertex cover of the smallest possible size) for any graph is NP-hard. The problem of finding a maximum independent set of any graph is also NP-hard. That is a formal way of saying that no one knows whether there exists an algorithm that runs in time polynomial in n and solves any one of the two problems. \n\nWe want to define a class of problems that are even harder than the NP-hard problems. We are going to call them \"Double NP-hard\"! Your job is to solve the first Double NP-hard problem. \n\n#### Problem\n\nGiven a graph G, find a subset C of its vertices that is both a minimum vertex cover and a maximum independent set.\n\n#### Input\n\nThe first line of input gives the number of cases, N. N test cases follow. Each one starts with two lines containing n (0<=n<=1000) and m (0<=m<=100000) as above. The next m lines will each describe an edge of G as a pair of different vertices, which are numbered from 1 to n. \n\n#### Output\n\nFor each test case, output one line containing \"Case #x:\" followed by either \"Impossible\" if there is no answer or the size k of the set C. In the latter case, on the next line, print the k vertices of C in increasing order, separated by spaces. If there are multiple answers, print the lexicographically smallest one. \n\n#### Sample Input\n```\n4\n2\n1\n1 2\n0\n0\n10\n0\n4\n4\n1 2\n2 3\n3 4\n4 1\n```\n\n#### Sample Output\n```\nCase #1: 1\n1\nCase #2: 0\n\nCase #3: Impossible\nCase #4: 2\n1 3\n```\n',3000,65536,'0',2,38,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('24','Gift','#### Description\nFrank wants to prepare some special gift for all guests, he is going to make it by\nhimself. The gift is made of N different kinds of raw material. There are some\nraw material already available in the workspace and he will buy the reset at the\nsupermarket. The supermarket has all the raw material needed, each coming in\ntwo kind of packages, smaller and larger. Frank has budgeted M dollars for raw\nmaterial, and he wants to make as many gifts as possible.\n\n#### Task\nYou are given the information of all different kinds of raw material. Please tell\nFrank how many gifts he can make.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. First line\nof the test case has two integers $$$N(1 \\leq N \\leq 100)$$$ and $$$M(1 \\leq M \\leq 100, 000)$$$.Each\nof the following N lines contains 6 integers. There are specified in order.\n\n+ $$$A(10 \\leq A \\leq 100)$$$, the amount of the raw material needed for a gift;\n+ $$$B(1 \\leq B \\leq 100)$$$, the amount of the raw material already have;\n+ $$$S_{S}(1 \\leq S_S \\leq 100)$$$, the size of the smaller package;\n+ $$$P_{S}(10 \\leq P_S \\leq 100)$$$, the price of the smaller package;\n+ $$$S_{L}(S_{S} \\leq S_{L} \\leq 100)$$$, the size of the larger package;\n+ $$$P_{L}(P_{S} \\leq P_{L} \\leq 100)$$$, the price of the larger package.\n\n#### Output\nFor each test case, print a line contains the solution.\n\n#### Sample Input\n```\n2\n1 100\n10 8 10 10 13 11\n2 100\n10 8 10 10 13 11\n12 20 6 10 17 24\n```\n#### Sample Output\n```\n12\n5\n```',10000,32768,'0',0,23,'',0,'4','2018-11-05 00:31:14','2018-11-05 00:48:07'),('240','Mysterious Mountain','#### Description\nA group of M people is chasing a very strange animal. They believe that it will stay on a myterious mountain T, so they decided to climb on it and have a loot. The mountain looks ordinary, shown below:\n\n[[File:C39_1.gif|center]]\n\nThat is, the outline of the moutain consists of N+1 segments. The endpoints of them are numbered 0..N+1 from left to right. That is to say, x[i] < x[i+1] for all 0<=i<=n. And also, y[0]=y[n+1]=0, 1<=y[i]<=1000 for all 1<=y<=n.\n\nAccording to their experience, the animal is most likely to stay at one of the N endpoits numbered 1..N . And... funny enough, they soon discover that M=N, so each of them can choose a different endpoint to seek for the animal.\n\nInitially, they are all at the foot of the mountain. (i.e at (si,0) ) For every person i, he is planing to go left/right to some place (x,0) (where x is an integer - they do not want to take time to work out an accurate place) at the speed of wi, then climb directly to the destination along a straight line(obviously, no part of the path that he follows can be OVER the mountain - they can\'t fly) at the speed of ci. They don\'t want to miss it this time, so the teamleader wants the latest person to be as early as possible. How fast can this be done? \n\n#### Input\nThe input will contain no more than 10 test cases. Each test case begins with a line containing a single integer N(1<=N<=100). In the following N+2 lines, each line contains two integers xi and yi(0<=xi,yi<=1000) indicating the coordinate of the ith endpoints. in the following N lines, each line contains three intergers ci,wi and si describing a person(1<=ci < wi<=100, 0<=si<=1000) - the climbing speed, walking speed and initial position. The test case containing N=0 will terminate the input and should not be regarded as a test case. \n\n#### Output\nFor each test case, output a single line containing the least time that these people must take to complete the mission, print the answer with two decimal places. \n\n#### Sample Input\n```\n3\n0 0\n3 4\n6 1\n12 6\n16 0\n2 4 4\n8 10 15\n4 25 14\n0\n```\n\n#### Sample Output\n```\n1.43\n```\n\n#### Hint\nIn this example, Person 1 goes to (5,0) and climbs to endpoint 2, Person 2 climbs directly to endpoint 3. person 3 goes to (4,0) and climbs to endpoint 1. Shown below: \n[[File:C39_2.gif|center]]\n',3000,65536,'0',2,39,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('241','Gopher Strategy','#### Description\nGophers like to feed in the field, but they always have to look out for hawks that might hunt them. A group of gophers have decided to get more organized and need your help developing an escape strategy in case of a hawk attack.\n\nGiven the coordinates of m gophers and n holes in the field, what is the minimum time required for each gopher to reach a hole (at most one gopher per hole)? Every gopher runs in a straight line at a speed of 1 unit per second, and the group can tolerate the loss of at most k gophers. (Gophers are lost when they do not have enough time to reach an empty hole.) \n\n#### Input\nThe first line of input gives the number of cases, N. N test cases follow. Each one starts with a line containing the integers m, n and k (0 <= m, n <= 50, 0 <= k <= m). The next m lines will give the x,y-coordinates of the gophers. The n lines after that will give the coordinates of the holes. \n\n#### Output\nFor each test case, output the line \"Case #x:\", where x is the number of the test case. Then print the minimum number of seconds required for at least m-k gophers to reach a hole, rounded to 3 decimal places. Every answer will obey the formula\n\nfabs(ans*1e3 - floor(ans*1e3) - 0.5) > 1e-2\n\nPrint \"Too bad.\" if there is no solution. Print an empty line after each test case. \n\n#### Sample Input\n```\n4\n3 3 1\n0 0\n1 0\n2 0\n0 1\n1 1\n2 1.5\n3 3 1\n0 1\n1 2\n2 1\n1 0\n1 1\n2 0\n3 3 0\n0 1\n1 2\n2 1\n1 0\n1 1\n2 0\n1 0 0\n100.0 200.5\n```\n\n#### Sample Output\n```\nCase #1:\n1.000\n\nCase #2:\n1.000\n\nCase #3:\n1.414\n\nCase #4:\nToo bad.\n\n```\n',3000,65536,'0',2,40,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('242','Crime Wave - The Sequel','#### Description\nn banks have been robbed this fine day. m (greater than or equal to n) police cruisers are on duty at various locations in the city. n of the cruisers should be dispatched, one to each of the banks, so as to minimize the average time of arrival at the n banks. \n\n#### Input\nThe input file contains several sets of inputs. The description of each set is given below:\n\nThe first line of input contains 0 < n <= m <= 20. n lines follow, each containing m positive real numbers: the travel time for cruiser m to reach bank n.\n\nInput is terminated by a case where m=n=0. This case should not be processed.  \n\n#### Output\nFor each set of input output a single number: the minimum average travel time, accurate to 2 fractional digits.\n\n#### Sample Input\n```\n3 4\n10.0 23.0 30.0 40.0\n5.0 20.0 10.0 60.0\n18.0 20.0 20.0 30.0\n0 0\n```\n\n#### Sample Output\n```\n13.33\n```\n',3000,65536,'0',2,41,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('243','Warehouse','',3000,65536,'0',2,42,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('244','Forming Quiz Teams','',3000,65536,'0',2,43,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('245','Sabotage','',3000,65536,'0',2,44,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('246','Bomb, Divide and Conquer','#### Description\nThe enemy has n cities connected by m roads. We have bombers that can destroy roads. The Bomb, Divide and Conquer strategy dictates that if we separate the enemy\'s cities from each other, then the two (or more) pieces will be easier to secure. Bombing a road has a cost (fuel, risk factor, etc.) What is the minimum total cost of bombing enough roads to ensure that there is some pair of cities that have no path between them? A path is a sequence of connected roads. \n\n#### Input\nThe first line of input gives the number of cases, N. N test cases follow. Each one starts with two lines containing n (2<=n<=150) and m (0<=m<=n(n-1)/2). The next m lines contain m triples of integers denoting two different cities (between 1 and n) that are connected by a road and the cost of destroying that road (between 1 and 1000). \n\n#### Output\nFor each test case, output one line containing \"Case #x:\" followed by the total cost of disconnecting a pair of cities. \n\n#### Sample Input\n```\n4\n5\n4\n1 2 100\n2 3 299\n3 5 400\n5 4 99\n3\n3\n1 2 10\n2 3 20\n1 3 40\n4\n5\n1 2 10\n2 3 100\n3 4 10\n4 1 100\n1 3 10\n3\n1\n1 2 1000\n```\n\n#### Sample Output\n```\nCase #1: 99\nCase #2: 30\nCase #3: 30\nCase #4: 0\n```\n',3000,65536,'0',2,45,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('247','Playing Boggle','',3000,65536,'0',2,46,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('248','DRM','',3000,65536,'0',2,47,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('249','Full Tank?','',3000,65536,'0',2,48,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('25','Average','#### Description\nIn the kingdom of frogs, different frog may have different weight.\n\n#### Task\nYou are given a list of weight of frogs, find out the number of frogs whose weight\nis above the average of all.\n \n#### Input\nThe first line of input contains$$$ T(1 \\leq T \\leq 100)$$$, the number of test cases. First\nline of each test case contains a integers $$$N(0 \\leq N \\leq 10, 000)$$$, denotes the number\nof frogs in the kingdom. The following line contains $$$N$$$ positive integers, denotes\nthe weight, not greater than 100, 000.\n#### Output\nFor each test case, print a line contains the solution.\n#### Sample Input\n```\n2\n3\n1 2 3\n4\n10 20 30 40\n```\n#### Sample Output\n```\n1\n2\n```\n',10000,32768,'0',0,24,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('250','Masud Rana','',3000,65536,'0',2,49,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('251','Spanning Subtree','',3000,65536,'0',2,50,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('252','No more prerequisites, please!','',3000,65536,'0',2,51,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('253','The Sultan\'s Feast','',3000,65536,'0',2,52,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('254','Karpovich blocks','',3000,65536,'0',2,53,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('255','SAM I AM','#### Description\n[[Image:C54.gif|right]]\nThe world is in great danger!! Mental\'s forces have returned to Earth to eradicate humankind. Our last hope to stop this great evil is Sam “Serious” Stone. Equipped with various powerful weapons, Serious Sam starts his mission to destroy the forces of evil.\n\nAfter fighting two days and three nights, Sam is now in front of the temple KOPTOS where Mental\'s general Ugh Zan III is waiting for him. But this time, he has a serious problem. He is in shortage of ammo and a lot of enemies crawling inside the temple waiting for him. After rounding the temple Sam finds that the temple is in rectangle shape and he has the locations of all enemies in the temple.\n\nAll of a sudden he realizes that he can kill the enemies without entering the temple using the great cannon ball which spits out a gigantic ball bigger than him killing anything it runs into and keeps on rolling until it finally explodes. But the cannonball can only shoot horizontally or vertically and all the enemies along the path of that cannon ball will be killed.\n\nNow he wants to save as many cannon balls as possible for fighting with Mental. So, he wants to know the minimum number of cannon balls and the positions from which he can shoot the cannonballs to eliminate all enemies from outside that temple.\n\n#### Input\nHere, the temple is defined as a RXC grid. The first line of each test case contains 3 integers:  R(0<R<1001), C(0<C<1001) representing the grid of temple (R means number of row and C means number of column of the grid) and the number of enemies N(0<N<1000001) inside the temple. After that there are N lines each of which contains 2 integers representing the position of the enemies in that temple. Each test case is followed by a new line (except the last one). Input is terminated when R=C=N=0. The size of the input file is around 1.3 MB.\n\n#### Output\nFor each test case there will be one line output. First print the minimum number (m) of cannonballs needed to wipe out the enemies followed by a single space and then m positions from which he can shoot those cannonballs. For shooting horizontally print “r” followed by the row number and for vertical shooting print “c” followed by the column number. If there is more than one solution any one will do.\n\n#### Sample Input\n```\n4 4 3\n1 1\n1 4\n3 2\n \n4 4 2\n1 1\n2 2\n \n0 0 0\n```\n\n#### Sample Output\n```\n2 r1 r3\n2 r1 r2\n```\n',3000,65536,'0',2,54,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('256','Nuts and Bolts','#### Description\nOne afternoon your cell phone rings; it\'s your cousin Jimmy.\n\n\"Hi Cuz,\" he says, \"I need your help and I need it fast. I\'m in the middle of a programming contest and however hard I try, I can\'t get one problem to finish within the two second time limit.\"\n\n\"Hmm... well..., isn\'t that a bit illegal?\", you try to say to him. But he rattles on.\n\n\"I just snook out of the contest room and managed to send you my code and the sample I/O by email\", he continues without pausing. \"I will check my mail again in an hour, so please make it work for me.\"\n\n\"What about the problem description?\", you ask.\n\n\"Can\'t do\", he says, \"Zoroman the Head Judge is already on my tail, so I got to go. Bye, ... and, eh, thanks.\"\n\nAre you going to help him? \n\n<source lang=\'c\'>\n1. include <stdio.h>\n \n1. define MAX_BOLTS 500\n1. define MAX_NUTS  500\n \n/* global copy of the input data */\nint nuts,bolts;\nint fits[MAX_BOLTS][MAX_NUTS];\n\nvoid read_input_data(void){\n   int n,b;\n   \n   scanf(\"%d%d\",&bolts,&nuts);\n   for(b=0;b<bolts;b++){\n      for(n=0;n<nuts;n++){\n         scanf(\"%d\",&fits[b][n]);\n         }\n      }\n   }\n\n/* data used to match nuts with bolts */\nint nut_used[MAX_NUTS];\nint bestmatched;\n\nvoid init_match(void){\n   int n;\n   \n   bestmatched=0;\n   for(n=0;n<nuts;n++) nut_used[n]=0;\n   }\n   \nvoid match_bolt(int boltno, int matched){\n   int n;\n   \n   if(boltno==bolts){\n      if(matched>bestmatched) bestmatched=matched;\n      return;\n      }\n      \n   /* don\'t match this bolt */\n   match_bolt(boltno+1,matched);\n   \n   /* match with all unused nuts that fit this bolt */\n   for(n=0;n<nuts;n++) if(!nut_used[n] && fits[boltno][n]){\n      nut_used[n]=1;\n      match_bolt(boltno+1,matched+1);\n      nut_used[n]=0;\n      }\n   }\n   \nint main(){\n   int cases,caseno;\n   \n   scanf(\"%d\",&cases);\n   for(caseno=1;caseno<=cases;caseno++){\n      read_input_data();\n      init_match();\n      match_bolt(0,0);\n      printf(\"Case %d: \",caseno);\n      printf(\"a maximum of %d nuts and bolts \",bestmatched);\n      printf(\"can be fitted together\\n\");\n      }\n      \n   return 0;\n   }\n</source>\n\nThis is the code that Jimmy sent you by email.\n\n#### Sample Input\n```\n2\n3 4\n0 0 1 0\n1 1 0 1\n0 0 1 0\n5 5\n1 0 0 1 1\n1 1 0 0 0\n1 0 0 0 0\n0 1 1 0 0\n0 0 0 0 1\n```\n\n#### Sample Output\n```\nCase 1: a maximum of 2 nuts and bolts can be fitted together\nCase 2: a maximum of 5 nuts and bolts can be fitted together\n```\n\n',3000,65536,'0',2,55,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('257','Elegant Strings','#### Description\nA subsequence of a string $$$T = t_0t_1t_2 \\dots t_{n-1}$$$ is $$$T\' = t_{i0}t_{i1} \\dots t_{im}$$$ where $$$i_0 < i_1 < \\dots i_m$$$ and m < n.\n\nA substring of a string is a subsequence of the string where every element is consecutive.\n\nYou will be given a string S. P is the set of all the distinct substrings of S of length 2. Now the elegancy of each element of P is the square of the index (1-based) in S of the first letter of that substring. If a substring occurs multiple times only the first occurrence should be considered for the elegancy. Suppose, S = abcabd. This means P is consisted of the substrings ab, bc, ca and bd. And the elegancies of those substrings are 1, 4, 9 and 25 respectively.\n\nNow you will be given another string T. You have to split T to minimum amount of strings such that every string is a subsequence of T, any of the strings should not contain any substrings of length 2 which don’t belong to P. Every character of T should belong to exactly one string. If multiple ways to divide T to minimum amount of strings, you have to consider that which minimizes the total elegancy of all the strings. Elegancy of a string is the sum of elegancy of all the length 2 substrings of that string. For a one letter string the elegancy is 0. Total elegancy is the sum of elegancy of all the strings.\n\nLet’s say, S = abcabd and T = bcadzb. One of the valid ways to split T is: {bc, ab, d, z}. Note that {acb, d, z, b} is not a valid way because “acb” is not a subsequence in T. Also {cab, bdz} is not a valid way either because the string “bdz” contains “dz” which don’t belong to P although all the elements are subsequences.  Now the optimal subsequences for this are {bcab, z, d} which has total elegancy of (14 + 0 + 0) = 14. For this case you can’t split T to less than 3 subsequences and with 3 subsequences it is the minimal total elegancy. \n\n#### Input\nFirst line of the input contains a number X, the number of test cases which is at most 20. Each case starts with S. The next line contains T. Both S, T contains only lowercase letters. S consists of at most 1000 characters and T consists of at most 100 characters. There won’t be any blank lines between two lines.\n\n#### Output\nYou have to output two numbers K and C separated by a space where K is the minimum amount of strings possible by splitting T according to the above rules and C is the minimum total elegancy.\n\n#### Sample Input\n```\n1\nabcabd\nbcadzb\n```\n\n#### Sample Output\n```\n3 14\n```\n',3000,65536,'0',2,56,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('258','Ocean Currents','',3000,65536,'0',2,57,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('259','RevolC FaeLoN','',3000,65536,'0',2,58,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('26','Favorite Number','#### Description\nFrog Frank likes 30 more than likes 40, yet he likes 12 and 39 equally. This is\nbecause he likes numbers that have a lot of different prime factors. For example,\n30 have 3 prime factors (2,3 and 5) and 40 have 2(2 and 5) only. A prime number\nis a number that can be divided evenly only by itself and 1.\n\n#### Task\nYou are given a list of numbers, find out which of the numbers Frank likes most.\nIf there are more than one solutions, output the smallest.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. First\nline of each test case contains a integers $$$N(1 \\leq N \\leq 1, 024)$$$. The following line\ncontains N positive integers, all of them are not greater than 100, 000.\n\n#### Output\nFor each test case, print a line contains the solution.\n\n#### Sample Input\n```\n2\n10\n3 5 7 9 11 13 15 17 19 21\n11\n2 4 6 8 10 13 39 105 200 201 143\n```\n\n#### Sample Output\n```\n15\n105\n```\n',10000,32768,'0',0,25,'',0,'2','2018-11-05 00:31:14','2018-11-05 00:48:07'),('260','Maximizing the ICPC','',3000,65536,'0',2,59,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('261','Cheapest way','',3000,65536,'0',2,60,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('262','The 3-Regular Graph','',3000,65536,'0',2,61,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('263','Minefield','',3000,65536,'0',2,62,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('264','Towards Zero','',3000,65536,'0',2,63,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('265','Prim','',3000,65536,'0',2,64,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('266','Shopping Trip','',3000,65536,'0',2,65,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('267','Guards, Imbecile Guards','',3000,65536,'0',2,66,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('268','Tri-Isomorphism','',3000,65536,'0',2,67,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('269','Monkeys in the Emei Mountain','',3000,65536,'0',2,68,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('27','Anagram','#### Description\nAn anagram is formed by rearranging the letters of a word. You are given a string, please find out if it is an anagram of a word or not. No word will have have more than 50 characters.\n\n#### Input\nThe input will consist of a word on one line. The following line contains a number, $$$n (1 \\leq n \\leq 30,000)$$$, of strings to be tested.\n\n#### Output\nFor each test string, if the test string is identical to the source string, output \'IDENTICAL\', if it is an anagram, output \'ANAGRAM\' otherwise output \'NOT AN ANAGRAM\', in a single line. \n\n#### Sample Input\n```\ncares\n5\nscare\nraces\ncares\nanother\nacres\n```\n\n#### Sample Output\n```\nANAGRAM\nANAGRAM\nIDENTICAL\nNOT AN ANAGRAM\nANAGRAM\n```\n',10000,32768,'0',0,26,'',0,'9','2018-11-05 00:31:14','2018-11-05 00:48:07'),('270','Flying to Fredericton','',3000,65536,'0',2,69,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('271','Mall Mania','',3000,65536,'0',2,70,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('272','Pushing Boxes','',3000,65536,'0',2,71,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('273','Can U Win?','',3000,65536,'0',2,72,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('274','Dream','',3000,65536,'0',2,73,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('275','Snow Clearing','',3000,65536,'0',2,74,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('276','Classified','',3000,65536,'0',2,75,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('277','Sultan\'s Chandelier','',3000,65536,'0',2,76,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('278','Curious Fleas','',3000,65536,'0',2,77,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('279','Robbery','',3000,65536,'0',2,78,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('28','Adding 1s, 2s and 3s','#### Description\nInteger 4 can be expressed as a sum of 1s, 2s, and 3s in seven different ways as follows:\n+ 4=1+1+1+1,\n+ 4=1+1+2,\n+ 4=1+2+1,\n+ 4=2+1+1,\n+ 4=2+2,\n+ 4=1+3,\n+ 4=3+1.\n\nWrite a program that determines the number of ways in which a given integer can be expressed as a sum\nof 1s, 2s, and 3s. You may assume that the integer is positive and less than 20.\n\n#### Input\nThe input consists of T test cases. The number of test cases $$$(1\\leq T \\leq 100)$$$ is given in the first line of the input. Each test case consists of an integer written in a single line.\n\n#### Output\nPrint exactly one line for each test case. The line should contain an integer representing the number of\nways.\n\n#### Sample Input\n```\n2\n2\n4\n```\n\n#### Sample Output\n```\n2\n7\n```\n',10000,32768,'0',0,27,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('280','Flea circus','',3000,65536,'0',2,79,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('281','The most distant state','',3000,65536,'0',2,80,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('282','Cockroach Escape Networks','',3000,65536,'0',2,81,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('283','Manhattan','',3000,65536,'0',2,82,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('284','The Hybrid Knight','',3000,65536,'0',2,83,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('285','Adventure of Super Mario','',3000,65536,'0',2,84,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('286','From G to H and back','#### Description\nThere is a funny transformation that you can do with a graph. We start with an undirected graph, G, and build a new graph, H. G has n vertices and m edges. For each edge in G, we create a vertex in H. Two vertices in H are connected by an edge if and only if their corresponding edges in G share a vertex. H will have m vertices and p edges. \n\nThat\'s easy. But what about reconstructing G, given H?\n\n#### Input\nThe first line of input gives the number of cases, N. N test cases follow. Each one starts with two lines containing m (at most 320) and p. p lines follow, each containing two different vertices (numbered from 1 to m) in H which are connected by an edge. \n\n#### Output\nFor each test case, output one line containing \"Case #x:\" followed by either \"yes\" or \"no\", depending on whether there exists some graph G that produces the given graph H. \n\n#### Sample Input\n```\n2\n3\n3\n1 2\n2 3\n3 1\n4\n3\n1 2\n1 3\n1 4\n```\n\n#### Sample Output\n```\nCase #1: yes\nCase #2: no\n```\n',3000,65536,'0',2,85,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('287','Mountain Village','',3000,65536,'0',2,86,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('288','Walking Around Wisely','',3000,65536,'0',2,87,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('289','Demanding Dilemma','',3000,65536,'0',2,88,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('29','Arctic Network','#### Description\nThe Department of National Defense (DND) wishes to connect several northern outposts by a wireless\nnetwork. Two different communication technologies are to be used in establishing the network: every\noutpost will have a radio transceiver and some outposts will in addition have a satellite channel.\n\nAny two outposts with a satellite channel can communicate via the satellite, regardless of their location.\nOtherwise, two outposts can communicate by radio only if the distance between them does not exceed $$$D\\,$$$, which depends of the power of the transceivers. Higher power yields higher $$$D\\,$$$ but costs more. Due\nto purchasing and maintenance considerations, the transceivers at the outposts must be identical; that\nis, the value of $$$D\\,$$$ is the same for every pair of outposts.\n\nYour job is to determine the minimum $$$D\\,$$$ required for the transceivers. There must be at least one\ncommunication path (direct or indirect) between every pair of outposts.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. The first line of each test case contains\n$$$1 \\leq S \\leq 100$$$, the number of satellite channels, and $$$P (S < P \\leq 500)$$$, the number of outposts. P lines follow, giving the (x,y) coordinates of each outpost in km (coordinates are integers between 0 and 10000).\n\n#### Output\nFor each case, output should consist of a single line giving the minimum $$$D\\,$$$ required to connect the\nnetwork. Output should be specified to 2 decimal points.\n\n#### Sample Input\n```\n2\n2 4\n0 100\n0 300\n0 600\n150 750\n2 4\n0 100\n0 300\n0 600\n150 750\n```\n\n#### Sample Output\n```\n212.13\n212.13\n```\n',10000,32768,'0',0,28,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('290','Monitoring the Amazon','',3000,65536,'0',2,89,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('291','The least possible effort','',3000,65536,'0',2,90,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('292','The Necklace','',3000,65536,'0',2,91,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('293','Recruiter\'s Problem','',3000,65536,'0',2,92,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('294','Rings\'n\'Ropes','',3000,65536,'0',2,93,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('295','Test','',3000,65536,'0',2,94,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('296','Difference','',3000,65536,'0',2,95,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('297','TV game','',3000,65536,'0',2,96,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('298','Virtual Friends','',3000,65536,'0',2,97,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('299','Live From Mars','#### Description\nAt the 26th of august 2003, Mars was never so close to the Earth since 60.000 years. Taking advantage of this fact, the most powerful shortsighted telescope, Hubble, made an incredible discovery: there is life in Mars, mutant life indeed!\n\nProfessor B. Harper, who leads the team that made this discovery, found traces of a unicellular form of life. This kind of cell possess a new kind of DNA: a mutant DNA that is able to specialize its inner structure when exposed to radiations. Remarkably, B. Harper showed how to produce any desired mutation by an appropriate radiation.\n\nL. Kravitz, B. Harper\'s student, focuses its research work on a classification of these cells based on their capacity to mutate.\n\nYour work is to provide him a computer program that is able to find if two mutant DNA sequences of the same length can mutate to a common DNA sequence. \n#### Problem\nA mutant DNA sequence is composed by the usual DNA elements, say, for the sake of simplicity, A,B,C, and D and by mutant elements 1, 2, 3,4,5, and so on ...\n\nOnly the mutant elements can mutate, and they mutate only once to A, B, C or D. Then, a mutation is a process that takes a mutant DNA sequence and transforms some (eventually all) mutant elements to normal elements.\n\nFor instance, let be DNA1 the following mutant DNA sequence A1CD1A2D3B2C5 and MUT the following mutation [(1,A),(2,B),(3,C),(4,A)] (which means mutate all occurrences of 1 into A, 2 into B, 3 into C and 4 into A).MUT transforms DNA1 into DNA2: AACDAABDCBBC5. In this case, we say that DNA2 is a descendant of DNA1.\n\nTwo mutant DNA sequences of length n, x1,x2,... ,xn and y1,y2,... ,yn are equivalent under mutation if, for all i such that 1£ i £ n, xi and yi are both normal DNA elements and are equal, or xi and yi are both mutant DNA elements (and it is not required in this case that xi and yi are equal) \n\nLet DNA1 and DNA2 be two mutant DNA sequences of the same length. The shortest common mutation of DNA1 and DNA2, say MUT, is the shortest mutation that transforms DNA1 and DNA2 into descendants which are equivalent under mutation. MUT is the shortest in the sense that it implies the transformation of the smallest number of mutant elements. Note that MUT may not exist.\n\nSo, your work is to provide a program that reads two mutant DNA sequences and replies \n\nNO, if there is no descendents of these two sequences that are equivalent by mutation. In other words, if there is no common mutations. Otherwise, \nYES and a print of the shortest common mutation, if there exists such a mutation.\n#### Input\nThe input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. \n\n\nThe input for the program is structured as follow: \n\n+ the first line of the input contains the length m (with m£ 200) of the considered DNA sequences \n+ the next m lines contain one mutant DNA element (A,B,C,D or a natural number). They code the first mutant DNA sequence. \n+ the last m lines contain one mutant DNA element (A,B,C,D or a natural number). They code the second mutant DNA sequence. \n\n#### Output\n\nFor each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. \n\n\nThe output for the program is structured as follow: in case of failure (no mutations were found) the program simply display NO. In the other case, a mutation involving n mutant elements was found and so: \n\n+ the first line is the string YES; \n+ the n following lines describe the shortest common mutation; each line has the form m d\nwhere m is a mutant element (a natural number) and d the name of the associated normal DNA element (A, B, C or D). Note that m and d are separated by a single space. The elements of the mutation are sorted by the first component (the mutant element). Thus, the mutation involving 1 will be displayed before 2.\n\n#### Sample Input\n```\n7\nA\n1\n2\nB\n1\nD\n4\n1\n3\nB\n2\n3\nD\n4\n```\n\n#### Sample Output\n```\nYES\n1 A\n2 B\n3 A\n\n```\n',3000,65536,'0',2,98,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('3','Do Factoring','#### Description\nOne of the central idea behind much cryptography is factoring large numbers is computationally intensive. Let\'s try to factor some larger numbers.\n\n#### Input\nThe input will be a sequence of integers, one per line, terminated by EOF. All integer number less than $$$2^{63}\\,$$$.\n\n#### Output\nEach positive number from the input must be factored and all factors (other than 1) printed out. The factors must be printed in ascending order, and followed by a single blank line.\n\n#### Sample Input\n```\n90\n4\n5\n```\n\n#### Sample Output\n```\n2\n3\n3\n5\n\n2\n2\n\n5\n```\n',150000,65536,'0',0,2,'',1,'3','2018-11-05 00:31:14','2018-11-05 00:48:07'),('30','Mispelling','#### Description\nMisspelling is an art form that students seem to excel at. Write a program that removes the nth\ncharacter from an input string.\n\n#### Input\nThe first line of input contains a single integer $$$N, (1 \\leq N \\leq 1000)$$$ which is the number of datasets that\nfollow.\n\nEach dataset consists of a single line of input containing M, a space, and a single word made up of\nuppercase letters only. M will be less than or equal to the length of the word. The length of the\nword is guaranteed to be less than or equal to 80.\n\n#### Output\nFor each dataset, you should generate one line of output with the following values: The dataset\nnumber as a decimal integer (start counting at one), a space, and the misspelled word. The\nmisspelled word is the input word with the indicated character deleted.\n\n#### Sample Input\n```\n4\n4 MISSPELL\n1 PROGRAMMING\n7 CONTEST\n3 BALLOON\n```\n\n#### Sample Output\n```\n1 MISPELL\n2 ROGRAMMING\n3 CONTES\n4 BALOON\n```\n',1000,32768,'0',0,29,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('300','9 Puzzle','#### Description\n\nAlex has a puzzle her father gave her last Christmas. It has nine numbered squares arranged in a 3×3 matrix (three rows and three columns) and it\'s mechanically designed to allow the following types of movements: \n\nA horizontal right move shifts one position to the right each of the squares in the corresponding horizontal row (circularly). \nA vertical up move shifts one position upwards each of the squares in the corresponding vertical column (circularly). \n\nAlex\'s troublemaker little brother Jim snuck last night into his sister\'s bedroom and somehow tore the puzzle apart and put it back together. However, when Jim assembled the puzzle back, he might have done it in a configuration different from the original configuration of the puzzle. \n\nThe next morning, when Alex found her puzzle had been scrambled, she called you to help her to reset her puzzle to its original configuration (shown below) as quickly as possible, so her father won\'t realize that the puzzle was torn and scrambled. Of course, you should do it using only valid movements, as above described. \n\n[[Image:C99_1.jpg|center]]\n\nYour task is to write a program that, given a configuration, finds a way to set the puzzle to its original configuration spending the minimum possible number of moves to accomplish it, if the given puzzle is solvable. If this is not the case, the program should point it out. \n\n#### Input\n\nThe problem input consists of several cases, each one defined by three lines that describe a puzzle configuration. That is, lines correspond to a top-down description of the rows of the given configuration, and each line consist of three digits, separated by one blank character. \n\nThe end of the input is indicated by a line with a number 0. \n\n#### Output\n\nFor each puzzle in the input, you must print a line containing S , the minimum number of moves required to set the puzzle to its original configuration, followed by a space and 2*S characters indicating any sequence of S moves that solves the puzzle. \n\nA move is described by two characters: the first one must be H or V (H specifies a horizontal move, and V a vertical move), and the second one must be 1, 2, or 3 to indicate the row or the column to move. \n\nIf the puzzle is not solvable, you must output a line with the text ``Not solvable\'\'. \n\n#### Sample Input\n```\n2 3 1\n4 5 6\n7 8 9\n7 3 9\n2 5 1\n4 8 6\n1 2 3\n4 5 6\n7 9 8\n0\n```\n\n#### Sample Output\n```\n1 H1\n3 V1V3H1\nNot solvable\n```\n',3000,65536,'0',2,99,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('301','Eternal Truths','#### Description\n\nHistory is filled with legends and stories associated with mazes and labyrinths that have been shrouded by mystery.  \n\nIn some ancient religion a maze functioned as a cult center and symbolized mankind\'s search for all eternal truths.\n\nIn their initiation cult young people have to pass across a maze composed by squared chambers that can communicate with the ones at the north, south, east or west. They have to go from a start point to an end point passing by the shortest number of chambers and have to follow some ritual. They have to respect a sequence of 3 moves that will be repeated until the end point is reached. In the first move they pass through one chamber, in the second through two chambers and in the third through three chambers. In each of these moves they can’t change their direction. \n\n#### Problem\n\nGiven a map of the chambers disposed in a rectangular grid find the shortest path, in number of moves, from a start point to an end point.                              \n\nNotice that, in the sequence of moves the ritual described above must be respected. In each move you must pass through the corresponding number of chambers, without changing your direction during a move. You must begin with 1 chamber and repeat the sequence of 1, 2 and 3 chambers until the end is reached. The end can be reached in any of the states.\n \n[[File:D00.gif|center]]\n\n#### Input\nThe first line contains the number of test cases.\n\nThe first line of each test case contains two integers separated by a single space: R (2<= R<= 300) corresponding to the number of rows and C (2 <= C <= 300) corresponding to the number of columns. \n\nEach of the following R lines contains C characters. For each character, a dot  \".\"  represents a chamber, a hash mark \"#\" represents a wall and the capital letters \"S\" and \"E\"  represent the start and the end position respectively. \n\n#### Output\n\nThe output consists of one line for each test case containing the number of moves from \"S\" to \"E\" or the word \"NO\" if there is no solution. \n#### Sample Input\n```\n2\n5 4\nS...\n.#.#\n.#..\n.##.\n...E\n6 6 \n.S...E\n.#.##.\n.#....\n.#.##.\n.####.\n......\n```\n\n#### Sample Output\n```\nNO\n3\n```\n',3000,65536,'0',3,0,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('302','Buy one, get the rest free','#### Description\n\nIt\'s year 2258, and the age of airplanes is coming to an end. Everyone is using teleporters now. In an effort to stay competitive, the last remaining air travel company, GetsJo, is offering the following deal to its customers. Instead of buying one plane ticket, you can rent a whole flight from A to B. Each flight can carry a certain number of people and costs a certain amount of money. If you do that, then you can rent all of the other flights of equal or lesser cost for free! \n\nFor example, if there are 4 flights with costs $10000, $25000, $30000 and $40000, and you rent the $30000 flight, then you get the $10000 and $25000 flights for free. The total cost to rent these 3 flights is $30000. \n\nYou want to organize a large programming competition and would like to invite all of the participants to city n, where the competition will be held. Being a nice person, you decide to pay for everyone\'s airplane tickets. Given the locations of the participants and the list of available flights between now and the day of the competition, what is the cost of renting enough flights to get all of the participants to city n in the next d days? \n\n#### Input\n\nThe first line of input gives the number of cases, $$$N$$$. $$$N$$$ test cases follow. Each one starts with a line containing the number of cities ($$$1 \\leq n \\leq 30$$$), the number of days ($$$1 \\leq d \\leq 10$$$) until the competition and the number of flights ($$$0 \\leq m \\leq 1000$$$). $$$m$$$ lines follow, each one containing 5 integers: $$$u$$$, $$$v$$$, $$$c$$$, $$$p$$$ and $$$e$$$ ($$$1 \\leq u$$$,$$$v \\leq n$$$, $$$1 \\leq c \\leq 100$$$, $$$0 \\leq e < d$$$). This means that a flight that can carry $$$c$$$ passengers and costs $$$p$$$ dollars leaves city $$$u$$$ on day $$$e$$$ in the evening and arrives next day in the morning to city $$$v$$$. Day 0 is today, and all of the participants need to be in city $$$n$$$ in the evening of day $$$e$$$. Finally, $$$n$$$ integers ($$$z_1, z_2, \\dots , z_n$$$) follow, meaning that there are $$$z_i$$$ participants in city $$$i$$$ on day 0 ($$$0 \\leq z_i \\leq 100$$$). The maximum cost of a flight is 100000. There will never be two flights with the same $$$u$$$, $$$v$$$ and $$$e$$$ values. \n\n#### Output\n\nFor each test case, output one line containing \"Case #x:\" followed by the minimum required cost of flying all of the participants to city n before the end of day d. If no amount of money is enough, print \"Impossible\" instead. \n\n#### Sample Input\n```\n2\n5 4 5\n1 5 100 30000 0\n2 4 10 10000 0\n2 4 10 10000 1\n4 5 25 25000 2\n2 5 100 40000 3\n1 20 0 5 100\n2 1 1\n1 2 99 10400 0\n100 0\n```\n\n#### Sample Output\n```\nCase #1: 30000\nCase #2: Impossible\n```\n',3000,65536,'0',3,1,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('303','Weird Fence','#### Description\nIn the land of our great Sultan, the World Weird Fence (WWF) festival is going to take place again. For the festival, some poles are set up in a Cartesian plane. Each pole is colored in either red or blue color. You can connect two poles with a chain that consists of multi-colored rings thus creating a weird fence. Each pole has a single hook so you can not connect more than one chain to a pole. Now, though you have an unlimited supply of chains all having the same length, it’s important to note that each of the chains has a red ring at one end & a blue ring at the other end and you are only allowed to hook up a ring to a pole with same color. Also, it’s obvious that you can use a chain to connect two poles if & only if the chain’s length is greater than or equal to the linear distance of those two poles.\n\n[[File:D02.jpg|center]]\n\nGiven the co-ordinates of the poles & a positive integer k, write a program to find the minimum possible integer length for the chains so that at least k weird fences can be made. The fences may cross each other.\n\n#### Input\nThe first line of the input file is the number of test cases N. This line will be followed by a blank line. N test cases follow. First line of each test case contains two positive integers P & k where P is the number of poles on the plane. (1<=P,k<=100). Each of the next P lines has two integers X & Y & the word “red” / “blue”. X & Y are the co-ordinates of the pole (-1000<=X,Y<=1000) & the word is the color of that pole. No two poles will be in the same location. There will be a blank line between test cases.\n\n#### Output\nFor each test case output a single integer in a line which is the minimum integer length of the chains that is necessary to make at least k fences. If it is not possible to build k fences with the given constraints, print the word “Impossible” in a single line.\n\n#### Sample Input\n```\n2\n \n6 2\n-3 5 blue\n-3 3 red\n1 5 blue\n2 0 red\n4 6 blue\n4 -1 red\n \n6 4\n-3 5 blue\n-3 3 red\n1 5 blue\n2 0 red\n4 6 blue\n4 -1 red\n```\n\n#### Sample Output\n```\n6\nImpossible\n```\n',3000,65536,'0',3,2,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('304','2D-Nim','#### Description\n\nThe 2D-Nim board game is played on a grid, with pieces on the grid points. On each move, a player may remove any positive number of contiguous pieces in any row or column. The player who removes the last piece wins. For example, consider the left grid in the following figure.\n\n[[File:D03_1.jpg]]\n\nThe player on move may remove (A), (B), (A, B), (A, B, C), or (B,F), etc., but may not remove (A, C), (D, E), (H, I) or (B, G). For purposes of writing 2D-Nim-playing software, a certain programmer wants to be able to tell whether or not a certain position has ever been analyzed previously. Because of the rules of 2D-Nim, it should be clear that the two boards above are essentially equivalent. That is, if there is a winning strategy for the left board, the same one must apply to the right board. The fact that the contiguous groups of pieces appear in different places and orientations is clearly irrelevant. All that matters is that the same clusters of pieces (a cluster being a set of contiguous pieces that can be reached from each other by a sequence of one-square vertical or horizontal moves) appear in each. For example, the cluster of pieces (A, B, C, F, G) appears on both boards, but it has been reflected (swapping left and right), rotated, and moved. Your task is to determine whether two given board states are equivalent in this sense or not.\n\n#### Input\n\nThe first line of the input file contains a single integer t (1<=t<=12), the number of test cases,  followed by the input data for each test case. The first line of each test case consists of three integers W, H, and n (1 <=W, H <=100). W is the width, and H is the height of the grid in terms of the number of grid points. n(n<=3000) is the number of pieces on each board. The second line of each test case contains a sequence of n pairs of integers xi, yi, giving the coordinates of the pieces on the first board (0 =< xi < W and 0 =< yi< H). The third line of the test case describes the coordinates of the pieces on the second board in the same format.\n\n#### Output\n\nYour program should produce a single line for each test case containing a word YES or NO indicating whether the two boards are equivalent or not.\n\n#### Sample Input\n```\n2\n8 5 11\n0 0 1 0 2 0 5 0 7 0 1 1 2 1 5 1 3 3 5 2 4 4\n0 4 0 3 0 2 1 1 1 4 1 3 3 3 5 2 6 2 7 2 7 4\n8 5 11\n0 0 1 0 2 0 5 0 7 0 1 1 2 1 5 1 3 3 6 1 4 4\n0 4 0 3 0 2 1 1 1 4 1 3 3 3 5 2 6 2 7 2 7 4\n```\n\n#### Sample Output\n```\nYES\nNO\n```\n',3000,65536,'0',3,3,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('305','Dora Trip','#### Description\n\nNobita is in great trouble. Today he failed to hand in his homework again, so he was heavily punished at school. Learning that, his mother gets furious, and therefore assigns him many tasks to do - to buy vegetables at the market, to collect a parcel at the post office and a lot more. Nobita certainly does not want to see his teacher on his way, nor would he like to meet Jyian, the tough bully. As usual, he asks Doraemon for help. \n\n\"Oh no!\" cried Doraemon. \"My everywhere door is broken, and my small propellers have all run out of batteries...\" Well, that means Nobita has got to go without Doraemon\'s magic tools. \"Ah, I still have this. It may well be useful.\" From his 4th-dimensional pocket, Doraemon takes out a map of their living area. He then marks on it the places where Nobita has to visit by asterisks (\'*\'), and where Jyian or his teacher may appear by crosses (\'X\'). Now Nobita\'s job is simple - he has to find the shortest route, through which he would not visit any of the \'crosses\', and he could finish the maximum number of the jobs (if not all) given by mum. What he needs is just a computer program that works out the path... \n\nImagine that you are Nobita. Write the program. \n\n#### Input\n\nThe input file contains no more than 20 test cases. The details of each set are given as follows: \n\nThe first line of each case contains two integers r and c (1 <= r, c <= 20), which are the number of rows and columns of the map respectively. The next r lines, each with c characters, give the map itself. For each character, a space \' \' stands for an open space; a hash mark \'#\' stands for an obstructing wall; the capital letter \'S\' stands for the position of Nobita\'s house, which is where his journey is to start and end; the capital letter \'X\' stands for a dangerous place; and an asterisk \'*\' stands for a place he has to visit. The perimeter of the map is always closed, i.e., there is no way to get out from the coordinate of the \'S\'. The number of places that Nobita has to visit is at most 10. \n\nThe input file is terminated by a null case where r = c = 0. This case should not be processed. \n\n#### Output\n\nFor each test case, if Nobita cannot visit any target places at all, just print the line \"Stay home!\". Otherwise, your program should output the lexicographically smallest shortest path so that the number of target places that Nobita visits is maximized. Use the letters \'N\', \'S\', \'E\' and \'W\' to denote north, south, east and west respectively. Note that by \'north\' we mean facing upwards. You can be sure that the length of a correct output path will never exceed 200. \n\n#### Sample Input\n```\n5 5\n1. 1. 1. 1. 1. \n1.   S1. \n1.  XX1. \n1.   *1. \n1. 1. 1. 1. 1. \n5 5\n1. 1. 1. 1. 1. \n1. * X1. \n1. 1. 1. X1. \n1. S *1. \n1. 1. 1. 1. 1. \n5 5\n1. 1. 1. 1. 1. \n1. S X1. \n1.   X1. \n1.  1. *1. \n1. 1. 1. 1. 1. \n0 0\n```\n\n#### Sample Output\n```\nWWSSEEWWNNEE\nEEWW\nStay home!\n```\n',3000,65536,'0',3,4,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('306','Count the Faces.','#### Description\n\nA planer graph is defined as follows\n\n \n\nDefinition A planer graph is one that can be drawn on a plane in such a way that there are no “edge crossings,” i.e. edges intersects only at their common vertices.\n\n[[File:D02_1.jpg]]\n\nFigure: A planer graph\n \nThe figure above shows a planer graph. The six different faces of the graph are colored with different colors and are also numbered from 1 to 6. You will have to count the number of faces of a given planer graph. \n\n\n#### Input\n\nThe input contains several sets of inputs. Each set of input contains two integers N, E in the first line, where N denotes the number of nodes of the graph and E denotes the number of edges. The next E lines contain the description of E edges of a planer graph. Each edge description contains two case sensitive English alphabets n1 and n2, which indicates that vertex n1, and n2 are connected by an edge. \n\n+ Input is terminated by end of file.\n\n#### Output\n\nFor each set of input print the number of faces in that graph in a single line.\n\n#### Sample Input\n```\n1 0\n3 3\nA B\nB C\nA C\n```\n\n#### Sample Output\n```\n1\n2\n```\n',3000,65536,'0',3,5,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('307','Walk Through the Forest','#### Description\n\nJimmy experiences a lot of stress at work these days, especially since his accident made working difficult. To relax after a hard day, he likes to walk home. To make things even nicer, his office is on one side of a forest, and his house is on the other. A nice walk through the forest, seeing the birds and chipmunks is quite enjoyable. \nThe forest is beautiful, and Jimmy wants to take a different route everyday. He also wants to get home before dark, so he always takes a path to make progress towards his house. He considers taking a path from A to B to be progress if there exists a route from B to his home that is shorter than any possible route from A. Calculate how many different routes through the forest Jimmy might take. \n\n#### Input\n\nInput contains several test cases followed by a line containing 0. Jimmy has numbered each intersection or joining of paths starting with 1. His office is numbered 1, and his house is numbered 2. The first line of each test case gives the number of intersections N, 1 < N ≤ 1000, and the number of paths M. The following M lines each contain a pair of intersections a b and an integer distance 1 ≤ d ≤ 1000000 indicating a path of length d between intersection a and a different intersection b. Jimmy may walk a path any direction he chooses. There is at most one path between any pair of intersections.\n\n#### Output\n\nFor each test case, output a single integer indicating the number of different routes through the forest. You may assume that this number does not exceed 2147483647. \n\n#### Sample Input\n```\n5 6\n1 3 2\n1 4 2\n3 4 3\n1 5 12\n4 2 34\n5 2 24\n7 8\n1 3 1\n1 4 1\n3 7 1\n7 4 1\n7 5 1\n6 7 1\n5 2 1\n6 2 1\n0\n```\n\n#### Sample Output\n```\n2\n4\n```\n',3000,65536,'0',3,6,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('308','Catenyms','#### Description\n\nA catenym is a pair of words separated by a period such that the last letter of the first word is the same as the first letter of the second. For example, the following are catenyms: \ndog.gopher\ngopher.rat\nrat.tiger\naloha.aloha\narachnid.dog\n\nA compound catenym is a sequence of three or more words separated by periods such that each adjacent pair of words forms a catenym. For example, \naloha.aloha.arachnid.dog.gopher.rat.tiger\n\nGiven a dictionary of lower case words, you are to find a compound catenym that contains each of the words exactly once. \n\n#### input\n\nThe first line of standard input contains t, the number of test cases. Each test case begins with 3 <= n <= 1000 - the number of words in the dictionary. n distinct dictionary words follow; each word is a string of between 1 and 20 lowercase letters on a line by itself.\n\n#### output\nFor each test case, output a line giving the lexicographically least compound catenym that contains each dictionary word exactly once. Output \"***\" if there is no solution. \n\n#### Sample Input\n```\n2\n6\naloha\narachnid\ndog\ngopher\nrat\ntiger\n3\noak\nmaple\nelm\n```\n\n#### Sample Output\n```\naloha.arachnid.dog.gopher.rat.tiger\n  - *\n```',3000,65536,'0',3,7,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('309','Distant Jumping','#### Description\n\nThe country of Smoothland has N cities connected with M bidirectional roads. Recently one of Smoothish scientists invented a travelling device called jumper. The jumper can jump from city A to city B if there is a way from A to B over the roads containing at most three roads. \n\nThe scientist wants to test his jumper the following way. He starts from the Smoothish capital and jumps until he returns to the capital, visiting each city exactly once (actually, he visits the capital twice). Your task is to find a sequence of the scientist\'s jumps. Note: you visit only the cities you jump to, not the cities on the way which produces the jump. \n\n#### Input\n\nThe first line of the input contains the number of the test cases, which is at most 15. The descriptions of the test cases follow. The first line of a test case description contains two integers N and M (2 ≤ N ≤ 2000, 0 ≤ M ≤ 50000) separated by a space. Each of the next M lines contains two numbers A and B (1 ≤ A, B ≤ N, A ≠ B) representing the road between city A and city B. For any two cities, there is at most one road between them. The cities are numbered from 1; the capital city is the city 1. The test cases are separated by blank lines. \n\n#### Output\n\nFor each test case in the input, output `Impossible\' (without quotes) if there is no appropriate jump sequence. Otherwise output the sequence of jump descriptions separated by spaces and/or return symbols. The jump from city A to city B is outputted in the following way: the number of roads in the way corresponding to the jump (must be 1, 2, or 3), and the cities on this way starting at city A and ending at city B. If there are several solutions, output any of them. Print a blank line between test cases. \n\n#### Sample Input\n```\n2\n\n6 6\n1 2\n2 3\n1 3\n1 4\n4 5\n5 6\n\n2 0\n```\n\n#### Sample Output\n```\n1 1 2\n1 2 3\n2 3 1 4\n1 4 5\n1 5 6\n3 6 5 4 1\n\nImpossible\n```\n',3000,65536,'0',3,8,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('31','Conversions','#### Description\nConversion between the metric and English measurement systems is relatively simple. Often, it\ninvolves either multiplying or dividing by a constant. You must write a program that converts between\nthe following units:\n{| align=\"center\" cellspacing=\"0\" border=\"1\"\n|\'\'\'Type\'\'\'\n|\'\'\'Metric\'\'\'\n|\'\'\'English equivalent\'\'\'\n|-\n|Weight\n|1.000 kilograms\n|2.2046 pounds\n|-\n|\n|0.4536 kilograms\n|1.0000 pound\n|-\n|Volume\n|1.0000 liter\n|0.2642 gallons\n|-\n|\n|3.7854 liters\n|1.0000 gallon\n|}\n\n\n#### Input\nThe first line of input contains a single integer $$$N, (1 \\leq N \\leq 1000)$$$ which is the number of datasets that\nfollow.\nEach dataset consists of a single line of input containing a floating point (double precision) number, a\nspace and the unit specification for the measurement to be converted. The unit specification is one of\nkg, lb, l, or g referring to kilograms, pounds, liters and gallons respectively.\n\n#### Output\nFor each dataset, you should generate one line of output with the following values: The dataset\nnumber as a decimal integer (start counting at one), a space, and the appropriately converted value\nrounded to 4 decimal places, a space and the unit specification for the converted value.\n#### Sample Input\n```\n5\n1 kg\n2 l\n7 lb\n3.5 g\n0 l\n```\n\n#### Sample Output\n```\n1 2.2046 lb\n2 0.5284 g\n3 3.1752 kg\n4 13.2489 l\n5 0.0000 g\n```\n',1000,32768,'0',0,30,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('310','Forr','#### Description\n\nChico loves to drive, always in high speeds. Another Chico\'s love is Forr? a kind of music very popular in the Northeast Brazilian. But Chico\'s city doesn\'t have many Forr?parties and he needs to travel to other cities if he wishes to go to a Forr?party. \n\nChico, besides driving and Forr?dancing, also likes computers and programming. As he is a very good programmer, he decides to make a program to calculate the best way to go from his city to a city where will have a Forr?party. But, unfortunately, Chico needs to go out with his girlfriend and can not do the program, so he asked for your help. \n\nBut Chico\'s car has a problem with the brakes and he can not fix because if he does this he will not have money to buy the party\'s ticket and drink some beers. So you should find a route where Chico brakes only once, when he arrives in his destiny. Because he can not break, is dangerous pass by a city, so Chico should through the minimum number of cities in his travel. \n\n#### Input\n\nThe input file contains several input sets. The description of each set is given below:\n\nEach set starts with one integer R (0 < R ≤ 5000), the number of roads. Next R lines describe the roads and consist of two cities name, where each city name has at most 30 characters, and V (0 < V ≤ 1000) the Chico\'s car velocity when Chico travels between the cities A and B. You can assume that A and B are not the same city and can exist more than one road between two cities. After this there is a line with two city names, the fist is the city where Chico lives and the other is the city where the Forr?party will happen. \n\nThere will be at most 500 different cities. Input is terminated by EOF and there is a blank line beteween two input sets.\n\n#### Output\n\nFor each input set you should print the route for Chico to go from his city to the Forr?party city, with a blank space between two cities, so he brakes only once and through the minimum number of cities. If there is more than one route, print that where the cities appear first in the input (see the last input). If there is no possible route print \"No valid route.\", without the quotes. Print a blank line between the outputs. See the examples below for the exact input/output format.\n\n#### Sample Input\n```\n5\nNatal Assu 50\nMossoro PaudosFerros 80\nAssu Mossoro 40\nMarcelino PaudosFerros 100\nAssu PaudosFerros 65\nNatal Mossoro\n\n2\nLimoeiro MoradaNova 140\nLimoeiro Jaguaribe 130\nJaguaribe MoradaNova\n\n4\nMossoro Paris 233\nMossoro NewYork 412\nNewYork Tokio 501\nTokio Paris 420\nMossoro Tokio\n```\n\n#### Sample Output\n```\nNatal Assu PaudosFerros Mossoro\n\nJaguaribe Limoeiro MoradaNova\n\nMossoro Paris Tokio\n```\n',3000,65536,'0',3,9,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('311','Road Construction','#### Description\n\nBangladesh Government is seriously thinking about decreasing the intolerable traffic jam in Dhaka. They have tried lots of things to solve this problem. But all of you know while traveling in Dhaka, it is almost impossible to escape it L. The higher authority of Government has now realized the situation that they need different view and doings for this Herculean task. They come to you and as an expertise in computer science you give them a solution. The idea is simple, to construct new roads. But the problem is to ensure that the newly constructed road is properly utilized. And that will happen only if traveling cost is reduced for some routes. In that case traffic in those routes will automatically use the current road and thus will be distributed better in the network. \n\nIn this problem you will be given a map of Dhaka in terms of an undirected graph. Each node will denote a station and edge will represent a road. Nodes will be simple 2-D geometric points and the cost to travel a road is proportional to the Euclidian distance between two nodes. Now, you will suggest to construct one road temporarily. You have fixed the criterion to select the two nodes between which new road will be constructed. \n\n+         If there is a road between (u, v) then this pair will not be considered.\n+         Otherwise Cuv = Sum (PreCostij -CurCostij) where CurCostij is the shortest cost path from i to j if the road between (u, v) exists. And PreCostij is the shortest cost route before constructing the road between u and v.\n+         The (u, v) pair with maximum Cuv will be selected.\n\n#### Input\n\nEach test case starts with two positive integers N (≤ 50) and M (≤ 1225).  In next few lines the coordinates (x, y) of the nodes will be given. The value of each coordinate will be in the range of -1000 to 1000. In next few lines the road description will be given. Each road consists of two positive integers (u, v) where 1 ≤ u, v ≤ N. It means that there is a bidirectional road between u and v. It is guaranteed that the graph will be connected.\n\nInput is terminated by N = M = 0. This case should not be processed.\n\n#### Output\n\nIf new road construction helps the traffic condition then output will be a pair of nodes (u, v) between which the new road will be constructed. If there are several candidates then the shortest distant nodes will be eligible. If again draw occurs then node pair whose indices are small will be the answer.\n\nOn the other hand if the road network is balanced (New road will not improve the traffic situation), print “No road required”. Note that, if Cuv is less or equal to 1.0 then the network will be considered balanced.\n\n#### Sample Input\n```\n4 6\n0 0 0 2 2 0 2 2\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4 4\n0 0 0 2 2 0 2 2\n1 2\n2 3\n3 4\n4 1\n4 3\n0 0 0 2 2 0 2 2\n1 2\n2 3\n3 4\n0 0\n```\n\n#### Sample Output\n```\nNo road required\n1 3\n1 3\n```\n',3000,65536,'0',3,10,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('312','Sapitaur\'s labyrinth','\n#### Background\n\nIn the distant planet Omicron Persei 8, there is a huge ocean of rotten dark water. In the middle of the ocean, there is the island of Nevreturn, where the damned Omicronian prisoners are sent. And on the island, there is an intricate labyrinth; only those prisoners who are able to escape from the labyrinth are given the merciful death. The labyrinth is surrounded by a deep abysm, where the mythical Sapitaur --half frog, half bull-- lives, eating all those Omicronians who took a wrong course in the labyrinth. \n\nYou are an unfortunate Omicronian prisoner. Will you be able to escape from the labyrinth?\n\n#### Description\n\nSapitaur\'s Labyrinth consists of a matrix of cells. There are two kinds of cells, as shown in the figure below:\n\n+  NOWSE. There is a wall extending from the North-West of the cell to the South-East.\n\n+  NESOW. There is a wall extending from the North-East of the cell to the South-West.\n\n[[Image:D11.png|center]]\nLeft: the two kinds of cells. Middle: a sample labyrinth with 3x3 cells, and 2 paths to escape. Right: a labyrinth with 15x10 cells, and only 1 path to escape (in red).\n\nAs you can see in the figure above, the entrance to the labyrinth is in the north (the upper row of the matrix), the exit is in the south (the lower row of the matrix), and the abysm extends along both sides of the labyrinth (beyond the first and last column of the matrix).\n\nYou have to count how many different paths exist to go from the entrance to the exit of the labyrinth. Obviously, these paths cannot go through the abysm.\n\n#### Input\n\nThe first line of the input contains an integer M, indicating the number of test cases.\n\nFor each test case, the first line contains two integers N M, between 1 and 500, where N is the width of the labyrinth (number of columns) and M is the height (number of rows). M lines follow; each line has N characters: \"\\\"  for NOWSE cells; and \"/\"  for NESOW cells.\n\n#### Output\n\nFor each test case, the output should consist of an integer indicating the number of different paths from the entrance to the exit of the labyrinth.\n\n#### Sample Input\n```\n2\n3 3\n///\n\\\\\\\n///\n15 10\n////\\\\\\////\\\\//\n/\\\\\\\\\\/\\/\\/\\\\/\\\n\\\\\\//\\\\\\/\\////\\\n//\\\\\\/\\///\\//\\\\\n\\/\\//\\\\/\\\\\\\\/\\\\\n////////\\\\///\\/\n\\\\\\\\\\\\//\\\\\\\\\\/\\\n\\\\/\\//////\\\\///\n\\/\\\\/////\\/\\/\\/\n\\///\\///\\\\\\\\//\\\n```\n\n#### Sample Output\n```\n2\n1\n```\n',3000,65536,'0',3,11,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('313','Avoiding Jungle in the Dark','#### Description\n\nA Pilgrim is all set for a long journey to the Holy land. The journey is long and involves covering dangerous grounds. In particular, he needs to go through two types of land, plain and jungles. It is safe to be located on a plain ground during any hour of the day, but traveling into or staying in the jungle must be avoided during dark hours. Also, the Pilgrim is a human so he must take rests. He can not travel continuously for more than 16 hours; he will need a rest after that. However, he can decide to have a rest anytime he wants, even after getting up from one rest session. Once he decides to take a rest, he must do so for exactly 8 hours. \n\nGiven the map of the route, help the Pilgrim to determine the minimum time that would be required to travel from the starting position to the destination. \n\n#### Input\n\nThe first line of input contains a positive integer T<=100. Each of the next T lines contains a string of length at least 2 and at most 1000. The string will always begin with an S and end with a D. The characters in between will be either a ‘.’ Or ‘*’, quotes for clarity.  Here a ‘.’ represents a plain land and ‘*’ a jungle. It takes exactly one hour to travel from one position to the next and the Pilgrim never travels backward. Note that he is always located at the left most position of a particular land and when he travels to the next land, he travels for a full hour to the reach the left most position of the next land.  \n\n#### Output\n\nFor each case of input there will be one line of output. It will first contain the case number followed by the minimum time required to reach the destination. In case it is not possible to reach the destination, output -1. Note that he starts his journey from the position marked S and finishes at D. On the first day of his journey, he is located on S at 6 AM. Dark hours are considered to be the time between 6 PM to 6 AM inclusive.\n\n#### Sample Input\n```\n3\nS.......D\nS...****................***.D\nS***********.***********D\n```\n\n#### Sample Output\n```\nCase #1: 8\nCase #2: 36\nCase #3: -1\n```\n',3000,65536,'0',3,12,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('314','Dijkstra, Dijkstra.','#### Description\n\nDexter: \"You don\'t understand. I can\'t walk...\nthey\'ve tied my shoelaces together.\"\nTopper Harley: \"A knot. Bastards!\"  \nJim Abrahams and Pat Proft,\n\"Hot Shots! Part Deux.\" \n\nYou are a political prisoner in jail. Things are looking grim, but fortunately, your jailmate has come up with an escape plan. He has found a way for both of you to get out of the cell and run through the city to the train station, where you will leave the country. Your friend will escape first and run along the streets of the city to the train station. He will then call you from there on your cellphone (which somebody smuggled in to you inside a cake), and you will start to run to the same train station. When you meet your friend there, you will both board a train and be on your way to freedom. \n\nYour friend will be running along the streets during the day, wearing his jail clothes, so people will notice. This is why you can not follow any of the same streets that your friend follows - the authorities may be waiting for you there. You have to pick a completely different path (although you may run across the same intersections as your friend). \n\nWhat is the earliest time at which you and your friend can board a train? \n\n#### Problem\n\nGiven a weighed, undirected graph, find the shortest path from S to T and back without using the same edge twice. \n\n#### Input\n\nThe input will contain several test cases. Each test case will begin with an integer n (2<=n<=100) - the number of nodes (intersections). The jail is at node number 1, and the train station is at node number n. The next line will contain an integer m - the number of streets. The next m lines will describe the m streets. Each line will contain 3 integers - the two nodes connected by the street and the time it takes to run the length of the street (in seconds). No street will be longer than 1000 or shorter than 1. Each street will connect two different nodes. No pair of nodes will be directly connected by more than one street. The last test case will be followed by a line containing zero. \n\n#### Output\n\nFor each test case, output a single integer on a line by itself - the number of seconds you and your friend need between the time he leaves the jail cell and the time both of you board the train. (Assume that you do not need to wait for the train - they leave every second.) If there is no solution, print \"Back to jail\". \n\n#### Sample Input\n```\n2\n1\n1 2 999\n3\n3\n1 3 10\n2 1 20\n3 2 50\n9\n12\n1 2 10\n1 3 10\n1 4 10\n2 5 10\n3 5 10\n4 5 10\n5 7 10\n6 7 10\n7 8 10\n6 9 10\n7 9 10\n8 9 10\n0\n```\n\n#### Sample Output\n```\nBack to jail\n80\nBack to jail\n```\n',3000,65536,'0',3,13,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('315','Palindromic Subsequence','#### Description\n\nA Subsequence is a sequence obtained by deleting zero or more characters in a string. A Palindrome is a string which when read from left to right, reads same as when read from right to left. Given a string, find the longest palindromic subsequence. If there are many answers to it, print the one that comes lexicographically earliest. \n\nConstraints \n\n+ Maximum length of string is 1000. \n+ Each string has characters `a\' to `z\' only. \n\n#### Input\n\nInput consists of several strings, each in a separate line. Input is terminated by EOF. \n\n#### Output\n\nFor each line in the input, print the output in a single line. \n\n#### Sample Input\n```\naabbaabb\ncomputer\nabzla\nsamhita\n```\n\n#### Sample Output\n```\naabbaa\nc\naba\naha\n```\n',3000,65536,'0',3,14,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('316','The Orc Attack','#### Description\n\n[[File:D15_1.jpg|left]]\nGar\'dal Grimsight, the hero of the Orc horde, is planning a massive attack on the human stronghold. But to overcome the stiff resistance of the humans, Grimsight would need an army of mammoth size. Realizing this, he wastes no time - all his five buildings start to produce units on his command. The Altar of Storms, the Barracks, the Beastiary, the Spirit Lodge and the Tauren Totem - these are his five unit producing buildings. These buildings are strategically placed in different locations but can have a rally point where the units are sent as soon as they are produced. This gives Grimsight a good coverage of the territory as well as the flexibility of unit movement. \n\n[[Image:D15_2.jpg|center]]\nNow before Grimsight wages the war, the units produced need to meet at this rally point in the map. This point should be chosen in a way that the shortest distance from the five unit producing buildings to this location is equal. If there are multiple such spots, the units would gather in a place from where the shortest distance to the farthest point in the map is the minimum. Your task is to help the belligerent hero in determining this minimum shortest distance of the farthest point. \n\n[[File:D15_3.jpg|left]] \nHowever, a small problem remains. The shortest distance between two points in the map is not necessarily the straight line distance between them. Trees, hills and water sheds can act as obstacle for the free movement of the units. So the units may need to go through different locations to get to the point where they are intended to go. If the distances between all these locations in the map are given, then it is possible to compute the shortest distance traveled by the units. The rally point is one such location in the map that we need to find. To keep it simple, we can treat the buildings as locations in the map as well. You may be relieved to know that in Grimsight\'s world all the units move from one location to another in the shortest possible ways only. \n\n\n \n[[File:D15_4.jpg|right]]\nHere is a sample scenario. The locations 1 through 5 are the five unit producing buildings. Apart from those,there are fivemore locations in the map. As we can see, the locations 9 and 7 are equidistant from the five unit producing buildings. So they are the candidates for the rally point. But we would choose location 9 over location 7 as the farthest location from 7 has a cost of 51 whereas the farthest location from 9 would incur a cost of 40. So the cost that Grimsight wants to measure is this distance cost 40. \n\nPlease note that the sample input/output section does not include the example shown here. \n\n#### Input\n\nThere can be multiple test cases. The first line of input gives you the number of test cases, T ( 1 <= T <= 20). Then T test cases follow. The first line of each input gives you the number of locations, L ( 5 < L <=100), followed by the number of distance information between the locations, D ( 1 <= D <= 1000). Each of the next D lines would contain three integers U ( 1 <= U <= L), V ( 1 <= V <= L) and C ( 1 <= C <= 1000) indicating a distance of cost C between the locations U and V. There may be multiple occurrences of the same U, V pair in the input - it is up to you to decide which one to use. You should remember that a unit does not need to cover any distance if it remains static. We would consider the locations 1 through 5 to be the five buildings of our interest. \n\n#### Output\n\nFor each of the test case, you need to print one line of output. The output for each test case should start with the serial number of the map, followed by the minimum possible distance from the farthest point. This distance, as we have already mentioned, has to be measured from the rally point which is equidistant from the five buildings. It is implied that all the locations in the map should be reachable from this point. When such a point does not exist you should print a `-1\' instead. \n\n#### Sample Input\n```\n2\n7 11\n1 7 2\n2 7 2\n3 7 2\n5 7 2\n6 7 1\n1 6 1\n2 6 1\n3 6 1\n4 6 1\n5 6 1\n7 6 1\n6 1\n1 2 3\n```\n\n#### Sample Output\n```\nMap 1: 1\nMap 2: -1\n```\n',3000,65536,'0',3,15,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('317','Cactus','#### Description\n\n[[File:D16_1.jpg|right]]\nA directed graph is a set V of vertices and a set of E ∈ {V x V} edges. An edge (u,v) is said to be directed from u to v (the edge (v,u) has the opposite direction). A directed cycle in a directed graph is a sequence of edges \n\n(u1, v1), (u2, v2),…, (uk, vk) \n\nsuch that ui+1 = vi for i = 1, …, k-1, and u1=vk. The directed cycle is simple if ui ≠ uj whenever i ≠ j (i.e., if it does not pass through a vertex twice). \n\nIn a strongly connected directed graph, there is for every pair u,v of vertices some directed cycle (not necessarily simple) that visits both u and v. \n[[File:D16_2.jpg|center]]\n\nA directed graph is a cactus if and only if it is strongly connected and each edge is part of exactly one directed simple cycle. The first graph is a cactus, but the second one is not since for instance the edge (0,1) is in two simple cycles. \n\nThe reason for the name is that a \"cactus\" consists of several simple cycles connected to each other in a tree-like fashion, making it look somewhat like a cactus. \n\n#### Problem\n\nWrite a program that given a directed graph determines if it is a cactus or not. The graph can have several thousand vertices. \n\n#### Input\n\nThe first line contains an integer which is the number of test cases (less than 20). Each test case starts a line with an integer n ≥ 0 followed by line with an integer m ≥ 0 giving the number of vertices (n) and edges (m) in a graph (at most 10,000 of each). The vertices are numbered 0 through n-1. The following m lines describe the edges as pairs of numbers u v denoting an edge directed from u to v. There will never be more than one edge from u to v for any pair of vertices u and v. There are no loops, i.e., no edges from a vertex to itself. \n\n#### Output\n\nFor each test case output a single line with a single string. Output \"YES\" if the graph is a cactus, and output \"NO\" if it is not. \n\n#### Sample Input\n```\n2\n4\n5\n0 1\n1 2\n2 0\n2 3\n3 2\n4\n5\n0 1\n1 2\n2 3\n3 0\n1 3\n```\n\n#### Sample Output\n```\nYES\nNO\n```\n',3000,65536,'0',3,16,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('318','Commandos','#### Description\n\nA group of commandos were assigned a critical task. They are to destroy an enemy head quarter. The enemy head quarter consists of several buildings and the buildings are connected by roads. The commandos must visit each building and place a bomb at the base of each building. They start their mission at the base of a particular building and from there they disseminate to reach each building. The commandos must use the available roads to travel between buildings. Any of them can visit one building after another, but they must all gather at a common place when their task in done.  In this problem, you will be given the description of different enemy headquarters. Your job is to determine the minimum time needed to complete the mission. Each commando takes exactly one unit of time to move between buildings. You may assume that the time required to place a bomb is negligible. Each commando can carry unlimited number of bombs and there is an unlimited supply of commando troops for the mission.\n\n#### Input\n\nThe first line of input contains a number T<50, where T denotes the number of test cases. Each case describes one head quarter scenario. The first line of each case starts with a positive integer N≤100, where N denotes the number of buildings in the head quarter. The next line contains a positive integer R, where R is the number of roads connecting two buildings. Each of the next R lines contain two distinct numbers,  0≤u,v<N, this means there is a road connecting building u to building v. The buildings are numbered from 0 to N-1. The last line of each case contains two integers  0≤s,d<N. Where s denotes the building from where the mission starts and d denotes the building where they must meet.\n\nYou may assume that two buildings will be directly connected by at most one road. The input will be such that, it will be possible to go from any building to another by using one or more roads.\n\n#### Output\n\nFor each case of input, there will be one line of output. It will contain the case number followed by the minimum time required to complete the mission. Look at the sample output for exact formatting.\n\n#### Sample Input\n```\n2\n4\n3\n0 1\n2 1\n1 3\n0 3\n2\n1\n0 1\n1 0\n```\n\n#### Sample Output\n```\nCase 1: 4\nCase 2: 1\n```\n',3000,65536,'0',3,17,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('319','Where is the \'back\' button?','#### Description\n\nThe employees of the ‘Dendrogram Workless Inc.’ do their tasks through a local intranet application with web page like interface. Every single worker has a designated homepage with all his tasks. According to the company’s new security policy, no worker is allowed to visit any other personnel’s homepage. But the old pages might contain some links to other pages (or even a link to itself.) Instead of removing links from working pages, they introduce a new web browser without the ‘back’ button and make the employees use this new browser. The idea is, no employee can leave his designated page because without a ‘back’ button there is no assurance that a worker will find a path to return to his home page just when the boss comes in! The employees soon get bored and decide that they would like to visit other pages. So, they plan to insert new links as necessary to their pages so that every single employee can return to his home page after clicking one or more links without using the ‘back’ button. You are to help them by finding the minimum number of links to insert.\n\n#### Input\n\nThe first line of the input states the number of test cases in the input. Each test case begins with two integers – The number of pages in the system, P (1 ≤ P ≤ 20) & The number of links, L (0 ≤ L ≤ (P * (P-1)/2)). The pages are denoted by integers from 0 to P-1. Each of the next L lines contains two integers A & B (0 ≤ A,B ≤ P-1) implying that page A has a link to page B.\n\n#### Output\n\nFor each test case, print the minimum number of links to be inserted.\n\n#### Sample Input\n```\n2\n5 5\n0 2\n2 1\n2 4\n3 0\n4 0\n4 6\n1 2\n1 3\n2 0\n3 2\n3 0\n0 1\n```\n\n#### Sample Output\n```\n1\n0\n```\n',3000,65536,'0',3,18,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('32','Encoding','#### Description\nChip and Dale have devised an encryption method to hide their (written) text messages. They first\nagree secretly on two numbers that will be used as the number of rows (R) and columns (C) in a\nmatrix. The sender encodes an intermediate format using the following rules:\n\n1. The text is formed with uppercase letters [A-Z] and <space>.\n\n2. Each text character will be represented by decimal values as follows:\n\n<space> = 0, A = 1, B = 2, C = 3, ..., Y = 25, Z = 26\n\nThe sender enters the 5 digit binary representation of the characters’ values in a spiral pattern along\nthe matrix as shown below. The matrix is padded out with zeros (0) to fill the matrix completely. For\nexample, if the text to encode is: \"ACM\" and R=4 and C=4, the matrix would be filled in as follows:\n\n[[Image:A31.jpg|center]]\n\nThe bits in the matrix are then concatenated together in row major order and sent to the receiver.\n\nThe example above would be encoded as: 0000110100101100\n\n#### input\nThe first line of input contains a single integer $$$N, (1 \\leq N \\leq 1000)$$$ which is the number of datasets that\nfollow.\nEach dataset consists of a single line of input containing $$$R (1 \\leq R \\leq 20)$$$, a space, $$$C (1 \\leq C \\leq 20)$$$,\na space, and a text string consisting of uppercase letters [A-Z] and <space>. The length of the text\nstring is guaranteed to be $$$\\leq (R*C)/5$$$.\n\n#### Output\nFor each dataset, you should generate one line of output with the following values: The dataset\nnumber as a decimal integer (start counting at one), a space, and a string of binary digits (R*C) long\ndescribing the encoded text. The binary string represents the values used to fill in the matrix in rowmajor\norder. You may have to fill out the matrix with zeros (0) to complete the matrix.\n\n#### Sample Input\n```\n4\n4 4 ACM\n5 2 HI\n2 6 HI\n5 5 HI HO\n```\n\n#### Sample Output\n```\n1 0000110100101100\n2 0110000010\n3 010000001001\n4 0100001000011010110000010\n```\n',1000,32768,'0',0,31,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('320','XYZZY','#### Description\n\nThe prototypical computer adventure game, first designed by Will Crowther on the PDP-10 in the mid-1970s as an attempt at computer-refereed fantasy gaming, and expanded into a puzzle-oriented game by Don Woods at Stanford in 1976. (Woods had been one of the authors of INTERCAL.) Now better known as Adventure or Colossal Cave Adventure, but the TOPS-10 operating system permitted only six-letter filenames in uppercase. See also vadding, Zork, and Infocom. \n\nIt has recently been discovered how to run open-source software on the Y-Crate gaming device. A number of enterprising designers have developed Advent-style games for deployment on the Y-Crate. Your job is to test a number of these designs to see which are winnable. \n\nEach game consists of a set of up to 100 rooms. One of the rooms is the start and one of the rooms is the finish. Each room has an energy value between -100 and +100. One-way doorways interconnect pairs of rooms. \n\nThe player begins in the start room with 100 energy points. She may pass through any doorway that connects the room she is in to another room, thus entering the other room. The energy value of this room is added to the player\'s energy. This process continues until she wins by entering the finish room or dies by running out of energy (or quits in frustration). During her adventure the player may enter the same room several times, receiving its energy each time. \n\n#### Input\n\nThe input consists of several test cases. Each test case begins with n, the number of rooms. The rooms are numbered from 1 (the start room) to n (the finish room). Input for the n rooms follows. The input for each room consists of one or more lines containing: \n\n+ the energy value for room i \n+ the number of doorways leaving room i \n+ a list of the rooms that are reachable by the doorways leaving room i \nThe start and finish rooms will always have enery level 0. A line containing -1 follows the last test case. \n\n#### Output\n\nIn one line for each case, output \"winnable\" if it is possible for the player to win, otherwise output \"hopeless\". \n\n#### Sample Input\n```\n5\n0 1 2\n-60 1 3\n-60 1 4\n20 1 5\n0 0\n5\n0 1 2\n20 1 3\n-60 1 4\n-60 1 5\n0 0\n5\n0 1 2\n21 1 3\n-60 1 4\n-60 1 5\n0 0\n5\n0 1 2\n20 2 1 3\n-60 1 4\n-60 1 5\n0 0\n-1\n```\n\n#### Sample Output\n```\nhopeless\nhopeless\nwinnable\nwinnable\n```\n\n\n',3000,65536,'0',3,19,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('321','Matrix','#### Description\n\nThe year is close to 2200 and machines with supreme artificial intelligence have conquered the world. Fortunately, the humans are still kept alive since they provide a good energy source for the machines. However, in order to keep mankind neutralized, most people are trapped in a computer program called the Matrix designed to simulate the 20th century, and thereby unaware of the \'real\' world. Still, a few people like yourself have been released from the Matrix and others have even been born free. Together we try to fight the machines. The Oracle has spoken about one man who will save mankind, and the people outside the Matrix must enter it from time to time in order to try to find this chosen one. It is hazardous to enter though. The only way out of the Matrix is by being phoned from the outside on a stationary phone inside and there are supernatural agents in the Matrix who try to eliminate all trespassers. Everyone who has been caught by an agent so far has died, so the best thing to do when you encounter one is to run. Since the Matrix is a computer program, the agents know of your whereabouts all the time when you are inside it. On the other hand you know the location of the agents too, since the people helping you from outside the Matrix scan it and tell you what they see. You move at the same speed as the agents since you have learned to control the laws of the program. You want to know for a few scenarios if you would be able to escape the Matrix or if you would be caught by the agents, so you design a program. For simplicity, the Matrix is modelled by a two-player boardgame on an 8 by 8 square board with you and two agents as pieces. There are three kinds of squares: floor squares, wall squares and phone squares. A piece may be located on any square except the wall squares, even if the square is already occupied by another piece. The simulation begins by a move by you. Then the two agents move and after that it is your turn to move again. This moving scheme continues to alternate until either your piece gets to a vacant phone square which means that you succeed in escaping the Matrix, or until at least one of the agent pieces is on the same square as your piece, in which case you are captured, and thereby eliminated. A third outcome is possible if neither of the two breaking conditions mentioned above occurs. In that case you are said to be trapped in the Matrix. A move of a piece constitutes of moving the piece located at square (x,y) to one of (x,y),(x+1,y),(x-1,y),(x,y-1), or (x,y+1) that is not a wall square. \n\n#### Input\n\nThe input consists of several scenarios. For each scenario you are to determine whether the agent pieces cannot be sure to prevent you from escaping the Matrix despite how hard they try, or whether you cannot be certain to stop the agents from eliminating you. The first line of input is a positive number n. Then follow n scenarios, each consisting of 8 rows of 8 characters each from the set {\'.\',\'#\',\'P\',\'A\',\'M\'} describing the Matrix board. A \'.\'-character symbolizes a floor square, a \'#\'-character a wall square and a \'P\'-character a phone square. There are exactly two \'A\'-characters in each scenario indicating the starting positions of the two agents, and exactly one \'M\'-character giving your position in the Matrix. The initial squares of the three pieces are all floor squares. At least half of the 64 squares are wall squares for all scenarios. All scenarios, including the last one, end with a blank line. \n\n#### Output\n\nFor each scenario, there should be one line of output. If your piece can escape the Matrix regardless of the efforts made by the agents to stop you, the text \'You can escape.\' should be printed. If the agent pieces may capture you whatever moves your piece make, you are eliminated and the text \'You are eliminated.\' should be printed. If neither of the two conditions described above are true, the text \'You are trapped in the Matrix.\' should be printed. \n\n#### Sample Input\n```\n3\n1. 1. 1. 1. 1. .1. 1. \n1. 1. 1. 1. 1. .1. 1. \n1. 1. 1. 1. 1. .1. 1. \nAA.M...P\n1. 1. 1. 1. 1. .1. 1. \n1. 1. 1. 1. 1. .1. 1. \n1. 1. 1. 1. 1. .1. 1. \n1. 1. 1. 1. 1. .1. 1. \n \n1. 1. 1. 1. 1. 1. 1. 1. \n1. ..P...1. \n1. .1. 1. 1. 1. .1. \n1. P1. M.1. P1. \n1. .1. 1. 1. 1. .1. \n1. ..P...1. \n1. A....A1. \n1. 1. 1. 1. 1. 1. 1. 1. \n \n1. 1. 1. 1. 1. 1. 1. 1. \n1. ...A.P1. \n1. .1. 1. 1. 1. 1. 1. \n1. ..M...1. \n1. .1. 1. 1. 1. .1. \n..####..\n1. ....A.1. \n1. 1. 1. 1. 1. 1. 1. 1. \n```\n\n#### Sample Output\n```\nYou can escape.\nYou are trapped in the Matrix.\nYou are eliminated.\n```\n',3000,65536,'0',3,20,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('322','The crusades','#### Description\n\nThe Pope has commissioned the Holy Roman Empire, ruled by ruthless King Frederick Barbarossa (Red Beard), and England, lead by brave King Richard the Lionheart, to recover the holy land of Jerusalem from the moors. \n\nBoth commanders know very well their armies cannot meet on a road, or a quarrel may break out. They therefore wish to take different paths to get to Jerusalem, which means no road will be chosen by both king for their troops to march by. Soldiers from both bands may meet at towns and cities, however, where they will probably not mind each other. \n\nThere is another difficulty: some paths are narrow and a limited number of soldiers can march across them. To deal with this problem, both commanders are willing to divide their troops into as many groups as it is needed in order to ensure that the greatest number of soldiers (no matter which kingdom they belong to) will arrive at Jerusalem to fight the moors. \n\nGiven a map of towns and cities connected by roads which can admit a certain number of soldiers and the initial position of King Frederick’s and King Richard’s troops (which are always different), your task is to determine the largest number of soldiers that can get to Jerusalem. \n\n#### Input\n\nThe first line of input contains the number t of test cases (1 ≤ t ≤ 60). Each test case will begin with a line containing integers N and M (5 ≤ N ≤ 12 and 5 ≤ M ≤ 30) corresponding to the number of towns and the number of roads in the map. Towns will be numbered from 1 to N. M lines follow, each containing integers A, B and C (1 ≤ A, B ≤ N and 1 ≤ C ≤ 100), indicating that there is a two-way road from town A to town B by which at most C soldiers can march. The last line of each case will contain integers F, R and J (1 ≤ F, R, J ≤ N) corresponding to the initial locations of Frederick’s army, Richard’s army and Jerusalem, which will always be different. \n\n#### Output\n\nFor each test case print on a separate line the largest number of soldiers that can get to Jerusalem.\n\n#### Sample Input\n```\n2\n6 6\n1 3 10\n2 3 5\n3 4 11\n3 5 11\n4 6 11\n5 6 2\n1 2 6\n5 6\n1 5 9\n1 3 10\n3 2 10\n3 4 9\n3 5 10\n5 4 100\n1 2 4\n```\n\n#### Sample Output\n```\n12\n28\n```\n',3000,65536,'0',3,21,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('323','Knights\' Nightmare','',3000,65536,'0',3,22,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('324','Faster Processing Feasibility','',3000,65536,'0',3,23,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('325','Organising the Organisation','',3000,65536,'0',3,24,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('326','Satisfying Constraints','',3000,65536,'0',3,25,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('327','Ordering','',3000,65536,'0',3,26,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('328','Dying Tree','#### Description\nOnce upon the time in the forest, there were lots of trees who were all friends to one another. One of the trees T was very sick. She needed a tree doctor to save her life. As you may already know, trees can\'t move, but what you probably didn\'t know is that they can talk. Each tree t1 can talk to tree t2 if the minimum distance between any two branches from each is less than or equal to some value k. All trees decided to help their sick friend by trying to reach a doctor tree. They will continue to tell one another that tree T is sick until some tree S finds a tree doctor (who is at distance d or less from any branch of tree S). S will tell the doctor about her friend so he can go help her.\n\nA tree is represented by a set of points representing her branches. \n\nA doctor is represented by a single point. \n\n#### Input\n\nInput begins with a number t < 100 representing the number of test cases; t test cases follow. Each test case begins with 4 integers 0 < n < 100, 0 < m ≤ 10, 0 ≤ k, d ≤ 100 where n is the number of trees in the forest, m is the number of doctors in the forest, k & d are as described above. The next m lines represent the positions of doctors in x, y coordinates. The following lines describe the set of trees in the forest. Each set begins with an integer 0 < b < 10 representing the number of branches this tree has. Followed by b points representing the branches positions. The sick tree is always the first tree in the input. All points coordinates are integers with absolute values less than or equal to 1000.\n\n#### Output\n\nFor each test case determine whether or not the trees can help their friend by finding a doctor for her. If yes, then print \"Tree can be saved :)\", if no then print \"Tree can\'t be saved :(\".\n\n#### Sample Input\n```\n2\n3 2 2 3\n3 8\n7 4\n4\n0 0\n1 1\n3 2\n2 0\n3\n6 -1\n7 1\n8 2\n3\n-1 -1\n2 -3\n5 -2\n3 2 1 2\n3 8\n7 4\n4\n0 0\n1 1\n3 2\n2 0\n3\n6 -1\n7 1\n8 2\n3\n-1 -1\n2 -3\n5 -2\n```\n\n#### Sample Output\n```\nTree can be saved :)\nTree can\'t be saved :(\n```\n\n[http://icpcres.ecs.baylor.edu/onlinejudge/external/114/11474.html]',3000,65536,'0',3,27,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('329','Ants, Aphids and a Ladybug','',3000,65536,'0',3,28,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('33','Decoding','#### Description\nChip and Dale have devised an encryption method to hide their (written) text messages. They first\nagree secretly on two numbers that will be used as the number of rows (R) and columns (C) in a\nmatrix. The sender encodes an intermediate format using the following rules:\n\n1. The text is formed with uppercase letters [A-Z] and <space>.\n\n2. Each text character will be represented by decimal values as follows:\n\n<space> = 0, A = 1, B = 2, C = 3, ..., Y = 25, Z = 26\n\nThe sender enters the 5 digit binary representation of the characters’ values in a spiral pattern along\nthe matrix as shown below. The matrix is padded out with zeros (0) to fill the matrix completely. For\nexample, if the text to encode is: \"ACM\" and R=4 and C=4, the matrix would be filled in as follows:\n[[Image:A31.jpg|center]]\nThe bits in the matrix are then concatenated together in row major order and sent to the receiver.\n\nThe example above would be encoded as: 0000110100101100\n\n#### Input\nThe first line of input contains a single integer $$$N, (1 \\leq N \\leq 1000)$$$ which is the number of datasets that\nfollow.\nEach dataset consists of a single line of input containing $$$R (1 \\leq R \\leq 20)$$$, a space, C $$$(1 \\leq C \\leq 20)$$$\na space, and a string of binary digits that represents the contents of the matrix (R * C binary digits).\nThe binary digits are in row major order.\n\n#### Output\nFor each dataset, you should generate one line of output with the following values: The dataset\nnumber as a decimal integer (start counting at one), a space, and the decoded text message. You\nshould throw away any trailing spaces and/or partial characters found while decoding.\n\n#### Sample Input\n```\n4\n4 4 0000110100101100\n5 2 0110000010\n2 6 010000001001\n5 5 0100001000011010110000010\n```\n\n#### Sample Output\n```\n1 ACM\n2 HI\n3 HI\n4 HI HO\n```\n',1000,32768,'0',0,32,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('330','Not the Best','',3000,65536,'0',3,29,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('331','Happiness','',3000,65536,'0',3,30,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('332','Crazy King','',3000,65536,'0',3,31,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('333','Traffic!','',3000,65536,'0',3,32,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('334','Lift Hopping in the Real World','',3000,65536,'0',3,33,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('335','Angry Programmer','',3000,65536,'0',3,34,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('336','Transportation system.','',3000,65536,'0',3,35,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('337','Great Wall of China','',3000,65536,'0',3,36,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('338','Mr. And Mrs. Hamilton','',3000,65536,'0',3,37,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('339','Airport Express','',3000,65536,'0',3,38,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('34','Flipping Burned Pancakes','#### Description\nThe cook at the Frobbozz Magic Pancake House sometimes falls asleep on the job while cooking\npancakes. As a result, one side of a stack of pancakes is often burned. Clearly, it is bad business to\nserve visibly burned pancakes to the patrons. Before serving, the waitress will arrange the stacks of\npancakes so that the burned sides are facing down. You must write a program to aid the waitress in\nstacking the pancakes correctly.\n\nWe start with a stack of N pancakes of distinct sizes, each of which is burned on one side. The\nproblem is to convert the stack to one in which the pancakes are in size order with the smallest on the\ntop and the largest on the bottom and burned side down for each pancake. To do this, we are\nallowed to flip the top k pancakes over as a unit (so the k-th pancake is now on top and the pancake\npreviously on top is now in the k-th position and the burned side goes from top to bottom and vice\nversa).\n\nFor example (+ indicates burned bottom, - a burned top):\n\n$$$+1 -3 -2 [flip-2] \\Rightarrow +3 -1 -2 [flip-1] \\Rightarrow -3 -1 -2 [flip-3] \\Rightarrow $$$\n$$$+2 +1 +3 [flip-1] \\Rightarrow -2 +1 +3 [flip-2] \\Rightarrow -1 +2 +3 [flip-1] \\Rightarrow +1 +2 +3$$$\n\nYou must write a program which finds a sequence of at most (3n – 2) flips, which converts a given\nstack of pancakes to a sorted stack with burned sides down.\n\n#### Input\nThe first line of the input contains a single decimal integer, N, the number of problem instances to\nfollow. Each of the following N lines gives a separate dataset as a sequence of numbers separated\nby spaces. The first number on each line gives the number, M, of pancakes in the data set. The\nremainder of the data set is the numbers 1 through M in some order, each with a plus or minus sign,\ngiving the initial pancake stack. The numbers indicate the relative sizes of the pancakes and the\nsigns indicate whether the burned side is up (-) or down (+). M will be, at most, 30.\n\n#### Output\nFor each dataset, you should generate one line of output with the following values: The dataset\nnumber as a decimal integer (start counting at one), a space, the number of flips $$$(K, K \\geq 0)$$$\nrequired to sort the pancakes and a sequence of K numbers, each of which gives the number of\npancakes to flip on the corresponding sorting step. There may be several correct solutions for some\ndatasets. For instance 3 2 3 is also a solution to the first problem below.\n\n#### Sample Input\n```\n3\n3 +1 –3 –2\n4 –3 +1 –2 –4\n5 +1 +2 +3 +4 -5\n```\n\n#### Sample Output\n```\n1 6 2 1 3 1 2 1\n2 6 4 1 4 3 1 2\n3 3 5 1 5\n```\n',1000,32768,'0',0,33,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('340','The Joys of Farming','',3000,65536,'0',3,39,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('341','Teen Girl Squad','#### Description\nYou are part of a group of n teenage girls armed with cellphones. You have some news you want to tell everyone in the group. The problem is that no two of you are in the same room, and you must communicate using only cellphones. What\'s worse is that due to excessive usage, your parents have refused to pay your cellphone bills, so you must distribute the news by calling each other in the cheapest possible way. You will call several of your friends, they will call some of their friends, and so on until everyone in the group hears the news.\n\nEach of you is using a different phone service provider, and you know the price of girl A calling girl B for all possible A and B. Not all of your friends like each other, and some of them will never call people they don\'t like. Your job is to find the cheapest possible sequence of calls so that the news spreads from you to all n-1 other members of the group. \n\n#### Input\nThe first line of input gives the number of cases, N (N<150). N test cases follow. Each one starts with two lines containing n (0<=n<=1000) and m (0 <= m <= 40,000). Girls are numbered from 0 to n-1, and you are girl 0. The next m lines will each contain 3 integers, u, v and w, meaning that a call from girl u to girl v costs w cents (0 <= w <= 1000). No other calls are possible because of grudges, rivalries and because they are, like, lame. The input file size is around 1200 KB.\n\n#### Output\nFor each test case, output one line containing \"Case #x:\" followed by the cost of the cheapest method of distributing the news. If there is no solution, print \"Possums!\" instead.\n\n#### Sample Input\n```\n4\n2\n1\n0 1 10\n2\n1\n1 0 10\n4\n4\n0 1 10\n0 2 10\n1 3 20\n2 3 30\n4\n4\n0 1 10\n1 2 20\n2 0 30\n2 3 100\n```\n\n#### Sample Output\n```\nCase #1: 10\nCase #2: Possums!\nCase #3: 40\nCase #4: 130\n```\n',3000,65536,'0',3,40,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('342','L--system','',3000,65536,'0',3,41,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('343','Matrix Decompressing','',3000,65536,'0',3,42,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('344','Place the Guards','',3000,65536,'0',3,43,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('345','Antenna Placement','#### Description\nThe Global Aerial Research Centre has been allotted the task of building the fifth generation of mobile phone nets in Sweden. The most striking reason why they got the job, is their discovery of a new, highly noise resistant, antenna. It is called 4DAir, and comes in four types. Each type can only transmit and receive signals in a direction aligned with a (slightly skewed) latitudinal and longitudinal grid, because of the interacting electromagnetic field of the earth. The four types correspond to antennas operating in the directions north, west, south, and east, respectively. Below is an example picture of places of interest, depicted by twelve small rings, and nine 4DAir antennas depicted by ellipses covering them. \n\n[[File:D44.gif|center]]\n\nObviously, it is desirable to use as few antennas as possible, but still provide coverage for each place of interest. We model the problem as follows: Let A be a rectangular matrix describing the surface of Sweden, where an entry of A either is a point of interest, which must be covered by at least one antenna, or empty space. Antennas can only be positioned at an entry in A. When an antenna is placed at row r and column c, this entry is considered covered, but also one of the neighbouring entries (c+1,r),(c,r+1),(c-1,r), or (c,r-1), is covered depending on the type chosen for this particular antenna. What is the least number of antennas for which there exists a placement in A such that all points of interest are covered?\n\n#### Input\nOn the first row of input is a single positive integer n, specifying the number of scenarios that follow. Each scenario begins with a row containing two positive integers h and w, with 1<h<40 and 0<w<10. Thereafter is a matrix presented, describing the points of interest in Sweden in the form of h lines, each containing w characters from the set [‘*’,’o’]. A ‘*’-character symbolises a point of interest, whereas a ‘o’-character represents open space.\n\n#### Output\nFor each scenario, output the minimum number of antennas necessary to cover all ‘*’-entries in the scenario’s matrix, on a row of its own.\n\n#### Sample Input\n```\n2\n7 9\nooo**oooo\n  - oo*ooo*\no*oo**o**\nooooooooo\n  -   -   - *oo\no*o*oo*oo\n  -   -   - *oo\n10 1\n+ \n+ \n+ \no\n+ \n+ \n+ \n+ \n+ \n+ \n```\n\n#### Sample Output\n```\n17\n5\n```\n',3000,65536,'0',3,44,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('346','Doves and bombs','',3000,65536,'0',3,45,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('347','Halum','#### Description\nYou are given a directed graph G(V,E) with a set of vertices and edges. Each edge (i,j) that connects some vertex i to vertex j has an integer cost associated with that edge.\n \nDefine the operation Halum(v, d) to operate on a vertex v using an integer d as follows: subtract d from the cost of all edges that enter v and add d to the cost of every edge that leaves v.\n\nAs an example of that operation, consider graph G that has three vertices named (1, 2, 3) and two edges. Edge (1, 2) has cost -1, and edge (2,3) has cost 1. The operation Halum(2,-3) operates on edges entering and leaving vertex 2.  Thus, edge (1, 2) gets cost -1-(-3)=2 and the edge (2, 3) gets cost 1 + (-3) = -2.\n\nYour goal is to apply the Halum function to a graph, potentially repeatedly, until every edge in the graph has at least a certain cost that is greater than zero. You have to maximize this cost.\n\n#### Input\nTwo space-separated integers per case: $$$V(V \\leq 500)$$$ and $$$E(E \\leq 2,700)$$$. E lines follow. Each line represents a directed edge using three space-separated integers (u, v, d). Absolute value of cost can be at most 10,000.\n\n#### Output\nIf the problem is solvable, then print the maximum possible value. If there is no such solution print “No Solution”. If the value can be arbitrary large print “Infinite”\n\n#### Sample Input\n```\n2 1\n1 2 10\n2 1\n1 2 -10\n3 3\n1 2 4\n2 3 2\n3 1 5\n4 5\n2 3 4\n4 2 5\n3 4 2\n3 1 0\n1 2 -1\n```\n\n#### Sample Output\n```\nInfinite\nInfinite\n3\n1\n```\n',3000,65536,'0',3,46,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('348','Claw Decomposition','#### Description\nA claw is defined as a pointed curved nail on the end of each toe in birds, some reptiles, and some mammals. However, if you are a graph theory enthusiast, you may understand the following special class of graph as shown in the following figure by the word claw.\n\n[[File:D47.gif|center]]\n\nIf you are more concerned about graph theory terminology, you may want to define claw as K1,3.\n\nLet’s leave the definition for the moment & come to the problem. You are given a simple undirected graph in which every vertex has degree 3. You are to figure out whether the graph can be decomposed into claws or not.\n\nJust for the sake of clarity, a decomposition of a graph is a list of subgraphs such that each edge appears in exactly one subgraph in the list.\n\n#### Input\nThere will be several cases in the input file. Each case starts with the number of vertices in the graph, V (4<=V<=300). This is followed by a list of edges. Every line in the list has two integers, a & b, the endpoints of an edge (1<=a,b<=V). The edge list ends with a line with a pair of 0. The end of input is denoted by a case with V=0. This case should not be processed.\n\n#### Output\nFor every case in the input, print YES if the graph can be decomposed into claws & NO otherwise.\n\n#### Sample Input\n```\n4\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n0 0\n6\n1 2\n1 3\n1 6\n2 3\n2 5\n3 4\n4 5\n4 6\n5 6\n0 0\n0\n```\n\n#### Sample Output\n```\nNO\nNO\n```\n',3000,65536,'0',3,47,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('349','Tree Reconstruction','',3000,65536,'0',3,48,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('35','Monkey Vines','#### Description\nDeep in the Amazon jungle, exceptionally tall trees grow that support a rich biosphere of figs and\njuniper bugs, which happen to be the culinary delight of brown monkeys.\n\nReaching the canopy of these trees requires the monkeys to perform careful navigation through the\ntall tree’s fragile vine system. These vines operate like a see-saw: an unbalancing of weight at any\nvine junction would snap the vine from the tree, and the monkeys would plummet to the ground\nbelow. The monkeys have figured out that if they work together to keep the vines properly balanced,\nthey can all feast on the figs and juniper bugs in the canopy of the trees.\n\nA vine junction supports exactly two sub-vines, each of which must contain the same number of\nmonkeys, or else the vine will break, leaving a pile of dead monkeys on the jungle ground. For\npurposes of this problem, a vine junction is denoted by a pair of matching square brackets $$$[ ]$$$, which\nmay contain nested information about junctions further down its sub-vines. The nesting of vines will\ngo no further than $$$25$$$ levels deep.\n\n[[Image:A34.jpg|center]]\n\nYou will write a program that calculates the minimum number of monkeys required to balance a\nparticular vine configuration. There is always at least one monkey needed, and, multiple monkeys\nmay hang from the same vine.\n\n#### Input\nThe first line of input contains a single integer $$$N, (1 \\leq N \\leq 1000)$$$ which is the number of datasets that\nfollow.\nEach dataset consists of a single line of input containing a vine configuration consisting of a string of\n[ and ] characters as described above. The length of the string of [ and ] will be greater than or\nequal to zero, and less than or equal to 150.\n\n#### Output\nFor each dataset, you should generate one line of output with the following values: The dataset\nnumber as a decimal integer (start counting at one), a space, and the minimum number of monkeys\nrequired to reach the canopy successfully. Assume that all the hanging vines are reachable from the\njungle floor, and that all monkeys jump on the vines at the same time.\n\n#### Sample Input\n```\n3\n[]\n\n[[][[]]]\n```\n\n#### Sample Output\n```\n1 2\n2 1\n3 8\n```\n',1000,32768,'0',0,34,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('350','Ignoring Digits','',3000,65536,'0',3,49,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('351','Equidivisions','',3000,65536,'0',3,50,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('352','The Largest Clique','',3000,65536,'0',3,51,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('353','Travel in Desert','',3000,65536,'0',3,52,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('354','Street Directions','',3000,65536,'0',3,53,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('355','Clever Naming Patterns','#### Description\nPiotr is organizing a programming competition consisting of n problems, numbered A, B, C, etc. He wants to name the first problem starting with the letter A, the second problem starting with the letter B, and so on. However, he cannot simply come up with random words for problem titles - that wouldn\'t make sense. For each problem, he has come up with a list of acceptable names. Help Piotr pick an ordering of the problems and an acceptable name for each one so that each problem\'s name starts with the correct letter of the alphabet.\n\n#### Input\nThe first line of input gives the number of cases, N. N test cases follow. Each one starts with n on a line by itself. The next n lines list the possible names for each of the n problems. Each line starts with ki - the number of acceptable names for problem i and lists the names, separated by spaces. Each name is a non-empty string of letters. No two names will be the same, and no two names for the same problem will start with the same letter.\n\n+ 1 ≤ N ≤ 30,\n+ 1 ≤ n ≤ 26,\n+ 1 ≤ ki ≤ 26.\n\n#### Output\nFor each test case, first output the line \"Case #x:\", where x is the test case number. After that, print n lines listing the n problem names, each with only the first letter capitalized. There is guaranteed to be exactly one solution.\n\n#### Sample Input\n```\n4\n3\n2 Apples Oranges\n1 Bananas\n5 Apricots Blueberries Cranberries Zuccini Yams\n1\n1 ApPlEs\n2\n2 a b\n1 axe\n4\n4 Aa Ba Ca Da\n3 Ab Bb Cb\n2 Ac Bc\n1 Ad\n```\n\n#### Sample Output\n```\nCase #1:\nApples\nBananas\nCranberries\nCase #2:\nApples\nCase #3:\nAxe\nB\nCase #4:\nAd\nBc\nCb\nDa\n```\n',3000,65536,'0',3,54,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('356','Copying DNA','',3000,65536,'0',3,55,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('357','Round and Round Maze','',3000,65536,'0',3,56,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('358','Airport Setup','',3000,65536,'0',3,57,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('359','Curling up the cube','',3000,65536,'0',3,58,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('36','Model Rocket Height','#### Description\nJust when you thought we had run out of model rocket height problems…\n\nYet another method used to determine the height achieved by a model rocket is the vertical line\nmethod. Two observers A and B are spaced D feet apart along a base line along one edge of the flat\ntest field. The launch platform is equidistant from observers A and B and L feet from the base line.\nEach observer has a theodolite or some other device for measuring angle above the horizontal\n(elevation angle) of a distant object and the azimuth angle (the angle the vertical plane of the sight\nline makes with the line from A through B measured counter-clockwise). Each measuring device is on\na stand. A’s device is HA feet above the level of the launch platform and B’s device is HB feet above\nthe level of the launch platform. When a rocket is fired, near the top of its flight, it deploys a parachute\nand emits a puff of smoke. Each observer measures the elevation angle and azimuth angle of the puff\nof smoke from their location. If the peak location is on the wrong side of the baseline or outside the\nlines determined by A and B perpendicular to the base line, it is out of bounds and disqualified. From\nthis information, the height of the rocket may be determined as follows:\n\nEach sight line determines a vertical plane. These two planes intersect in a vertical line (thus the\nname of the method). Each sight line intersects this vertical line in a point. If these points are more\nthan ERRDIST feet apart, an error is assumed and the flight is rejected. Otherwise, the point halfway\nbetween the two points where a sight line intersects the vertical line is computed. The rocket height is\nthe distance of this midpoint above the launch platform.\n\nYou must write a program which, given the parameters D (the distance in feet between observers A\nand B), L (the distance in feet from the base line to the launch platform), HA (the distance of the\nmeasuring device A above the launch platform in feet), HB (the distance of the measuring device B\nabove the launch platform in feet), ERRDIST (the maximum distance between the intersection points\nof a sight line with the vertical line), α (the elevation angle of the rocket in degrees measured by the\nleft observer A), β (the elevation angle of the rocket in degrees observed by the right observer B), γ\n(the azimuth angle in degrees measured by the left observer A) and δ (the azimuth angle in degrees\nmeasured by the right observer B), computes the height of the rocket above the launch platform in\nfeet to the nearest foot.\n\n#### Input\nThe first line of input contains a single integer $$$N, (1 \\leq N \\leq 1000)$$$ which is the number of datasets that\nfollow.\nThe second line contains the parameters D, L, HA, HB and ERRDIST in that order as (floating point)\ndecimal values. These values would be measured once at the beginning of the day and remain fixed\nthrough all rocket shots.\nEach succeeding line of input represents a single dataset. Each dataset will contain the angles α, β,\nγ and δ in that order (measured in degrees) as (floating point) decimal values for a rocket shot.\n\n#### Output\nFor each dataset of four angles, the output consists of a single line . If angles α, β and γ are not\nstrictly between 0 and 90 degrees or δ is not strictly between 90 degrees and 180 degrees, the line\nshould contain the dataset number, a space and the word “DISQUALIFIED” (without the quotes).\nOtherwise, if the distance between the intersection points of a sight line with the vertical line is more\nthat ERRDIST feet, the line should contain the dataset number, a space and the word “ERROR”\n(without the quotes). Otherwise, the line should contain the dataset number, a space and the height\nabove the launch platform in feet to the nearest foot.\n\n#### Sample Input\n```\n4\n100.0 300.0 5.25 2.92 5.00\n40.1 36.2 35.3 151.6\n64.9 71.1 15.7 160.1\n44.9 41.2 33.1 152.5\n44.9 41.2 33.1 52.5\n```\n\n#### Sample Output\n```\n1 50\n2 ERROR\n3 58\n4 DISQUALIFIED\n```\n',1000,32768,'0',0,35,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('360','Skyscraper Floors','',3000,65536,'0',3,59,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('361','Servicing Stations','',3000,65536,'0',3,60,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('362','All Pairs Maximum Flow','',3000,65536,'0',3,61,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('363','The Monocycle','',3000,65536,'0',3,62,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('364','Dominos','',3000,65536,'0',3,63,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('365','Museums','',3000,65536,'0',3,64,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('366','Number Maze','',3000,65536,'0',3,65,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('367','Nurikabe','',3000,65536,'0',3,66,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('368','Its all about the Bandwidth','',3000,65536,'0',3,67,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('369','Planet of the Rock, Paper and Scissors','',3000,65536,'0',3,68,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('37','Tiling a Grid With Dominoes','#### Description\nWe wish to tile a grid 4 units high and N units long with rectangles (dominoes) 2 units by one unit (in\neither orientation). For example, the figure shows the five different ways that a grid 4 units high and 2\nunits wide may be tiled.\n\n[[Image:A36.jpg|center]]\n\nWrite a program that takes as input the width, W, of the grid and outputs the number of different ways\nto tile a 4-by-W grid.\n\n#### Input\nThe first line of input contains a single integer $$$N, (1 \\leq N \\leq 1000)$$$ which is the number of datasets that\nfollow.\nEach dataset contains a single decimal integer, the width, W, of the grid for this problem instance.\nOutput\nFor each problem instance, there is one line of output: The problem instance number as a decimal\ninteger (start counting at one), a single space and the number of tilings of a 4-by-W grid. The values\nof W will be chosen so the count will fit in a 32-bit integer.\n\n#### Sample Input\n```\n3\n2\n3\n7\n```\n\n#### Sample Output\n```\n1 5\n2 11\n3 781\n```\n',1000,32768,'0',0,36,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('370','Shovelling Snow','',3000,65536,'0',3,69,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('371','Graph Construction','',3000,65536,'0',3,70,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('372','General Sultan','',3000,65536,'0',3,71,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('373','Travel','',3000,65536,'0',3,72,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('374','Spaghetti','',3000,65536,'0',3,73,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('375','Babel','',3000,65536,'0',3,74,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('376','Enchanted Forest','',3000,65536,'0',3,75,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('377','Placing Lampposts','',3000,65536,'0',3,76,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('378','Dominos 2','',3000,65536,'0',3,77,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('379','Railroads','',3000,65536,'0',3,78,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('38','Spatial Concepts Test','#### Description\nThe Flathead Testing Corporation (FTC) supplies various tests for Human Resources departments at\nmany companies. One type of test they supply includes spatial concepts questions such as:\n\nWhen the following figure is folded back on the interior lines it forms a cube.\n\n[[Image:A37-1.jpg|center]]\n\nWhich of the following could be an image of one corner of the resulting cube?\n\n[[Image:A37-2.jpg|center]]\n\nUnfortunately, FTC was recently embarrassed when one such question on a test had no solution\namong the choices and another (given in the example) had two solutions among the choices (1 and\n3).\n\nFTC needs a routine which will read in a specification of the unfolded cube and specifications of\ncorner views and determine, for each corner view, whether it is a view of a corner of the cube\nspecified in the unfolded part.\n\nFTC uses the following images as faces of each cube. Each image is symmetrical about the vertical\naxis and has a distinguished end (up in each image).\n\n[[Image:A37-3.jpg|center]]\n\nThe unfolded cube is specified by a string of six pairs of a letter indicating the image on the face and\na number indicating the orientation of the distinguished end of the face: 1 is up, 2 is right, 3 is down\nand 4 is left. The faces are specified in the order given in the following figure with the orientations\nindicated in the square to the right:\n\n{|align=center\n|[[Image:A37-4.jpg]]\n|[[Image:A37-5.jpg]]\n|}\n\n\nSo the unfolded cube in the example is specified as “F3E4E2D3C2F3”. FTC has a routine which\nreads this specification and generates the unfolded image for the question.\n\nThe answer images are specified by three pairs of a letter and a digit indicating a face image and an\norientation as indicated in the following diagram. The faces are specified in the order top, right, left\n(indicated by numbers in brackets in the figures), that is clockwise around the center vertex starting at\nthe top. The orientation of the distinguished end of each face is indicated by the numbers on the\nedges in the diagram. They circle each face clockwise, starting at the center vertex.\n\n[[Image:A37-6.jpg|center]]\n\nFor the example, the answer figures are specified as “C2D2F2”, “E3F3C4”, “F2C2D2”, “D1E1F3” and\n“E1C1E1”. Again, FTC has a routine which reads this specification and generates each answer\nimage for the question. They just need your routine to make sure there is exactly one correct answer\nto each question.\n\n#### Input\nThe first line of input contains a single integer $$$N, (1 \\leq N \\leq 1000)$$$ which is the number of datasets that\nfollow.\nEach dataset consists of six lines of input. The first line of input is the specification for the folded out\ncube as described above. This line is followed by five lines, each of which gives the specification of\none answer image as described above.\n\n#### Output\nFor each dataset, output on a single line the dataset number, (1 through N), a blank, the number of\nanswers which are solutions of the problem (corners of the cube specified in the folded out line), a\nblank and five ‘Y’ or ‘N’ characters separated by a blank indicating which of the answer images was a\nsolution (‘Y’ for a solution, ‘N’ for not a solution).\n\n#### Sample Input\n```\n2\nF3E4E2D3C2F3\nC2D2F2\nE3F3C4\nF2C2D2\nD1E1F3\nE1C1E1\nA2F4F1A3A3C4\nC3A4A2\nF3F4A1\nF3C4A1\nA2C3A2\nA4A4F1\n```\n\n#### Sample Output\n```\n1 2 Y N Y N N\n2 0 N N N N N\n```\n',1000,32768,'0',0,37,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('380','Lex Smallest Drive','',3000,65536,'0',3,79,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('381','Down Went The Titanic','',3000,65536,'0',3,80,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('382','Stand in a Line','',3000,65536,'0',3,81,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('383','Bond','',3000,65536,'0',3,82,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('384','Troublemakers','',3000,65536,'0',3,83,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('385','Back to Kernighan-Ritchie','',3000,65536,'0',3,84,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('386','Always Late','',3000,65536,'0',3,85,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('387','Maze','',3000,65536,'0',3,86,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('388','Audubon\'s Stormy Arctic Trip','',3000,65536,'0',3,87,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('389','Playing with Wheels','',3000,65536,'0',3,88,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('39','A long stick','#### Description\nThere are a lot of problems about sticks. Here is one. I have $$$N\\,$$$ sticks each with\nsome length of $$$Li(1 \\leq Li \\leq 1, 000, 000)$$$ . I want to use those sticks to make a longer\nstick with length longer than or equal to $$$B\\,$$$. Furthermore, I want the length of\nthe stick as close to $$$B \\,$$$ as possible.\n#### Task\nNow, it is your turn. I will tell you the length of those $$$ N\\,$$$ sticks, and $$$B\\,$$$. Your job\nis let me know the length of stick which I can have, according the rule above.\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$,the number of test cases. There\nare two lines for each test case. The first line contains two integer numbers\n$$$N(1 \\leq N \\leq 25)$$$ and $$$B( 1 \\leq B \\leq S, S \\,is \\,the \\,sum \\,of \\,Li ) $$$. The second line contains\n$$$N \\,$$$ integer numbers(the length of sticks I have already, $$$ Li \\,$$$ ).\n#### Output\nFor each test case, print a line contains the solution.\n#### Sample Input\n```\n2\n5 14\n2 4 3 4 5\n5 14\n2 4 3 4 5\n```\n\n#### Sample Output\n```\n14\n14\n```\n',10000,32768,'0',0,38,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('390','The Settlers of Catan','#### Description\n\nWithin Settlers of Catan, the 1995 German game of the year, players attempt to dominate an island by building roads, settlements and cities across its uncharted wilderness. \n\nYou are employed by a software company that just has decided to develop a computer version of this game, and you are chosen to implement one of the game\'s special rules: \n\nWhen the game ends, the player who built the longest road gains two extra victory points. \n\nThe problem here is that the players usually build complex road networks and not just one linear path. Therefore, determining the longest road is not trivial (although human players usually see it immediately). \n\nCompared to the original game, we will solve a simplified problem here: You are given a set of nodes (cities) and a set of edges (road segments) of length 1 connecting the nodes. The longest road is defined as the longest path within the network that doesn\'t use an edge twice. Nodes may be visited more than once, though. \n\nExample: The following network contains a road of length 12. \n\n```\no        o -- o        o\n \\      /      \\      /\n  o -- o        o -- o\n /      \\      /      \\\no        o -- o        o -- o\n               \\      /\n                o -- o\n```\n\n#### Input\n\nThe input file will contain one or more test cases. \nThe first line of each test case contains two integers: the number of nodes n (2<=n<=25) and the number of edges m (1<=m<=25). The next m lines describe the m edges. Each edge is given by the numbers of the two nodes connected by it. Nodes are numbered from 0 to n-1. Edges are undirected. Nodes have degrees of three or less. The network is not neccessarily connected. \n\nInput will be terminated by two values of 0 for n and m.\n\n#### Output\n\nFor each test case, print the length of the longest road on a single line. \n\n#### Sample Input\n```\n3 2\n0 1\n1 2\n15 16\n0 2\n1 2\n2 3\n3 4\n3 5\n4 6\n5 7\n6 8\n7 8\n7 9\n8 10\n9 11\n10 12\n11 12\n10 13\n12 14\n0 0\n\n\n```\n\n#### Sample Output\n```\n2\n12\n```\n',3000,65536,'0',3,89,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('391','The Tourist Guide','',3000,65536,'0',3,90,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('392','The die is cast','',3000,65536,'0',3,91,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('393','Following Orders','#### Description\nBackground\n\nOrder is an important concept in mathematics and in computer science. For example, Zorn\'s Lemma states: ``a partially ordered set in which every chain has an upper bound contains a maximal element.\'\' Order is also important in reasoning about the fix-point semantics of programs.\n\nThis problem involves neither Zorn\'s Lemma nor fix-point semantics, but does involve order.\n\nThe Problem\n\nGiven a list of variable constraints of the form x < y, you are to write a program that prints all orderings of the variables that are consistent with the constraints.\n\nFor example, given the constraints x < y and x < z there are two orderings of the variables x, y, and z that are consistent with these constraints: x y z and x z y.\n#### Input\nThe input consists of a sequence of constraint specifications. A specification consists of two lines: a list of variables on one line followed by a list of constraints on the next line. A constraint is given by a pair of variables, where x y indicates that x < y.\nAll variables are single character, lower-case letters. There will be at least two variables, and no more than 20 variables in a specification. There will be at least one constraint, and no more than 50 constraints in a specification. There will be at least one, and no more than 300 orderings consistent with the contraints in a specification.\n\nInput is terminated by end-of-file.\n#### Output\nFor each constraint specification, all orderings consistent with the constraints should be printed. Orderings are printed in lexicographical (alphabetical) order, one per line.\n\nOutput for different constraint specifications is separated by a blank line.\n#### Sample Input\n```\na b f g\na b b f\nv w x y z\nv y x v z v w v\n```\n\n#### Sample Output\n```\nabfg\nabgf\nagbf\ngabf\n\nwxzvy\nwzxvy\nxwzvy\nxzwvy\nzwxvy\nzxwvy\n```\n',3000,65536,'0',3,92,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('394','Spreadsheet','',3000,65536,'0',3,93,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('395','Fire Station','',3000,65536,'0',3,94,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('396','Old Wine Into New Bottles','',3000,65536,'0',3,95,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('397','Thunder Mountain','',3000,65536,'0',3,96,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('398','MPI Maelstrom','',3000,65536,'0',3,97,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('399','Numbering Paths','',3000,65536,'0',3,98,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('4','Just Sort It','#### Description\nSorting is one of the most important algorithm in computer sciences. Please learn it well.\n\n本题需要的排序算法复杂度应该为nlogn，冒泡、选择的负责度为n^2，快排、归并、堆排序的复杂度为nlogn\n\n本题的内存限制也是比较严格，所以建议大家使用堆排序，或者快速排序\n\n#### Input\nThe first line of input contains $T(1\\leq T \\leq 10)$, the number of test cases. There is only line for each test case. The first number $N(1\\leq N \\leq 250,000)$of each test case will indicates how many integer numbers are there for sort from smaller to larger. All numbers are in the range of $[-2^{31},2^{31}-1]\\,$.\n\n#### Output\nOutput one line for every test case. The result of those integer numbers after sorting.\n\n#### Sample Input\n```\n3\n3 3 2 1\n2 3 2\n3 5 4 3\n```\n\n#### Sample Output\n```\n1 2 3\n2 3\n3 4 5\n```\n',10000,1168,'0',0,3,'',0,'2','2018-11-05 00:31:14','2018-11-05 00:48:07'),('40','Benefit','#### Description\nThere are a lot of problems about sticks. Here is another one. I have N sticks\neach with some length of $$$Li(1 \\leq Li \\leq 10, 000)$$$. I want to sell them to a store, but\nthe store accept sticks with same length $$$L (L\\, should\\, be\\, integer\\,)$$$ only, with price\n$$$W \\times L$$$ for each $$$L\\,$$$ unit long stick. I can only sell one kind of length of sticks to the\nstore. I can hire some guys to cut those sticks, they charge by each cut. It cost $$$C\\,$$$\ndollar for each cut. Example, I have a stick with length 10, I want to cut it into\nthree 3-length stick and one 1-length stick, then I should pay $$$3 \\times C$$$ dollar.\n#### Task\nFrom above, I think you are clear about the critical point is the length $$$L\\,$$$ which\nkind of length of sticks I did sell to the store. Please do me a favor. Help me to\nfind out how much can I earned as many.\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 500)$$$, the number of test cases. There\nare two lines for each test case. The first line contains three integer numbers\n$$$N(1 \\leq N \\leq 50)$$$,$$$W(1 \\leq W \\leq 1, 000)$$$ and $$$C(1 \\leq C \\leq 1, 000)$$$. The second line\ncontains $$$N\\,$$$ integer numbers(the length of sticks I have).\n#### Output\nFor each test case, print a line contains the solution.\n#### Sample Input\n```\n2\n3 10 1\n26 59 103\n3 10 1\n26 59 103\n```\n\n#### Sample Output\n```\n1770\n1770\n```\n',10000,32768,'0',0,39,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('400','Non-Stop Travel','',3000,65536,'0',3,99,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('401','The Postal Worker Rings Once','#### Description\nGraph algorithms form a very important part of computer science and have a lineage that goes back at least to Euler and the famous Seven Bridges of Königsberg problem. Many optimization problems involve determining efficient methods for reasoning about graphs.\n\nThis problem involves determining a route for a postal worker so that all mail is delivered while the postal worker walks a minimal distance, so as to rest weary legs.\n\nGiven a sequence of streets (connecting given intersections) you are to write a program that determines the minimal cost tour that traverses every street at least once. The tour must begin and end at the same intersection.\n\nThe \'\'real-life\'\' analogy concerns a postal worker who parks a truck at an intersection and then walks all streets on the postal delivery route (delivering mail) and returns to the truck to continue with the next route.\n\nThe cost of traversing a street is a function of the length of the street (there is a cost associated with delivering mail to houses and with walking even if no delivery occurs).\n\nIn this problem the number of streets that meet at a given intersection is called the degree of the intersection. There will be at most two intersections with odd degree. All other intersections will have even degree, i.e., an even number of streets meeting at that intersection. \n\n#### Input\nThe input consists of a sequence of one or more postal routes. A route is composed of a sequence of street names (strings), one per line, and is terminated by the string \'\'deadend\'\' which is NOT part of the route. The first and last letters of each street name specify the two intersections for that street, the length of the street name indicates the cost of traversing the street. All street names will consist of lowercase alphabetic characters.\n\nFor example, the name foo indicates a street with intersections f and o of length 3, and the name computer indicates a street with intersections c and r of length 8. No street name will have the same first and last letter and there will be at most one street directly connecting any two intersections. As specified, the number of intersections with odd degree in a postal route will be at most two. In each postal route there will be a path between all intersections, i.e., the intersections are connected. \n\n#### Output\nFor each postal route the output should consist of the cost of the minimal tour that visits all streets at least once. The minimal tour costs should be output in the order corresponding to the input postal routes. \n\n#### Sample Input\n```\none\ntwo\nthree\ndeadend\nmit\ndartmouth\nlinkoping\ntasmania\nyork\nemory\ncornell\nduke\nkaunas\nhildesheim\nconcord\narkansas\nwilliams\nglasgow\ndeadend\n```\n\n#### Sample Output\n```\n11\n114\n```\n',3000,65536,'0',4,0,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('402','Graphical Editor','#### Description\nThe simple graphical editor deals with a rectangular table M×N (1<=M,N<=250). Each pixel of the table has its colour. The picture is formed from this square pixels. \n\nThe problem is to write a program, which simulates an interactive work of the graphical editor. \n\n\n#### Input\nInput consists of the editor commands, one per line. Each command is represented by one Latin capital placed in the very beginning of the line. If the command supposes parameters, all the parameters will be given in the same line separated by space. As the parameters there may be: the coordinates of the pixel - two integers, the first one is the column number and belongs to 1..M, the second one is the row number and belongs to 1..N, the origin is in the upper left corner of the table; the colour - the Latin capital; file name - in MSDOS 8.3 format.\n\nThe editor deals with the following commands:\n\n\nI M N  Creates a new table M×N. All the pixels are colored in white (O).  </p><p>\nC  Clears the table. The size remains the same. All the pixels became white (O).  </p><p>\nL X Y C  Colors the pixel with coordinates (X,Y) in colour C.  </p><p>\nV X Y1 Y2 C  Draws the vertical segment in the column X between the rows Y1 and Y2 inclusive in colour C.  </p><p>\nH X1 X2 Y C  Draws the horizontal segment in the row Y between the columns X1 and X2 inclusive in colour C.  </p><p>\nK X1 Y1 X2 Y2 C  Draws the filled rectangle in colour C. (X1,Y1) is the upper left corner, (X2,Y2) is the lower right corner of the rectangle.  </p><p>\nF X Y C  Fills the region with the colour C. The region R to be filled is defined as follows. The pixel (X,Y) belongs to this region. The other pixel belongs to the region R if and only if it has the same colour as pixel (X,Y) and a common side with any pixel which belongs to this region.  </p><p>\nS Name  Writes the picture in the file Name.  </p><p>\nX  Terminates the session.\n</p>\n\n#### Output\nEvery time the command S NAME meets, you should output the file name NAME and the current table, row by row. Each row is represented by a pixels\' colours series, see the output sample. \n\n#### Errors\nIf as a command there will be a character different from I, C, L, V, H, K, F, S, X, the editor should ignore the whole line and pass to the next command.\n\nIn case of other errors the program behaviour is unpredictable. \n\n\n#### Sample Input\n```\nI 5 6\nL 2 3 A\nS one.bmp\nG 2 3 J\nF 3 3 J\nV 2 3 4 W\nH 3 4 2 Z\nS two.bmp\nX\n```\n\n#### Sample Output\n```\none.bmp\nOOOOO\nOOOOO\nOAOOO\nOOOOO\nOOOOO\nOOOOO\ntwo.bmp\nJJJJJ\nJJZZJ\nJWJJJ\nJWJJJ\nJJJJJ\nJJJJJ\n```\n',3000,65536,'0',4,1,'',1,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('403','The Seasonal War','',3000,65536,'0',4,2,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('404','Arbitrage (II)','',3000,65536,'0',4,3,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('405','Tourist Guide','',3000,65536,'0',4,4,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('406','The path in the colored field','',3000,65536,'0',4,5,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('407','John\'s trip','',3000,65536,'0',4,6,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('408','Triangle Counting','',3000,65536,'0',4,7,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('409','Traffic Flow','',3000,65536,'0',4,8,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('41','Robot','#### Description\nA robot is walking on a grid board. He can only travel parallel to the axes and make turn at integer coordinates. At very beginning the robot is located at the grid $$$(0\\, , 0\\,)$$$ and this grid maybe be blocked. But he is able to make it unblocded. He wants to go to the grid $$$(Xd\\,, Y d\\,)$$$ and this grid is never blocked. However, some of the grid is blocked, that means the robot cannot travels to those grids.\n\n#### Task\nPlease help the robot to find a shortest way to the grid which he wants to go, the robot just want to know the shortest distance only.\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. The first line of each test case will be three integers, the destination $$$(Xd\\,, Yd\\,)$$$ and how many grids are blocked $$$N\\,$$$. The follow $$$N\\,$$$ line will contain two integers of the oordinate of blocked grid,$$$ X\\,$$$ and $$$Y\\,$$$ on every line. All coordinates will be between\n$$$ -\\,500 $$$ and $$$ 500$$$, inclusive.\n#### Output\nFor each test case, print a line contains the solution. If no solution print -1.\n\n#### Sample Input\n```\n2\n0 2 1\n0 1\n0 2 1\n0 1\n```\n\n#### Sample Output\n```\n4\n4\n```\n',10000,32768,'0',0,40,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('410','Play on Words','',3000,65536,'0',4,9,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('411','The Grand Dinner','',3000,65536,'0',4,10,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('412','Airlines','',3000,65536,'0',4,11,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('413','King','',3000,65536,'0',4,12,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('414','Exchange Rates','',3000,65536,'0',4,13,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('415','Rare Order','',3000,65536,'0',4,14,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('416','The Ouroboros problem','',3000,65536,'0',4,15,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('417','Graph Coloring','#### Description\nYou are to write a program that tries to find an optimal coloring for a given graph. Colors are applied to the nodes of the graph and the only available colors are black and white. The coloring of the graph is called optimal if a maximum of nodes is black. The coloring is restricted by the rule that no two connected nodes may be black.\n#### Input\nThe graph is given as a set of nodes denoted by numbers 1..n , n<100 , and a set of undirected edges denoted by pairs of node numbers (n1,n2). The input file contains m graphs. The number m is given on the first line. The first line of each graph contains n and k, the number of nodes and the number of edges, respectively. The following k lines contain the edges given by a pair of node numbers, which are separated by a space.\n#### Output\nThe output should consists of 2m lines, two lines for each graph found in the input file. The first line of should contain the maximum number of nodes that can be colored black in the graph. The second line should contain one possible optimal coloring. It is given by the list of black nodes, separated by a blank.\n#### Sample Input\n```\n1\n6 8\n1 2\n1 3\n2 4\n2 5\n3 4\n3 6\n4 6\n5 6\n```\n\n#### Sample Output\n```\n3\n1 4 5\n```\n',3000,65536,'0',4,16,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('418','Lift Hopping','',3000,65536,'0',4,17,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('419','Friends','#### Description\nThere is a town with N citizens. It is known that some pairs of people are friends. According to the famous saying that “The friends of my friends are my friends, too” it follows that if A and B are friends and B and C are friends then A and C are friends, too.\n \nYour task is to count how many people there are in the largest group of friends.\n#### Input\nInput consists of several datasets. The first line of the input consists of a line with the number of test cases to follow. The first line of each dataset contains tho numbers N and M, where N is the number of town\'s citizens (1≤N≤30000) and M is the number of pairs of people (0≤M≤500000), which are known to be friends. Each of the following M lines consists of two integers A and B (1≤A≤N, 1≤B≤N, A≠B) which describe that A and B are friends. There could be repetitions among the given pairs.\n#### Output\nThe output for each test case should contain one number denoting how many people there are in the largest group of friends.\n#### Sample Input\n```\n2\n3 2\n1 2\n2 3\n10 12\n1 2\n3 1\n3 4\n5 4\n3 5\n4 6\n5 2\n2 1\n7 10\n1 2\n9 10\n8 9\n```\n\n#### Sample Output\n```\n3\n6\n```\n',3000,65536,'0',4,18,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('42','Numbers','#### Description\nLet’s play a game about numbers. The rule of this game is quite simple. Only two\nkinds of commands in this game, one is ’$$$Add\\, k\\,$$$’ command the other one is ’$$$Ask\\,\nk\\,$$$’ command. You will have a list of numbers. At beginning the list is empty.\nWhen you got the command ’$$$Add\\, k$$$’, firstly, you must check if the number $$$k\\,$$$ is\nin the list or not; secondly, if the number $$$k\\,$$$ is not in the list, add it to the list or\ndo nothing. When you got the command ’$$$Ask\\, k$$$’ you should tell if the number in\nthe list or not.\n\n#### Task\nPlease code a program for me, which can help me to play this game.\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 20)$$$, the number of test cases. The first\nline of each test case will have an integer number $$$N(1 \\leq N \\leq 1, 000, 000)$$$, the\nnumber of commands. $$$N\\,$$$ lines followed, each contains one command \'$$$Add\\, k$$$\' or\n\'$$$Ask\\, k$$$\' $$$(-\\,2,000,000,000 \\leq k \\leq 2,000,000,000)$$$.\n+ Hint for C++ users: Huge input, do not use cin.\n#### Output\nFor each ’$$$Ask\\, k$$$’ command, print ’$$$YES\\,$$$’ when the number $$$k\\,$$$ in the list or print\n’$$$NO\\,$$$’ in one line.\n#### Sample Input\n```\n2\n5\nAdd 2\nAsk 3\nAsk 2\nAdd 3\nAsk 3\n2\nAdd 1\nAsk 2\n```\n\n#### Sample Output\n```\nNO\nYES\nYES\nNO\n```\n',31000,32768,'0',0,41,'',0,'3','2018-11-05 00:31:14','2018-11-05 00:48:07'),('420','Frogger','',3000,65536,'0',4,19,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('421','Highways','',3000,65536,'0',4,20,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('422','ACM Contest and Blackout','#### Description\nIn order to prepare the “The First National ACM School Contest”(in 20??) the major of the city decided to provide all the schools with a reliable source of power. (The major is really afraid of blackoutsJ). So, in order to do that, power station “Future” and one school (doesn’t matter which one) must be connected; in addition, some schools must be connected as well.\n \nYou may assume that a school has a reliable source of power if it’s connected directly to “Future”, or to any other school that has a reliable source of power. You are given the cost of connection between some schools. The major has decided to pick out two the cheapest connection plans – the cost of the connection is equal to the sum of the connections between the schools. Your task is to help the major – find the cost of the two cheapest connection plans.\n \n#### Input\nThe Input starts with the number of test cases, T (1<=T<=15) on a line. Then T test cases follow. The first line of every test case contains two numbers, which are separated by a space, N (3<=N<=100) the number of schools in the city, and M the number of possible connections among them. Next M lines contain three numbers Ai, Bi, Ci , where Ci  is the cost of the connection (1<=Ci<=300) between schools Ai  and Bi. The schools are numbered with integers in the range 1 to N.\n\n#### Output\nFor every test case print only one line of output. This line should contain two numbers separated by a single space - the cost of two the cheapest connection plans. Let S1 be the cheapest cost and S2 the next cheapest cost. It’s important, that S1=S2 if and only if there are two cheapest plans, otherwise S1<S2. You can assume that it is always possible to find the costs S1 and S2..\n\n#### Sample Input\n```\n2\n5 8\n1 3 75\n3 4 51\n2 4 19\n3 2 95\n2 5 42\n5 4 31\n1 2 9\n3 5 66\n9 14\n1 2 4\n1 8 8\n2 8 11\n3 2 8\n8 9 7\n8 7 1\n7 9 6\n9 3 2\n3 4 7\n3 6 4\n7 6 2\n4 6 14\n4 5 9\n5 6 10\n```\n\n#### Sample Output\n```\n110 121\n37 37\n```\n',3000,65536,'0',4,21,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('423','Not That Kind of Graph','',3000,65536,'0',4,22,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('424','All Roads Lead Where?','',3000,65536,'0',4,23,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('425','Krypton Factor','',3000,65536,'0',4,24,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('426','Wormholes','',3000,65536,'0',4,25,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('427','Il Gioco dell\'X','',3000,65536,'0',4,26,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('428','Getting in Line','',3000,65536,'0',4,27,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('429','Jugs','',3000,65536,'0',4,28,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('43','Segments','#### Description\nThere are two segments $$$AB\\,$$$ Insert formula here and $$$CD\\,$$$ on a plane. The coordinate of the end points\nof segment $$$AB\\,$$$ is $$$A(Ax\\,, Ay\\,)$$$ and $$$B(Bx\\,,By\\,)$$$, the end points of segment $$$CD\\,$$$ is\n$$$C(Cx\\,,Cy\\,)$$$ and $$$D(Dx\\,,Dy\\,)$$$.\n#### Task\nPlease tell me the cross point of those two segments, if it is existed.\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 10, 000)$$$, the number of test cases. There\nis one line only for each test case, it contains eight integer numbers $$$Ax\\,, Ay\\,, Bx\\,,\nBy\\,, Cx\\,, Cy$$$ and $$$Dx\\,, Dy\\,$$$, all numbers are between $$$-10, 000\\,$$$ to $$$10, 000\\,$$$,inclusive.\n#### Output\nFor each test case, print a line contains the cross point of those two segments. If\nit is not exist, just print ’$$$0\\, 0$$$’. The solution with an absolute error less than $$$10\\,^{-4}$$$\nis considered correct.\n#### Sample Input\n```\n3\n0 0 0 2 1 0 1 2\n0 0 2 2 0 2 2 0\n0 0 2 2 0 2 2 0\n```\n\n#### Sample Output\n```\n0 0\n1 1\n1 1\n```\n',1000,1024,'0',0,42,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('430','A Graph Problem','',3000,65536,'0',4,29,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('431','Optimal Programs','',3000,65536,'0',4,30,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('432','Re-connecting Computer Sites','',3000,65536,'0',4,31,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('433','Walking on the Safe Side','',3000,65536,'0',4,32,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('434','The PATH','',3000,65536,'0',4,33,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('435','Travelling Salesman','',3000,65536,'0',4,34,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('436','Meeting Prof. Miguel...','',3000,65536,'0',4,35,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('437','Jogging Trails','',3000,65536,'0',4,36,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('438','We Ship Cheap','',3000,65536,'0',4,37,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('439','Killing Aliens in Borg Maze','',3000,65536,'0',4,38,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('44','New Game','#### Description\nAlec is playing a new game, in the game Alec have $$$N\\,$$$ cities$$$(1 \\rightsquigarrow N)$$$ on the map\nwith coordinate$$$(Xi\\,, Yi\\,)$$$. The cities should be connected together. According to\nthe game rule, $$$N\\,$$$ cities are connected means Alec can travel from one city to any\nother city freely. The cost of making city-i and city-j connected is the distance\nof $$$(Xi\\,, Yi\\,)$$$ and $$$(Xj\\,, Yj\\,)$$$ on the map. Of course some of the cities are connected\nalready when Alec have them.\n#### Task\nPlease help Alec to find out the minimum cost needed to make $$$N\\,$$$ cities connected.\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 10)$$$, the number of test cases. First line\nof the test case has two integer numbers, the city number $$$N(1 \\leq N \\leq 1000)$$$ and ,\nhow many pairs of cities are connected already $$$M\\,$$$. $$$N\\,$$$ lines followed, each contains\ntwo integer numbers $$$Xi,Y i(0 \\leq Xi, Y i \\leq 1, 000, 000)$$$; then $$$M\\,$$$ lines followed, each\ncontains two integer numbers $$$A\\,$$$ and $$$B\\,$$$ denote city $$$A\\,$$$ and city $$$B\\,$$$ are connected\nalready.\n#### Output\nFor each test case, print a line contains the solution. The solution with an absolute\nerror less than $$$10\\,^{-4}$$$ is considered correct.\n#### Sample Input\n```\n2\n3 1\n0 0\n1 1\n2 2\n1 2\n3 1\n0 0\n1 1\n2 2\n1 2\n```\n#### Sample Output\n```\n1.414213562\n1.414213562\n```\n',2000,32768,'0',0,43,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('440','Morning Walk','',3000,65536,'0',4,39,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('441','The House Of Santa Claus','',3000,65536,'0',4,40,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('442','Basic wall maze','',3000,65536,'0',4,41,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('443','The Color Game','',3000,65536,'0',4,42,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('444','Bear with me, again..','',3000,65536,'0',4,43,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('445','Robot','',3000,65536,'0',4,44,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('446','Rings and Glue','',3000,65536,'0',4,45,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('447','Word Index','',3000,65536,'0',4,46,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('448','Climbing Trees','',3000,65536,'0',4,47,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('449','Ordering Tasks','',3000,65536,'0',4,48,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('45','Division','#### Description\nHi everybody, the game which you expected for such a long time is really started.\nLet’s have a nice beginning. By the way, today is April Fools’ Day. Enjoy it.\nYou will be given an N based integer number A and a 10 based integer number\nB. You will have to print the Answer of A divided by B. Of course, the answer is\na N based integer number. You are given the guaranty that A is divisible by B.\n\nThe range for N is $$$(2 \\leq N \\leq 62)$$$ and the digit symbols for 62 based number is\n$$$(0  \\rightarrow 9 \\,and\\, A  \\rightarrow Z \\,and\\, a  \\rightarrow z)$$$. Similarly, the digit symbols for 61 based number\n\nsystem is $$$(0 \\rightarrow 9 \\,and\\, A  \\rightarrow Z \\,and\\, a  \\rightarrow y).$$$\n\nThe range for B is $$$(-2^{20} \\leq B \\leq 2^{20} \\,and \\, B \\neq 0)$$$.\n\n“How about the number A?”\n\n“Oh God!! I had forgot.”\n\n#### Input\nThe first line of input contains$$$ T(1 \\leq T \\leq 100)$$$, the number of test cases. There\nare only two lines for each test case. The first line is number $$$(-2^{20} \\leq B \\leq 2^{20} \\,and \\, B \\neq 0)$$$\nand number $$$ N(2 \\leq N \\leq 62)$$$ split by a space. The second line is\nnumber A.\n\n#### Output\nFor each test case, output a line contains the answer of the problem.\n\n#### Sample Input\n```\n2\n5 20\nF\n3 10\n9\n```\n\n#### Sample Output\n```\n3\n3\n```\n',15000,32768,'0',0,44,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('450','Critical Links','',3000,65536,'0',4,49,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('451','15-Puzzle Problem','',3000,65536,'0',4,50,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('452','Knights in FEN','',3000,65536,'0',4,51,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('453','How Many Dependencies?','',3000,65536,'0',4,52,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('454','A Node Too Far','',3000,65536,'0',4,53,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('455','My T-shirt suits me','#### Description\nOur friend Victor participates as an instructor in an environmental volunteer program. His boss asked Victor to distribute N T-shirts to M volunteers, one T-shirt each volunteer, where N is multiple of six, and N ≥ M. There are the same number of T-shirts of each one of the six available sizes: XXL, XL, L, M , S, and XS. Victor has a little problem because only two sizes of the T-shirts suit each volunteer.\n\nYou must write a program to decide if Victor can distribute T-shirts in such a way that all volunteers get a T-shirt that suit them. If N ≠ M, there can be some remaining T-shirts.\n\n#### Input\nThe first line of the input contains the number of test cases. For each test case, there is a line with two numbers N and M. N is multiple of 6, 1 ≤ N ≤ 36, and indicates the number of T-shirts. Number M, 1 ≤ M ≤ 30, indicates the number of volunteers, with N ≥ M. Subsequently, M lines are listed where each line contains, separated by one space, the two sizes that suit each volunteer (XXL, XL, L, M , S, or XS).\n\n#### Output\nFor each test case you are to print a line containing YES if there is, at least, one distribution where T-shirts suit all volunteers, or NO, in other case.\n\n#### Sample Input\n```\n3\n18 6\nL XL\nXL L\nXXL XL\nS XS\nM S\nM L\n6 4\nS XL\nL S\nL XL\nL XL\n6 1\nL M\n```\n\n#### Sample Output\n```\nYES\nNO\nYES\n```\n',3000,65536,'0',4,54,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('456','Shipping Routes','',3000,65536,'0',4,55,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('457','Freckles','',3000,65536,'0',4,56,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('458','Page Hopping','',3000,65536,'0',4,57,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('459','Marcus','',3000,65536,'0',4,58,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('46','Star gate','#### Description\nWhen a secret base abandoned by the Ancients, the original builders of the stargates,\nis found buried in the ice of Antarctica, the Stargate Atlantis team is recruited\nfor the most daring stargate mission yet: expedition to the distant Pegasus\ngalaxy.\n\nThe Stargate Atlantis team find out there are a lot of Stargate all over the Pegasus\ngalaxy, and they can travel from one planet to another by the Stargate. But the\nstargate has limited by weight restrictions, different stargate has different weight\nrestrictions. What will happened, when the stargate over load. Everything will\ndisappear, include the stargate.\nAfter some research, they make a list of the limited between different planet, which\nconnect directly. They want to know the maximum weight restrictions for travel\nsafe between some planets else. Now, they are asking you to write a program to\nhelp.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases.\nThe first line of each test case will contain two integers: the number of planets\n$$$N(2 \\leq N \\leq 100)$$$ and the number of stargates $$$R(1 \\leq R \\leq 20, 000)$$$ makeing up\nthe list.\n\nThen R lines will follow, each one describing one connection of stargate by naming\nthe two planets and giving the weight limit. Names are not longer than $$$30$$$\ncharacters and do not contain white-space characters. Weight limits are integers\nin the range 0 - 10000. Stargate can always be travelled in both directions.\nThe last line of the test case contains two planet names: start and destination.\n\n#### Output\nFor each test case, output three lines:\n\n• The first line “Case x:”, where x is the number of test case\n\n• The second line “y”, where y is the maximum weight restrictions\n\n• The third a blank line\n\n#### Sample Input\n```\n2\n4 3\nKa St 100\nSt Ul 80\nUl Mu 120\nKa Mu\n4 3\nKa St 100\nSt Ul 80\nUl Mu 120\nKa Mu\n```\n\n#### Sample Output\n```\nCase 1:\n80\n\nCase 2:\n80\n\n```\n',1000,32768,'0',0,45,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('460','Edit Step Ladders','',3000,65536,'0',4,59,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('461','Hippity Hopscotch','',3000,65536,'0',4,60,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('462','Heavy Cargo','',3000,65536,'0',4,61,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('463','Unique World','',3000,65536,'0',4,62,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('464','Traffic','',3000,65536,'0',4,63,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('465','Arbitrage','',3000,65536,'0',4,64,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('466','Marbles on a tree','',3000,65536,'0',4,65,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('467','Roads in the North','',3000,65536,'0',4,66,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('468','Rank the Languages','',3000,65536,'0',4,67,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('469','Longest Paths','',3000,65536,'0',4,68,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('47','Digit','#### Description\nDo you know what is digit? Of course you know, all of us know it, $$$1,\\,2,\\,3,\\,4,\\,5,\\,6,\\,7,\\,8,\\,9,\\,0.$$$\n\nThat is digits. You know, i know, but not everyone know. There is a county on a\nsmall island. People live in this country never know what is digit looks like. They\nknow letters only. $$$A,\\,B,\\,C,\\,D,\\,E,\\, F,\\, G,\\,H,\\, I,\\, J,\\,K,\\,\\rightsquigarrow X,\\,Y,\\,Z.$$$\n\nYou may asked how can they count? Let me show you. They are count from zero.\nThat means A is zero here. $$$A,B,C,\\rightsquigarrow ,X, Y,Z, AA,AB,\\rightsquigarrow ,ZY,ZZ, AAA,AAB,\\rightsquigarrow \n,ZZY,ZZZ,\\rightsquigarrow$$$\n\nDo you clear now? I think you the better be clear, right now. Because, there is\nproblem for you about those letters. It is asking you to translate from those letters\nto our digit numbers.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100000)$$$, the number of test cases.\nThere is only one line of each test case. It contains no more than 10 characters,\nupper only.\n\n#### Output\nFor each test case, output a line contains an integer number.\n\n#### Sample Input\n```\n3\nA\nZ\nAB\n```\n\n#### Sample Output\n```\n0\n25\n27\n```\n',1000,32768,'0',0,46,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('470','Knight Moves','',3000,65536,'0',4,69,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('471','Graph Connectivity','',3000,65536,'0',4,70,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('472','Sending email','',3000,65536,'0',4,71,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('473','Vertex','',3000,65536,'0',4,72,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('474','Power of Cryptography','',3000,65536,'0',4,73,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('475','Anne\'s game','',3000,65536,'0',4,74,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('476','Border','',3000,65536,'0',4,75,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('477','Audiophobia','',3000,65536,'0',4,76,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('478','The Tree Root','',3000,65536,'0',4,77,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('479','Slash Maze','',3000,65536,'0',4,78,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('48','Excel','#### Description\nMost of you know how to use the Excel to sort the table. Alec knows too. Because\nAlec knows how to sort the table in Excel. He was asked to use the Excel to sort\na table.\n\nYou may think that is a simply job. I am going to change your idea now. Alec\nmust follow a long list of columns from the table, and sort the table by those\ncolumns one by one. The sorting in Excel is stable, that is, rows that have equal\nvalues in different column, remain in their original order.\n\nTable A:\n{| align=\"center\" cellspacing=\"0\" border=\"1\"\n|\'\'\'Col 1\'\'\'|||\'\'\'Col 2\'\'\'|||\'\'\'Col 3\'\'\'\n|-\n|alec || male||white\n|-\n|alec || boy||blue\n|-\n|kaman || boy||red\n|-\n|kaman || male||black\n|-\n|xyd || gril||pink\n|-\n|xyd || female||pink\n|}\n\nTable B:\n{| align=\"center\" cellspacing=\"0\" border=\"1\"\n|\'\'\'Col 1\'\'\'|||\'\'\'Col 2\'\'\'|||\'\'\'Col 3\'\'\'\n|-\n|alec || boy||blue\n|-\n|kaman || boy||red\n|-\n|xyd || female||pink\n|-\n|xyd || gril||pink\n|-\n|alec || male||white\n|-\n|kaman || male||black\n|}\n\nTable C:\n{| align=\"center\" cellspacing=\"0\" border=\"1\"\n|\'\'\'Col 1\'\'\'|||\'\'\'Col 2\'\'\'|||\'\'\'Col 3\'\'\'\n|-\n|alec || boy||blue\n|-\n|alec || male||white\n|-\n|kaman || boy||red\n|-\n|kaman || male||black\n|-\n|xyd || femal||pink\n|-\n|xyd || girl||pink\n|}\n\n\nHere, is an example for you. The list for Alec is, “1 2 1”. Alec must use the Excel\nto sort the table by the column 1 first. The result of this step is Table A. Then\nuse the Excel to sort the Table A by the column 2. The result is Table B. The last\nstep is, sort the Table B by the column 1. The Table C is the final result which\nAlec must have.\n\nAlec is lazy, he wants to minimize the list, so he can finish the job with the fewest\nsteps. Of course, he must got the correct final result, or he will in trouble. For\nthe example, list 1 2 1” can be replaced by list 2 1”. Because, the final result\nof the list 1 2 1” and the final result of the list 1 2 1” are the same.\nAlec is asking you to write a program that minimize his list.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. There is\nonly two lines of each test case. The first line of each test case contains two integers,\n$$$C(1 \\leq C \\leq 3, 000, 000)$$$ is the number of columns and $$$N(1 \\leq N \\leq 9, 000, 000)$$$\nis the length of the list. The second line contains N integers,$$$ Ki(1 \\leq Ki \\leq C)$$$.\n\n#### Output\nFor each test case, output two lines. The first line contains an integer number, the\nlength of the minimized list. The second line contains the new list, the numbers\nsplit by a blank. No excess blank!\n\n#### Sample Input\n```\n2\n3 3\n1 2 1\n4 6\n1 2 1 2 4 4\n```\n\n#### Sample Output\n```\n2\n2 1\n3\n1 2 4\n```\n',15000,32768,'0',0,47,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('480','05-2 Rendezvous','',3000,65536,'0',4,79,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('481','Hanoi Tower Troubles Again!','',3000,65536,'0',4,80,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('482','Minimum Transport Cost','',3000,65536,'0',4,81,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('483','Trip Routing','',3000,65536,'0',4,82,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('484','Theseus and the Minotaur','',3000,65536,'0',4,83,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('485','Ubiquitous Religions','',3000,65536,'0',4,84,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('486','Is It A Tree?','',3000,65536,'0',4,85,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('487','Liftless EME','',3000,65536,'0',4,86,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('488','Bicoloring','#### Description\nIn 1976 the ``Four Color Map Theorem\" was proven with the assistance of a computer. This theorem states that every map can be colored using only four colors, in such a way that no region is colored using the same color as a neighbor region.\n\nHere you are asked to solve a simpler similar problem. You have to decide whether a given arbitrary connected graph can be bicolored. That is, if one can assign colors (from a palette of two) to the nodes in such a way that no two adjacent nodes have the same color. To simplify the problem you can assume:\n\n+  no node will have an edge to itself.\n+  the graph is nondirected. That is, if a node a is said to be connected to a node b, then you must assume that b is connected to a.\n+  the graph will be strongly connected. That is, there will be at least one path from any node to any other node. \n\n#### Input\nThe input consists of several test cases. Each test case starts with a line containing the number n ( 1 < n < 200) of different nodes. The second line contains the number of edges l. After this, l lines will follow, each containing two numbers that specify an edge between the two nodes that they represent. A node in the graph will be labeled using a number a ( 0 <= a < n).\n\nAn input with n = 0 will mark the end of the input and is not to be processed.\n\n#### Output\nYou have to decide whether the input graph can be bicolored or not, and print it as shown below. \n\n#### Sample Input\n```\n3\n3\n0 1\n1 2\n2 0\n9\n8\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n0 8\n0\n```\n\n#### Sample Output\n```\nNOT BICOLORABLE.\nBICOLORABLE.\n```\n',3000,65536,'0',4,87,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('489','Numerically Speaking','',3000,65536,'0',4,88,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('49','Alphabetical','#### Description\nDo you know the meaning of the title? If you don’t know it, open your dictionary.\nYou will have some a list of words. Show me a new list after sort by the alphabetic\norder.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. The\nfirst line of each test case contains an integer, $$$N(1 \\leq N \\leq 100)$$$ is the number\nof words in the list. N lines followed, there is a word contains in each line. The\nlength of each word will not more than 10.\n\n#### Output\nFor each test case, output N lines. One word per line. Test cases split by a blank\nline.\n\n#### Sample Input\n```\n2\n2\nb\na\n3\nszupc\ntest\nalec\n```\n\n#### Sample Output\n```\na\nb\n\nalec\nszupc\ntest\n```\n',1000,32768,'0',0,48,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('490','Risk','',3000,65536,'0',4,89,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('491','Wetlands of Florida','',3000,65536,'0',4,90,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('492','Erdos Numbers','',3000,65536,'0',4,91,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('493','Maze Exploration','',3000,65536,'0',4,92,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('494','Dungeon Master','',3000,65536,'0',4,93,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('495','Ouroboros Snake','',3000,65536,'0',4,94,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('496','You want what filled?','',3000,65536,'0',4,95,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('497','Prerequisites?','',3000,65536,'0',4,96,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('498','Network Connections','',3000,65536,'0',4,97,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('499','Fill','',3000,65536,'0',4,98,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('5','String Matching','#### Description\nYou will have two string s1 and s2. Each of them contains capital letters and asterisk only. You can replace asterisk with any string included empty string, and got two same string finally.\n\nYour job is to write a program which can show me the shortest possible final string. If it is an impossible mission, just let me know it.\n\n#### Input\nThe first number $$$T (1\\leq T \\leq 1000)$$$ means how many test cases will followed. For each test case will contain two lines, string s1 and string s2. All length of both string will in the range $$$[1,50]\\,$$$, and both of them will have exactly one asterisk.\n\n#### Output\nFor each test case, please show me the shortest string. If it is impossible, please output \'impossible\', in one line.\n\n#### Sample Input\n```\n2\nTEST*\n+ ESTING\nA*BC\nAD*C\n```\n#### Sample Output\n```\nTESTING\nADBC\n```\n',1000,32768,'0',0,4,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('50','Games','#### Description\nAlec always play games with D. The rule sound unfair sometime. One time, they\nhave the rule like this. Play ten games, if can Alec wins more than seven games,\nAlec win or D win. Don’t bo so surprised about the rule. There is historical\nreason. According to the records, the winning probability of Alec is higher.\n\nD wants to know the winning chance of the bet with Alec. Assumed, D knows\nthe winning probability of Alec. And, the rule was fixed. You are asked to write\na program to find out the answer for D.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 1000)$$$, the number of test cases. There\nis only line for each test case. It contains three integers, $$$N(1 \\leq N \\leq 20)$$$ is the\nnumber of games in the bet; $$$W(1 \\leq W \\leq N)$$$ is how many games Alec should win\nat least in the bet, to be the winner; and $$$C(0 \\leq C \\leq 100)$$$ is the probability in\npercent of winning one particular game of Alec.\n\n#### Output\nFor each test case, output the probability of winning the bet of D in one line, with\n4 digits after the point.\n\n#### Sample Input\n```\n2\n2 2 50\n3 2 70\n```\n\n#### Sample Output\n```\n0.7500\n0.2160\n```\n',1000,32768,'0',0,49,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('500','Alternative Arborescence','',3000,65536,'0',4,99,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('501','Is Bigger Smarter?','',3000,65536,'0',5,0,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('502','Network','',3000,65536,'0',5,1,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('503','Collecting Beepers','',3000,65536,'0',5,2,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('504','Oil Deposits','',3000,65536,'0',5,3,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('505','Beverages','',3000,65536,'0',5,4,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('506','Gopher and Hawks','',3000,65536,'0',5,5,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('507','From Dusk Till Dawn','',3000,65536,'0',5,6,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('508','Arctic Network','',3000,65536,'0',5,7,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('509','Connect the Campus','',3000,65536,'0',5,8,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('51','Betting','#### Description\nPeople like to bet. One day, you and your friend are going to play football, and\nyour friend wants to make a bet that he can kick the football into a box which\nis about 10 meters always within a certain number of shots. You know that each\ntime he takes a shot, there is an accuracy percent probability that he will hit the\ntarget.\n\n#### Task\nWrite a program to calculate the maximal number of shots at which it is advantageous\nfor you to take the bet by the accuracy percent probability$$$(1 \\leq P \\leq 100)$$$.\nA number n is considered advantageous if the probability that your friend will hit\nthe target in n or less shots is less than 50%.\nInput\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. There\nis only one line with an integer number $$$P (1 \\leq P \\leq 100)$$$ for each test case.\n\n#### Output\nFor each test case, output a line contains the answer of the problem.\n\n#### Sample Input\n```\n2\n40\n50\n```\nSample Output\n```\n1\n0\n```\n',1000,1024,'0',0,50,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('510','Bordering on Madness','#### Description\nBob Roberts owns a design business which creates custom artwork for various corporations. One\ntechnique that his company likes to use is to take a simple rectilinear figure (a figure where all sides\nmeet at 90 or 270 degrees and which contains no holes) and draw one or more rectilinear borders around\nthem. Each of these borders is drawn so that it is a set distance d away from the previously drawn\nborder (or the original figure if it is the first border) and then the new area outlined by each border is\npainted a unique color. Some examples are shown below (without the coloring of the borders).\n\n[[File:F09_1.png|center]]\n\nThe example on the left shows a simple rectilinear figure (grey) with two borders drawn around it. The\none on the right is a more complicated figure; note that the border may become disconnected.\n\nThese pieces of art can get quite large, so Bob would like a program which can draw prototypes of the\nfinished pieces in order to judge how aesthetically pleasing they are (and how much money they will cost\nto build). To simplify things, Bob never starts with a figure that results in a border where 2 horizontal\n(or vertical) sections intersect, even at a point. This disallows such cases as those shown below:\n\n[[File:F09_2.png|center]]\n\n#### Input\nInput will consist of multiple test cases. The first line of the input will contain a single integer\nindicating the number of test cases. Each test case will consist of two or more lines. The first will\ncontain three positive integers n, m and d indicating the number of sides of the rectlinear figure, the\nnumber of borders to draw, and the distance between each border, where $$$n \\leq 100$$$ and $$$m \\leq 20$$$.\nThe remaining lines will contain the n vertices of the figure, each represented by two positive integers\nindicating the x and y coordinates. The vertices will be listed in clockwise order starting with the vertex\nwith the largest y value and (among those vertices) the smallest x value.\n\n#### Output\nFor each test case, output three lines: the first will list the case number (as shown in the examples),\nthe second will contain m integers indicating the length of each border, and the third will contain m\nintegers indicating the additional area contributed to the artwork by each border. Both of these sets of\nnumbers should be listed in order, starting from the border nearest the original figure. Lines two and\nthree should be indented two spaces and labeled as shown in the examples. Separate test cases with a\nblank line.\n\n#### Sample Input\n```\n2\n6 2 10\n20 30 100 30 100 0 0 0 0 10 20 10\n10 1 7\n20 50 70 50 70 0 0 0 0 30\n20 30 20 10 60 10 60 40 20 40\n```\n\n#### Sample Output\n```\nCase 1:\n  Perimeters: 340 420\n  Areas: 3000 3800\n\nCase 2:\n  Perimeters: 380\n  Areas: 2660\n```\n',10000,65536,'0',5,9,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('511','Jack of All Trades','#### Description\nJack Barter is a wheeler-dealer of the highest sort. He\'ll trade anything for anything, as long as he\ngets a good deal. Recently, he wanted to trade some red agate marbles for some goldfish. Jack\'s friend\nAmanda was willing to trade him 1 goldfish for 2 red agate marbles. But Jack did some more digging\nand found another friend Chuck who was willing to trade him 5 plastic shovels for 3 marbles while\nAmanda was willing to trade 1 goldfish for 3 plastic shovels. Jack realized that he could get a better\ndeal going through Chuck (1.8 marbles per goldfish) than by trading his marbles directly to Amanda\n(2 marbles per goldfish).\n\nJack revels in transactions like these, but he limits the number of other people involved in a chain of\ntransactions to 9 (otherwise things can get a bit out of hand). Normally Jack would use a little program\nhe wrote to do all the necessary calculations to find the optimal deal, but he recently traded away his\ncomputer for a fine set of ivory-handled toothpicks. So Jack needs your help.\n\n#### Input\nInput will consist of multiple test cases. The first line of the file will contain an integer n indicating\nthe number of test cases in the file. Each test case will start with a line containing two strings and\na positive integer $$$m \\leq 50$$$. The first string denotes the items that Jack wants, and the second string\nidentifies the items Jack is willing to trade. After this will be m lines of the form\n+ a1 name1 a2 name2\nindicating that some friend of Jack’s is willing to trade an amount a1 of item name1 for an amount a2\nof item name2. (Note this does not imply the friend is also willing to trade a2 of item name2 for a1 of\nitem name1.) The values of a1 and a2 will be positive and $$$\\leq 20$$$. No person will ever need more than\n$$$2^{31}-1\\,$$$ items to complete a successful trade.\n\n#### Output\nFor each test case, output the phrase Case i: (where i is the case number starting at 1) followed by\nthe best possible ratio that Jack can obtain. Output the ratio using 5 significant digits, rounded. Follow\nthis by a single space and then the number of ways that Jack could obtain this ratio.\n\n#### Sample Input\n```\n2\ngoldfish marbles 3\n1 goldfish 2 marbles\n5 shovels 3 marbles\n1 goldfish 3 shovels\nthis that 4\n7 this 2 that\n14 this 4 that\n7 this 2 theother\n1 theother 1 that\n```\n\n#### Sample Output\n```\nCase 1: 1.8000 1\nCase 2: 0.28571 3\n```\n',10000,65536,'0',5,10,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('512','LCR','#### Description\nLCR is a simple game for three or more players. Each player starts with three chips and the object is to\nbe the last person to have any chips. Starting with Player 1, each person rolls a set of three dice. Each\ndie has six faces, one face with an L, one with a C, one with an R and three with a dot. For each L\nrolled, the player must pass a chip to the player on their left (Player 2 is considered to be to the left of\nPlayer 1); for each R rolled, the player passes a chip to the player on their right; and for each C rolled,\nthe player puts a chip in a central pile which belongs to no player. No action is taken for any dot that\nis rolled. Play continues until only one player has any chips left. In addition, the following rules apply:\n+ A player with no chips is not out of the game, since they may later gain chips based on other players’ rolls.\n+ A player with only 1 or 2 chips left only rolls 1 or 2 dice, respectively. A player with no chips left does not roll but just passes the dice to the next player.\n\nYour job is to simulate this game given a sequence of dice rolls.\n\n#### Input\nInput will consist of multiple test cases. Each test case will consist of one line containing an integer n\n(indicating the number of players in the game) and a string (specifying the dice rolls). There will be at\nmost 10 players in any game, and the string will consist only of the characters ‘L’, ‘C’, ‘R’ and ‘.’. In\nsome test cases, there may be more dice rolls than are needed (i.e., some player wins the game before\nyou use all the dice rolls). If there are not enough dice rolls left to complete a turn (for example, only\ntwo dice rolls are left for a player with 3 or more chips) then those dice rolls should be ignored. A value\nof n = 0 will indicate end of input.\n\n#### Output\nFor each test case, output the phrase “Game i:” on a single line (where i is the case number starting\nat 1) followed by a description of the state of the game. This desciption will consist of n+1 lines of the\nform\n+ Player 1:c1\n+ Player 2:c2\n+ ...\n+ Player n:cn\n+ Center:ct\nwhere c1, c2 ... cn are the number of chips each player has at the time the simulation ended (either\nbecause some player has won or there are no more remaining dice rolls) and ct is the number of chips\nin the center pile. In addition, if some player has won, you should append the string “(W)” after their\nchip count; otherwise you should append the string “(*)” after the chip count of the player who is the\nnext to roll. The only blank on any line should come before the game number or the player number.\nUse a single blank line to separate test cases.\n\n#### Sample Input\n```\n3 LR.CCR.L.RLLLCLR.LL..R...CLR.\n5 RL....C.L\n0\n```\n\n#### Sample Output\n```\nGame 1:\nPlayer 1:0\nPlayer 2:0\nPlayer 3:6(W)\nCenter:3\n\nGame 2:\nPlayer 1:1\nPlayer 2:4\nPlayer 3:1\nPlayer 4:4(*)\nPlayer 5:4\nCenter:1\n```\n',10000,65536,'0',5,11,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('513','Party Party Party','#### Description\nEmma has just graduated high school and it is the custom for the new graduates to throw parties for\nthemselves and invite everyone in school to attend. Naturally, Emma wishes to attend as many parties\nas possible. This is not such a problem on a weekday since usually there are only two or three parties\nin the evening. But, Saturdays are packed! Typically some parties start at 8 AM (breakfast is served)\nwhile others might end at midnight (much to the annoyance of the neighbors). Emma naturally wants\nto know how many parties she can attend.\n\nEach party has a starting and stopping time, which are on the hour. These are listed via a 24-hour\nclock. For example, a party might start at 10 AM (10) and end at 2 PM (14). The earliest a party can\nstart is 8 AM (8) and the latest it can end is midnight (24). In order not to be rude, Emma stays at\neach party at least one half hour and will consider traveling time between parties to be instantaneous.\nIf there are times during the day when there are no parties to attend, she’ll simply go home and rest.\n\n#### Input\nThere will be multiple test cases. Each test case starts with a line containing an integer $$$p (p \\leq 100)$$$\nindicating the number of parties on the given day. (A value of p = 0 indicates end of input.) The\nfollowing p lines are each of the form s e, both integers where $$$8 \\leq s < e \\leq 24$$$, indicating a party that\nstarts at time s and ends at time e. Note there may be multiple parties with the same starting and\nending time.\n\n#### Output\nFor each input set output a line of the form\n```\nOn day d Emma can attend as many as n parties.\n```\nwhere you determine the value of n and d is the number of the test case starting at 1.\n\n#### Sample Input\n```\n8\n12 13\n13 14\n12 13\n9 10\n9 10\n12 13\n12 14\n9 11\n3\n14 15\n14 15\n14 15\n0\n```\n\n#### Sample Output\n```\nOn day 1 Emma can attend as many as 7 parties.\nOn day 2 Emma can attend as many as 2 parties.\n```\n',10000,65536,'0',5,12,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('514','Su-Su-Sudoku','#### Description\nBy now, everyone has played Sudoku: you\'re given a 9-by-9 grid of boxes which you are to fill in with\nthe digits 1 through 9 so that 1) every row has all nine digits, 2) every column has all nine digits, and\n3) all nine 3-by-3 subgrids have all nine digits. To start the game you are given a partially completed\ngrid and are asked to fill in the remainder of the boxes. One such puzzle is shown below.\n\n[[File:F13.png|center]]\n\nIn this problem, you will be given Sudoku grids which you have nearly completed; indeed you\'ve filled\nin every box except five. You are asked to complete the grid, or determine that it\'s impossible. (You\nmight have already made an error!)\n\n#### Input\nThe first line of input will contain a positive integer indicating the number of test cases to follow. Each\ntest case will be a nearly completed Sudoku grid consisting of 9 lines, each containing 9 characters from\nthe set of digits 0 through 9. There will be exactly five 0’s in each test case, indicating the five unfilled\nboxes.\n\n#### Output\nOutput for each test case should be either\n```\nCould not complete this grid.\n```\nif it is impossible to complete the grid according to the rules of the game, or the completed grid, in the\nform given below. (There are no blank spaces in the output.) If there is a way to complete the grid, it\nwill be unique. Separate test cases with a blank line.\n\n#### Sample Input\n```\n2\n481253697\n267948105\n539671204\n654389712\n908704563\n173562849\n702136958\n315897426\n896425371\n481253697\n267948105\n539671284\n654289710\n908704562\n173562849\n702136958\n315897426\n896425371\n```\n\n#### Sample Output\n```\n481253697\n267948135\n539671284\n654389712\n928714563\n173562849\n742136958\n315897426\n896425371\n\nCould not complete this grid.\n```\n',10000,65536,'0',5,13,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('515','Tanks a Lot','#### Description\nImagine you have a car with a very large gas tank - large enough to hold whatever amount you need.\nYou are traveling on a circular route on which there are a number of gas stations. The total gas in all\nthe stations is exactly the amount it takes to travel around the circuit once. When you arrive at a gas\nstation, you add all of that station\'s gas to your tank. Starting with an empty tank, it turns out there\nis at least one station to start, and a direction (clockwise or counter-clockwise) where you can make it\naround the circuit. (On the way home, you might ponder why this is the case - but trust us, it is.)\n\nGiven the distance around the circuit, the locations of the gas stations, and the number of miles your\ncar could go using just the gas at each station, find all the stations and directions you can start at and\nmake it around the circuit.\n\n#### Input\nThere will be a sequence of test cases. Each test case begins with a line containing two positive integers\nc and s, representing the total circumference, in miles, of the circle and the total number of gas stations.\nFollowing this are s pairs of integers t and m. In each pair, t is an integer between 0 and c−1 measuring\nthe clockwise location (from some arbitrary fixed point on the circle) around the circumference of one\nof the gas stations and m is the number of miles that can be driven using all of the gas at the station.\nAll of the locations are distinct and the maximum value of c is 100,000. The last test case is followed\nby a pair of 0’s.\n\n#### Output\nFor each test case, print the test case number (in the format shown in the example below) followed by a\nlist of pairs of values in the form i d, where i is the gas station location and d is either C, CC, or CCC,\nindicating that, when starting with an empty tank, it is possible to drive from location i around in a\nclockwise (C) direction, counterclockwise (CC) direction, or either direction (CCC), returning to location\ni. List the stations in order of increasing location.\n\n#### Sample Input\n```\n10 4\n2 3 4 3 6 1 9 3\n5 5\n0 1 4 1 2 1 3 1 1 1\n0 0\n```\n\n#### Sample Output\n```\nCase 1: 2 C 4 CC 9 C\nCase 2: 0 CCC 1 CCC 2 CCC 3 CCC 4 CCC\n```\n',10000,65536,'0',5,14,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('516','The Worm Turns','#### Description\nWinston the Worm just woke up in a fresh rectangular patch of earth. The rectangular patch is divided\ninto cells, and each cell contains either food or a rock. Winston wanders aimlessly for a while until he\ngets hungry; then he immediately eats the food in his cell, chooses one of the four directions (north,\nsouth, east, or west) and crawls in a straight line for as long as he can see food in the cell in front of\nhim. If he sees a rock directly ahead of him, or sees a cell where he has already eaten the food, or\nsees an edge of the rectangular patch, he turns left or right and once again travels as far as he can in a\nstraight line, eating food. He never revisits a cell. After some time he reaches a point where he can go\nno further so Winston stops, burps and takes a nap.\n\nFor instance, suppose Winston wakes up in the following patch of earth (X’s represent stones, all other\ncells contain food):\n\n[[File:F15_1.png|center]]\n\nIf Winston starts eating in row 0, column 3, he might pursue the following path (numbers represent\norder of visitation):\n\n[[File:F15_2.png|center]]\n\nIn this case, he chose his path very wisely: every piece of food got eaten. Your task is to help Winston\ndetermine where he should begin eating so that his path will visit as many food cells as possible.\n\n#### Input\nInput will consist of multiple test cases. Each test case begins with two positive integers, m and n,\ndefining the number of rows and columns of the patch of earth. Rows and columns are numbered\nstarting at 0, as in the figures above. Following these is a non-negative integer r indicating the number\nof rocks, followed by a list of 2r integers denoting the row and column number of each rock. The last\ntest case is followed by a pair of zeros. This should not be processed. The value m × n will not exceed\n625.\n\n\n#### Output\nFor each test case, print the test case number (beginning with 1), followed by four values:\n+ amount row column direction\nwhere amount is the maximum number of pieces of food that Winston is able to eat, (row, column)\nis the starting location of a path that enables Winston to consume this much food, and direction is\none of E, N, S, W, indicating the initial direction in which Winston starts to move along this path. If\nthere is more than one starting location, choose the one that is lexicographically least in terms of row\nand column numbers. If there are optimal paths with the same starting location and different starting\ndirections, choose the first valid one in the list E, N, S, W. Assume there is always at least one piece\nof food adjacent to Winston’s initial position.\n\n#### Sample Input\n```\n5 5\n3\n0 4 3 1 3 2\n0 0\n```\n\n#### Sample Output\n```\nCase 1: 22 0 3 W\n```\n',10000,65536,'0',5,15,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('517','You\'ll be Working on the Railroad','#### Description\nCongratulations! Your county has just won a state grant to install a rail system between the two largest\ntowns in the county — Acmar and Ibmar. This rail system will be installed in sections, each section\nconnecting two different towns in the county, with the first section starting at Acmar and the last ending\nat Ibmar. The provisions of the grant specify that the state will pay for the two largest sections of the\nrail system, and the county will pay for the rest (if the rail system consists of only two sections, the\nstate will pay for just the larger section; if the rail system consists of only one section, the state will pay\nnothing). The state is no fool and will only consider simple paths; that is, paths where you visit a town\nno more than once. It is your job, as a recently elected county manager, to determine how to build the\nrail system so that the county pays as little as possible. You have at your disposal estimates for the cost\nof connecting various pairs of cities in the county, but you’re short one very important requirement —\nthe brains to solve this problem. Fortunately, the lackeys in the computing services division will come\nup with something.\n\n#### Input\nInput will contain multiple test cases. Each case will start with a line containing a single positive integer\n$$$n \\leq 50$$$, indicating the number of railway section estimates. (There may not be estimates for tracks\nbetween all pairs of towns.) Following this will be n lines each containing one estimate. Each estimate\nwill consist of three integers s e c, where s and e are the starting and ending towns and c is the cost\nestimate between them. (Acmar will always be town 0 and Ibmar will always be town 1. The remaining\ntowns will be numbered using consecutive numbers.) The costs will be symmetric, i.e., the cost to build\na railway section from town s to town e is the same as the cost to go from town e to town s, and costs\nwill always be positive and no greater than 1000. It will always be possible to somehow travel from\nAcmar to Ibmar by rail using these sections. A value of n = 0 will signal the end of input.\n\n#### Output\nFor each test case, output a single line of the form\n+ c1 c2 ... cm cost\nwhere each ci is a city on the cheapest path and cost is the cost to the county (note c1 will always be 0\nand cm will always be 1 and ci and ci+1 are connected on the path). In case of a tie, print the path with\nthe shortest number of sections; if there is still a tie, pick the path that comes first lexicographically.\n\n#### Sample Input\n```\n7\n0 2 10\n0 3 6\n2 4 5\n3 4 3\n3 5 4\n4 1 7\n5 1 8\n0\n```\n\n#### Sample Output\n```\n0 3 4 1 3\n```\n',10000,65536,'0',5,16,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('518','Fibinary Numbers','#### Description\nThe standard interpretation of the binary number 1010 is 8 + 2 = 10. An alternate way to view the sequence \"1010\" is to use Fibonacci numbers as bases instead of powers of two. For this problem, the terms of the Fibonacci sequence are: $$$1, 2, 3, 5, 8, 13, 21 , \\dots$$$\n\nWhere each term is the sum of the two preceding terms (note that there is only one 1 in the sequence as defined here). Using this scheme, the sequence \"1010\" could be interpreted as $$$1 \\cdot 5 + 0 \\bullet 3 + 1 \\bullet 2 + 0 \\bullet 1 = 7$$$. This representation is called a Fibinary number.\n\nNote that there is not always a unique Fibinary representation of every number. For example the number 10 could be represented as either 8 + 2 (10010) or as 5 + 3 + 2 (1110). To make the Fibinary representations unique, larger Fibonacci terms must always be used whenever possible (i.e. disallow 2 adjacent 1\'s). Applying this rule to the number 10, means that 10 would be represented as 8+2 (10010).\n\n#### Input\nWrite a program that takes two valid Fibinary numbers and prints the sum in Fibinary form. These numbers will have at most 100 digits.\n\n#### Output\nIn case that two or more test cases had to be solved, it must be a blank line between two consecutive, both in input and output. \n\n#### Sample Input\n```\n10010\n1\n\n10000\n1000\n\n10000\n10000\n```\n\n#### Sample Output\n```\n10100\n\n100000\n\n100100\n```\n',3000,65536,'0',5,17,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('519','The Skyline Problem','#### Description\nWith the advent of high speed graphics workstations, CAD (computer-aided design) and other areas (CAM, VLSI design) have made increasingly effective use of computers. One of the problems with drawing images is the elimination of hidden lines -- lines obscured by other parts of a drawing. \n\nYou are to design a program to assist an architect in drawing the skyline of a city given the locations of the buildings in the city. To make the problem tractable, all buildings are rectangular in shape and they share a common bottom (the city they are built in is very flat). The city is also viewed as two-dimensional. A building is specified by an ordered triple $$$L_i,H_i,R_i$$$ where $$$L_i$$$ and $$$R_i$$$ are left and right coordinates, respectively, of building i and $$$H_i$$$ is the height of the building. In the diagram below buildings are shown on the left with triples (1,11,5), (2,6,7), (3,13,9), (12,7,16), (14,3,25), (19,18,22), (23,13,29), (24,4,28)\n\nthe skyline, shown on the right, is represented by the sequence: (1, 11, 3, 13, 9, 0, 12, 7, 16, 3, 19, 18, 22, 3, 23, 13, 29, 0) \n[[File:F18.gif|center]]\n\n#### Input\nThe input is a sequence of building triples. All coordinates of buildings are positive integers less than 10,000 and there will be at least one and at most 5,000 buildings in the input file. Each building triple is on a line by itself in the input file. All integers in a triple are separated by one or more spaces. The triples will be sorted by $$$L_i$$$ , the left x-coordinate of the building, so the building with the smallest left x-coordinate is first in the input file. \n\n#### Output\nThe output should consist of the vector that describes the skyline as shown in the example above. In the skyline vector $$$(v_i,v_2,v_3,\\dots,v_{n-2},v_{n-1},v_n)$$$ , the $$$v_i$$$ such that i is an even number represent a horizontal line (height). The $$$v_i$$$ such that i is an odd number represent a vertical line (x-coordinate). The skyline vector should represent the \"path\" taken, for example, by a bug starting at the minimum x-coordinate and traveling horizontally and vertically over all the lines that define the skyline. Thus the last entry in the skyline vector will be a 0. The coordinates must be separated by a blank space. \n\n#### Sample Input\n```\n1 11 5\n2 6 7\n3 13 9\n12 7 16\n14 3 25\n19 18 22\n23 13 29\n24 4 28\n```\n\n#### Sample Output\n```\n1 11 3 13 9 0 12 7 16 3 19 18 22 3 23 13 29 0\n```\n',3000,65536,'0',5,18,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('52','Rectangles','#### Description\nThere are many different kinds of relationship between two rectangles. One is\nshare area.\n\n#### Task\nYour program will got two rectangles(four coordinates), try to find the area shared.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 1, 000)$$$, the number of test cases. For\neach test case , it will be in one line with 8 integer x1, y1, x2, y2, x3, y3, x4, y4, all of\nthem will fit in −1, 000 to 1, 000. (x1, y1) and (x2, y2) are the left lower and right\nhigher cornet of the first rectangle. (x3, y3) and (x4, y4) are the left lower and\nright higher cornet of the second rectangle. (x1 < x2, y1 < y2, x3 < x4, y3 < y4)\n\n#### Output\nFor each test case, output a line contains an integer, the area shared.\n\n#### Sample Input\n```\n2\n0 0 10 10 11 11 12 12\n0 0 10 10 9 9 11 11\n```\n#### Sample Output\n```\n0\n1\n```\n',1000,1024,'0',0,51,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('520','SCUD Busters','#### Description\nSome problems are difficult to solve but have a simplification that is easy to solve. Rather than deal with the difficulties of constructing a model of the Earth (a somewhat oblate spheroid), consider a pre-Columbian flat world that is a 500 kilometer $$$\\times$$$ 500 kilometer square.\n\nIn the model used in this problem, the flat world consists of several warring kingdoms. Though warlike, the people of the world are strict isolationists; each kingdom is surrounded by a high (but thin) wall designed to both protect the kingdom and to isolate it. To avoid fights for power, each kingdom has its own electric power plant.\n\nWhen the urge to fight becomes too great, the people of a kingdom often launch missiles at other kingdoms. Each SCUD missile (Sanitary Cleansing Universal Destroyer) that lands within the walls of a kingdom destroys that kingdom\'s power plant (without loss of life). \n\nGiven coordinate locations of several kingdoms (by specifying the locations of houses and the location of the power plant in a kingdom) and missile landings you are to write a program that determines the total area of all kingdoms that are without power after an exchange of missile fire.\n\nIn the simple world of this problem kingdoms do not overlap. Furthermore, the walls surrounding each kingdom are considered to be of zero thickness. The wall surrounding a kingdom is the minimal-perimeter wall that completely surrounds all the houses and the power station that comprise a kingdom; the area of a kingdom is the area enclosed by the minimal-perimeter thin wall.\n\nThere is exactly one power station per kingdom.\n\nThere may be empty space between kingdoms. \n\n#### Input\nThe input is a sequence of kingdom specifications followed by a sequence of missile landing locations.\n\nA kingdom is specified by a number N ( $$$3 \\leq N \\leq 100$$$ ) on a single line which indicates the number of sites in this kingdom. The next line contains the x and y coordinates of the power station, followed by N-1 lines of x, y pairs indicating the locations of homes served by this power station. A value of -1 for N indicates that there are no more kingdoms. There will be at least one kingdom in the data set.\n\nFollowing the last kingdom specification will be the coordinates of one or more missile attacks, indicating the location of a missile landing. Each missile location is on a line by itself. You are to process missile attacks until you reach the end of the file.\n\nLocations are specified in kilometers using coordinates on a 500 km by 500 km grid. All coordinates will be integers between 0 and 500 inclusive. Coordinates are specified as a pair of integers separated by white-space on a single line. The input file will consist of up to 20 kingdoms, followed by any number of missile attacks. \n\n#### Output\nThe output consists of a single number representing the total area of all kingdoms without electricity after all missile attacks have been processed. The number should be printed with (and correct to) two decimal places. \n\n#### Sample Input\n```\n12\n3 3\n4 6\n4 11\n4 8\n10 6\n5 7\n6 6\n6 3\n7 9\n10 4\n10 9\n1 7\n5\n20 20\n20 40\n40 20\n40 40\n30 30\n3\n10 10\n21 10\n21 13\n-1\n5 5\n20 12\n```\n\n#### Sample Output\n```\n70.50\n```\n\n#### Hint\nYou may or may not find the following formula useful.\n\n+ Given a polygon described by the vertices $$$v_o,v_1,\\dots,v_n$$$ such that $$$v_0=v_n$$$ , the signed area of the polygon is given by\n+ $$$a = \\frac{1}{2}\\sum_{k=1}^n (x_{i-1}y_i)-(x_iy_{i-1})$$$\n+ where the x, y coordinates of $$$v_i=(x_i,y_i)$$$ ; the edges of the polygon are from $$$v_i$$$ to $$$v_{i+1}$$$ for $$$i=0 \\dots n-1$$$.\n+ If the points describing the polygon are given in a counterclockwise direction, the value of a will be positive, and if the points of the polygon are listed in a clockwise direction, the value of a will be negative. \n',3000,65536,'0',5,19,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('521','Pipe Fitters','',3000,65536,'0',5,20,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('522','Bumpy Objects','',3000,65536,'0',5,21,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('523','Polygons','',3000,65536,'0',5,22,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('524','Orchard Trees','',3000,65536,'0',5,23,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('525','Laser Lines','',3000,65536,'0',5,24,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('526','Moth Eradication','',3000,65536,'0',5,25,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('527','Lining Up','#### Description\n``How am I ever going to solve this problem?\" said the pilot. \n\nIndeed, the pilot was not facing an easy task. She had to drop packages at specific points scattered in a dangerous area. Furthermore, the pilot could only fly over the area once in a straight line, and she had to fly over as many points as possible. All points were given by means of integer coordinates in a two-dimensional space. The pilot wanted to know the largest number of points from the given set that all lie on one line. Can you write a program that calculates this number? \n\nYour program has to be efficient!\n\n#### Input\nThe input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs.\nThe input consists of N pairs of integers, where 1 < N < 700. Each pair of integers is separated by one blank and ended by a new-line character. The list of pairs is ended with an end-of-file character. No pair will occur twice.\n\n#### Output\nFor each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. \nThe output consists of one integer representing the largest number of points that all lie on one line.\n\n#### Sample Input\n```\n1\n\n1 1\n2 2\n3 3\n9 10\n10 11\n\n```\n\n#### Sample Output\n```\n3\n```\n',3000,65536,'0',5,26,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('528','Pipe','',3000,65536,'0',5,27,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('529','Cops and Robbers','',3000,65536,'0',5,28,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('53','Books','#### Description\nI like to arrange my books on my long book shelf. I will rank my books by its\nheight, but i have too many books, it is troubling me when I try to order all my\nbooks in one time. Finally, i figure out a solution, each time i will rank some of\nthem by its height from higher to shorter only.\n\n#### Task\nThe question for you is, after $$$K(0 \\leq K \\leq 10)$$$ times arrangement. What’s the\norder of my books on my book shelf will be?(The height of my books in order from\nleft to right.)\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 10)$$$, the number of test cases. For each\ntest case , the first line will have an integer $$$N(1 \\leq N \\leq 1, 000)$$$ which means N\nbooks on my book shelf.\nOn the second line, N integers followed, all of them are $$$\\leq 1, 000$$$ which denote the\nheight of my books. On the third line, an integer $$$K(1 \\leq K \\leq 10)$$$.\nThen, K pairs of integer follow, it records the range of my books i arranged each\ntime (0-index base, the first book on my book shelf is 0).\n\n#### Output\nFor each test case, output a line contains N integers, the final states of my book\nshelf.\n\n#### Sample Input\n```\n2\n10\n3 3 2 4 7 5 6 8 9 1\n2\n1 3\n2 4\n10\n3 3 2 4 7 5 6 8 9 1\n2\n1 3\n2 4\n```\n\n#### Sample Output\n```\n3 4 7 3 2 5 6 8 9 1\n3 4 7 3 2 5 6 8 9 1\n```\n',5000,10240,'0',0,52,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('530','Overlapping Rectangles','',3000,65536,'0',5,29,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('531','Polygon','',3000,65536,'0',5,30,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('532','Convex Hull Finding','',3000,65536,'0',5,31,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('533','Gleaming the Cubes','',3000,65536,'0',5,32,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('534','Intersecting Line Segments','',3000,65536,'0',5,33,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('535','Overlapping Air Traffic Control Zones','',3000,65536,'0',5,34,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('536','Sunny Mountains','',3000,65536,'0',5,35,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('537','Center of Masses','',3000,65536,'0',5,36,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('538','Packing polygons','#### Description\nGiven a polygon of n points (not necessarily convex), your goal is to say whether there is a circle of a given a radius R that contains the polygon or not. \n\n#### Input\nThe input consists of several input cases. The first line of each input case is the number n (with n < 100) of vertices in the polygon. Then you are given n lines each containing a couple of integers that define the coordinates of the vertices. The last line of the input case will be a real number indicating the radius R of the circle.\n\nThe end of the input will be signaled by an input case with n = 0 vertices, that must not be processed.\n\nYou may assume that no vertex will appear twice in any given input case. \n\n#### Output\nIf the polygon can be packed in a circle of the given radius you have to print:\n\n\'\'The polygon can be packed in the circle.\'\'\n\nIf the polygon cannot be packed you have to print:\n\n\'\'There is no way of packing that polygon.\'\'\n\n#### Sample Input\n```\n3\n0 0\n1 0\n0 1\n1.0\n3\n0 0\n1 0\n0 1\n0.1\n0\n```\n\n#### Sample Output\n```\nThe polygon can be packed in the circle.\nThere is no way of packing that polygon.\n```\n',3000,65536,'0',5,37,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('539','Chainsaw Massacre','',3000,65536,'0',5,38,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('54','Board','#### Description\nOne day, i am on the way to my home. I find there are a lots of boards on the\nroad. Some of them are overlap, it makes the flat road become winding. I try to\ndo something for it, remove some overlapped boards, (i can not move any boards\non the road but make it disappear, do not ask me why, i won’t tell you). I want to\nkeep the boards on the road as many as possible(maximum the number of boards,\nmay not have the longest length), without any overlap.\n\n#### Task\nPlease help me to find out, the maximum number of boards can be leaved without\nany overlap.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. For\neach test case , the first line will have an integer $$$N(1 \\leq N \\leq 100)$$$ which means\nN boards on the road. N pairs of integer (l, r), (l < r) followed, all of them are\n$$$\\leq 1, 000, 000, 000$$$ which denote the left and right ends of boards.\n\n#### Output\nFor each test case, output a line contains an integer, the maximum number of\nboards can be leaved without any overlap.\n\n#### Sample Input\n```\n2\n3\n1 2\n2 3\n3 4\n3\n3 5\n2 4\n1 3\n```\n\n#### Sample Output\n```\n3\n2\n```\n',5000,10240,'0',0,53,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('540','Useless Tile Packers','',3000,65536,'0',5,39,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('541','The Art Gallery','',3000,65536,'0',5,40,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('542','Hotter Colder','',3000,65536,'0',5,41,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('543','Trees on My Island','',3000,65536,'0',5,42,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('544','Nice Milk','',3000,65536,'0',5,43,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('545','Herding Frosh','',3000,65536,'0',5,44,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('546','Birthday Cake','',3000,65536,'0',5,45,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('547','Smallest Bounding Rectangle','',3000,65536,'0',5,46,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('548','The Closest Pair Problem','#### Description\nGiven a set of points in a two dimensional space, you will have to find the distance between the closest two points.\n\n#### Input\nThe input file contains several sets of input. Each set of input starts with an integer N (0<=N<=10000), which denotes the number of points in this set. The next N line contains the coordinates of N two-dimensional points. The first of the two numbers denotes the X-coordinate and the latter denotes the Y-coordinate. The input is terminated by a set whose N=0. This set should not be processed. The value of the coordinates will be less than 40000 and non-negative.\n\n#### Output\nFor each set of input produce a single line of output containing a floating point number (with four digits after the decimal point) which denotes the distance between the closest two points. If there is no such two points in the input whose distance is less than 10000, print the line INFINITY.\n\n#### Sample Input\n```\n3\n0 0\n10000 10000\n20000 20000\n5\n0 2\n6 67\n43 71\n39 107\n189 140\n0\n```\n\n#### Sample Output\n```\nINFINITY\n36.2215\n```\n',3000,65536,'0',5,47,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('549','Railway','',3000,65536,'0',5,48,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('55','B-W Circle','#### Description\nSince we have a white board in our Lab, we start to scratch on it.\n\nOne day, i had written N letters in a circle on the board. Two different letters\nonly, one is ’B’ another is ’W’. I look at it, ten mins later. Suddenly, i find something\ninteresting. I do following: between any two neighboring letter of the same\ni will insert a ’B’, and between any two neighboring letter of different i will insert\na ’W’. Finally, i have got $$$2\\,N$$$ letters in a circle, and then i will remove the old\nN letters, $$$N$$$ new letters remained. And i do all this exactly K times, stop at\na circle with $$$N$$$ letters on the board. I want to know how many different N letters\n’B’-’W’ circle after K times operation, can stop at the same circle. (BTW: a\ncircle BWWBW is the same asWBWBW, but the circle BWBBWis not the same)\n\nExample: \n\nmy very first circle is ”BBW”, after 1 time operation, it become ”BWW”.\n\nAnother circle is ”WBW”, after 1 time operation, it become ”BWW” too. \n\nSo, the\n”BBW” with K = 1 got the answer 2.\n\n#### Task\nI will tell you the $$$N$$$,$$$K$$$ and the very first ’B’-’W’ circle. Please help me to find\nout how many different $$$N$$$ letters ’B’-’W’ circle after K times operation, can stop\nat the same circle as my very first ’B’-’W’ circle did.\n\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 100)$$$, the number of test cases. For each\ntest case , the first line will have two integers $$$N(1 \\leq N \\leq 100)$$$ and $$$K(1 \\leq K \\leq 10)$$$\n. On the second line, N letters followed(’B’ and ’W’ only).\n\n#### Output\nFor each test case, output a line contains an integer of the answer.\n\n#### Sample Input\n```\n2\n3 1\nBBW\n6 2\nBWWBWW\n```\n\n#### Sample Output\n```\n2\n3\n```\n',10000,32768,'0',0,54,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('550','Polygon Intersection','',3000,65536,'0',5,49,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('551','Submarines','',3000,65536,'0',5,50,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('552','Watering Grass','',3000,65536,'0',5,51,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('553','Cutting tabletops','',3000,65536,'0',5,52,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('554','Treasure Map','',3000,65536,'0',5,53,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('555','Firemen barracks','',3000,65536,'0',5,54,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('556','Pick-up Sticks','',3000,65536,'0',5,55,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('557','Bright Lights','',3000,65536,'0',5,56,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('558','Tri Tri','',3000,65536,'0',5,57,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('559','Frequent values','',3000,65536,'0',5,58,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('56','Big Answer','#### Description\nI think all of us know how to calculate $$$\\frac{a}{b}$$$ (both $$$a\\,$$$ and $$$b\\,$$$ are integers) but do you\nhave been try to calculate the answer for more than $$$1000\\,$$$ digits after the decimal\npoint.\n#### Task\nGiven a numerator $$$a\\,$$$ and denominator $$$b\\,$$$, return the full answer after dividing $$$a\\,$$$\nby $$$b\\,$$$ with n digits after the decimal point.\n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 1000)$$$, the number of test cases. For\neach test case , will have three integers $$$a(1 \\leq a \\leq 1, 000, 000, 000)$$$, $$$b(1 \\leq b \\leq\n1, 000, 000, 000)$$$ and $$$n(1 \\leq n \\leq 1, 000)$$$ .\n#### Output\nFor each test case, output a line contains of the answer.\n#### Sample Input\n```\n2\n1 3 2\n3 1 5\n```\n#### Sample Output\n```\n0.33\n3.00000\n```\n',1000,1024,'0',0,55,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('560','Texas Trip','',3000,65536,'0',5,59,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('561','3D Triangles','',3000,65536,'0',5,60,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('562','Cyclic Polygons','',3000,65536,'0',5,61,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('563','Isolated Segments','',3000,65536,'0',5,62,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('564','Cool Points','',3000,65536,'0',5,63,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('565','Bey Battle','#### Description\nDark Blader has returned with new tactics. They are now able to create an energy field around its blade and if any blade enters inside any of these energy fields the energy level of the Bit-beast drastically decreases. So Tyson had to avoid these energy fields and finally he has won!\n\nI was lucky enough to be around Kenny who was analyzing the game with his PC and helping Tyson to avoid the energy field. I saw that the energy field was Square in shape and the blade was at its centre. At that instant a problem came to my mind and let me see how efficiently you can solve that problem.\n\nThere will be N points in a 2D plane. Find out the maximum size such that if you draw such size squares around each point (that point will be at the center of the square) no two squares will intersect each other (can touch but not intersect). To make the problem simple the sides of the squares will be parallel to X and Y axis.\n\n#### Input\nInput contains several test cases. Each case starts with N which will be at most 10,000 except one case which will be 100,000. Then there are N lines- pairs of integers denoting the coordinate of each point. The absolute value of the integers can be at most 1,000,000. X or Y coordinate of any two points will be unequal.\n\n#### Output\nOutput a single line for each test case- maximum side length of square.\n\n#### Sample Input\n```\n2\n0 0\n2 2\n```\n\n#### Sample Output\n```\n2\n```\n',5000,65536,'0',5,64,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('566','Reservoir logs','',3000,65536,'0',5,65,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('567','Campus Roads','',3000,65536,'0',5,66,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('568','Hard Evidence','',3000,65536,'0',5,67,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('569','Hangman Judge','#### Description\nIn \'Hangman Judge\', you are to write a program that judges a series of Hangman games. For each game, the answer to the puzzle is given as well as the guesses. Rules are the same as the classic game of hangman, and are given as follows:\n\n+ The contestant tries to solve to puzzle by guessing one letter at a time.\n+ Every time a guess is correct, all the characters in the word that match the guess will be turned over. For example, if your guess is \'o\' and the word is \'book\', then both \'o\'s in the solution will be counted as solved.\n+ Every time a wrong guess is made, a stroke will be added to the drawing of a hangman, which needs 7 strokes to complete. Each unique wrong guess only counts against the contestant once.\n\n         ______   \n         |  |     \n         |  O     \n         | /|\\    \n         |  |     \n         | / \\    \n       __|_       \n       |   |______\n       |_________|\n\n+ If the drawing of the hangman is completed before the contestant has successfully guessed all the characters of the word, the contestant loses.\n+ If the contestant has guessed all the characters of the word before the drawing is complete, the contestant wins the game.\n+ If the contestant does not guess enough letters to either win or lose, the contestant chickens out. \n\nYour task as the \'Hangman Judge\' is to determine, for each game, whether the contestant wins, loses, or fails to finish a game. \n\n#### Input\nYour program will be given a series of inputs regarding the status of a game. All input will be in lower case. The first line of each section will contain a number to indicate which round of the game is being played; the next line will be the solution to the puzzle; the last line is a sequence of the guesses made by the contestant. A round number of -1 would indicate the end of all games (and input). \n\n#### Output\nThe output of your program is to indicate which round of the game the contestant is currently playing as well as the result of the game. There are three possible results:\n\n+ You win.\n+ You lose.\n+ You chickened out.\n\n#### Sample Input\n```\n1\ncheese\nchese\n2\ncheese\nabcdefg\n3\ncheese\nabcdefgij\n-1\n```\n\n#### Sample Output\n```\nRound 1\nYou win.\nRound 2\nYou chickened out.\nRound 3\nYou lose.\n```\n',3000,65536,'0',5,68,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('57','Pancakes','#### Description\nMr.K likes pancakes very much. He has tasted many types of pancakes, and when he is tasting a pancake, he likes to mark down the materials of the pancake. Mr.K treats the pancakes with same materials as the same type pancake. Now give you the list which is marked by Mr.K, can you count how many different types of pancakes has Mr.K eaten?\n\n#### Input\nThe input will contains multiple test cases. The first line of the input is a single integer $$$T (1 \\leq T \\leq 100)$$$ which is the number of test cases. T test cases follow.\n\nEach test case contains two positive integers $$$n, m (1 \\leq n \\leq 100,1 \\leq m \\leq 30)$$$. It means that Mr.K has eaten n pancakes numbered from 1 to n, and there are m different materials numbered from 1 to m. The following line contain a positive integer $$$l (1 \\leq l \\leq 10,000)$$$. Next, there are l lines: each line contains two positive integers $$$i,j (1 \\leq i \\leq n,1 \\leq j \\leq m)$$$---the ith pancake contains jth material.\n\n#### Output\nFor each input test case, you are to output a single integer - how many different types of pancakes has Mr.K eaten?\nTwo pancakes hold the same type only if they are constituted of exactly the same set of materials.\n\n#### Sample Input\n```\n2\n\n3 4\n6\n1 2\n3 3\n1 3\n2 2\n3 2\n2 4\n\n3 4\n6\n1 2\n3 3\n1 3\n2 2\n3 2\n2 4\n```\n\n#### Sample Output\n```\n2\n2\n```\n',10000,32768,'0',0,56,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('570','Solving Systems of Linear Equations','#### Description\nYou may have solved linear equation early in the school. Problems involving solving sets of linear equation are very important in the field of Engineering and Mathematics. \nLet us consider that we have a system of linear equations\n\n$$$\n\\begin{cases}\n    a_{11}x_1 + a_{12}x_2 +  a_{13}x_3 = c_1 \\\\\n    a_{21}x_1 + a_{22}x_2 +  a_{23}x_3 = c_2 \\\\\n    a_{31}x_1 + a_{32}x_2 +  a_{33}x_3 = c_3  \n\\end{cases}\n$$$\n\nWe can solve it by reducing technique:\n+ Step 1:\n$$$\n\\begin{cases}\n    x_1 + \\frac{a_{12}}{a_{11}}x_2 +  \\frac{a_{13}}{a_{11}}x_3 = \\frac{c_1}{a_{11}} \\\\\n    a_{21}x_1 + a_{22}x_2 +  a_{23}x_3 = c_2 \\\\\n    a_{31}x_1 + a_{32}x_2 +  a_{33}x_3 = c_3  \n\\end{cases}\n$$$\n+ Step 2:\n$$$\n\\begin{cases}\n    x_1 + \\frac{a_{12}}{a_{11}}x_2 +  \\frac{a_{13}}{a_{11}}x_3 = \\frac{c_1}{a_{11}} \\\\\n    \\frac{-a_{21}a_{12}}{a_{11}}a_{22}x_2 +  \\frac{-a_{21}a_{13}}{a_{11}}a_{23}x_3 = \\frac{-a_{21}c_{1}}{a_{11}}c_2 \\\\\n    \\frac{-a_{31}a_{12}}{a_{11}}a_{32}x_2 +  \\frac{-a_{31}a_{13}}{a_{11}}a_{33}x_3 = \\frac{-a_{31}c_{1}}{a_{11}}c_2 \n\\end{cases}\n$$$\n\nNow do as step 1 for second row and so on. \nThis can be made more effective using matrix method. The set of equation for \'n\' unknowns can be written as\n\n$$$\n\\begin{cases}\n    a_{11}x_1 + a_{12}x_2 +  a_{13}x_3 + \\dots + a_{1n}x_n = c_1 \\\\\n    a_{21}x_1 + a_{22}x_2 +  a_{23}x_3 + \\dots + a_{2n}x_n = c_2 \\\\\n    a_{31}x_1 + a_{32}x_2 +  a_{33}x_3 + \\dots + a_{3n}x_n = c_3 \\\\\n    \\dots \\dots \\dots \\dots \\dots \\dots \\dots \\dots \\dots \\dots \\dots \\dots \\dots \\\\\n    a_{m1}x_1 + a_{m2}x_2 +  a_{m3}x_3 + \\dots + a_{mn}x_n = c_m \\\\\n\\end{cases}\n$$$\n\nIn matrix form\n\n$$$\n\\begin{bmatrix}\n  a_{11} & a_{12} & \\cdots & a_{1n} \\\\\n  a_{21} & a_{22} & \\cdots & a_{2n} \\\\  \n  \\vdots & \\vdots & \\ddots & \\vdots \\\\ \n  a_{m1} & a_{m2} & \\cdots & a_{mn} \n\\end{bmatrix}\n\\begin{bmatrix}\n  x_{1} \\\\\n  x_{2} \\\\  \n  \\vdots \\\\ \n  x_{n}\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n  c_{1} \\\\\n  c_{2} \\\\  \n  \\vdots \\\\ \n  c_{n}\n\\end{bmatrix}\n$$$\n\nCompactly $$$[A] \\times \\{X\\} = \\{C\\}$$$\n\nFrom this we can solve values of X\'s. The matrix [AC] is called an augmented (see example below) matrix. If after elimination process the rank of matrix [A] and rank of matrix [AC] not equals, the system is called inconsistent and it does not have a solution. If the matrix is consistent and number of unknowns is greater then rank of matrix then the matrix system has arbitarily many solutions containing (NumberOfUnknowns-rank) arbitary constants. Rank of a matrix is defined as the number of non zero rows of a matrix system. Otherwise if the rank and number of unknows equals then the system has been solved.\n\nFor example let a system of equations be\n\n$$$\n\\begin{cases}\n    9x_1 + 4x_2 +  x_3 = -17 \\\\\n    x_1 - 2x_2 - 6x_3 = 14 \\\\\n    x_1 + 6x_2 = 4  \n\\end{cases}\n$$$\n\nThis sets of equation can be written as\n\n$$$\n\\begin{matrix}\n  9 & 4  & 3  & -17 \\\\\n  1 & -2 & -6 & 14 \\\\\n  1 & 6  &  0 & 4 \n\\end{matrix}\n$$$\n\nSo the steps involving the solution is\n\n$$$\n\\begin{matrix}\n  1 & -2  & -6 & 14 \\\\\n  1 &  6  &  0 & 4 \\\\\n  9 &  4  &  1 & -17 \n\\end{matrix}\n\n\\Rightarrow\n\n\\begin{matrix}\n  1 & -2   & -6  &  14 \\\\\n  0 &  8   &  6  & -10 \\\\\n  0 &  22  &  55 & -143 \n\\end{matrix}\n\n\\Rightarrow\n\n\\begin{matrix}\n  1 & -2  & -6  &  14 \\\\\n  0 &  1  &  \\frac{3}{4}  & -\\frac{5}{4} \\\\\n  0 &  0  &  \\frac{77}{2} & \\frac{-231}{2} \n\\end{matrix}\n\n$$$\n$$$\n\n\\begin{matrix}\n  1 & -2  & -6  &  14 \\\\\n  0 &  1  &  \\frac{3}{4}  & -\\frac{5}{4} \\\\\n  0 &  0  &  1 & -3 \n\\end{matrix}\n\n\\Rightarrow\n\n\\begin{matrix}\n  1 & -2  &  0  & -4 \\\\\n  0 &  1  &  0  &  1 \\\\\n  0 &  0  &  1  & -3 \n\\end{matrix}\n\n\\Rightarrow\n\n\\begin{matrix}\n  1 &  0  &  0  & -2 \\\\\n  0 &  1  &  0  &  1 \\\\\n  0 &  0  &  1  & -3 \n\\end{matrix}\n$$$\n\n$$$\n\\begin{cases}\nx_1 = -2\\\\\nx_2 = 1\\\\\nx_3 = -3\n\\end{cases}\n$$$\n#### Input\nThe first line of input is the number of the problem. The next line contains two integers - NumberOfUnknowns and NumberOfEquations (none of these is less then or equal to 0 and greater then 50). The next lines contains the matrix for the system of linear equations. There are number of rows equal to the NumberOfEquations and number of column equal to the NumberOfUnknowns+1. The numbers may be fractional, that is there may be numbers like 1/3 or 6/8. An problem number zero indicates the end of input. \n\n#### Output\nFirst print (without the quotation mark)\n\n\"Solution for Matrix System # N\"\n\nHere `N\' is the problem number as taken from input. Then on the next line, for each system of equations output the solution (if exists) expressed in the fractional form in each line. You may assume each of the numerator and denominator part will not exceed the limit of data type long long (64 bit). If there are many solutions as described above print (without the quotation mark)\n\n\"Infinitely many solutions containing n arbitrary constants.\"\n\n(here `n\' is the number as described above) , and if there is no solutions print (without the quotation mark)\n\n\"No Solution.\"\n\n.Print a blank line between two systems of linear equations. \n\n#### Sample Input\n```\n1\n3 3\n9  4  1 -17\n1 -2 -6 14\n1  6  0  4\n\n2\n3 3\n2 2 2 2\n4 4 4 4\n16/1 16/1 16/1 16/1\n\n3\n2 3\n1 1 10\n1 1 20\n2 2 50\n\n4\n1 1\n3 10\n\n0\n```\n\n#### Sample Output\n```\nSolution for Matrix System # 1\nx[1] = -2\nx[2] = 1\nx[3] = -3\n\nSolution for Matrix System # 2\nInfinitely many solutions containing 2 arbitrary constants.\n\nSolution for Matrix System # 3\nNo Solution.\n\nSolution for Matrix System # 4\nx[1] = 10/3\n```\n',3000,65536,'0',5,69,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('571','YAPTCHA','#### Description\nThe math department has been having problems lately. Due to immense amount of unsolicited\nautomated programs which were crawling across their pages, they decided to put Yet-Another-Public-\nTuring-Test-to-Tell-Computers-and-Humans-Apart on their webpages. In short, to get access to their\nscientifc papers, one have to prove yourself eligible and worthy, i.e. solve a mathematic riddle.\n\nHowever, the test turned out difficult for some math PhD students and even for some professors.\nTherefore, the math department wants to write a helper program which solves this task (it is not\nirrational, as they are going to make money on selling the program).\n\nThe task that is presented to anyone visiting the start page of the math department is as follows:\ngiven a natural n, compute\n\n<center>$$$S_n=\\sum_{k=1}^{n}[\\frac{(3k+6)!+1}{3k+7}-[\\frac{(3k+6)!}{3k+7}]]$$$</center>\n\nwhere $$$[x] \\,$$$ denotes the largest integer not greater than x.\n\n#### Input\nThe first line contains the number of queries $$$t (t \\leq 10^6)$$$. Each query consist of one natural number $$$n (1 \\leq n \\leq 10^6)$$$.\n\n#### Output\nFor each n given in the input output the value of $$$S_n \\,$$$.\n\n#### Sample Input\n```\n13\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n100\n1000\n10000\n```\n\n#### Sample Output\n```\n0\n1\n1\n2\n2\n2\n2\n3\n3\n4\n28\n207\n1609\n```\n',10000,65536,'0',5,70,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('572','Skyscrapers','#### Description\nIn a seaside village, there is an avenue of skyscrapers. Each skyscrapers is 100m wide and has certain\nheight. Due to very high price of parcels, any two consecutive skyscrapers are adjacent. The avenue lies close to the beach so the street is exactly at the sea level.\n\nUnfortunately, this year, due to the global warming, the sea level started to increase by one meter\neach day. If the skyscraper height is no greater than the current sea level, it is considered \nooded. A \'\'region\'\' is a maximal set of non-ooded, adjacent skyscrapers. This term is of particular importance, as it is sufficient to deliver goods (like current, carrots or cabbages) to any single skyscraper in each region.\n\nHence, the city major wants to know how many regions there will be in the hard days that come.\nAn example of an avenue with 5 skyscrapers after 2 days is given below.\n\n[[File:F71.png|center]]\n\n#### Input\nThe input contains several test cases. The first line contains an integer $$$t (t \\leq 15)$$$ denoting the number \nof test cases. Then t test cases follow. Each of them begins with a line containing two numbers n and\nd $$$(1 \\leq n , d \\leq 10^6)$$$, n is the number of skyscrapers and d is the number of days which the major wants to query. Skyscrapers are numbered from left to right. The next line contains n integers $$$h_1, h_2, \\dots, h_n$$$\nwhere $$$1 \\leq h_i \\leq 10^9$$$ is the height of skyscraper i. The third line of a single test case contains d numbers $$$t_j \\,$$$ such that $$$0 \\leq t_1 < t_2 < \\dots < t_d \\leq 10^9$$$.\n\n#### Output\nFor each test case output d numbers $$$r1, r2, \\dots, r_d$$$, where $$$r_j \\,$$$ is the number of regions on day $$$t_j \\,$$$.\n\n#### Sample Input\n```\n2\n3 3\n1 2 3\n1 2 3\n5 3\n1 3 5 1 3\n0 2 4\n```\n\n#### Sample Output\n```\n1 1 0\n1 2 1\n```\n',10000,65536,'0',5,71,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('573','Business Cards','#### Description\nRunning a paper shop is not an easy job, especially with harsh customers. Today they brought their\nown rectangular sheets of paper, asking you to cut it into rectangular business cards of specific size.\nMoreover, they require that all the paper (which may not be cheap, but is definitely not that expensive!)\nhas to be used, i.e. no tiny bit may be left over. Moreover, the brilliant idea of cutting the sheet into\nvery small pieces, and then gluing them together in desired sheets was laughed at.\nAn example of a $$$9 \\times 6$$$ paper sheet divided into $$$2 \\times 3$$$ cards is given below.\n\n[[File:F72.png|center]]\n\n#### Input\nThe input contains several test cases. The first line contains the number of test cases $$$t (t \\leq 10^5)$$$. Then t\ntest cases follow. Each of them consists of one line containing four integers a, b, c, d $$$(1 \\leq a, b, c, d \\leq 10^9)$$$.\nNumbers a and b are dimensions of each business card; c and d are dimensions of the paper sheet.\n\n#### Output\nFor each test case output one line containing word YES if it is possible to divide the whole sheet into\nbusiness cards, and NO otherwise.\n\n#### Sample Input\n```\n4\n2 3 9 6\n2 3 8 6\n2 3 6 8\n2 3 5 7\n```\n\n#### Sample Output\n```\nYES\nYES\nYES\nNO\n```\n',10000,65536,'0',5,72,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('574','Museum','',10000,65536,'0',5,73,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('575','Morphing is fun','#### Description\nMorphic is a tree that grows very rapidly, bringing happiness to its owner. It has a single trunk consisting of a number of cells stacked one on top of another. Each cell has one of n possible colors which determine the way it mutates during the night, while nobody can see it. Florists denote these colors by the first n small letters of the English alphabet and know exactly into how many cells, and of what colors, a cell of each color divides. In fact, they have wrote their knowledge down simply with n nonempty words, each word representing the resulting sequence of colors. \n\nA seed of a Morphic has a single cell of color a and is rooted firmly in the ground. As long as the Morphic is still alive, each night all its cells simultaniously morph according to the aforementioned rules, possibly causing an exponential growth because each new cell is of the same size as the original one. For example, if rules say that a becomes ab , and b becomes ca , then after two nights a seed will evolve to a trunk consisting of 4 cells: abca . \n\nTherefore the top of a Morphic is usually hidden in clouds. The only way to tell if it is still alive is to check if visible part of the trunk is changing colors. In order to do so, one can build enormously high (yet still of constant height) tower, and watch from its top a fixed fragment of the trunk. \n\nAs you can easily see, it is either sufficient to observe first k cells from the bottom for some fixed k , or no matter how high the tower is, you will not be able to tell for sure if a Morphic died. The latter happens when for every k , rules cause the k -th cell to eventually stop changing colors, even though the tree is still alive and mutating. \n\nTo prevent waste of money on building such enormous towers, you are to write a program that determines if it is possible to monitor health of a Morphic.\n\n#### Input\nThe input contains several Morphics descriptions. The first line contains the number of descriptions t (t<=10^4) that follow. Each of them begins with the number of colors n (1<=n<=26) . Next n lines contain the rules by which the Morphic grows. The i -th one describes the sequence of colors in bottom-up order obtained from a single cell of i -th color. Each line contains at most 100 lowercase English letters. \n\n#### Output\nFor each test case output one line containing `YES\' if building of a tower is pointless (as in: YES, we can save money!). Otherwise output `NO\'. \n\n#### Sample Input\n```\n4 \n2 \nab \na \n3 \nba \nc \nc \n3 \nba \nc \nb \n3 \nbbbbbbbbbbbbbbb \nccccccccccccccc \nc\n```\n\n#### Sample Output\n```\nYES \nYES \nNO \nYES\n```\n',10000,65536,'0',5,74,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('576','Tower','#### Description\nAlan loves to construct the towers of building bricks. His towers consist of many cuboids with square\nbase. All cuboids have the same height h = 1. Alan puts the consecutive cuboids one over another:\n\n[[File:F75_1.png|center]]\n\nRecently in math class, the concept of volume was introduced to Alan. Consequently, he wants to\ncompute the volume of his tower now. The lengths of cuboids bases (from top to bottom) are constructed\nby Alan in the following way:\n1. Length $$$a_1 \\,$$$ of the first square is one.\n1. Next, Alan fixes the length $$$a_2 \\,$$$ of the second square.\n1. Next, Alan calculates the length an (n > 2) by $$$2 \\times a_2 \\times a_{n-1}-a_{n-2} \\,$$$. Do not ask why he chose such\na formula; let us just say that he is a really peculiar young fellow.\n\nFor example, if Alan fixes $$$a_2 = 2 \\,$$$, then $$$a_3 = 8 - a_1 = 7 \\,$$$; see Figure 1. If Alan fixes $$$a_2 = 1 \\,$$$, then $$$a_n = 1 \\,$$$ holds for all $$$n \\in \\mathbb{N}$$$; see Figure 2.\n\nNow Alan wonders if he can calculate the volume of tower of N consecutive building bricks. Help\nAlan and write the program that computes this volume. Since it can be quite large, it is enough to\ncompute the answer modulo given natural number \'\'m\'\'.\n\n#### Input\nThe input contains several test cases. The first line contains the number $$$t (t \\leq 10^5)$$$ denoting the number\nof test cases. Then t test cases follow. Each of them is given in a separate line containing three integers\n$$$a_2,N,m (1 \\leq a2, m \\leq 10^9, 2 \\leq N \\leq 10^9)$$$ separated by a single space, where $$$a_2 \\,$$$ denotes the fixed length of second square in step 2, while N denotes the number of bricks constructed by Alan.\n\n#### Output\nFor each test case $$$(a_2,N,m) \\,$$$ compute the volume of tower of N consecutive bricks constructed by Alan\naccording to steps (1 to 3) and output its remainder modulo m.\n\n[[File:F75_2.png|center]]\n\n#### Sample Input\n```\n3\n2 3 100\n1 4 1000\n3 3 1000000000\n```\n\n#### Sample Output\n```\n54\n4\n299\n```\n',30000,65536,'0',5,75,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('577','Suffix reconstruction','#### Description\nGiven a text $$$s[1 \\dots n]$$$ of length n, we create its suffixes array by taking all its suffixes:\n\n$$$s[1 \\dots n], s[2 \\dots n], \\dots ,s[n \\dots n]$$$\n\nand sorting them lexicographically. As a result we get a sorted list of suffixes:\n+ $$$s[p(1) \\dots n], s[p(2) \\dots n], \\dots ,s[p(n) \\dots n]$$$\n+ and call the sequence $$$p(1), p(2), \\dots , p(n)$$$ the suffix array of $$$s[1 \\dots n]$$$.\n\nFor example, if s = abbaabab, the sorted list of all suffixes becomes:\n+ $$$aabab , ab , abab , abbaabab , b , baabab , bab , bbaabab \\,$$$\n+ and the suffix array is $$$4 , 7 , 5 , 1 , 8 , 3 , 6 , 2 \\,$$$\n\nIt turns out that it is possible to construct this array in a linear time. Your task will be completely\ndifferent, though: given $$$p(1), p(2), \\dots , p(n)$$$ you should check if there exist at least one text consisting\nof lowercase letters of the English alphabet for which this sequence is the suffix array. If so, output any\nsuch text. Otherwise output -1.\n\n#### Input\nThe input contains several descriptions of suffix arrays. The first line contains the number of descriptions\n$$$t (t \\leq 100)$$$. Each description begins with a line containing the length of both the text and the array $$$n\n(1 \\leq n \\leq 500,000).$$$ Next line contains integers $$$p(1), p(2), \\dots , p(n)$$$. You may assume that $$$1 \\leq p(i) \\leq n$$$ and no value of $$$p(i)$$$ occurs twice. Total size of the input will not exceed 50MB.\n\n#### Output\nFor each test case output \'\'any\'\' text resulting in the given suffixx array. In case there is no such text\nconsisting of lowercase letters of the English alphabet, output -1.\n\n#### Sample Input\n```\n6\n2\n1 2\n2\n2 1\n3\n2 3 1\n6\n3 4 5 1 2 6\n14\n3 10 2 12 14 5 13 4 1 8 6 11 7 9\n7\n5 1 7 4 3 2 6\n```\n\n#### Sample Output\n```\nab\naa\nbab\nsuffix\nreconstruction\nissofun\n```\n',10000,65536,'0',5,76,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('578','Two professors','#### Description\nThere are two professors at the great Academy of X that really do not get along with each other. In\norder not to reveal their names, we will call them 1 and 2. The Academy employs exactly n professors;\neach of them has to give exactly one lecture. As their schedules are rather tight (they are professors,\nremember?), the starting and the ending time of each lecture is already fixed. However, it is not yet\nfixed where each lecture will take place. Obviously, it is impossible to schedule two lectures in the same\nroom if their durations overlap; on the other hand, it is possible if one of them starts exactly at the same\ntime that the other one ends. Your tasks is to find the minimal number of rooms allowing to arrange all\nthe lectures. But know that professors 1 and 2 hate each other so much that they will never give their\nlectures in the same room.\n\n#### Input\nThe input contains several test cases. The first line contains the number of test cases $$$t (t \\leq 250)$$$. Each\ntest begins with a line containing the number of professors $$$n (2 \\leq n \\leq 10^5)$$$. Next n lines follow, i-th of\nwhich contains two integers $$$start_i \\,$$$ and $$$end_i \\,$$$ $$$(0 \\leq start_i < end_i \\leq 10^9)$$$, the starting and the ending time\nof the lecture that the i-th professor gives, respectively. Total size of the input will not exceed 50MB.\n\n#### Output\nFor each test case output the minimal number of rooms necessary to schedule all the lectures.\n\n#### Sample Input\n```\n4\n2\n0 10\n10 20\n3\n0 10\n10 20\n10 20\n5\n4 14\n3 13\n2 12\n1 11\n0 10\n4\n0 10\n10 20\n20 30\n30 40\n```\n\n#### Sample Output\n```\n2\n2\n5\n2\n```\n',30000,65536,'0',5,77,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('579','Counting heaps','#### Description\nWe are given a rooted tree of n vertices. The vertices are to be labeled with numbers 1, 2,..., n so that each label is unique and the heap condition holds, i.e. the label of any vertex is less than the label of its parent. How many such labellings exist? Since this number may be quite large, calculate only its remainder modulo m . \n\n#### Input\nThe input contains several tree descriptions. The first line contains the number of input trees t (t<=250) . Each tree description begins with a line containing the size of the tree n (1<=n<=500000) and an integer m (2<=m<=10^9) . n-1 lines follow, i-th of which contains p(i+1) , the number of the parent of the i+1-th vertex (1<=p(i+1)<=i) . Vertex number 1 will be the root in each tree, so its parent will not be given. Total size of the input will not exceed 50MB. \n\n#### Output\nFor each tree output the number of its valid labellings modulo given m . \n\n\n#### Sample Input\n```\n4 \n3 1000000\n1 \n1 \n4 1000000\n1 \n1 \n1 \n5 1000000\n1 \n2 \n3 \n4 \n5 1000000\n1 \n1 \n3 \n3\n```\n\n#### Sample Output\n```\n2 \n6 \n1 \n8\n```\n\n\n#### Hint\nThe 8 possible labellings from the last example test case are as follows:\n\n```\n    1        1         1         1\n   / \\      / \\       / \\       / \\\n  2   3    3   2     4   2     5   2\n     / \\      / \\       / \\       / \\\n    4   5    4   5     3   5     3   4\n\n    1        1         1         1\n   / \\      / \\       / \\       / \\\n  2   3    3   2     4   2     5   2\n     / \\      / \\       / \\       / \\\n    5   4    5   4     5   3     4   3\n\n```',60000,131072,'0',5,78,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('58','Promise','#### Description\nMr.K goes to cinema with his friends for the new movie-<Promise>.But they find that there is only very few seats left. Now give you the status of seats on one row, can you calculate how many ways that Mr.K and his friends take the sequent seats in this row?\n\n#### Input\nThe input will contains multiple test cases. The first line of the input is a single integer $$$T (1 \\leq T \\leq 100)$$$ which is the number of test cases. T test cases follow.\n\nEach test case contains one positive integers $$$n(1 \\leq n \\leq 100)$$$--the number of Mr.K\'s friends.Next,there is a string expressing the status of seats on one row like this:\n\nABCD....\n\nThe string contains capital letters and \'.\' , \'.\' stands for one empty seat , capital letters stand for seats which are not empty. The length of the string is less than 10,000.\n\n#### Output\nFor each input test case, you are to output a single integer - the number of ways that Mr.K and his friends take the sequent seats in the giving row.\n\n#### Sample Input\n```\n3\n\n2\nABCD...\n\n3\n.....\n\n1\nA.B.C.D\n```\n\n#### Sample Output\n```\n1\n2\n0\n```\n',10000,32768,'0',0,57,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('580','In case of failure','#### Description\nTo help their clients deal with faulty Cash Machines, the board of The Planar Bank has decided to stick a label expressing sincere regret and sorrow of the bank about the failure on every ATM. The very same label would gently ask the customer to calmly head to the nearest Machine (that should hopefully work fine). \n\nIn order to do so, a list of two-dimensional locations of all n ATMs has been prepared, and your task is to find for each of them the one closest with respect to the Euclidean distance\n\n#### Input\nThe input contains several test cases. The very first line contains the number of cases t (t<=15) that follow. Each test cases begin with the number of Cash Machines n (2<=n<=10^5) . Each of the next n lines contain the coordinates of one Cash Machine x, y (0<=x, y<=10^9) separated by a space. No two points in one test case will coincide.\n#### Output\nFor each test case output n lines. i -th of them should contain the squared distance between the i -th ATM from the input and its nearest neighbour.\n#### Sample Input\n<pre>2 \n10 \n17 41 \n0 34 \n24 19 \n8 28 \n14 12 \n45 5 \n27 31 \n41 11 \n42 45 \n36 27 \n15 \n0 0 \n1 2 \n2 3 \n3 2 \n4 0 \n8 4 \n7 4 \n6 3 \n6 1 \n8 0 \n11 0 \n12 2 \n13 1 \n14 2 \n15 0\n```\n\n#### Sample Output\n<pre>200 \n100 \n149 \n100 \n149 \n52 \n97 \n52 \n360 \n97 \n5 \n2 \n2 \n2 \n5 \n1 \n1 \n2 \n4 \n5 \n5 \n2 \n2 \n2 \n5\n```\n\n',60000,65536,'0',5,79,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('581','Parity','#### Description\nA bit string has odd parity if the number of 1\'s is odd. A bit string has even parity if the number of 1\'s is even.\nZero is considered to be an even number, so a bit string with no 1\'s has even parity. Note that the number of\n0\'s does not affect the parity of a bit string.\n\n#### Input\nThe input consists of one or more strings, each on a line by itself, followed by a line containing only\n\"#\" that signals the end of the input. Each string contains 1–31 bits followed by either a lowercase letter \'e\' or\na lowercase letter \'o\'.\n\n#### Output\nEach line of output must look just like the corresponding line of input, except that the letter at the\nend is replaced by the correct bit so that the entire bit string has even parity (if the letter was \'e\') or odd parity\n(if the letter was \'o\').\n\n#### Sample Input\n```\n101e\n010010o\n1e\n000e\n110100101o\n1. \n```\n\n#### Sample Output\n```\n1010\n0100101\n11\n0000\n1101001010\n```\n',10000,65536,'0',5,80,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('582','Lampyridae Teleportae','#### Description\nThe discovery of a remarkable new insect, the Lampyridae Teleportae, more commonly known as the\nteleporting firefly, has sparked a no-less-remarkable number of ways to try to catch them. Rather than flying,\nthe Lampyridae Teleportae teleports from spot to spot by warping space-time. When it stops between\nteleports, it hovers for a moment and flashes its light in search of a mate. So, even though they only come out\nafter dark, it\'s easy to observe them, but very difficult to catch them. Fortunately for the Association for\nCatching Lampyridae (ACL), student members of the Association for Cool Machinery (ACM) recently\ndeveloped the world\'s first teleporting tennis shoes. The tennis shoes are efficient enough that, when a\nLampyridae Teleportae is spotted by its flash, there is always time to teleport once before the firefly itself\nteleports off to another location, but there is never time to teleport twice in a row before the firefly teleports\naway. The tennis shoes have a maximum teleport range, however, depending on how well their flux capacitor\nis constructed, so it\'s not always possible to catch a Lampyridae Teleportae with just a single teleport. The\nmost efficient catching method is to remain in place until a firefly flashes, and to then teleport in a straight\nline directly toward it, subject to the limitation of the maximum range of ones tennis shoes, in an attempt to\nget close enough to catch it. If you don\'t get close enough, you wait for the next flash, teleport towards it\nagain, and repeat, until you either catch it or it\'s gone.\n\nFor this programming problem you will simulate this procedure for catching teleporting fireflies with a few\nsimplifying assumptions: (1) We will be chasing only one firefly at a time. (2) Firefly chasing will take place\nin two dimensions where all units are considered to be yards. (3) The firefly is \"caught\" if the chaser can\nmanage to come within one yard of the firefly. (4) The chaser\'s movement toward a firefly is always in a\nstraight line from his or her current location directly toward the flash; if the range of the chaser\'s tennis shoes\nprevents getting close enough to catch the firefly, the chaser will always teleport the maximum range possible\n(thus, although the chaser always starts at integer coordinates, it is possible and likely that any or all of the\nchaser\'s locations after the first teleport will be at non-integer coordinates).\n\nThe input will consist of several chase scenarios. For each scenario you will be given the maximum range in\nyards of the chaser\'s teleporting tennis shoes, the chaser\'s starting location, and a list of one or more flash\nlocations for the firefly being chased. For each chase scenario your program will output a single line\nindicating either the flash location where the firefly was caught, or a message noting that the firefly was never\ncaught.\n\n#### Input\nThe first line of a chase scenario contains three numbers, delimited by a single space, in the following\norder: the maximum range in yards of the chaser\'s teleporting tennis shoes, the starting x-coordinate of the\nchaser, and the starting y-coordinate of the chaser. The maximum range will be a positive integer from 1 to\n1000. The x and y values for the starting coordinates will be integers from 0 to 1000. The remaining lines of\nan input scenario contain two integers each, an x-coordinate and a y-coordinate, again delimited by a single\nspace. These are, in order of appearance, the locations where the firefly flashes. All coordinate values range\nfrom 0 to 1000. A line specifying a value of -1 for both x and y terminates the list, at which point we consider\nthe firefly to disappear never to be seen again. Note that a firefly might be caught at a flash location prior to\nend of the list; in this case the rest of the flash locations listed in the input for the current chase scenario\nshould simply be ignored.\n\nThe next input scenario begins on the line immediately after the last line of the preceding scenario. An input\nscenario that specifies 0 (zero) as the maximum range of the chaser will terminate the input.\n#### Output\nEvery output line will be either: (1) \"Firefly N caught at (x,y)\", where N is the input scenario number\nstarting with 1, and (x,y) is the last location the firefly flashed before it was caught; or (2) \"Firefly N not\ncaught\".\n\n#### Sample Input\n```\n2 0 0\n3 3\n4 4\n5 5\n6 6\n7 7\n- 1 -1\n2 0 0\n3 3\n5 5\n7 7\n- 1 -1\n1 0 50 5 0\n5 0 62\n4 0 55\n3 0 55\n4 5 45\n5 0 50\n5 5 55\n5 0 50\n- 1 -1\n0 0 0\n```\n\n#### Sample Output\n```\nFi re fl y 1 ca ug ht a t (6 ,6 )\nFi re fl y 2 no t ca ug ht\nFi re fl y 3 ca ug ht a t (5 0, 50 )\n```\n',10000,65536,'0',5,81,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('583','Hex Tile Equations','#### Description\n[[File:F82.png|center]]\n\nAn amusing puzzle consists of a collection of hexagonal tiles packed together with each tile showing a digit or\n\'=\' or an arithmetic operation \'+\', \'-\', \'*\', or \'/\'. Consider continuous paths going through each tile exactly once,\nwith each successive tile being an immediate neighbor of the previous tile. The object is to choose such a path\nso the sequence of characters on the tiles makes an acceptable equation, according to the restrictions listed\nbelow. A sequence is illustrated in each figure above. In Figure 1, if you follow the gray path from the top, the\ncharacter sequence is\"6/3=9-7\". Similarly, in Figure 2, start from the bottom left 3 to get \"3*21+10=73\".\n\nThere are a lot of potential paths through a moderate sized hex tile pattern. A puzzle player may get frustrated\nand want to see the answer. Your task is to automate the solution.\nThe arrangement of hex tiles and choices of characters in each puzzle satisfy these rules:\nThe hex pattern has an odd number of rows greater than 2. The odd numbered rows will all contain the\nsame number of tiles. Even numbered rows will have one more hex tile than the odd numbered rows\nand these longer even numbered rows will stick out both to the left and the right of the odd numbered\nrows.\n\n+ 1.There is exactly one 2. \'=\' in the hex pattern.\n+ 3.There are no more than two \'+ \' characters in the hex pattern.\n+ 4.There will be fewer than 14 total tiles in the hex pattern.\n+ 5.With the restrictions on allowed character sequences described below, there will be a unique acceptable solution in the hex pattern.\n\nTo have an acceptable solution from the characters in some path, the expressions on each side of the equal\nsign must be in acceptable form and evaluate to the same numeric value. The following rules define\nacceptable form of the expressions on each side of the equal sign and the method of expression evaluation:\n\n+ 6.The operators \'+\', \'-\', \'+ \', and \'/\' are only considered as binary operators, so no character sequences where \'+\' or \'-\' would be a unary operator are acceptable. For example \"-2+ 3=-6\" and \"1 =5+-4\" are not acceptable.\n+ 7.The usual precedence of operations is not used. Instead all operations have equal precedence and operations are carried out from left to right. For example \"44-4/2=2+3+ 4\" is acceptable and \"14=2+3+ 4\" is not acceptable.\n\n+ 8.If a division operation is included, the equation can only be acceptable if the division operation works out to an exact integer result. For example \"10/5=12/6\" and \"7+3/5=3+ 4/6\" are acceptable. \"5/2+ 4=10\" is not acceptable because the sides would only be equal with exact mathematical calculation including an intermediate fractional result. \"5/2+ 4=8\" is not acceptable because the sides of the equation would only be equal if division were done with truncation. \n+ 9.At most two digits together are acceptable. For example, \" 9. 123+1 = 124\" is not acceptable.\n+ 10.A character sequences with a \'0\' directly followed by another digit is not acceptable. For example, \"3+ 05=15\" is not acceptable.\n\nWith the assumptions above, an acceptable expression will never involve an intermediate or final arithmetic\nresult with magnitude over three million.\n\n#### Input\nThe input will consist of one to fifteen data sets, followed by a line containing only 0.\n\nThe first line of a dataset contains blank separated integers r c, where r is the number of rows in the hex\npattern and c is the number of entries in the odd numbered rows. The next r lines contain the characters on\nthe hex tiles, one row per line. All hex tile characters for a row are blank separated. The lines for odd\nnumbered rows also start with a blank, to better simulate the way the hexagons fit together. Properties 1-5\napply.\n\n#### Output\nThere is one line of output for each data set. It is the unique acceptable equation according to rules\n6-10 above. The line includes no spaces.\n\n#### Sample Input\n```\n5 1\n 6\n/ 3\n =\n9 -\n 7\n3 3\n 1 + 1\n+  2 0 =\n 3 3 7\n5 2\n 9 -\n+  2 =\n 3 4\n+ 8 3\n 4 /\n0\n```\n\n#### Sample Output\n```\n6/3=9-7\n3*21+10=73\n8/4+3*9-2=43\n```\n',10000,65536,'0',5,82,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('584','The Bridges of San Mochti','#### Description\nYou work at a military training facility in the jungles of San Motchi. One of the training exercises is to cross a\nseries of rope bridges set high in the trees. Every bridge has a maximum capacity, which is the number of\npeople that the bridge can support without breaking. The goal is to cross the bridges as quickly as possible,\nsubject to the following tactical requirements:\n\n+ One unit at a time!\n  - If two or more people can cross a bridge at the same time (because they do not exceed the capacity), they do so as a unit; they walk as close together as possible, and they all take a step at the same time. It is never acceptable to have two different units on the same bridge at the same time, even if they don\'t exceed the capacity. Having multiple units on a bridge is not tactically sound, and multiple units can cause oscillations in the rope that slow everyone down. This rule applies even if a unit contains only a single person.\n+ Keep moving!\n  - When a bridge is free, as many people as possible begin to cross it as a unit. Note that this strategy doesn\'t always lead to an optimal overall crossing time (it may be faster for a group to wait for people behind them to catch up so that more people can cross at once). But it is not tactically sound for a group to wait, because the people they\'re waiting for might not make it, and then they\'ve not only wasted time but endangered themselves as well. Periodically the bridges are reconfigured to give the trainees a different challenge. Given a bridge configuration, your job is to calculate the minimum amount of time it would take a group of people to cross all the bridges subject to these requirements.\n\nFor example, suppose you have nine people who must cross two bridges: the first has capacity 3 and takes 10\nseconds to cross; the second has capacity 4 and takes 60 seconds to cross. The initial state can be represented\nas (9 0 0), meaning that 9 people are waiting to cross the first bridge, no one is waiting to cross the second\nbridge, and no one has crossed the last bridge. At 10 seconds the state is (6 3 0). At 20 seconds the state is\n(3 3 /3:50/ 0), where /3:50/ means that a unit of three people is crossing the second bridge and has 50 seconds\nleft. At 30 seconds the state is (0 6 /3:40/ 0); at 70 seconds it\'s (0 6 3); at 130 seconds it\'s (0 2 7); and at 190\nseconds it\'s (0 0 9). Thus the total minimum time is 190 seconds.\n\n#### Input\nThe input consists of one or more bridge configurations, followed by a line containing two zeros that\nsignals the end of the input. Each bridge configuration begins with a line containing a negative integer -B and\na positive integer P, where B is the number of bridges and P is the total number of people that must cross the\nbridges. Both B and P will be at most 20. (The reason for putting -B in the input file is to make the first line\nof a configuration stand out from the remaining lines.) Following are B lines, one for each bridge, listed in\norder from the first bridge that must be crossed to the last. Each bridge is defined by two positive integers C\nand T, where C is the capacity of the bridge (the maximum number of people the bridge can hold), and T is\nthe time it takes to cross the bridge (in seconds). C will be at most 5, and T will be at most 100. Only one unit,\nof size at most C, can cross a bridge at a time; the time required is always T, regardless of the size of the unit\n(since they all move as one). The end of one bridge is always close to the beginning of the next, so the travel\ntime between bridges is zero.\n\n#### Output\nFor each bridge configuration, output one line containing the minimum amount of time it will take\n(in seconds) for all of the people to cross all of the bridges while meeting both tactical requirements.\n\n#### Sample Input\n```\n-1 2\n5 17\n-1 8\n3 25\n-2 9\n3 10\n4 60\n-3 10\n2 10\n3 30\n2 15\n-4 8\n1 8\n4 30\n2 10\n1 12\n0 0\n```\n\n#### Sample Output\n```\n17\n75\n190\n145\n162\n```\n',10000,65536,'0',5,83,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('585','Bulletin Board','#### Description\n[[File:F84.png|center]]\n\nThe ACM Student Chapter has just been given custody of a number of school bulletin boards. Several\nmembers agreed to clear off the old posters. They found posters plastered many levels deep. They made a bet\nabout how much area was left clear, what was the greatest depth of posters on top of each other, and how\nmuch of the area was covered to this greatest depth. To determine each bet\'s winner, they made very accurate\nmeasurements of all the poster positions as they removed them. Because of the large number of posters, they\nnow need a program to do the calculations. That is your job.\n\nA simple illustration is shown above: a bulletin board 45 units wide by 40 high, with three posters, one with\ncorners at coordinates (10, 10) and (35, 20), another with corners at (20, 25) and (40, 35), and the last with\ncorners at (25, 5) and (30, 30). The total area not covered by any poster is 1300. The maximum number of\nposters on top of each other is 2. The total area covered by exactly 2 posters is 75.\n\n#### Input\nThe input will consist of one to twenty data sets, followed by a line containing only 0. On each line the\ndata will consist of blank separated nonnegative integers.\n\nThe first line of a dataset contains integers n w h, where n is the number of posters on the bulletin board, w\nand h are the width and height of the bulletin board. Constraints are $$$0 < n \\leq 100 , 0 < w \\leq 50,000 , 0 < h \\leq 40,000$$$.\n\nThe dataset ends with n lines, each describing the location of one poster. Each poster is rectangular and has\nhorizontal and vertical sides. The x and y coordinates are measured from one corner of the bulletin board.\nEach line contains four numbers xl yl xh and yh, where xl and yl, are the lowest values of the x and y\ncoordinates in one corner of the poster and xh and yh are the highest values in the diagonally opposite corner.\nEach poster fits on the bulletin board, so $$$0 \\leq xl < xh \\leq w$$$, and $$$0 \\leq yl < yh \\leq h$$$.\n\n#### Output\nThere is one line of output for each data set containing three integers, the total area of the bulletin\nboard that is not covered by any poster, the maximum depth of posters on top of each other, and the total\narea covered this maximum number of times.\n\nCaution: An approach examining every pair of integer coordinates might need to deal with 2 billion\ncoordinate pairs.\n\n#### Sample Input\n```\n3 45 40\n10 10 35 20\n20 25 40 35\n25 5 30 30\n1 20 30\n5 5 15 25\n2 2000 1000\n0 0 1000 1000\n1000 0 2000 1000\n3 10 10\n0 0 10 10\n0 0 10 10\n0 0 10 10\n0\n```\n\n#### Sample Output\n```\n1300 2 75\n400 1 200\n0 1 2000000\n0 3 100\n```\n',10000,65536,'0',5,84,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('586','Serial Numbers','',10000,65536,'0',5,85,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('587','Line & Circle Maze','',10000,65536,'0',5,86,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('588','Steganography','',10000,65536,'0',5,87,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('589','Bring Your Own Horse','',10000,131072,'0',5,88,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('59','City Map','#### Description\nYou are given a map representing the layout of a city. The city consists of blocks. The first row of map represents the first row of blocks, etc. A \'B\' character indicates a location where here is a bus stop. There will be exactly one \'X\' character, indicating your location. All other characters will be \'.\'. You are also given the maximum distance you are willing to walk to a bus stop. The distance should be calculated as the number of blocks vertically plus the number of blocks horizontally. Calculate the number of bus stops that are within walking distance of your current location.\n\n#### Input\nThe input will contains multiple test cases. The first line of the input is a single integer T (1 <= T <= 100) which is the number of test cases. T test cases follow.\n\nEach test case contains two positive integers n(1 <= n <= 100) and m(1 <=m <=50) --the maximum distance you are willing to walk to a bus stop and the rows of the map. The next m lines describes the map, each line has a same length which is always no more than 100, and each character is \'B\',\'X\' or \'.\' which are described above. \n\n#### Output\nFor each input test case, you are to output a single integer -  the number of bus stops that are within walking distance of your current location.\n\n#### Sample Input\n```\n2\n\n3 5\n...B.\n.....\n..X.B\n.....\nB....\n\n\n3 5\n...B.\n.....\n..X.B\n.....\nB....\n```\n\n#### Sample Output\n```\n2\n2\n```\n\n#### Hint\nFor the test case above, you can reach the bus stop at the top (3 units away), or on the right (2 units away). The one in the lower left is 4 units away, which is too far.\n',10000,32768,'0',0,58,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('590','Toll Road','',10000,65536,'0',5,89,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('591','Bob Laptop Woolmer and Eddie Desktop Barlow','#### Description\nHave you heard of Bob Woolmer, the former coach of South African cricket team? Unlike other conventional coaches, Woolmer relies on his laptop computer for storing and analyzing information on players, selecting team, planning match strategy etc. Since his laptop is his constant companion, people call him Bob Laptop Woolmer.\n\nHaving seen Woolmer in action during World Cup ’99, the BCB (Bangladesh Cricket Board) officials sacked Gordon Abacus Greenidge (he was not willing to use computers) and decided to appoint someone as charismatic as Woolmer for coaching Bangladesh cricket team. So, Eddie Barlow was appointed as the new coach. They say that he is no less than Bob Woolmer with his computer. Then why don’t you ever see him with his laptop? That is because he doesn’t have one!  Actually, he has a desktop PC, and he loves his computer so much that people call him Eddie Desktop Barlow.\n\nNow, to select Bangladesh national team for the next World Cup, Barlow has asked BCB to call a number of players to BKSP camp, so that he can minutely observe them before selection. Accordingly, BCB invites around 100 players to join BKSP camp. Barlow’s strategy for selecting the best team is as follows. He will observe each player’s batting, bowling and fielding capabilities individually, and each player will have three individual scores in these three aspects (batting, bowling and fielding). He will store each player’s scores in his hard disk. After he has scored all the players in this way, he will use his computer to select the best combination. He believes that it is only his computer that can handle this huge data and select the best combination to have the best capabilities in each department of the game.\n\nBarlow plans to have four specialist batsmen, three specialist bowlers, three all-rounders and one wicket-keeper in the team. Since, Khaled Mashud has no competitor for the wicket keeping position, this position is almost fixed. Barlow is now to decide for the rest 10 positions. For a specialist batsman, batting capability is the most important, but he should have some fielding capability too; a specialist bowler, besides bowling, should have some fielding and batting capabilities (since our bowlers need to score runs in order to avoid making records(!)), and an all-rounder should have all the capabilities. So, he sets the following rules:\n\n+ For any player P\n  - If P is selected as a batsman, his effective score = 0.8 * Batting score  + 0.2 * Fielding Score\n  - If P is selected as a bowler, his effective score = 0.7 * Bowling score  + 0.10 * Batting Score + 0.2 * Fielding Score\n  - If P is selected as an all-rounder, his effective score = 0.4 * Batting score + 0.4 * Bowling Score + 0.2 * Fielding Score\n\nAll the effective scores should be rounded to the nearest integer for further calculation.\n\nBarlow believes (and the mathematicians too will believe) that the best team will have the maximum total effective score.\n\nAfter the daylong practice session with the players, Barlow is to spend his nights with writing a program that will select the best team. He wants his program to be a bit flexible. So, it will take the number of candidate players, number of players to be selected, that is, number of batsmen, bowlers or all-rounders as parameters. (But the rules are fixed). But, spending the whole night in programming, he feels tired during the next day practice session, and cannot concentrate in his coaching or observing the players.\n\nSo, BCB wants to relieve Barlow from this strenuous job, and hires you to do the job for Barlow. Now you are to write the program for selecting the best team, according to the players’ scores assigned by Barlow. (You can write this in your CV that you once worked with Eddie Desktop Barlow).\n\n#### Input\nThe input may contain several data sets.\n\nThe first line of each data set contains an integer N (10 <= N <= 100) indicating the number of players in the camp. The ith (1 <= i <= N) of the next N lines contains three integers: bti, bli and fli (0 <= bt, bl, fl <= 100) representing respectively the batting, bowling and fielding scores of the ith player. After these N lines follows another line containing three integers BT (1 <= BT <= 7), BL (0 <= BL <= 5) and AR (0 <= AR <= 4), indicating respectively the number of batsmen, bowlers and all-rounders required for the final team. You may always assume that BT + BL + AR = 10.\n\nThe input terminates with a value 0 for N.\n\n#### Output\nFor each data set in the input, first output the team number (starting from 1). In the 2nd line print the sentence “Maximum effective score = ”, followed by the effective score of the best team. Print “Batsmen : ”, followed by the numbers of the players selected as batsmen in the 3rd line. The 4th line will contain “Bowlers : ”, followed by the numbers of the players selected as bowlers. In the 5th line print “All-rounders : ”, followed by the numbers of the players selected as all-rounders. If there are multiple solutions any one of them is acceptable. Print a blank line between the outputs of two consecutive data sets. \n\n#### Sample Input\n```\n15\n43 17 97\n10 75 15\n53 33 62\n85 12 19\n44 77 85\n19 10 76\n58 26 84\n33 32 80\n88 29 83\n30 4 7\n66 15 18\n20 93 1\n11 74 98\n20 89 40\n58 24 35\n6 3 1\n20\n96 1 38\n82 53 66\n42 22 29\n47 57 41\n41 70 19\n50 21 19\n72 57 54\n3 71 99\n42 8 10\n20 81 67\n82 2 91\n72 48 66\n45 8 76\n5 38 68\n69 27 88\n30 43 67\n37 92 46\n56 22 7\n57 54 18\n69 71 64\n5 3 2\n0\n```\n\n#### Sample Output\n```\nTeam #1\nMaximum Effective Score = 664\nBatsmen : 1 3 4 7 9 11\nBowlers : 12 13 14\nAll-rounders : 5\n\nTeam #2\nMaximum Effective Score = 741\nBatsmen : 1 2 11 12 15\nBowlers : 8 10 17\nAll-rounders : 7 20\n```\n',3000,32768,'0',5,90,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('592','Golden Tiger Claw','#### Description\nOmi, Raymondo, Clay and Kimiko are on new adventure- in search of new Shen Gong Wu. But Evil Boy Genius Jack Spicer is also there. Omi and Jack found the Shen Gong Wu at the same time so they rushed for it but alas they touched it at the same time. Then what? It is time for “Xiaolin Showdown”.\n\nJack challenged Omi to play a game. The game is simple! There will be an N*N board where each cell in the board contains some number. They have to assign numbers to each row and column separately so that $$$w(i,j) \\leq row(i) + col(j)$$$  where $$$w(i,j) \\,$$$ is the number assigned to the cell located at i’th row and j’th column, $$$row(i) \\,$$$ is the number assigned to i’th row and $$$col(j) \\,$$$ is the number assigned to j’th column. That is simple isn’t it? Well… the main part is that you have to minimize $$$\\sum_{i=1}^n(row(i)+col(j))$$$.\n\nJack has taken his favorite “Monkey Stuff” and Omi has taken “Golden Tiger Claw”. With the help of this “Golden Tiger Claw”, he can go anywhere in the world. He has come to you and seeking your help. Jack is using his computer to solve this problem. So do it quick! Find the most optimal solution for Omi so that you can also be part of history in saving the world from the darkness of evil.\n\n#### Input\nInput contains 15 test cases. Each case starts with N. Then there are N lines containing N numbers each. All the numbers in input is positive integer within the limit 100 except N which can be at most 500.\n\n#### Output\nFor each case in the first line there will be N numbers, the row assignments. In the next line there will N column assignment. And at the last line the minimum sum should be given. If there are several possible solutions give any.\n\n#### Sample Input\n```\n2\n1 1\n1 1\n```\n\n#### Sample Output\n```\n1 1\n0 0\n2\n```\n',3000,65536,'0',5,91,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('593','Saving the Planet','#### Description\nIn science fiction movies we have seen that a few man leave the Earth and go far away for better inhabitance. In reality, this Earth is our only place to live. It is our sacred duty to keep this planet away from all kinds of danger. You will now be given such a duty so don’t run away.\n\nThe scientists of Japan, Australia, USA and Russia have discovered something miserable. This discovery took place in a Laboratory of PONDS (Planet Orbit and Numerology Determination Society). A huge object is coming straight towards our planet. The problem is that its shape and size cannot be determined. The scientists discover some signals bit they are from scattered positions. A few days later they discover that the relative distances between these scattered positions (these positions can be considered points) remain constant. So they realize that these signals come from radioactive elements, which are placed on and inside of a transparent planet. The scientists are making a weapon to destroy this half visible planet. They have also hired Bruce Willis, the brave astronaut of the movie “Armageddon” (Although in the movie he died, the director kept him alive for his next movie). But the problem is the power of the weapon depends on the size of the planet. If the weapon is a little less powerful that what the planet requires to be destroyed it is ok but if it is more powerful than the exact requirement the existence of Earth will be in danger. Assuming that all the radioactive elements are within the planet and the planet is a sphere, you will have to determine the minimum radius possible of the planet from the given radio active element positions and also the coordinate of the center of the planet at the time when the sample was taken. The radioactive element positions are points in three-dimensional space (x, y, z).   \n\n#### Input\nThe input contains several sets of input. Each set contains an integer n (n<10001) followed by n lines, which contains the coordinate of the radioactive elements. The coordinates are measured according to ISCS (International Space Coordinate System) rules and you don’t need to bother about this. You just deal with the numerical values. A set with a zero value for n ends the input.\n\n#### Output\nFor each set of output in a single line four floating-point numbers. First numbers is the radius of the Planet and the last three numbers denote the coordinates of the center of the planet. Each number is separated by a space and contains four digits after the decimal point. Assume that pi=3.14159265359\n\n#### Sample Input\n```\n10\n0.05 0.01 10.08\n1.21 0.71 0.74\n0.13 4.23 13.60\n1.61 3.48 0.86\n1.58 1.86 1.14\n1.63 5.26 0.76\n0.35 1.19 0.97\n5.31 0.38 0.43\n2.00 0.82 204.27\n1.65 0.64 0.65\n0\n```\n\n#### Sample Output\n```\n101.9337 3.6550 0.6000 102.3500\n```\n',3000,65536,'0',5,92,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('594','The Optimal Super-Highway','#### Description\nIn our real life when we look for help we find that only a few people are willing to help us but when we look for suggestions there are thousands waiting with their bag of suggestions. In the country named Culabura a similar situation is creating a lot of trouble. Culabura is a country containing around 20000 important places and infinite land area. The president of Culabura wants to build a super highway through his country. This super highway can be expressed by a straight line that fulfills the following two properties:\n+ a) It must be parallel to another road that connects the two most important cities (denoted by A and B) of the country.\n+ b) The summation of distances of all-important places from it must be minimum.\n\n[[File:F93.jpg|center]]\n\nThe advisers of the king of Culabura are giving random and meaningless suggestions to solve this problem (As always is the case with advisers). Now your job is to find the minimum summation of distance. For example in the above picture you will have to find the minimum possible value of (d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8). In other words you will have to place the superhighway in such a place so that (d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8) is minimum and you will have print this minimum value. In this problem we will call such minimum value sum_d_min. Your solution must be very efficient. /*Looking for an O(n) solution */\n\n#### Input\nThe input file contains a single set of input. First line of each input set contains two integers N (0<N<20001) and Q(0<Q<101). Here N is the number of important places and Q is the number of queries. Each of the next N lines contains a pair of integer xi and yi (|xi|, |yi|<=100), where (xi, yi) is the coordinate of the i-th (0<=i<=N-1) important place. Each of the next Q lines contains four integers Ax, Ay, Bx, By, where (Ax, Ay) and (Bx, By) are the coordinates of A and B respectively and the optimal super highway must be parallel to street (or line) AB. You must not consider A and B as part of the N important places. Some important places may be present more than in the list to give them extra importance. You don’t need to worry about that and just consider them as two different places. Also remember that place A and B will always be two different places.\n\n#### Output\nFor each query produce one line of output. This line contains the serial of output followed by the value of sum_d_min for that particular query. All the output numbers should be rounded to nearest integer. Look at the output for sample input for details.\n\n#### Sample Input\n```\n6 2\n1 1\n1 10\n20 12\n2 4\n1 1\n2 4\n10 10 11 11\n2 3 3 4\n```\n\n#### Sample Output\n```\nCase 1: 15\nCase 2: 15\n```\n',3000,65536,'0',5,93,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('595','The Circumference of the Circle','#### Description\nTo calculate the circumference of a circle seems to be an easy task - provided you know its diameter. But what if you don\'t?\n\nYou are given the cartesian coordinates of three non-collinear points in the plane.\n\nYour job is to calculate the circumference of the unique circle that intersects all three points. \n\n#### Input\nThe input file will contain one or more test cases. Each test case consists of one line containing six real numbers tex2html_wrap_inline26 , representing the coordinates of the three points. The diameter of the circle determined by the three points will never exceed a million. Input is terminated by end of file. \n\n#### Output\nFor each test case, print one line containing one real number telling the circumference of the circle determined by the three points. The circumference is to be printed accurately rounded to two decimals. The value of tex2html_wrap_inline28 is approximately 3.141592653589793. \n\n#### Sample Input\n```\n0.0 -0.5 0.5 0.0 0.0 0.5\n0.0 0.0 0.0 1.0 1.0 1.0\n5.0 5.0 5.0 7.0 4.0 6.0\n0.0 0.0 -1.0 7.0 7.0 7.0\n50.0 50.0 50.0 70.0 40.0 60.0\n0.0 0.0 10.0 0.0 20.0 1.0\n0.0 -500000.0 500000.0 0.0 0.0 500000.0\n```\n\n#### Sample Output\n```\n3.14\n4.44\n6.28\n31.42\n62.83\n632.24\n3141592.65\n```\n',3000,67867,'0',5,94,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('596','Hamiltonian Cycle','#### Description\nA few definitions first:\n\n+ Definition 1\n  - A graph G = (V, E) is called \'\'dense\'\' if for each pair of non-adjacent vertices u and v, $$$d(u) + d(v) \\ge n$$$ where n = |V| and $$$d(\\bullet)$$$ denotes the degree of the vertex $$$\\bullet$$$. \n+ Definition 2\n  - A \'\'Hamiltonian cycle\'\' on G is a sequence of vertices ( $$$v_{i_1} v_{i_2} \\dots v_{i_n} v_{i_1}$$$ ) such that $$$v_{i_l} \\neq v_{i_h}$$$ for all $$$l \\neq h$$$ and { $$$v_{i_l}, v_{i_l}$$$ } is an edge of G. \n\nThe problem is: write a program that, given a dense undirected graph G = (V; E) as input, determines whether G admits a Hamiltonian cycle on G and outputs that cycle, if there is one, or outputs \'\'N\'\' if there is none.\n\n#### Input\nA file containing descriptions of graphs, in the form:\n\n+ n1\n+ $$$u_{i_1} \\ u_{j_1}$$$\n+ $$$u_{i_2} \\ u_{j_2}$$$\n+ $$$\\dots$$$\n+ %\n+ n2\n+ $$$u_{i_1} \\ u_{j_1}$$$\n+ $$$u_{i_2} \\ u_{j_2}$$$\n+ $$$\\dots$$$\n+ %\n\nwhere ni is the number of vertices (0 < ni < 256) and $$$u_{i_h} \\ u_{i_l}$$$ are integers between 1 and n indicating that there exists an edge between vertex $$$u_{i_h} \\,$$$ and $$$u_{i_l} \\,$$$\n\n#### Output\nThe output file must contain the sequence of vertices that form a Hamiltonian cycle in the form:\n+ $$$u_{i_1} \\ u_{i_2} \\ u_{i_3 } \\ \\dots$$$\nor containing:\n+ N \n\n#### Sample Input\n```\n4\n1 2\n2 3\n2 4\n3 4\n3 1\n%\n6\n1 2\n1 3\n1 6\n3 2\n3 4\n5 2\n5 4\n6 5\n6 4\n%\n```\n\n#### Sample Output\n```\n1 2 4 3 1\n1 3 2 5 4 6 1\n```\n',3000,65536,'0',5,95,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('597','Series / Parallel Resistor Circuits','',10000,65536,'0',5,96,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('598','The Heart of the Country','',10000,65536,'0',5,97,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('599','Lawrence of Arabia','',2000,65536,'0',5,98,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('6','Dictionary','#### Description\nI am doing some research on a dictionary. I want to know how many words in the dictionary can make up by exactly two other words(can be the same word) in the dictionary. The size of dictionaries are less than $$$110,001\\,$$$, and all the length of words are less than 40.\n\n#### Input\nAll words in the dictionary, lower only. One line for each word.\n\n#### Output\nAll words make up by exactly two other words(can be the same word). One line per word. Output it in ascending order.\n\n#### Sample Input\n```\ncellphone\ncell\nphone\nincome\ncome\nin\noutput\nout\nput\n```\n\n#### Sample output\n```\ncellphone\nincome\noutput\n```\n',10000,65536,'0',0,5,'',0,'2','2018-11-05 00:31:14','2018-11-05 00:48:07'),('60','Counting Black','#### Description\nThere is a board with 100 * 100 grids as shown below. The left-top gird is denoted as (1, 1) and the right-bottom grid is (100, 100).\n\n{| align=\"center\" cellspacing=\"0\" border=\"1\"\n|1,1\n|1,2\n|...\n|1,99\n|1,100\n|-\n|2,1\n|2,2\n|...\n|2,99\n|2,100\n|-\n|...\n|...\n|...\n|...\n|...\n|-\n|99,1\n|99,2\n|...\n|99,99\n|99,100\n|-\n|100,1\n|100,2\n|...\n|100,99\n|100,100\n|}\n\nWe may apply three commands to the board:\n\n+ \'\'\'WHITE\'\'\' x, y, L\n  - Paint a white square on the board,   \n  - the square is defined by left-top grid (x, y)  \n  - and right-bottom grid (x+L-1, y+L-1)  \n+ \'\'\'BLACK\'\'\' x, y, L\n  - Paint a black square on the board,   \n  - the square is defined by left-top grid (x, y)  \n  - and right-bottom grid (x+L-1, y+L-1)  \n+ \'\'\'TEST\'\'\' x, y, L\n  - Ask for the number of black grids   \n  - in the square (x, y)- (x+L-1, y+L-1) \n\nIn the beginning, all the grids on the board are white. We apply a series of commands to the board. Your task is to write a program to give the numbers of black grids within a required region when a \'\'\'TEST\'\'\' command is applied.\n\n#### Input\nThe first line of the input is an integer $$$t (1 \\leq t \\leq 100)$$$, representing the number of commands. In each of the following lines, there is a command. Assume all the commands are legal which means that they won\'t try to paint/test the grids outside the board.\n\n#### Output\nFor each \'\'\'TEST\'\'\' command, print a line with the number of black grids in the required region.\n\n#### Sample Input\n```\n5 \nBLACK 1 1 2  \nBLACK 2 2 2  \nTEST 1 1 3  \nWHITE 2 1 1  \nTEST 1 1 3 \n```\n\n#### Sample Output\n```\n7\n6\n```\n',10000,32768,'0',0,59,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('600','Shoring Up the Levees','',10000,65536,'0',5,99,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('601','Combination Lock','',10000,65536,'0',6,0,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('602','Fred’s Lotto Tickets','',10000,65536,'0',6,1,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('603','A No-Win Situation','',10000,65536,'0',6,2,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('604','A Walk in the Park','',10000,65536,'0',6,3,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('605','Teleport Out!','#### Description\nYou are in a rectangular maze and you would like to leave the maze as quickly\nas possible. The maze is a rectangular grid of square locations. Some locations\nare blocked. Some other locations are exits. If you arrive at an exit location, you\ncan immediately leave the maze.\n\nYou may walk one step at a time, onto one of the locations adjacent to your\ncurrent location. Two locations are adjacent if they share a side. That is, you can\nonly move one step North, South, East or West. Of course, you cannot step off\nthe maze, and you cannot step onto a blocked location.\n\nIn addition, at any step, you may choose to use your teleport device. This device\nwill send you to a random non-blocked location inside the maze with uniform\nprobability (including, possibly, the one where you currently are standing!). If the\ndevice happens to send you onto a spot that is also an exit, then you leave the\nmaze immediately. Hooray!\n\nThe only way to leave the maze is by moving onto an exit (either by teleport or\nwalking), you may not walk off the boundary of the maze. Write a program to\ncalculate the expected number of steps you need in order to leave the maze.\nAssume that you would choose your actions (movements and using teleport\ndevice) optimally in order to minimize the expected number of steps to leave the\nmaze. Using the teleport device is considered one step.\n\n#### Input\nThere will be multiple test cases. Each test case starts with a line containing two\npositive integers R and C (R <= 200, C <= 200). Then, the next R lines each\ncontain C characters, representing the locations of the maze. The characters will\nbe one of the following:\n+ E: represents an exit, there will be at least one E in every maze.\n+ Y: represents your initial location, there will be exactly one Y in every maze.\n+ X: represents a blocked location.\n+ .: represents an empty space.\n\nYou may move/teleport onto any location that is marked E, Y or ..\n\nThe end of input is marked by a line with two space-separated 0’s.\n\n#### Output\nFor each test case, print one line containing the minimum expected number of\nsteps required to leave the maze, given that you make your choices optimally to\nminimize this value. Print your result to 3 decimal places. Do not print any blank\nlines between outputs.\n\n#### Sample Input\n```\n2 1\nE\nY\n2 2\nE.\n.Y\n3 3\nEX.\nXX.\n..Y\n3 3\nEXY\n.X.\n...\n0 0\n```\n\n#### Sample Output\n```\n1.000\n2.000\n6.000\n3.250\n```\n',10000,65536,'0',6,4,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('606','Worms','#### Description\nBiologists are studying a certain, interesting kind of worm. Each worm can be\nseen as a line of cells of different types. When a worm is born, it only consists of\na single cell. Every day, exactly 1 cell of the entire worm will grow and change\ninto 2 cells. It is rather easy to determine the age of any such worm, since it’s\nsimply one less than the number of cells the worm has.\n\nDuring a worm’s growth, a cell does not change into any 2 arbitrary cells; each\nworm has a set of “growth rules” (encoded in its DNA) that it obeys. A growth rule\ncan be expressed as $$$A \\to BC$$$, where A, B and C are uppercase letters (with letters\nA-T), representing different types of the worm’s cells. The rule $$$A \\to BC$$$ means that\nin one day, any single cell A can be grown into the 2 adjacent cells BC, in that\norder. Note that the rule $$$I \\to JK$$$ is different from the rule $$$I \\to KJ$$$. Different worms\nmay have a different set of growth rules.\n\nThe worms have now thrown the scientists for a loop. Due to some unknown\nreason, some worms have mutated into a new kind of specimen. This new kind\nof worm has the exact same properties, except that during its growth, multiple\nparts of its body can grow at the same time. That is, every day any (at least one,\nat most all) of its cells can grow; each cell that grows will grow into exactly 2 cells\n(obeying growth rules similar to their older cousins).\n\nAs a result of the mutation, it is no longer trivial to determine the age of a worm.\nIn fact, the exact age of some worms cannot be determined. As a simple\nexample, if a worm has growth rules: $$$A \\to BC$$$, $$$B \\to AC$$$, $$$C \\to AB$$$, and the worm’s\ncurrent cell structure is ACAB, the worm can be either 2 or 3 days old ($$$A \\to BC \\to ACAB$$$, or $$$A \\to BC \\to ACC \\to ACAB$$$). Your task is to find out the youngest possible\nage of any given mutated worm.\n\n#### Input\nThere will be multiple worms for examination in the input. Each worm’s data set\nbegins with an integer N (1 <= N <= 80), the number of growth rules. The next\nN lines each contain 3 uppercase letters (with letters A-T), representing a growth\nrule for the current worm. The 1st cell can grow into (and be replaced by) the 2nd\nand 3rd cells, in order, during the growth process. That is, the line:\n+ ABC\nmeans $$$A \\to BC$$$ is a growth rule for the current worm.\nThe next (and last) line of each worm’s data set contains a string of uppercase\nletters (with letters A-T). This line represents the current cell structure of the\nworm. Every worm in the input will have at least 1 and at most 50 cells.\nThe last worm will be followed by a line with a single 0.\n\n#### Output\nFor each worm, if the worm can be grown into the given cell sequence with the\ngiven growth rule set (starting with any arbitrary single cell), then print the\nminimum age, in days, of the worm, as an integer on its own line. If the worm\ncannot be grown into the given cell sequence with the given rule set (starting with\nany arbitrary single cell), then simply print the number -1 on its own line. Print no\nblank lines between outputs.\n\n#### Sample Input\n```\n3\nABC\nBAC\nCAB\nACAB\n1\nAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n2\nPAA\nAAA\nAAAAAAAAAAAAAAAP\n1\nBAB\nAAAAAAB\n0\n```\n\n#### Sample Output\n```\n2\n6\n-1\n6\n```\n',10000,65536,'0',6,5,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('607','Board Wrapping','#### Description\n[[Image:G06.jpg|right]]\nThe small sawmill in Mission, British Columbia, has developed a brand new way of packaging boards for drying. By fixating the boards in special moulds, the board can dry efficiently in a drying room.\n\nSpace is an issue though. The boards cannot be too close, because then the drying will be too slow. On the other hand, one wants to use the drying room efficiently.\n\nLooking at it from a 2-D perspective, your task is to calculate the fraction between the space occupied by the boards to the total space occupied by the mould. Now, the mould is surrounded by an aluminium frame of negligible thickness, following the hull of the boards\' corners tightly. The space occupied by the mould would thus be the interior of the frame. \n\n\n#### Input\nOn the first line of input there is one integer, N <= 50, giving the number of test cases (moulds) in the input. After this line, N test cases follow. Each test case starts with a line containing one integer n, 1< n <= 600, which is the number of boards in the mould. Then n lines follow, each with five floating point numbers x, y, w, h, j where 0 <= x, y, w, h <=10000 and –90° < j <=90°. The x and y are the coordinates of the center of the board and w and h are the width and height of the board, respectively. j is the angle between the height axis of the board to the y-axis in degrees, positive clockwise. That is, if j = 0, the projection of the board on the x-axis would be w. Of course, the boards cannot intersect.\n\n#### Output\nFor every test case, output one line containing the fraction of the space occupied by the boards to the total space in percent. Your output should have one decimal digit and be followed by a space and a percent sign (%).\n\n#### Sample Input\n```\n1\n4\n4 7.5 6 3 0\n8 11.5 6 3 0\n9.5 6 6 3 90\n4.5 3 4.4721 2.2361 26.565\n```\n\n#### Sample Output\n```\n64.3 %\n```\n',3000,65536,'0',6,6,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('608','Rank an File','',10000,65536,'0',6,7,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('609','The Extent of the Problem','',10000,65536,'0',6,8,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('61','Roads','#### Description\nActually, Mr.K is a famous engineer. He got a big project resently.He is asked to build roads to connect several city. At first, there is no roads between any pair of these city. He is given the distances between any two cities . Mr.K wants to build roads as less length as posible to make all city connected.\n\n#### Input\nThe input will contains multiple test cases. The first line of the input is a single integer $$$T (1 \\leq T \\leq 100)$$$ which is the number of test cases. T test cases follow.\n\nEach test case contains one positive integers $$$n(1 \\leq n \\leq 1,000)$$$ --the number of the citis numbered 1 to n. Next,there are n rows, and which row contains n positive integer. The integer at ith row,jth column is the distance between city i and city j, and it will never bigger than 10,000; \n\n#### Output\nFor each input test case, you are to output a single integer -  the smallest length of roads that make all cities connected.\n\n#### Sample Input\n```\n2\n\n\n3\n0 1 1\n1 0 2\n1 2 0 \n\n3\n0 1 1\n1 0 2\n1 2 0\n```\n\n#### Sample Output\n```\n2\n2\n```\n',10000,32768,'0',0,60,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('610','Filtration','',10000,65536,'0',6,9,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('611','Like Water for Clay','',10000,65536,'0',6,10,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('612','Wandering Aimlessly','',10000,65536,'0',6,11,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('613','Cables ... in Spaaace!','',10000,65536,'0',6,12,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('614','Patterns and Pictures','',10000,65536,'0',6,13,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('615','No Wormholes Were Harmed...','',10000,65536,'0',6,14,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('616','Tribute (Editor)','#### Description\n\nThis problem is not about the greatest editor in the world; it is just a tribute. \n\nThe Tenacious eDitor is an attempt to clone to power of a certain modal editor. However, it is notoriously bug-ridden. You\'ve been asked to replace Kyle (who quit the devteam) and help with fixing some of the bugs. \n\nThe main problem with the current release of td, as it is commonly referred to, is that it cannot differentiate between text on a line and commands. Whenever a user wants to type an x, the editor interprets it as a command to delete the last character. This is problematic. Thankfully, commands are case-sensitive, and each letter is at most a single command (sometimes uppercase, sometimes lowercase), so one can manage to write any given line of text as long as it\'s allowed to look like something written by a fourteen-year-old hacker wannabe. \n\nEditing occurs in an edit buffer, which starts out empty. The cursor in td rests in gaps, locations surrounding each printed character. When a non-command character is entered, the character is inserted to the right of the cursor\'s current location and the cursor moves to the gap to the right of the new character. (This is the standard behavior of most editors.) A line with no characters has a single gap. A line with a single printable character has two (one before and one after), a line with two printable characters has three, and so on. \n\nThe currently-implemented commands are:\n[[File:未命名.JPG]]\nFor the purposes of this problem, the only characters are uppercase and lowercase characters, digits, and spaces. \n\nWhen a character is added internally to a line of text, all subsequent characters shift to the right (as in \"insert mode\"); when characters are deleted from anywhere other than the end of a line, all subsequent characters shift to the left. \n\nAny commands which cannot properly do anything (attempting to move past the first or last gap, deleting characters when none exist, and so on) do nothing. They do not show up as printed characters. \n\nEach line represents a different session of td; at the beginning of a new session, the edit buffer is empty. \n\nGiven a series of keystrokes by a user, can you determine what text actually results if it were entered in the current version of td? \n\n\n#### Input\n\nInput to this problem will begin with a line containing a single integer N (1 ≤ N ≤ 100) indicating the number of data sets. \n\nEach data set consists of a single line of characters, as defined above, with no leading or trailing whitespace. There are no less than 1 and no more than 100 characters per line. They represent the series of keystrokes entered by a user for a particular session of td. \n\n#### Output\n\nFor each data set, print the final state of the edit buffer from the sequence of characters entered, with a carat (^) at the location of the cursor. \n\n#### Sample Input\n```\n2\nDeletex bigdeleteKduPc bigduPD esreverR midinhhdleGxx midelletehhhxGfmoo\nTHis ratHer obnoXious line oF CHaraCters surPrisingly triggers no Commands\n```\n\n#### Sample Output\n```\nmoo^elet duPP bigduPbigduP reverse middle midelete\nTHis ratHer obnoXious line oF CHaraCters surPrisingly triggers no Commands^\n```\n',10000,65536,'0',6,15,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('617','Don\'t Get Rooked','#### Description\n\nIn chess, the rook is a piece that can move any number of squares vertically or horizontally. In this problem we will consider small chess boards (at most 44) that can also contain walls through which rooks cannot move. The goal is to place as many rooks on a board as possible so that no two can capture each other. A configuration of rooks is legal provided that no two rooks are on the same horizontal row or vertical column unless there is at least one wall separating them. \n\n\n\nThe following image shows five pictures of the same board. The first picture is the empty board, the second and third pictures show legal configurations, and the fourth and fifth pictures show illegal configurations. For this board, the maximum number of rooks in a legal configuration is 5; the second picture shows one way to do it, but there are several other ways. \n\n\n[[File:G16.gif]]\n \n\nYour task is to write a program that, given a description of a board, calculates the maximum number of rooks that can be placed on the board in a legal configuration. \n\n\n#### Input\n\nThe input file contains one or more board descriptions, followed by a line containing the number 0 that signals the end of the file. Each board description begins with a line containing a positive integer n that is the size of the board; n will be at most 4. The next n lines each describe one row of the board, with a `.\' indicating an open space and an uppercase `X\' indicating a wall. There are no spaces in the input file. \n\n#### Output\n\nFor each test case, output one line containing the maximum number of rooks that can be placed on the board in a legal configuration. \n\n#### Sample Input\n```\n4\n.X..\n....\nXX..\n....\n2\nXX\n.X\n3\n.X.\nX.X\n.X.\n3\n...\n.XX\n.XX\n4\n....\n....\n....\n....\n0\n```\n\n#### Sample Output\n```\n5\n1\n5\n2\n4\n```',3000,65536,'0',6,16,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('618','Transportation','#### Description\n\nRuratania is just entering capitalism and is establishing new enterprising activities in many fields including transport. The transportation company TransRuratania is starting a new express train from city A to city B with several stops in the stations on the way. The stations are successively numbered, city A station has number 0, city B station number m. The company runs an experiment in order to improve passenger transportation capacity and thus to increase its earnings. The train has a maximum capacity n passengers. The price of the train ticket is equal to the number of stops (stations) between the starting station and the destination station (including the destination station). Before the train starts its route from the city A, ticket orders are collected from all onroute stations. The ticket order from the station S means all reservations of tickets from S to a fixed destination station. In case the company cannot accept all orders because of the passenger capacity limitations, its rejection policy is that it either completely accept or completely reject single orders from single stations. \n\n\nWrite a program which for the given list of orders from single stations on the way from A to B determines the biggest possible total earning of the TransRuratania company. The earning from one accepted order is the product of the number of passengers included in the order and the price of their train tickets. The total earning is the sum of the earnings from all accepted orders. \n\n#### Input\n\nThe input file is divided into blocks. The first line in each block contains three integers: passenger capacity n of the train, the number of the city B station and the number of ticket orders from all stations. The next lines contain the ticket orders. Each ticket order consists of three integers: starting station, destination station, number of passengers. In one block there can be maximum 22 orders. The number of the city B station will be at most 7. The block where all three numbers in the first line are equal to zero denotes the end of the input file. \n\n#### Output\n\nThe output file consists of lines corresponding to the blocks of the input file except the terminating block. Each such line contains the biggest possible total earning. \n\n#### Sample Input\n```\n10 3 4\n0 2 1\n1 3 5\n1 2 7\n2 3 10\n10 5 4\n3 5 10\n2 4 9\n0 2 5\n2 5 8\n0 0 0\n```\n\n#### Sample Output\n```\n19\n34\n```\n\n\n',3000,65536,'0',6,17,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('619','Mapping the Swaps','#### Description\nSorting an array can be done by swapping certain pairs of adjacent entries in the array. This is the fundamental technique used in the well-known bubble sort. If we list the identities of the pairs to be swapped, in the sequence they are to be swapped, we obtain what might be called a swap map. For example, suppose we wish to sort the array A whose elements are 3, 2, and 1 in that order. If the subscripts for this array are 1, 2, and 3, sorting the array can be accomplished by swapping A2 and A3, then swapping A1 and A2, and finally swapping A2 and A3. If a pair is identified in a swap map by indicating the subscript of the first element of the pair to be swapped, then this sorting process would be characterized with the swap map 2 1 2. \n\n\nIt is instructive to note that there may be many ways in which swapping of adjacent array entries can be used to sort an array. The previous array, containing 3 2 1, could also be sorted by swapping A1 and A2, then swapping A2 and A3, and finally swapping A1 and A2 again. The swap map that describes this sorting sequence is 1 2 1. \n\n\nFor a given array, how many different swap maps exist? A little thought will show that there are an infinite number of swap maps, since sequential swapping of an arbitrary pair of elements will not change the order of the elements. Thus the swap map 1 1 1 2 1 will also leave our array elements in ascending order. But how many swap maps of minimum size will place a given array in order? That is the question you are to answer in this problem. \n\n#### Input\n\nThe input data will contain an arbitrary number of test cases, followed by a single 0. Each test case will have a integer n that gives the size of an array, and will be followed by the n integer values in the array. \n\n#### Output\n\nFor each test case, print a message similar to those shown in the sample output below. In no test case will n be larger than 5. \n\n#### Sample Input\n```\n2 9 7\n2 12 50\n3 3 2 1\n3 9 1 5\n0\n```\n\n#### Sample Output\n```\n\nThere are 1 swap maps for input data set 1.\nThere are 0 swap maps for input data set 2.\nThere are 2 swap maps for input data set 3.\nThere are 1 swap maps for input data set 4.\n\n```\n\n',3000,65536,'0',6,18,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('62','Please Help Posidone','#### Background\n[[Image:A61.jpg|right|thumb|Posidone]]\nDo you know who is Posidone? If you don’t, no worry, just get on the ACM-ICPC board in the BBS of SZU. Posidone is not good at dealing with simply problems. Simply problems are really difficult for Posidone. Why? God know it. \n\nNow, Posidone needs your help, because there is a simply problem here for him.\n\n#### Description\nOne day a child asked Posidone to sum up all the integer numbers between two integer numbers A and B (including). He wants to solve it by computer. But… you know he is not good at solving simply problem.\n\n#### Input\nThe input will contain multiple test cases. The first line of the input is a single integer $$$T (1 \\leq T \\leq 300)$$$ which is the number of test cases. T test cases follow.\n\nEach test case contains two integers A and B $$$( -2^{30} \\leq A,B \\leq 2^{30})$$$ in a single line.\n\nYou can assume that answer will fit in a 32-bit integer.\n\n#### Output\nFor each input test case, print an integer number in a single line.\n\n#### Sample Input\n```\n3\n1 2\n2 3\n3 4\n```\n\n#### Sample Output\n```\n3\n5\n7\n```\n',10000,32768,'0',0,61,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('620','Pyramid Number','#### Description\nA group of archaeologists have come across a new kind of number pattern while analyzing the hieroglyphs patterns in ‘The not so great pyramid’. They have decided to call these numbers ‘Pyramid numbers’. A number n is called a Pyramid number if we can partition n into k positive integers $$$x_i (1 \\leq i \\leq k)$$$ such that $$$\\sum_{i=1}^k\\frac{1}{x_i} = 1$$$. For example, $$$1 = \\frac{1}{2} + \\frac{1}{2}$$$. So, 4 (2 + 2) is a Pyramid number.\n\nA number n is called a Strictly Pyramid number if we can partition n into k distinct positive integers $$$x_i (1 \\leq i \\leq k)$$$ such that $$$\\sum_{i=1}^k\\frac{1}{x_i} = 1$$$. For example, $$$1 = \\frac{1}{2} + \\frac{1}{3} + \\frac{1}{6}$$$ Here, 11 (2 + 3 + 6) is Strictly Pyramid whereas in the above example, 4 is Pyramid but not Strictly Pyramid.\n\nGiven two positive integers a & b, find the number of Strictly Pyramid numbers between a & b (inclusive).\n\n#### Input\nThe first line of the input file will contain an integer $$$T (1 \\leq T \\leq 100)$$$, the number of test cases. Each of the following T lines will be consisting of 2 integers a & b $$$(1 \\leq a , b \\leq 1,000,000)$$$.\n\n#### Output\nFor each test case, print an integer which is the number of Strictly Pyramid numbers between a & b (inclusive).\n\n#### Sample Input\n```\n5\n1 10\n1 11\n1 100\n70 80\n110 120\n```\n\n#### Sample Output\n```\n1\n2\n53\n8\n11\n```\n',3000,65535,'0',6,19,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('621','Arithmetic Subsequence','#### Description\nA sequence of numbers is said to be arithmetic if there is a constant difference between successive elements. For example {1,5,9} is an arithmetic sequence where the difference between each term is 4 and the sequence contains three elements. In this problem, given a set of numbers, you are to determine how many subset of this set is an arithmetic sequence. The elements in the subset must be in the same order as they occur in the superset. That is for the superset { 1,3,6},  {1,3} is a subset but not {3,1}.\n\n#### Input\nThe first line of input will be a positive integer T<=100, where T denotes the number of test cases. Each case starts with a positive integer n<=250. This is followed by n non negative integers each on a new line.  The value of these integers will be less 100000001. The n integers represent the elements of the superset.\n\n#### Output\nFor each case of input there will be one line of output. It will be the number of subsets which form an arithmetic sequence as described earlier. The numbers maybe very large, therefore you are to give the answer modulo 10000007. Follow sample output for exact format.\n\n#### Sample Input\n```\n3\n3\n1\n2\n4\n1\n1\n3\n1\n2\n2\n```\n\n#### Sample Output\n```\nCase 1: 6\nCase 2: 1\nCase 3: 6\n```\n',3000,65535,'0',6,20,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('622','Li\'s homework','#### Description\n\ntest\ninput a,b;\noutput a*b\n \n#### Input\nThe first line of input contains $$$T(1 \\leq T \\leq 1000)$$$, the number of test cases. There\nis only line for each test case. It contains two integers $$$A,B(1 \\leq A,B \\leq 10)$$$.\n\n#### Output\nFor each test case, output the product of A and B.\n\n#### Sample Input\n```\n2\n1 2\n2 3\n```\n\n#### Sample Output\n```\n2\n6\n```',10000,32768,'0',6,21,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('623','Mill and ss string','#### Description\n\nMill is a special girl, who is particularly fond of one kind of number string, which strictly increases except the last number that must be repeated. She calls it as \"ss\" string. For example \"1 2 5 5 5\", \"2 3 4 4\", \"5 5 5\" are all \"ss\" string, while \"1\", \"2 3\", \"1 3 2 2\", \"1 5 5 6 6\" are not \"ss\" string. Now you have an increasing order number string, please find out the length of the longest \"ss\" string. \n\n#### Input\n\nThe first line of input contains an integer T (0<=T<=10) the number of test cases. There is an only line for each test case. The first number N (0<=N<=100) of each test case indicates how many integer numbers are there from smaller to larger. All numbers are in the range of $$$[-2^{31} , 2^{31}-1]$$$. \n\n#### Output\n\nOutput one line for each test case with the length of the longest “ss”string. \n\n#### Sample Input\n```\n4 \n6 1 2 5 5 5 6 \n3 5 5 5 \n3 1 2 3 \n8 1 3 3 3 4 5 6 6 \n```\n\n#### Sample Output\n```\n5 \n3 \n0 \n6\n```\n',1000,32768,'0',6,22,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('624','Board is in short','#### Description\n\nThere are lots of student organizations in our school and the student events are rich and various. While each event will use poster to advertise, so student event boards are always in short supply and posters were always covered by the newer posters quickly. This problem will directly affect the success of events. \n\nNow you get a mission to look for a solution to solve the problem. The first step to solve this problem is to find out the cover rate of the board, which is the ratio of the area covered by posters to the total area of boards. We can consider the event board as a coordinate plane and the origin point (0,0) is at the lower left corner of the board. To simplify this problem, we considered that the event board will be covered by exactly three posters only, and posters will not exceed the board.\n\n#### Input\n\nThe first line of input contains an integer T(0<=T<=10) the number of test cases.Each test case will contain four lines：\n+ 1) The first line contains two integers a and b, indicated the length and width of the board. \n+ 2) The next three lines contain the upper left corner (c,d) and the length (e) and width (f) of the poster. (0<=a,b,c,d,e,f<=3,000)\n\nPS:\npoint (0,0) is at the lower left corner of the board, and (a,b) is at the upper right corner of the board.\n\n#### Output\n\nOutput the cover rate of each test case in one line, the answer must have an absolute error less than 1e-4. \n\n#### Sample Input\n```\n2 \n10 10 \n0 10 5 5 \n0 5 5 5 \n2 8 5 5 \n10 10 \n8 8 1 1 \n7 8 2 2 \n0 1 1 1 \n```\n\n#### Sample Output\n```\n0.6000\n0.0500\n```\n',10000,65535,'0',6,23,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('625','Arithmetic Progression','#### Description\n\nYou are required to select 3 numbers from 1,2,...,n to become an arithmetic progression. The question is, how many arithmetic progressions can you find?\n\n#### Input\n\nThe input contains multiple test cases. Each test case contains one integer n, (1<=n<=10,000). The last test case will be 0, and the last test case should be ignored. \n\n#### Output\n\nFor each test case, please output the answer in one line. \n\n#### Sample Input\n```\n5\n20\n0\n```\n\n#### Sample Output\n```\n8 \n180\n```\n\n#### Hint\n```\nFor input n=5, all required arithmetic progressions are listed below. \n1 2 3, 3 2 1 \n1 3 5, 5 3 1\n2 3 4, 4 3 2\n3 4 5, 5 4 3 \nSo the answer of n=5 is 8. \n```\n',1000,32768,'0',6,24,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('626','Always Tetris','#### Description\n\nTetris accompanied us through our simple and happy childhood. Today, let us review the good old days and revisit the typical Tetris game. The game here is simpler and easier than the one which we know before, so don\'t be afraid, the problem below is definitely not hard. \nThe rules of the game are as following: \n+ 1. The game has only one kind of blocks (L-shaped) which can be changed to four \n	different rotation, , , and . The rotations are numbered as 0, 1, 2, 3. \n+ 2	In each turn, the L-shaped block will be changed to the next rotation in order, when it reaching the fourth rotation, it will go back to the first one, and so on. For example, the L-shaped block starts at rotation 2, after 3 changes it becomes the rotation 1. \n3	\n+ 3. A small hold a unit area of the screen. \n+ 4	If any part of the L-shaped blocked by any obstacles or the bottom of the screen while it is in the process to going down, it will remain in that position. \n+ 5	If any row is filled with the block after the L-shaped block stop, then the row should be eliminated, and with score increases. \n+ 6	The game will end if there are no more new L-shaped blocks to falling down, or any part of L-shaped block over of the screen after it stopped. \n\nScore increasing Rules are as follows: \n+ 1	If you eliminate one row of blocks in one time, you\'ll get 10 points. \n+ 2	If you eliminate two rows of blocks in one time, and you eliminate nothing or one row only by the last L-shaped block, you will get 20 points. \n+ 3	If you eliminate two rows of blocks in one time, and you eliminate 2+ (k-1) rows by last k-1 L-shaped block, you will get k+ 20 points. \n\nIf any other rules in the game occurred at the same time with score increasing rules, use the other rules first. \n\n#### Input\n\nThe first line of input contains an integer T (0<=T<=10), the number of test cases. \nFor every test case: \nThe first line contains two integer \'w\' and \'h\' (2<=w, h<=100). Integer \'w\' is the \nwidth of screen and \'h\' is the height of the screen. \nThe second line contains an integer \'k\', which means there are k L-shaped blocks. \nIn the following k lines, each line contains three integers \'n\', \'m\' and \'p\'. Integer \'n\' \nis the number of L-shaped block, \'m\' is the number of changes, \'p\' is the closest \ndistance between the L-shaped block and the left side of the screen when it stopped. \n\n#### Output\n\n#### Sample Input\n```\n4 \n6 5 \n6 \n0 2 0 \n3 1 4 \n0 4 2 \n1 3 0 \n1 1 3 \n1 2 4 \n6 5 \n6 \n4 1 4 \n1 3 2 \n3 2 0 \n4 2 0 \n3 3 2 \n2 0 4\n```\n\n#### Sample Output\n```\n10 \n20\n```\n',1000,32768,'0',6,25,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('627','Turtle and Rabbit','#### Description\n\nRabbit invites Turtle to participate in a running competition again. Surely, Turtle accepted. They will start at one end of the village and the destination will be another end. In the village, there are some crossing points, which are connected by road and river, and forest and buildings. It is silly and dangerous to go into the forest or unknown building. Therefore, they won’t to do so. Both Turtle and Rabbit can cross the road, and of course Rabbit can cross the road faster than Turtle. Turtle can swim so that he can cross the river, although he can’t swim very fast, but Rabbit do not even know how to swim. They both grow in the village hence they are familiar with every road there. And of course, both want to win. So, despite any accidents, who will win?\n\n第一次龟兔赛跑后，兔子不服，再次邀请乌龟进行比赛。乌龟欣然接受了兔子的挑战。它们将从村子的一头跑到村子的另一头。村子里面有许多由道路、河流、森林和建筑物连接形成的交叉路口。跑进森林或未知建筑里面是危险而愚蠢的行为，因此，兔子和乌龟都不会跑进去。兔子和乌龟都能在道路上跑，而且兔子跑步的速度显然比乌龟快。乌龟会游水因此尽管它游得不快，但它能游过河流，而兔子就根本不会游水了。它们都在村子里长大，对村里的道路非常熟悉，而且它们都非常想赢得比赛。那么，兔子这次不会在半路上睡着，也没有其它意外发生，这次比赛谁会胜出？\n\n#### Input\n\nThe input contains multiple test cases. \nFor each test case: The first line will have three integers \'n\', \'m1\', \'m2\' (0<=n<=200, 0<=m1,m2<=5,000). Integer \'n\' is the number of crossing points, which are numbered from 1 to n. Integer \'m1\' is the number of roads and \'m2\' is the number of rivers. \nIn the following \'m1\' lines, each of them contains three integers \'u\', \'v\', \'c\' which means the length of the road between crossing point \'u\' and \'v\' is \'c\'. \nIn the following \'m2\' lines, each of them contains three integers \'u\', \'v\', \'c\' which means the length of the river between crossing point \'u\' and \'v\' is \'c\'. \nIn the following line contains two integers \'s\' and \'t\', which represent the number of the starting crossing point and the destination crossing point. \nThen last line contains three integers \'vr\', \'vt1\' and \'vt2\', which represent the speed of Rabbit on the road, the speed of Turtle on the road and the speed of Turtle in the river. \nThe last test case will start with n=0, m1=0, m2=0, and this test case should be ignored. \nBetween any two crossing points, there will be only one road or one river if there is one. All the roads and the rivers are bidirectional.\n\n\n输入包含多个测试例子。\n\n对每个测试例子：第1行有3个整数n，m1和m2(0<=n<=200, 0<=m1,m2<=5,000)。n是交叉路口的数目，从1开始编号到n。m1和m2分别是道路和河流的数目。\n  接下来的m1行，每一行包含3个整数u、v和c，表示在交叉路口u和v间的道路长度是c。\n  再接下来的m2行，同样每行都包含3个整数u、v和c，表示在交叉路口u和v间的河流长度是c。（特别注意，c可以是0）\n  再接下来的一行是整数s和t，分别表示比赛开始和结束的路口编号。\n  最后一行是3个整数vr、vt1和vt2，分别表示兔子在道路上的奔跑速度，乌龟在道路上的爬行速度和乌龟在水里的游动速度。\n最后的结束标志由n=0，m1=0和m2=0表示，这个测试例子忽略，不予考虑。\n在任意两个交叉路口间，最多只有1条道路或1条河流，所有的道路和河流都是双向的。（特别注意，双向通行）\n\n#### Output\n\nFor each test case, output the answer in one line. If Rabbit will win, output \"rabbit win\". Otherwise, output \"turtle win\". For every test case, both of them can reach the destination.If they reach the destination at the same time,just output \"turtle win\".\n\n对每个测试用例输出一行答案。如果兔子将赢得比赛，输出\"rabbit win\"，否则，输出\"turtle win\"。对每个测试用例，兔子和乌龟都能到达终点。如果它们同时到达终点，输出\"turtle win\"。\n\n#### Sample Input\n```\n4 3 2 \n1 2 100\n2 4 300 \n1 3 200 \n3 4 50 \n1 4 150 \n1 4 \n4 2 1 \n4 3 2 \n1 2 100\n2 4 300 \n1 3 200 \n3 4 50 \n1 4 150 \n1 4 \n4 2 2 \n0 0 0\n```\n\n#### Sample Output\n```\nrabbit win\nturtle win\n```\n',1000,32768,'0',6,26,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('628','Binary System','#### Description\n\nYou are given a very very big decimal integer. Then you are asked to tell the number of \'1\' when this big number is in the binary form. For example, you can rewrite a decimal number 11 into the binary form as 1011. So the number of \'1\' will be 3. \n\n== Input == \nThe input contains multiple test cases. For each test case, there is a positive integer N in decimal system. (N<=10^100). The last test case will be N=0, which should be ignored. \n\n== Output == \nFor each test case, you should print the number of \'1\' in one line.\n\n#### Sample Input\n```\n5 \n9 \n11 \n15 \n0\n```\n\n#### Sample Output\n```\n2 \n2 \n3 \n4\n```',1000,32768,'0',6,27,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('629','Sorting the candies','#### Description\n\nSnoopy has soooooooo many candies, and he wants to sort them in piles. Snoopy has n candies, which numbered from 1 to n. For the beginning, there are n piles and every pile contains one candy only. Then, Snoopy will do the following different operations: \n+ 1) \'A a b\', This operation means to find the piles where candy \'a\' and candy \'b\' are located and union them into one pile. \n+ 2) \'B a b\', This operation means to move candy \'a\' out of the pile which it used to belong to and put it into the pile where candy \'b\' lies. \n\n(You should know that \'a\' and \'b\' may be the same, so \'a\' will be a new pile)\n+ 3) \'C m a1 a2 a3…am\', This operation means to pick out candy \'a1\', \'a2\', ... , \'am\' and let them become a new pile. (m<=20) \n+ 4) \'D a b\', This operation means to check if candy \'a\' and candy \'b\' are in the same pile now, and output the result. \n+ 5) \'E a\', This operation means to check the size of the pile, which candy \'a\' belongs to, and output the result.\n\n#### Input\n\nThe input contains multiple test cases. \nFor each test case: The first line contains two integers \'n\' and \'m\' (n<=10,000 m<=100,000). Integer \'n\' is the number of candies and \'m\' is the number of operations. \nIn the following \'m\' lines, each line contains one operation. \nThe number of operation C will be less than 100 times. \nThe last test case will be n=0 and m=0, which should be ignored.\n\n#### Output\n\nFor each operation D, output \'YES\' when candy \'a\' and candy \'b\' are in the same pile. If not, output \'NO\'. For each operation E, output an integer which means the number of candies in the pile, which candy \'a\' belong to. \n\n#### Sample Input\n```\n4 8 \nA 1 2 \nA 2 3 \nD 2 3 \nE 4 \nB 2 4 \nE 4 \nC 2 2 3 \nE 4 \n0 0 \n```\n\n#### Sample Output\n```\nYES \n1 \n2 \n1\n```\n',1000,32768,'0',6,28,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('63','Please Help Posidone Again','#### Background\n[[Image:A62.jpg|thumb|Posidone]]\nPosidone is in trouble again, just be a good man. Please help him.\n\n#### Description\nOne day a child asked Posidone a problem about sum up integer numbers. Today that child show up in front of Posidone again, of course that means question for Posidone again. Given an array of positive and negative integers, find the sub-array with the largest sum. The sum of a sub-array is the sum of all the elements in that sub-array. In this problem the sub-array with the largest sum is referred to as the maximal sub-array. As an example, the maximal sub-array of the array: (1,2,3,0,-5,6,7,-9,10,20) is (1,2,3,0,-5,6,7,-9,10,20).\n\nTo simplify the problem, you need not output the maximal sub-array but the sum of it. That means the answer if the example will be 35.\n\n#### Input\nThe input will contain multiple test cases. The first line of the input is a single integer $$$T (1 \\leq T \\leq 100)$$$ which is the number of test cases. T test cases follow.\n\nEach test case contain in a single line and start with an integer number $$$N (1 \\leq N \\leq 10,000)$$$, then N integer numbers followed. You can assume that answer will fit in a 32-bit integer.\n\n#### Output\nFor each input test case, print an integer number in a single line.\n\n#### Sample Input\n```\n2\n10 1 2 3 0 -5 6 7 -9 10 20\n3 1 2 3\n```\n\n#### Sample Output\n```\n35\n6\n```\n',10000,32768,'0',0,62,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('630','Collecting the stars','#### Description\n\nAccording to the reliable news, there is going to be a meteor shower tomorrow night. Therefore, a lot of falling stars will fall to the Dream Castle. There are numbers of small castles in the Dream Castle. Stars will fall on the roof of those small castles. The shapes of those roofs are circular or rectangular. \n\nAli is a fan of astronomy, he feels very exciting about the news. Because he can go to the Dream Castle to collect the stars. Every small castle needs a ticket separately. Ali can afford one ticket for the small castles only. Luckily, Ali has a very advanced equipment which can predict the landing points of every star precisely. \n\nWith your help, Ali wants to know which small castle will have most stars landed on. The test data promise that the stars won`t fall on the boundary of the small castle. \n\n#### Input\n\nThe input contains multiple test cases. \n\nFor each test case:\n+  The first line contains two integers \'n\' and \'m\'. Integer \'n\' represents the number of the stars will fall. And \'m\' is the number of the small castles. \n+  In the following \'n\' lines, each line contains two integers \'x\' and \'y\', which represents the land location of a star. \n+  In the following \'m\' lines, each line contains the description of one small castle. \n  -  First, it will be a string of \"circular\" or \"rectangular\", represent the shape of the small castle. \n  - * If it is circular, then followed by the location of the centre and the radius will be given. \n  - * If it is rectangular, then followed by the location of the top left corner and the right down corner, and the borders of the rectangle will be parallel to the coordinate axis. \nAll the input are integers. \n\nThe last test case will be n=0 and m=0, which should be ignored. \n\n#### Output\n\nFor each test case, you should print the number of stars that Ali can collect in one line. \n\n#### Sample Input\n```\n3 2\n3 3 \n6 6\n7 7 \ncircular 2 3 2 \nrectangular 5 8 8 5 \n4 2 \n2 2\n2 6 \n6 2 \n6 6 \nrectangular 1 7 3 1 \nrectangular 5 7 7 1 \n0 0\n```\n\n#### Sample Output\n```\n2\n2\n```\n',1000,32768,'0',6,29,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('631','Diving','#### Description\nI’m sure all of you have had the experience of watching a diving competition. And you may get to know the judging rule of a diving competition.\nAn athlete should choice a series of actions, every series of actions has a degree of difficulty.\n\nThere are seven judgers. Instead of get the average of the score from every judger,\nthe athlete can get a score after you take away the highest and the lowest score and get the average of the rest five scores. The final score should be the product of the average score and the degree of difficulty.\n\nHere’s an example. If an athlete choice a series of actions which has the degree of difficulty of 2.0 . And the judges give him score as (5.5 , 4.5 , 5.0 , 5.0 , 6.0 , 5.5 ,5.5 )\nThen the final score he can get is (5.5+5.0+5.0+5.5+5.5)/5×2.0=10.6 .\nWe will give you the degree of difficulty and the scores from seven judges. Now we hope you can figure out the final score this athlete can get.\n\n#### Input\nThe first line is T ,means there are T test cases followed.\nThe next t line represent each time of a diving.\nEach line contains eight none negative real number, representing the difficulty modulus and the scores from seven judges.\n#### Output\nThe first line is an integer T(T<=100) ,means there are T test cases followed.\nThe next T line represent each time of a diving.\nEach line contains eight none negative real numbers which is not larger than 10.0, representing the degree of difficulty and the scores from seven judges.\n#### Sample Input\n```\n2\n2.0 5.5 4.5 5.0 5.0 6.0 5.5 5.5\n1.5 6.0 7.0 7.5 6.5 6.5 7.0 7.0\n```\n\n#### Sample Output\n```\n10.6\n10.2\n```\n',2000,32768,'0',6,30,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('632','Medicine','#### Description\nDoes it arouse you some painful memory when you see this topic? Don’t worry，Because we won’t let you take medicine today.\n \nAs we all know, we get sick sometimes just because our bodies lack of some elements. As long as we supply these elements, the disease will disappear. \nNow we suppose there are three important elements. A doctor can diagnose how many elements a patient should take. He will also tell you how many quantities of each medicine there are in the storeroom.\n\nTherefore, your task is to calculate the minimal quantity pills of medicine a patient should take if he wants to recover. Because the medicine have side effect, every kind of medicine can only take one pill.\n\n#### Input\nThe first line contains an integer n(n<=100), which represents there are n kind of medicine in the storeroom.\n\nThe next line contains three integers in order they mean the minimal quantities of the three important elements a patient should take. The quantities will not larger than 20.\n\nThe next following n lines contain three integers each, which represent each element’s supply in this kind of medicine.\n\n#### Output\nFor each test case you should output an integer in a line, which means the minimal number of pills the patient should take. \n\nIf the medicine in the storeroom cannot let the patient get recover, output -1.\n#### Sample Input\n```\n3\n2 3 5\n1 2 3\n2 1 2\n3 1 6\n2\n1 2 3\n1 2 2\n2 1 0\n0\n```\n\n#### Sample Output\n```\n2\n-1\n```\n\n#### Hint\nFor the first sample ,the patient lake of 2 quantities of the first important elements,3 and 5 quantities of the second and the third elements. \nIf the patient takes the first two kinds of medicine, he can supply 2, 3 and 5 quantities of the elements. So he can get recover.\n',10000,32768,'0',6,31,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('633','Mass fraction','#### Description\nThe chemists are well known because of their weird. \nEspecially when they add water or salt in the same beaker over and over again.\nMoreover, the still hope you can tell him the mass fraction of the liquor after many operations. In case of your forgetting your junior school chemistry class, now we particularly give you the formula of the mass fraction.\n\nw=a/(a+b)×100% here w means the mass fraction, a means the mass of the salt, and b means the mass of water.\n\n#### Input\nThe first line contains two integers, representing the mass of water and salt initially.\nThan each line will represent a operation.\nThe operation contains:\n+ 1. To add some salt into the beaker, the code is \"salt x\". x is a float number meaning the measure of salt The chemists add\n+ 2. To add some water into the beaker, the code is \"water x\". x is a float number meaning the measure of water The chemists add\n+ 3. Showing the mass fraction currently and the code is \"show\".\n+ 4. Exit the test. The code is \"exit\". \nThe number will not be larger than 1e9.\n\n#### Output\n\nOutput should be according to the operation.\nPrint the mass fraction of the liquor.\nAll the answer has an absolute error within 1e-4, will be consider as correct answer. \n\n#### Sample Input\n```\n1.5 0.5\nsalt 0.5\nwater 1.5\nshow\nexit\n```\n\n#### Sample Output\n```\n0.25\n```\n',5000,32768,'0',6,32,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('634','Conductor','#### Description\nThe conductor on the bus works more than selling tickets. One of his work is to mark the number of people getting on and off at every station.\n\nEach station is marked by two integers, the first means the number of people getting off, and the next means getting on.\n\nFor example, if a line contains 5 bus stations (0, 5) (2, 1) (3, 2) (2, 3) (4, 0). \nAs you can see, there are 3 people get off and 2 get on at station 3. Sometime the conductor may make mistake.\n\nSuch as you will find there are less than 0 people on the bus, or the bus has already passed the final station, but there are still some people on the bus.\nAs the chief of conductor, you can’t stand such silly mistakes.\n\n#### Input\nIt will be multiple test cases.\nFor each test case, there is an integer n(n<=100), means the total number of bus station.\nThe next n line, there are two integers in each line, means the number of people getting on and off at the station. The last test case start with n==0.\n\n#### Output\nFor each test case, output one line. If the data is correct, output \"YES\", else output \"NO\". (The only mistakes you should concern are those two kinds of mistake written above.)\n#### Sample Input\n```\n5\n0 5\n2 1\n3 2\n2 3\n4 0\n3\n0 2\n4 3\n1 0\n0\n```\n\n#### Sample Output\n```\nYES\nNO\n```',5000,32768,'0',6,33,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('635','Love code','#### Description\nA boy and a girl both like studying code in their extra-curricular. Of course, they like each other. Therefore, the boy shows his love to the girl one day. The girl smiles and leaves a series of Morse code. After 5 times of decoding, the boy will get the answer. The boy makes his best efforts but 5 times of decoding is almost impossible. He has no choice but to ask for help on the Internet. He posts his troublesome on baidu tieba. Everyone is eager to help him. And after 6 hours, miracle happens. The boy get his answer. Beside deeply moved, the author also hope you can show him this romantic again. We will tell you the 5 times of encryption and the decoded words. We want you to tell us the original code.\nWe suppose the original code is:\n```\n/****-/*----/----*/****-/****-/*----/---**/*----/****-/*----/-****/***--/****-/*----/----*/**---/-****/**---/**---/***--/--***/****-/\n```\n1.	Using Morse code, we can transform the original code into number. Every \'/\' separates a number.\n\nWe will get a number list.\n```\n41 94 41 81 41 63 41 92 62 23 74\n```\n2.	B. Using these numbers, in the keyboard of cell phone, we will decorate 26 letters on the key 2-9 so that we can use two numbers to get one letter. Such as 63 means the number 6 key, the 3th letter. It’s ‘O’.\n\nThe number list became a letter string \n```\nG Z G T G O G X N C S\n```\n3.	Continue to our transformation, we use our computer keyboards this time. Our familiar keyboard often arranges letters in the order of \"QWERTY...”. So we suppose \'Q\' to \'A\',\'W\' to \'B\' ..\'G\' to \'O\'..at last \'M\' to \'Z\'.\n\nThe new code is \n```\nO T O E O I O U Y V L\n```\n4.	We will soon get the answer after the last two steps. Are you eager to know it? This time is barrier transforming. We cut the original code into the former part and the after part. If the length of the code is odd, the former part is allowed to have one more letter than the after part.\nThen, put every letters of the after part into every interval of the former part. \nAfter cutting the code, we get \"O T O E O I \"，\"O U Y V L\". \nThen after putting them alternately, we get \n```\nO O T U O Y E V O L I.\n```\n5.	Clever as you, have you get the answer? If we output the strings in reverse order, we can see the simple and pure romance.\n```\nILOVEYOUTOO (I Love You Too!)\n```\n\n#### Input\nThe first line is an integer t ,means the number of test cases.\nThe next t lines, each has a string as the test data.\n#### Output\nOutput the original code. (the answer won’t be longer than 30 character.)\n#### Sample Input\n```\n1\n/****-/*----/----*/****-/****-/*----/---**/*----/****-/*----/-****/***--/****-/*----/----*/**---/-****/**---/**---/***--/--***/****-/\n```\n\n#### Sample Output\n```\nILOVEYOUTOO\n```\n\n#### Hint\n```\nMorse code table (number part)\n0 -----  5 *****\n1 *----  6 -****\n2 **---  7 --***\n3 ***--  8 ---**\n4 ****-  9 ----*\n\ncell phone keyboard character table\n2.abc    3.def\n4.ghi    5.jkl\n6.mno    7.pqrs\n8.tuv    9.wxyz\n\ncomputer keyboard order table\n\"QWERTYUIOPASDFGHJKLZXCVBNM\"\n```\n',10000,32768,'0',6,34,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('636','Grouping','#### Description\nHistory is a mirror. We can see the pass, so we can see the future.\n\nTherefore, S University holds history knowledge competition every year.\n\nThere are preliminary round and final round.\nThe preliminary round is written test, every competitor take it and get their preliminary score.\nThe final round is a teamwork contest, two people make a team and finish the contest together. When the total of two student’s preliminary score is higher than required score, they are qualified to the final round.\n\nRed bean is the monitor of his class. He knows all the score of his class, and the least score required to the final. He wants your help to make legal final team as many as he can.\n#### Input\nIt will be multiple test cases.\n\nThe first line of each test case includes two integer n(n<=10000) m(m<=500). n is the number of student in red bean’s class, m is the least score to enter the final round. \n\nThe next line contain n numbers which is not large than 300, represent the preliminary score of each students. \nWhen n==0 and m==0, it ends and shouldn’t be solves.\n\n#### Output\nFor each test case, output an integer, means the maximum of teams from Red bean‘s class.\n#### Sample Input\n```\n5 10\n5 6 8 3 4\n6 15\n8 8 6 6 5\n0 0\n```\n\n#### Sample Output\n```\n2\n1\n```\n\n',10000,32768,'0',6,35,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('637','Maze','#### Description\nA Li has fallen into a maze again.\nBut this time, he has a map and ride on a machine dog.\nThis maze is a standard 2-D matrix as shown bellow. \n```\n1. E1. 1. 1. 1. 1. \n1. ..1. .S1. \n1. ..1. .1. 1. \n1. .1. ...1. \n1. .1. .1. 1. 1. \n1. .....1. \n1. 1. 1. 1. 1. 1. 1. \n```\nIt means a 7*7 maze. S means the location of A Li. E means the exit.\n‘#’ means the walls which A Li cannot walk through, ‘.’ means the plan where A Li can walk.\nThe machine dog can walk 1, 2 or 3 steps forward if there is no wall in front. A Li will begin at the place which is marked ‘S’, and the exit is marked ‘E’\nDifferent step takes different time. But take 3 steps at one time cost less time than take 1 step at each time.\nThe machine dog is very clumsy so he needs time to take turns, however it won’t take long. \nIt can only turn 90 degree for one time.\nMaze is not so pleasant after all. So A Li want to get out of the maze.\nBecause of his weak sense of road, A Li ask you for help.\n\n#### Input\nIt will be multiple test cases.\nFor each test case there are two integers (n<=20) and (m<=20), means the line and roll of the maze.\nThe next line contains 4 integers, means the time when the dog need to take 1step, 2 steps, and 3 steps and take turns.\nThe following n lines contain m character each. \nSo there’s a matrix as is stated.\nEnd when n==0 and m==0. \n#### Output\nFor each test case you should output an integer in a line, which means the minimal time A Li can get out of the maze .output \"-1\" if it is impassable to do so.\n#### Sample Input\n```\n7 7\n2 4 5 1\n1. E1. 1. 1. 1. 1. \n1. ..1. .S1. \n1. ..1. .1. 1. \n1. .1. ...1. \n1. .1. .1. 1. 1. \n1. .....1. \n1. 1. 1. 1. 1. 1. 1. \n0 0\n```\n\n#### Sample Output\n```\n30\n```\n\n\n',10000,65536,'0',6,36,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('638','Mahjong','#### Description\nThe problem is about a simply Mahjong game.\nWe use a single integer (1 to 9) to represent a tile (Character 1 to 9) in this problem.\nIn this simplified problem, consider below two melds only(refer to Mahjong - Wikipedia for complete description):\nA Pong, or Pung, is a set of three identical tiles.\nFor example: 9 9 9; 7 7 7;\nA Chow is a meld of three suited tiles in sequence.\nFor example: 1 2 3; 3 4 5; 7 8 9; 5 6 7; \n\nAn Eye is the pair, while not a meld (and thus cannot be declared or formed with a discard, except if completing the pair completes the hand), is the final component to the standard hand. It consists of any two identical tiles.\nFor example: 1 1; 7 7; \n\nA player wins by creating a standard mahjong hand, which consists of a certain number of melds (four for 14-tile version) and a single Eye.\nYou will get 14 tiles. And you task is to judge if you can win the game at once.\n\n#### Input\nThe first line is an integer T(T<=100), means the number of test cases.\nThe next T lines, each has 14 integers as the test data.\nEach number represents a tile.\n#### Output\nEach test has one line output.\nPrint \"YES\" if you can win at once\nor print \"NO\".\n\n#### Sample Input\n```\n1\n1 1 2 2 2 3 4 5 6 6 6 9 9 9\n```\n\n#### Sample Output\n```\nYES\n```\n\n\n',10000,65536,'0',6,37,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('639','Alice and Bob','#### Description\nThis is a puzzle game to be played by two persons, Alice and Bob. Alice draws an n-vertex convex polygon and numbers its vertices with integers 1,2,...,n in an arbitrary way. Then she draws a number of non-crossing diagonals (the vertices of the polygon are not considered to be crossing points). She keeps the drawing secret and tells Bob the polygon\'s sides and diagonals, without revealing which are which. Each side or diagonal is specified by its endpoints. Bob has to guess the order of the vertices on the border of the polygon. Help him solve the puzzle.\n\n#### Example\n\nIf n=4 and (1,3), (4,2), (1,2), (4,1), (2,3) are the endpoints of the four sides and one diagonal then the ordering of the vertices on the border of the polygon is 1, 3, 2, 4 (up-to shifting and reversing).\n\nWrite a program that reads the description of sides and diagonals given to Bob by Alice, computes the order of vertices on the border of the polygon and writes the result.\n\n#### Input\nThe input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs.\nThe first two lines of the input contain two integers n and m, such that 4 ≤ n ≤ 10 000 and 0 ≤ m ≤ n-3. Integer n is the number of vertices of the polygon and integer m is the number of its diagonals, respectively.\n\nThe third line contains exactly 2(m+n) integers separated by single spaces, specifying all sides and some diagonals of the polygon. Integers on positions 2j-1 and 2j, 1 ≤ j ≤ m+n, specify the two endpoints of a side or a diagonal. The sides and the diagonals can be given in an arbitrary order. There are no duplicates.\n\n#### Output\nFor each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line.\nThe output should consist of a single line containing a permutation of 1,2,..., n separated by spaces. This sequence corresponds to the numbers of vertices on the border of the polygon; the sequence should always start with vertex number 1 and its second element should be the smaller vertex of the two neighbor vertices of vertex 1.\n\n#### Sample Input\n```\n1\n\n4\n1\n1 3 4 2 1 2 4 1 2 3\n```\n\n#### Sample Output\n```\n1 3 2 4\n```\n',10000,32678,'0',6,38,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('64','Magic Square','#### Description\nA Magic square consists of $$$3 \\times 3$$$ smaller squares, each containing a positive integer less than or equal to 20,000. It has a property that the sums of the numbers in each row, column and both diagonals are all equal. There is a beautiful magic square, but a few (at most 3) numbers lost.\n\nWrite a program for a given magic square with some missing numbers, determine the numbers missing.\n\n#### Input\nThe input will contains multiple test cases. The first line of the input is a single integer $$$T (1 \\leq T \\leq 100)$$$ which is the number of test cases. T test cases follow.\n\nEach test case contains three lines, each of the three lines contains three numbers. Squares with missing numbers are denoted with number 0.\n\n#### Output\nFor each input test case, you are to output three lines which contain the correctly filled magic square.\n\nThere should be a single blank line between two test cases. No blank line at the end of the last test case.\n\n#### Sample Input\n```\n2\n\n4 9 2\n3 0 7\n8 1 6\n\n0 12 12\n16 10 0\n8 8 14\n```\n\n#### Sample Output\n```\n4 9 2\n3 5 7\n8 1 6\n\n6 12 12\n16 10 4\n8 8 14\n```\n',10000,32768,'0',0,63,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('640','Binary Stirling Numbers','#### Description\nThe Stirling number of the second kind S(n, m) stands for the number of ways to partition a set of n things into m nonempty subsets. For example, there are seven ways to split a four-element set into two parts:\n\n{1, 2, 3} U {4}, {1, 2, 4} U {3}, {1, 3, 4} U {2}, {2, 3, 4} U {1}\n{1, 2} U {3, 4}, {1, 3} U {2, 4}, {1, 4} U {2, 3}.\nThere is a recurrence which allows to compute S(n, m) for all m and n.\n\nS(0, 0) = 1; S(n, 0) = 0 for n > 0; S(0, m) = 0 for m > 0;\nS(n, m) = m S(n - 1, m) + S(n - 1, m - 1), for n, m > 0.\nYour task is much \"easier\". Given integers n and m satisfying 1 <= m <= n, compute the parity of S(n, m), i.e. S(n, m) mod 2.\n\n#### Example\n\nS(4, 2) mod 2 = 1.\n\n#### Task\n\nWrite a program which for each data set:\n\n+ reads two positive integers n and m,\n+ computes S(n, m) mod 2,\n+ writes the result.\n\n#### Input\nThe first line of the input contains exactly one positive integer d equal to the number of data sets, 1 ≤ d ≤ 200. The data sets follow.\n\nLine i + 1 contains the i-th data set - exactly two integers ni and mi separated by a single space, 1 ≤ mi ≤ ni ≤ 10^9.\n\n#### Output\nThe output should consist of exactly d lines, one line for each data set. Line i, 1 ≤ i ≤ d, should contain 0 or 1, the value of S(ni, mi) mod 2.\n\n#### Sample Input\n```\n1\n4 2\n```\n\n#### Sample Output\n```\n1\n```\n',10000,32678,'0',6,39,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('641','Calendar of Maya','#### Description\nThe classical Maya civilization prospered in what today is southern Mexico, Guatemala, Belize and northern Honduras. During the height of the Maya civilization they developed a sophisticated system for time keeping used both to record history and for divinatory rituals. Their calendar consisted of three components: the Tzolkin, the Haab and the Long Count.\n\nFor divinatory purposes the Maya used the Tzolkin which was composed of 20 day names to which a numeric coefficient from 1 to 13 was attached, giving a total of 260 distinct combinations. This is the size of the Tzolkin, or ritual year. From Spanish colonial sources, we know the names of the days:\n\n+ Day names: IMIX, IK, AKBAL, KAN, CHIKCHAN, KIMI, MANIK, LAMAT, MULUK, OK, CHUEN, EB, BEN, IX, MEN, KIB, KABAN, ETZNAB, KAWAK, AJAW\nFor example, the sequence of days starting at 9.IMIX is: 9.IMIX / 10.IK / 11.AKBAL / 12.KAN / 13.CHIKCHAN / 1.KIMI / 2.MANIK /...\n\nThe Haab calendar was used for astronomy. It had 365 days divided into 19 months each with 20 days, except the last one which had only 5. In a manner similar to the Tzolkin each month name has a number from 1 to 20 indicating the day number within the month. Again, from Spanish colonial sources, we know the names of the months:\n\n+ Month names: POHP, WO, SIP, ZOTZ, SEK, XUL, YAXKIN, MOL, CHEN, YAX, SAK, KEH, MAK, KANKIN, MUAN, PAX, KAYAB, KUMKU, WAYEB\nThe month WAYEB had just 5 days and was considered an unlucky time of the year.\n\nThe Tzolkin and Haab were combined in the inscriptions to create the so called Calendar Round, combining the 260 day cycle of the Tzolkin and the 365 day cycle of the Haab. A typical Calendar Round date in the inscriptions might be: ``3.LAMAT 6.PAX\'\'. Note that not all of the combination of days, months and coefficients are possible. How many days does it take to repeat a Calendar Round?\n\nA typical sequence of days in the Calendar Round starting for example at ``3.LAMAT 6.PAX\'\':\n\n+ 3.LAMAT 6.PAX / 4.MULUK 7.PAX / 5.OK 8.PAX / 6.CHUEN 9.PAX / 7.EB 10.PAX / 8.BEN 11.PAX / 9.IX 12.PAX / 10.MEN 13.PAX / 11.KIB 14.PAX / 12.KABAN 15.PAX / 13.ETZNAB 16.PAX / 1.KAWAK 17.PAX / 2.AJAW 18.PAX / 3.IMIX 19.PAX / 4.IK 20.PAX / 5.AKBAL 1.KAYAB / 6.KAN 2.KAYAB / ...\n\nFinally, at the beginning of the Classic Period (AD 200-900) the Maya developed an absolute calendar called Long Count which counted the number of days starting from a fixed date. Currently, most researchers agree that this zero date was August 13, 3114 BC. According to Maya belief this was the date of creation of our world. Dates in the Long Count are written (for simplicity) in 5-tuples of the form: ``9.2.3.4.5\'\'. Such a date reads ``9 baktuns 2 katuns 3 tuns 4 winals 5 kin since the zero date\'\'. A ``kin\'\' is just one day. A ``winal\'\' is a group of 20 days. A ``tun\'\' is a group of 18 winals (thus a tun has 20× 18 = 360 days, 5 days short of a year). From here on all units come in multiples of 20. Thus a ``katun\'\' is 20 tuns (almost 20 years) and a ``baktun\'\' is 20 katuns (almost 400 years). Thus the date ``9.2.3.4.5\'\' means `` 9× 144000 + 2× 7200 + 3× 360 + 4× 20 + 5 days after the zero date\'\'.\n\nGiven the periodicity of the Calendar Round, a legal date such as ``3.LAMAT 6.PAX\'\' has multiple occurrences in the Long Count. Thus, one difficulty in reading Maya inscriptions is establishing the correspondence between a date given only in the Calendar Round and the absolute date in the Long Count. In this case, we must compute all the possible Long Count dates associated with the particular Calendar Round and deduce which one applies based on context information (for example, using references to a king whose lifespan is known).\n\nWrite a program that computes all possible Long Count dates corresponding to a given Calendar Round date. Only the Long Count dates in the Baktuns 8 and 9 are of interest to us (they cover all the Classic Period).\n\nAs a starting point, you are given the information that the Long Count date 8.0.0.0.0 occurred on the Calendar Round ``9.AJAW 3.SIP\'\'.\n\n#### Input\nThe first line of the input contains exactly one positive integer d equal to the number of data sets, 1 <= d <= 30. The data sets follow.\n\nEach data set consists of exactly one line that contains exactly one Calendar Round date (maybe illegal): Tzolkin day number, Tzolkin day name, Haab day number and Haab month name separated by single spaces.\n\n#### Output\nFor every data set your program must output an ascending sequence of Long Count dates computed for a given Calendar Round date.\n\nThe first line of the output for the given input set should contain exactly one integer n equal to the length of the sequence (0, if the input date is illegal).\n\nEach of the next n lines should contain exactly one Long Count date specified by exactly 5 integers (meaning the numbers of baktuns, katuns, tuns, winals and kins respectively) separated by single dots.\n\n#### Sample Input\n```\n2\n3 Lamat 6 Pax\n1 Ajaw 9 Chen\n```\n\n#### Sample Output\n```\n15 \n8.0.17.17.8\n8.3.10.12.8\n8.6.3.7.8\n8.8.16.2.8\n8.11.8.15.8\n8.14.1.10.8\n8.16.14.5.8\n8.19.7.0.8\n9.1.19.13.8\n9.4.12.8.8\n9.7.5.3.8\n9.9.17.16.8\n9.12.10.11.8\n9.15.3.6.8\n9.17.16.1.8\n0\n```\n',10000,32678,'0',6,40,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('642','Decoding Morse sequences','#### Description\nBefore the digital age, the most common \"binary\" code for radio communication was the Morse code. In Morse code, symbols are encoded as sequences of short and long pulses (called dots and dashes respectively). The following table reproduces the Morse code for the alphabet, where dots and dashes are represented as ASCII characters \".\" and \"-\":\n```\nA .-   B -... C -.-. D -.. \nE .    F ..-. G --.  H .... \nI ..   J .--- K -.-  L .-.. \nM --   N -.   O ---  P .--. \nQ --.- R .-.  S ...  T - \nU ..-  V ...- W .--  X -..- \nY -.-- Z --..\n```\nNotice that in the absence of pauses between letters there might be multiple interpretations of a Morse sequence. For example, the sequence -.-..-- could be decoded both as CAT or NXT (among others). A human Morse operator would use other context information (such as a language dictionary) to decide the appropriate decoding. But even provided with such dictionary one can obtain multiple phrases from a single Morse sequence.\n\n#### Task\n\nWrite a program that:\n\n+ reads a Morse sequence and a list of words (a dictionary),\n+ computes the number of distinct phrases that can be obtained from the given Morse sequence using words from the dictionary,\n+ writes the result.\n\nNotice that we are interested in full matches, i.e. the complete Morse sequence must be matched to words in the dictionary.\n#### Input\nThe first line of the input contains exactly one positive integer d equal to the number of data sets, 1 <= d <= 20. The data sets follow.\n\nThe first line of each data set contains a Morse sequence - a nonempty sequence of at most 10000 characters \".\" and \"-\" with no spaces in between.\n\nThe second line contains exactly one integer n, 1 <= n <= 10000, equal to the number of words in a dictionary. Each of the following n lines contains one dictionary word - a nonempty sequence of at most 20 capital letters from \"A\" to \"Z\". No word occurs in the dictionary more than once.\n\n#### Output\nThe output should consist of exactly d lines, one line for each data set. Line i should contain one integer equal to the number of distinct phrases into which the Morse sequence from the i-th data set can be parsed. You may assume that this number is at most 2*109 for every single data set.\n\n#### Sample Input\n```\n1 \n.---.--.-.-.-.---...-.---. \n6 \nAT \nTACK \nTICK \nATTACK \nDAWN \nDUSK\n```\n\n#### Sample Output\n```\n2\n```\n',10000,32678,'0',6,41,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('643','Exchanges','#### Description\nGiven n integer registers r1, r2, ... , rn we define a Compare-Exchange Instruction CE(a,b), where a, b are register indices (1 <= a < b <= n):\n\n```\nCE(a, b):: \n  if content(ra) >  content(rb) then \n     exchange the contents of registers ra and rb; \n```\n\nA Compare-Exchange program (shortly CE-program) is any finite sequence of Compare-Exchange instructions. A CE-program is called a Minimum-Finding program if after its execution the register r1 always contains the smallest value among all values in the registers. Such a program is called reliable if it remains a Minimum-Finding program after removing any single Compare-Exchange instruction. Given a CE-program P, what is the smallest number of instructions that should be added at the end of program P in order to get a reliable Minimum-Finding program?\n\nFor instance, consider the following CE-program for 3 registers: CE(1, 2), CE(2, 3), CE(1, 2). In order to make this program a reliable Minimum-Finding program it is sufficient to add only two instructions: CE(1, 3) and CE(1, 2).\n\n#### Task\n\nWrite a program that:\n\n+ reads the description of a CE-program,\n+ computes the smallest number of CE-instructions that should be added to make this program a reliable Minimum-Finding program,\n+ writes the result.\n\n#### Input\nThe first line of the input contains exactly one positive integer d equal to the number of data sets, 1 <= d <= 10. The data sets follow.\n\nEach data set consists of exactly two consecutive lines. The first of those lines contains exactly two integers n and m separated by a single space, 2 <= n <= 10000, 0 <= m <= 25000. Integer n is the number of registers and integer m is the number of program instructions.\n\nThe second of those lines contains exactly 2m integers separated by single spaces - the program itself. Integers aj, bj on positions 2j-1 and 2j, 1 <= j < = m, 1 < = aj < bj <= n, are parameters of the j-th instruction in the program.\n\n#### Output\nThe output should consist of exactly d lines, one line for each data set. Line i, 1 <= i <= d, should contain only one integer - the smallest number of instructions that should be added at the end of the i-th input program in order to make this program a reliable Minimum-Finding program.\n\n#### Sample Input\n```\n1 \n3 3 \n1 2 2 3 1 2\n```\n\n#### Sample Output\n```\n2\n```\n',10000,32678,'0',6,42,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('644','Fill the cisterns!','#### Description\nDuring the next century certain regions on earth will experience severe water shortages. The old town of Uqbar has already started to prepare itself for the worst. Recently they created a network of pipes connecting the cisterns that distribute water in each neighbourhood, making it easier to fill them at once from a single source of water. But in case of water shortage the cisterns above a certain level will be empty since the water will flow to the cisterns below.\n\n[[File:G43.png]]\n\nYou have been asked to write a program to compute the level to which cisterns will be filled with a certain volume of water, given the dimensions and position of each cistern. To simplify we will neglect the volume of water in the pipes.\n\n#### Task\n\nWrite a program that:\n\n+ reads the description of cisterns and the volume of water,\n+ computes the level to which the cisterns will be filled with the given amount of water,\n+ writes the result.\n\n#### Input\nThe first line of the input contains the number of data sets k, 1 <= k <= 30. The data sets follow.\n\nThe first line of each data set contains one integer n, the number of cisterns, 1 <= n <= 50000. Each of the following n lines consists of 4 nonnegative integers, separated by single spaces: b, h, w, d - the base level of the cistern, its height, width and depth in meters, respectively. The integers satisfy 0 <= b <= 106 and 1 <= h*w*d <= 40000. The last line of the data set contains an integer V - the volume of water in cubic meters to be injected into the network. Integer V satisfies 1 <= V <= 2*109.\n\n#### Output\nhe output should consist of exactly d lines, one line for each data set. Line i, 1 <= i <= d, should contain the level that the water will reach, in meters, rounded up to two fractional digits, or the word \'OVERFLOW\'.\n\n#### Sample Input\n```\n3 \n2 \n0 1 1 1 \n2 1 1 1 \n1 \n4 \n11 7 5 1 \n15 6 2 2 \n5 8 5 1 \n19 4 8 1 \n132 \n4 \n11 7 5 1 \n15 6 2 2 \n5 8 5 1 \n19 4 8 1 \n78 \n```\n\n#### Sample Output\n```\n1.00 \nOVERFLOW \n17.00 \n```\n\n',10000,32678,'0',6,43,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('645','Apocalyptic Alignment','#### Description\nApples and bananas are tasty, but also dangerous. An ancient prophecy said that when you align them in a certain order, the world will be destroyed! On a cloudy day, being tired of this world, you decide to try it out. You started with a line of apples and bananas, and there is one type of allowed operation: At each step, any number of consecutive items in the line can be chosen, replaced by the same amount of fruits of one kind. You can’t wait to destroy the world, so you want to know the minimum number of steps to achieve your goal.\n\n#### Input\nThe first line of the input file contains a single number t (t ≤ 100), the number of test cases. Each test case consists of two lines, where the first line indicates the initial pattern, and the second line indicates the evil pattern that can destroy the world. Both lines contain only characters ‘A’ and ‘B’, where ‘A’ stands for an apple and ‘B’ stands for a banana. The two lines will have the same length (no greater than 200), and there is no leading or trailing white spaces.\n\n#### Output\nFor each test case, output a single line containing the minimum number of steps to destroy the world.\n\n#### Sample Input\n```\n2\nBB\nAA\nBAAAB\nABBAA\n```\n\n#### Sample Output\n```\n1\n2\n```\n\n#### Hint\nIn the second case of this example, you can first transform the entire row of fruits into apples, and then turn the second through third fruits into bananas, which takes 2 steps total.\n',10000,32678,'0',6,44,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('646','Boundless Boxes','#### Description\nSeveral months ago, Peer was painting triangles on a canvas from the outside in. Now that triangles are out and squares are in, his newest paintings use concentric squares, and are created from the inside out! Peer starts painting on a rectangular canvas divided into a perfect square grid. He selects a number of single grid cells to act as central seeds, and paints them with the darkest shade. From each of the seed squares, Peer paints a larger square using a lighter shade to enclose it, and repeats with larger squares to enclose those, until the entire canvas is covered. Each square is exactly one grid cell larger and one shade lighter than the one it encloses. When squares overlap, the grid cell is always filled using the darker shade.\n\n[[File:G45.png|center]]\n\nAfter Peer decides where to place the initial squares, the only difficult part in creating these paintings is to decide how many different shades of the color he will need. To help Peer, you must write a program that computes the number of shades required for such a painting, given the size of the canvas and the locations of the seed squares.\n\n#### Input\nThe input test file will contain multiple cases. Each test case begins with a single line containing three integers, m, n, and s, separated by spaces. The canvas contains exactly m × n grid cells (1 ≤ m, n ≤ 1000), numbered 1, . . . , m vertically and 1, . . . , n horizontally. Peer starts the painting with s (1 ≤ s ≤ 1000) seed cells, described on the following s lines of text, each with two integers, ri and ci (1 ≤ ri ≤ m, 1 ≤ ci ≤ n), describing the respective grid row and column of each seed square. All seed squares are within the bounds of the canvas.\n\nA blank line separates input test cases, as seen in the sample input below. A single line with the num- bers “0 0 0” marks the end of input; do not process this case.\n\n#### Output\nFor each test case, your program should print one integer on a single line: the number of different shades required for the painting described. \n\n#### Sample Input\n```\n10 8 3\n3 3\n7 7\n10 2\n\n2 2 1\n1 2\n\n0 0 0\n```\n\n#### Sample Output\n```\n6\n2\n```\n',10000,32678,'0',6,45,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('647','Cargo Carriage','#### Description\nA seemingly straightforward task such as driving cargo from point A to point B can sometimes be very tricky! GPS systems can be very helpful for finding routes, but usually don’t take all things into consideration. For instance, when finding the quickest route, do they consider waiting at traffic lights? What about congestion? Maybe you can write superior software?\n\nIn this problem, you will be given a street map containing roads, numbered intersections (with traffic lights), and two warehouses. Your task is to find the fastest route to drive a truck from warehouse A to warehouse B.\n\nStreet maps are always drawn on a grid, and look like this:\n\n[[File:G46.png|center]]\n\nAdjacency on this map is defined as neighboring north, south, east, or west. The only symbols that appear on the map are the following:\n+  A # character indicates a road cell that trucks can drive on. Roads are adjacent to at most two other road, intersection, or warehouse cells.\n+  A single number [0-9] marks an intersection controlled by a traffic light. Intersections are adjacent to at least three road cells. Intersections are uniquely numbered sequentially: no number will appear unless all nonnegative integers less than it also appear on the map. The behavior of traffic lights will be described below.\n+  Exactly one character A marks the location of the warehouse where your trucks start. • Exactly one character B marks the location of the warehouse where you’d like to ship your cargo to. • A . character is just grass. You cannot drive on these.\n\nYou have one cargo truck that starts at warehouse A, and you are trying to drive it to warehouse B according to the rules below. For simplicity, we can also discretize time into atomic units, or turns.\n+  On a single turn, you may move the truck onto an adjacent road, intersection, or warehouse cell, or simply remain in the same cell.\n+  A truck may only move into an intersection cell if the traffic light for the intersection is green in the direction the truck is entering from during that turn. However, a truck on an intersection cell can exit in any direction at any time.\n\nIntersections with traffic lights periodically allow either east-west or north-south traffic flow, but not both at the same time. They are described by an initial direction and two numbers indicating the east-west and north-south periods, respectively. For example, an intersection initially green on the north-south direction described by “2 3” will have a green light facing north and south on turns 1-3 inclusive, facing east and west on turns 4-5, and again north and south on turns 6-8, etc.\n\n#### Input\nThe input test file will contain multiple cases. Each test case begins with a single line containing two integers, m and n, separated by spaces. The street map consists of m rows (east-west) and n columns (north-south) of grid cells (2 ≤ m,n ≤ 20).\n\nThe next m lines contain n characters each, which describe the map using the symbols defined in the problem statement above. For each numbered intersection that appears in the map, in ascending order beginning with 0, there will be a line of text with the intersection number followed by either a ‘-’ or ‘|’ character and two integers, ai and bi (1 ≤ ai , bi ≤ 100), the duration (in turns) of the east-west and north- south periods of the light, respectively. A ‘-’ indicates that the traffic light is initially green in the east-west direction, while a ‘|’ indicates that it is initially green in the north-south direction.\n\nA blank line separates input test cases, as seen in the sample input below. A single line with the num- bers “0 0” marks the end of input; do not process this case.\n\n#### Output\nFor each test case, your program should print one integer on a single line: the minimum number of turns it takes to drive your truck from warehouse A to warehouse B. If it is not possible to get to warehouse B, print a single word “impossible”.\n\n#### Sample Input\n```\n3 4\nA##B\n1. ..1. \n1. 1. 1. 1. \n\n4 9\n1. A1. 1. 01. 1. 11. \n.#..#..#.\n.#..#..#.\n.###2#.B.\n0 - 1 17\n1 | 3 5\n2-2 4\n\n2 2\nA.\n.B\n\n0 0\n```\n\n#### Sample Output\n```\n3\n17\nimpossible\n```\n\n#### Hint\nIn the second example, it is actually quicker to take the bottom route than the top. However, your truck must wait west at intersection 2 until it can enter on turn 7, when the light is green, and then reaches intersection 0 on turn 10, wait again west of intersection 1 until turn 14, and finally enters warehouse B at the end of turn 17.\n',10000,32678,'0',6,46,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('648','Dreadful Deadlines','#### Description\nContrary to popular belief, diligence does not always pay off! Over the course of his years as an earnest Stanford undergraduate, David found that despite his best efforts, work would always expand to fill the time available. In order to improve his day-to-day efficiency, David has decided to learn the art of procrastination.\n\nDavid has n assignments due next week. The ith assignment takes xi units of time and must be fin- ished by time ti. David can only work on one assignment at a time, and once David begins an assignment, he must work until it is finished. What is the latest time that David can start in order to ensure that all his deadlines are met?\n\n#### Input\nThe input file will contain multiple test cases. Each test case consists of three lines. The first line of each test case contains a single integer n (1 ≤ n ≤ 1000). The second line of each test case contains n integers, x1 x2 . . . xn (1 ≤ xi ≤ 10) separated by single spaces. The third line of each test case contains n integers, t1 t2 . . . tn (1 ≤ ti ≤ 1000) separated by single spaces.\n\nA blank line separates input test cases, as seen in the sample input below. A single line containing “0” marks the end of input; do not process this case.\n\n#### Output\nFor each input test case, print a single line containing an integer indicating the latest time that Jim can start yet still manage to finish all his assignments on time. If the latest time would require Jim to start before time 0, print “impossible”.\n\n#### Sample Input\n```\n3\n1 2 1\n9 9 7\n\n2\n2 2\n3 3\n\n0\n```\n\n#### Sample Output\n```\n5\nimpossible\n```\n',10000,32678,'0',6,47,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('649','Earthquake Emendations','#### Description\nA major earthquake has turned a beautiful stained glass window at the Farm Hill College chapel into shards\nof glass lying on the floor. The chapel manager is calling upon you to help him quickly put the window\nback together. Luckily the window only broke along its lead joints, and the individual colored pieces are all\nintact. Additionally, as if by divine intervention, all of the pieces landed on the floor either in their original\norientation, or rotated by a multiple of 90 degrees ($$$\\frac{\\pi}{2}$$$ radians), and no pieces have been flipped on their face.\n\n\nAfter much searching, a schematic of the original stained glass window as it stood before the earthquake was found in the library. You learn from the schematic that no two colored pieces of the window are identical in shape and size. With this schematic in hand, your mission is to write a program that will identify the strewn shards to help reassemble the window.\n\n#### Input\nYour program will be given several test cases, each comprising a description of a broken window for you to reassemble. Every test case begins with a single line containing an integer n (1 ≤ n ≤ 20), the number of individual glass pieces in the window. The next n lines each contain a description of a unique colored glass piece in the form of a simple polygon with nonzero area. The coordinates of the k (3 ≤ k ≤ 100) vertices of each polygon will be given in counter-clockwise order in the following format: $$$x_1 y_1 x_2 y_2 \\dots x_k y_k x_1 y_1$$$. You may assume that the vertices of each polygon are distinct, i.e., $$$(x_i,y_i) \\neq (x_j,y_j)$$$ whenever $$$i \\neq j$$$, and consecutive vertices are not collinear. All coordinates are integers restricted to the range $$$0 \\leq x_i, y_i \\leq 100$$$.\n\nThe final line of each test case is the schematic of the original window, written as a concatenation of n non-overlapping polygons in the same format described above. Each of the polygons in the schematic is guaranteed to correspond to some rotation plus translation of one of the glass pieces described above. Test cases will be separated by blank lines, and the final line of the input will contain a single integer “0”, marking the end of input.\n\n#### Output\nYour program should produce a single line of output for each test case. For every glass piece in the input for a test case, write a single integer indicating the position within the schematic that the piece appears. Separate the numbers with a single space in the output.\n\n#### Sample Input\n```\n2\n1 3 4 3 1 5 1 3\n4 4 4 7 2 7 4 4\n0 0 2 0 2 3 0 0 2 0 4 0 2 3 2 0\n\n4\n0 0 4 0 4 2 2 2 0 0\n0 0 4 0 2 2 0 2 0 0\n4 4 0 4 2 3 4 4\n0 4 4 4 2 6 0 4\n0 0 4 0 2 2 0 0 0 0 2 2 2 4 0 4 0 0 2 2 4 0 4 4 2 4 2 2 0 4 4 4 2 5 0 4\n\n0\n```\n\n#### Sample Output\n```\n1 2\n3 2 4 1\n```\n',10000,32678,'0',6,48,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('65','Calculator','#### Description\nAlec likes to play with the calculator (he has a wonderful calculator which can handle numbers with arbitrary many digits), when he multiplies two numbers and continues to press the button \'=\', calculator continues to multiply the displayed number with the second of the two entered numbers. For example, if he multiplies 2 and 3, the number 6 will appear on the display. Further pressing the button \'=\' will result in numbers 18, 54, 162, etc. being displayed.\n\nOne day Alec is playing a interesting game – he wants to know how many times does he need to press the \'=\' button in order for some given number to appear as suffix of the number displayed on the calculator.\n\nHe play the game in this way. He enters a number A, presses the button \'*\', enters the number B and presses the button \'=\'. After that, product of the numbers A and B appears on the display. If the number C is not a suffix of the number displayed, he continues to press the button \'=\', until a number whose suffix is C is displayed.\n\nWrite a program for given numbers A, B and C, calculate the total number of times the button \'=\' will be pressed.\n\n#### Input\nThe input will contains multiple test cases. The first line of the input is a single integer $$$T (1 \\leq T \\leq 100)$$$ which is the number of test cases. T test cases follow.\n\nEach test case contains only line of three integers A, B and C, $$$0 \\leq A, C \\leq 100,000$$$, $$$0 \\leq B \\leq 1000$$$. There will be no leading zeros in the representation of number C.\n\n#### Output\nFor each input test case, output the number of times the button \'=\' will be pressed, or the word \'No Solution\' if there is no solution.\n\n#### Sample Input\n```\n2\n1 2 3\n2 3 4\n```\n\n#### Sample Output\n```\nNo Solution\n3\n```\n',10000,32768,'0',0,64,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('650','Folded Fixtures','#### Description\nYou may know of a certain popular and coveted construction toy that Francis got for her birthday this week. This toy consists of a number of metal spheres that can be connected to each other using rigid links (all of the same length) with a magnet on each end. The ends of the links stick to the metal spheres, and the links can freely rotate and extend from the sphere in any direction (essentially forming a spherical joint), allowing you to create a variety of interesting structures.\n\nFrancis has assembled several such structures, and now wishes to store her creations by hanging them up in a corner of her room. She notices that, for some of her structures, when she picks it up and holds it by a single sphere, all the links collapse into a single, thin vertical line (see Figure 1) due to the pull of gravity and the spherical joints. Francis can hang up her creations by affixing one sphere on the structure to her ceiling, and wishes to save space by hanging each one up by the sphere that results in the shortest collapsed line. She deems those fixtures which do not hang as a single thin line to take up too much space, and discards them.\n\n[[File:G49.png|center]]\n\nFor simplicity, we can treat the metal spheres as infinitely small points and the links as line segments of unit length. Can you write a program to help Francis figure out how much space her fixtures will take, and which ones to discard? Your task is to find the shortest length possible for the collapsed fixture if you were to hang it up by a single sphere, or report that there is no way to hang up the fixture by so that it collapses into an infinitely thin straight line.\n\n#### Input\nThe input will contain multiple test cases for you to analyze. Each test case describes a fully connected fixture (i.e. there are no loose, unattached components). The first line of a test case consists of two integers, n and m, separated by a space, indicating the number of spheres (1 ≤ n ≤ 100) and links (0 ≤ m ≤ 1000) used in the structure, respectively. The spheres are numbered uniquely from 1 to n. The following m lines of input each contain two integers, ai and bi (1 ≤ ai , bi ≤ n), indicating that Francis has attached sphere a to sphere b in her fixture. Note that both ends of a link cannot be attached to a single sphere, and no two links will attach the same two spheres.\n\nA blank line separates input test cases, as seen in the sample input below. A single line containing “0 0” marks the end of input; do not process this case.\n\n#### Output\nFor each input test case, print a single line containing the shortest length possible of the collapsed fixture. If it is not possible to hang the described fixture up by a single sphere so that it collapses into a line, print “impossible”.\n\n#### Sample Input\n```\n6 6\n1 2\n5 6\n3 2\n3 5\n4 2\n4 5\n\n4 5\n1 2\n2 3\n3 4\n1 3\n2 4\n\n0 0\n```\n\n#### Sample Output\n```\n2\nimpossible\n```\n',10000,32678,'0',6,49,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('651','Globulous Gumdrops','#### Description\nGwen just bought a bag of gumdrops! However, she does not like carrying gumdrops in plastic bags; instead, she wants to pack her gumdrops in a cylindrical tube of diameter d. Given that each of her gumdrops are perfect spheres of radii r1, r2, . . . , rn, find the shortest length tube Gwen can use to store her gumdrops.\n\n[[File:G50.png|center]]\n\nYou should assume that the gumdrop radii are sufficiently large that no three gumdrops can be simultaneously in contact with each other while fitting in the tube. Given this restriction, it may be helpful to realize that the gumdrops will always be packed in such a way that their centers lie on a single two-dimensional plane containing the axis of rotation of the tube.\n\n#### Input\nThe input file will contain multiple test cases. Each test case will consist of two lines. The first line of each test case contains an integer n (1 ≤ n ≤ 15) indicating the number of gumdrops Gloria has, and a floating point value d (2.0 ≤ d ≤ 1000.0) indicating the diameter of the cylindrical tube, separated by a space. The second line of each test case contains a sequence of n space-separated floating point numbers, r1 r2 . . . rn (1.0 ≤ ri ≤ d/2) are the radii of the gum drops in Gloria’s bag. A blank line separates input test cases. A single line with the numbers “0 0” marks the end of input; do not process this case.\n\n#### Output\nFor each input test case, print the length of the shortest tube, rounded to the nearest integer.\n\n#### Sample Input\n```\n2 98.1789\n42.8602 28.7622\n\n3 747.702\n339.687 191.953 330.811\n\n0 0\n```\n\n#### Sample Output\n```\n138\n1628\n```\n',10000,32678,'0',6,50,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('652','Honed Hops','#### Description\nIn the Olympics, appearances do matter!\n\nThe trajectory of a long jumper is given by h(x) = max(0, p(x)), where p(x) = a(x − h)^2 + k is a quadratic polynomial describing a parabola opening downward whose vertex (h, k) lies in the upper half-plane. (That is, a < 0 and k > 0.) Due to rigorous training, each jumper always jumps with the same trajectory, and due to corporate sponsorship and branding requirements, no two jumpers have the same trajectory.\n\nAdoring fans who wish to preserve the moment occasionally sample their favorite athlete’s coordinates at various times and write them down, such as: (0, 0), (1, 3), (2, 4), (3, 3), (4, 0), (7, 0). Given two sample sets, your job is to determine whether they were taken from the same athlete or not, assuming there is enough information to do so.\n\n#### Input\nThe input test file will contain multiple cases, each separated by a blank line. Each test case consists of three lines of text. The first line contains two integers, n1 and n2 (1 ≤ n1,n2 ≤ 10) separated by a space, indicating the number of sample points for the first and second sample sets, respectively. The second and third lines contain the sample points for the two sets, in the format x1 y1 x2 y2 ···xn yn. You may assume thatx1 <x2 <···<xn; moreover, 0≤xi ≤100,000 and 0≤yi ≤1000 for each i. (Be careful that your calculations have sufficient precision for all input conforming to the stated bounds.)\n\nInput is terminated by a single line containing “0 0”; do not process this case.\n\n#### Output\nFor each test case, your program should output a single line containing “same” if the two sample sets are indeed from the same athlete, “different” if they are not, and “unsure” if there is not enough information to tell. \n\n#### Sample Input\n```\n6 4\n0 0 1 3 2 4 3 3 4 0 7 0\n1 3 2 4 3 3 4 0\n\n6 1\n0 0 1 3 2 4 3 3 4 0 7 0\n0 0\n\n6 2\n0 0 1 3 2 4 3 3 4 0 7 0\n1 3 2 5\n\n0 0\n```\n\n#### Sample Output\n```\nsame\nunsure\ndifferent\n```\n',10000,32678,'0',6,51,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('653','GNIHCTAM GNIRTS (String Matching)','',10000,32678,'0',6,52,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('654','Chart Generation','',10000,32678,'0',6,53,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('655','Median','',10000,32678,'0',6,54,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('656','Processing Text','',10000,32678,'0',6,55,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('657','Return Of The King','',10000,32678,'0',6,56,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('658','Derive The Derivatives','',10000,32678,'0',6,57,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('659','Topbu Posters','',10000,32678,'0',6,58,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('66','Greedy Snake','#### Description\nOne of the most popular NOKIA mobile phone game is \'Greedy Snake\'. The snake is crawling through the board and eating apples that increase its length. The game ends when the snake bumps into itself or into the wall.\n\nGame board consists of NxN squares arranged in N rows and N columns, and some squares contain apples. Around the board there is a wall. At the beginning of the game, the snake is located in the top-left corner, its length is equal to 1 and its head is directed towards right.\n\n+ Snake is crawling by changing its position during each second according to the following rules:\n  - Snake extends its length by spreading to the next square in front of the head (i.e. in the direction of the head),\n  - If there is an apple on that square, tail of the snake does not move (hence, its length is increased by 1 in this step),\n  - If there is no apple, last square of the tail is erased (hence, its length stays unchanged)\n\nPositions of the apples and movements of the snake are given. Write a program that will calculate the number of seconds until the game ends.\n\n#### Input\nThe input will contains multiple test cases. The first line of the input is a single integer $$$T (1 \\leq T \\leq 100)$$$ which is the number of test cases. T test cases follow.\n\nFirst line of input contains an integer $$$N, 2 \\leq N \\leq 100$$$.\n\nFollowing line contains an integer $$$K, 0 \\leq K \\leq 100$$$, the number of apples on the board.\n\nFollowing K lines contain coordinates of apples on the board. First number denotes the row and second number denotes the column of the board where the apple is situated. There will be no apple at the top-left corner of the board.\n\nFollowing line contains an integer number $$$L, 1 \\leq L \\leq 100$$$, the number of times the snake makes a turn.\n\nEach of the following L lines contains the description of one turn. A single turn is described by a number X (positive integer less than or equal to 10,000) and a character C. This means that the snake rotates its head 90 degrees left (if the character is \'L\') or right (is \'R\') at the end of the second X.\n\n#### Output\nFor each input test case, output the number seconds from the problem statement.\n\n#### Sample Input\n```\n2\n\n6\n3\n3 4\n2 5\n5 3\n3\n3 R\n15 L\n17 R\n\n10\n4\n1 2\n1 3\n1 4\n1 5\n4\n8 R\n10 R\n11 R\n13 L\n```\n\n#### Sample Output\n```\n9\n21\n```\n',10000,32768,'0',0,65,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('660','Centipede Collisions','#### Description\n\nA small boy named Tommy has some toy centipedes that are a series of 1 centimeter segments. Tommy assembles his centipedes to any length he likes and places them on a 30x30 centimeter board that allows the centipedes to travel in 1 centimeter wide tracks that criss-cross the board. The centipedes travel only parallel to either the x or y axis on the board. Centipede segments of the same centipede advance at the same time and centipedes advance in cyclic numerical order (all of centipede 0 first, then 1, etc.). When more than one segment of two or more centipedes occupy the same x,y coordinate, there is a centipede collision. Anytime a collision occurs, all segments occupying the collistion site stop and continue to occupy the collision site. All remaining segments on a centipede detach from the segment involved in the collision and continue their march until another collision occurs or an existing collision site is encountered or until the segments fall off the edge of the board. Anytime a segment enters a collision site, it becomes part of the collision. <br><br>\nSince Tommy left home without his centipede set, his mother has hired you to write a simulation program for his entertainment. Your program will simulate his board with a text printout of his grids. For example, Tommy may simulate 5 centipedes on his board that start out as shown on the grid on the left and finish as shown on the grid on the right (note the example grid is only 10x10 whereas Tommy\'s is 30x30.) \n```\n\n   9    . . . . . . . . . .            9    . . . . . . . . . .\n   8    . . . . . . . . . .            8    . . . . . . . . . .\n   7    1 1 1 1 1 . . . . .            7    . . . . . X . . . X\n   6    . 0 . . . . . . . .            6    . . . . . . . . . .\n   5    . 0 . . . . . . . 3            5    . . . . . . . . . .\n   4    . 0 . . . 2 . . . 3            4    . . . . . . . . . .\n   3    . 0 . . . 2 . . . 3            3    . . . . . . . . . .\n   2    . . . . . 2 . . . 3            2    . . . . . . . . . .\n   1    . . . . . 2 . . . 3            1    . . . . . . . . . .\n   0    . . . . . 2 4 4 4 3            0    . X . . . . . . . .\n   Y                                   Y\n    / X 0 1 2 3 4 5 6 7 8 9             / X 0 1 2 3 4 5 6 7 8 9\n\n```\nWhere 0 represents a centipede segment traveling from top to bottom, <br>\n1 represents a centipede segment traveling from left to right, <br>\n2 represents a centipede segment traveling from bottom to top, <br>\n3 represents a centipede segment traveling from bottom to top, <br>\n4 represents a centipede segment traveling from right to left, and <br>\nX represents a collision site involving 2 or more segments. <br>\n<br>\nYour program will simulate up to 10 centipedes that travel on a 30x30 board. Tommy has 100 segments that he may use in his simulation. Of course, no centipede can be longer than 30 segments.\n\n#### Input\nInput to your program will consist of a series of simulation sets. The first line of each input set will be a single integer (1<=N<=10) representing the number of centipedes in the simulation. (Centipedes are numbered 0 through N-1 in the same order as the input.) The next N lines will each represent one centipede and will contain a single direction character followed by 3 integers. The direction character can be \'U\', \'D\', \'L\', or \'R\' for \"Up\", \"Down\", \"Left\", or \"Right\" respectively and indicate the direction of travel. The next integer (1<=L<=30) indicates the length of the centipede in segments. The second and third integers indicate the x,y coordinates of the lead segment (0<=x&y<=29). The next L-1 segments of the centipede occupy the L-1 board positions extending in the opposite direction from the direction of travel starting adjacent to the lead segment. You can be assured that no centipede segment will originate off the board nor will the original configuration involve any collisions.\n\n#### Output\nFor each input simulation set, you should print (exactly) the following lines as the first two lines of output (starting in column 4). <br><br>\n```\n0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 \n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 \n```\nThe next 30 lines represent the state of the board after the simulation has completed (all centipede segments have entered a collision site or fallen off the edge of the board). Columns 1 and 2 should contain the row number (rows are numbered 29 down to 00) with leading zeroes. Even numbered columns between 4 and 62 (inclusive) represent the contents of the board cells. Board cells can contain either an X or a period. A period represents an empty cell and X represents a cell that contains 2 or more centipede segments involved in a collision. The last line of each output set is a blank line. \n<br>\nFollow the Sample Output for the exact format of the expected output.\n\n#### Sample Input\n```\n10\nR 9 11 23\nU 8 11 17\nU 5 15 15\nU 5 15 8\nD 9 23 13\nU 6 23 6\nR 9 8 9\nL 13 17 0\nU 12 13 11\nL 5 20 9\n```\n\n#### Sample Output\n```\n   0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n29 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n28 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n27 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n26 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n25 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n23 . . . . . . . . . . . X . . . X . . . . . . . . . . . . . .\n22 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n21 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n20 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n19 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n18 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n17 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n16 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n15 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n14 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n13 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n12 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n11 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n10 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n09 . . . . . . . . . . . . . X . X . . . . . . . X . . . . . .\n08 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n07 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n06 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n05 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n04 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n03 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n02 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n00 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n```\n',10000,32678,'0',6,59,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('661','Range','',10000,32768,'0',6,60,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('662','Coverage','',10000,32768,'0',6,61,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('663','XML','',10000,32768,'0',6,62,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('664','Clickomania','',10000,32768,'0',6,63,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('665','Balance','',10000,32768,'0',6,64,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('666','Resistors','',10000,32768,'0',6,65,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('667','Shuffling','',10000,32768,'0',6,66,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('668','Papa','',10000,32768,'0',6,67,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('669','Wax','',10000,32768,'0',6,68,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('67','Plastic Digits','#### Description\nThere is a company that makes plastic digits which are primarily put on the front door of each house to form the house number. In order to make sure that they don’t waste any resources, they want to make the exact number of digits for the house numbers needed. You are to write a program to help the company decide how many copies of each digit it needs to make for each order it receives.\n\n#### Input\nThe input will contains multiple test cases. The first line of the input is a single integer $$$T (1 \\leq T \\leq 100)$$$ which is the number of test cases. T test cases follow.\n\nEach test case contains two positive integers $$$n, m (1 \\leq n , m \\leq 100)$$$ which indicate the range of house numbers the company has to make for a particular order. The range is inclusive of n and m.\n\n#### Output\nFor each input test case, you are to output the number of copies of each digit that the company needs to make in the following format:\n\n+ 0 <number of copies of digit 0>\n+ 1 <number of copies of digit 1>\n+ ...\n+ ...\n+ ...\n+ 9 <number of copies of digit 9>\n\nThere should be a single space between the digit and the required copies.\n\nThere should be a single blank line between two test cases. No blank line at the end of the last test case.\n\n#### Sample Input\n```\n2\n1 13\n1 13\n```\n\n#### Sample Output\n```\n0 1\n1 6\n2 2\n3 2\n4 1\n5 1\n6 1\n7 1\n8 1\n9 1\n\n0 1\n1 6\n2 2\n3 2\n4 1\n5 1\n6 1\n7 1\n8 1\n9 1\n```\n',10000,32768,'0',0,66,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07');
INSERT INTO `problem` VALUES ('670','Bonsai','#### Description\nAfter being assaulted in the parking lot by Mr. Miyagi following the \"All Valley Karate Tournament\", John\nKreese has come to you for assistance. Help John in his quest for justice by chopping o all the leaves from\nMr. Miyagi\'s bonsai tree!\nYou are given an undirected tree (i.e., a connected graph with no cycles), where each edge (i.e., branch)\nhas a nonnegative weight (i.e., thickness). One vertex of the tree has been designated the root of the tree.\nThe remaining vertices of the tree each have unique paths to the root; non-root vertices which are not the\nsuccessors of any other vertex on a path to the root are known as leaves.\nDetermine the minimum weight set of edges that must be removed so that none of the leaves in the\noriginal tree are connected by some path to the root.\n\n#### Input\nThe input le will contain multiple test cases. Each test case will begin with a line containing a pair of\nintegers n (where 1<=n<=1000) and r (where 1<=r<=n) indicating the number of vertices in the tree\nand the index of the root vertex, respectively. The next n-1 lines each contain three integers ui vi wi (where\n1<=ui,vi<=n and 0<=wi<=1000) indicating that vertex ui is connected to vertex vi by an undirected\nedge with weight wi. The input le will not contain duplicate edges. The end-of-file is denoted by a single\nline containing \"0 0\".\n\n#### Output\nFor each input test case, print a single integer indicating the minimum total weight of edges that must be\ndeleted in order to ensure that there exists no path from one of the original leaves to the root.\n#### Sample Input\n```\n15 15\n1 2 1\n2 3 2\n2 5 3\n5 6 7\n4 6 5\n6 7 4\n5 15 6\n15 10 11\n10 13 5\n13 14 4\n12 13 3\n9 10 8\n8 9 2\n9 11 3\n0 0\n```\n\n#### Sample Output\n```\n16\n```',10000,32768,'0',6,69,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('671','Fruit Bowl','',10000,32768,'0',6,70,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('672','Number Game','#### Description\n﻿Carl and Ellie are in the midst of another adventure; this time, it is a road trip through Canada! They\'ve just arrived in Saskatchewan [insert rectangular shape here], right in the middle of the Canadian prairies, and, to their horror, have discovered that all the rumours about it being dreadfully at are true. Suddenly, the warnings their Canadian friends gave them prior to the trip spring back to mind, such as: \n	 \nIt\'s so at, a boy can watch his dog run away! 	\n \nOr: \n\nIt\'s so at, it\'s impossible to jump to your death! \n	 \nAs the driver, Carl is worried about falling asleep at the wheel and has decided to come up with a game to relieve the boredom. As a conscientious driver, he doesn\'t want the game to be too distracting|the roads here are unerringly straight, so it\'s easy to lose track of motion|so the rules are simple: \n	 \n• Carl picks a number, N, between 1 and 1, 000, 000, 000.\n\n• Carl and Ellie take turns subtracting an integer (between 1 and 20) from N. Carl plays &#12;rst, and the winner is the one who subtracts off a number to get 0. 	 \n\nFor example, suppose Carl picks the number 50. He subtracts off the number 5, leaving 45. Ellie subtracts off 17, leaving 28. Carl subtracts off 8, leaving 20. Finally, Ellie subtracts off 20, leaving 0, and wins! Frankly, Ellie would rather sleep than play this game, so she has reprogrammed the GPS (which isn\'t necessary in this region, anyway) to play for her instead. Her method of choosing a number is straightforward: \n	 \n• If on a given turn, the number remaining is 20 or less, then she picks that number and wins. 	\n\n• Otherwise, her choice of number is completely determined by the number Carl just picked, as follows. Before the game starts, Ellie chooses 20 random numbers, 1 ≤ a1, a2, a3, . . . , a20 ≤ 20. Then whenever Carl subtracts off the number k, Ellie responds by subtracting off the number ak (unless she can win). \n	 \nCarl needs your help! To help stay motivated playing this game, he would like to know if there exists a winning strategy for him, given the numbers N and a1, a2, a3, . . . , a20. 	 \n\n#### Input\n﻿Each input case begins with the number N on a line by itself; the next line contains the numbers a1, a2, . . . , a20, 	 \nseparated by spaces. Input terminates with a line containing 0. 	 \n\n#### Output\n﻿For each test case, print \\Carl can win” or \\Carl can\'t win\". 	 \n\n#### Sample Input\n```\n﻿42				 \n20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 	 \n0\n```\n\n#### Sample Output\n```\n﻿Carl can\'t win\n```\n\n#### hint\n﻿In this example, since Carl chooses N to be 42, it turns out that he has no winning strategy. (Indeed, 	 \nwhichever number he initially subtracts o&#11;, Ellie will subtract off a number leaving 21 for Carl. Then 	 \nwhatever number Carl subtracts off next, Ellie will be left with a number between 1 and 20, and she wins!) 	 \n',10000,32768,'0',6,71,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('673','Leap Frog','#### Description\nJack and Jill play a game called \\Leap Frog\" in which they alternate turns jumping over each other. Both\nJack and Jill can jump a maximum horizontal distance of 10 units in any single jump. You are given a list of\nvalid positions $$$x_1, x_2, x_3, ... x_n$$$ where Jack or Jill may stand. Jill initially starts at position $$$x_1$$$, Jack initially\nstarts at position $$$x_2$$$, and their goal is to reach position $$$x_n$$$.\nDetermine the minimum number of jumps needed until either Jack or Jill reaches the goal. The two\nplayers are never allowed to stand at the same position at the same time, and for each jump, the player in\nthe rear must hop over the player in the front.\n#### Input\nThe input �le will contain multiple test cases. Each test case will begin with a single line containing a\nsingle integer n (where 2 $$$\\leq$$$ n $$$\\leq$$$ 100000). The next line will contain a list of integers $$$x_1 x_2 ... x_n$$$ where\n0 $$$\\leq$$$ $$$x_1 < x_2 ... < x_n$$$ $$$\\leq$$$ 1000000. The end-of-file is denoted by a single line containing \"0\".\n\n#### Output\nFor each input test case, print the minimum total number of jumps needed for both players such that either\nJack or Jill reaches the destination, or -1 if neither can reach the destination.\n\n#### Sample Input\n```\n6\n3 5 9 12 15 17\n6\n3 5 9 12 30 40\n0\n```\n\n#### Sample Output\n```\n3\n-1\n```\n',10000,32768,'0',6,72,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('674','Universal Oracle','#### Description\nIn computer science, an oracle is something that gives you the answer to a particular question. For this\nproblem, you need to write an oracle that gives the answer to everything. But it\'s not as bad as it sounds;\nyou know that 42 is the answer to life, the universe, and everything.\n#### Input\nThe input consists of a single line of text with at most 1000 characters. This text will contain only well-\nformed English sentences. The only characters that will be found in the text are uppercase and lowercase\nletters, spaces, hyphens, apostrophes, commas, semicolons, periods, and question marks. Furthermore, each\nsentence begins with a single uppercase letter and ends with either a period or a question mark. Besides\nthese locations, no other uppercase letters, periods, or question marks will appear in the sentence. Finally,\nevery question (that is, a sentence that ends with a question mark) will begin with the phrase \"What is...\"\n\n#### Output\nFor each question, print the answer, which replaces the \"What\" at the beginning with \"Forty-two\" and the\nquestion mark at the end with a period. Each answer should reside on its own line.\n\n#### Sample Input\n```\nLet me ask you two questions. What is the answer to life? What is the answer to the universe?\n```\n\n#### Sample Output\n```\nForty-two is the answer to life.\nForty-two is the answer to the universe.\n```\n',10000,32768,'0',6,73,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('675','Rectangles','#### Description\nA rectangle in the Cartesian plane is specified by a pair of coordinates (x1; y1) and (x2; y2) indicating its lower-left and upper-right corners, respectively (where x1 <= x2 and y1 <= y2). given a pair of rectangles,\nA = ((xA1 ; yA1 ); (xA2 ; yA2 )) and B = ((xB1 ; yB1 ); (xB2 ; yB2 )), we write A < B,  if\nxA2 < xB1 and yA2 < yB1 . In this problem, you are given a collection of rectangles located in the two-dimension Euclidean plane. Find the length L of the longest sequence of rectangles (A1,A2,....,AL) from this collection such that A1 < A2 < A3 < ...... < AL\n\n#### Input\nThe input file will contain multiple test cases. Each test case will begin with a line containing a single\ninteger n (where 1 <= n <= 1000), indicating the number of input rectangles. The next n lines each contain\nfour integers xi1 yi1 xi2 yi2 (where -1000000 <= xi1 <= xi2 <= 1000000, -1000000 <= yi1 <= yi2 <= 1000000, and 1 <= i <= n), indicating the lower left and upper right corners of a rectangle. The end-of-input is denoted by a\nsingle line containing the integer 0.\n\n#### Output\nFor each input test case, print a single integer indicating the length of the longest chain.\n\n#### Sample Input\n```\n3\n1 5 2 8\n3 -1 5 4\n10 10 20 20\n2\n2 1 4 5\n6 5 8 10\n0\n```\n\n#### Sample Output\n```\n2\n1\n```\n',10000,32768,'0',6,74,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('676','Rectangles Too!','#### Description\nA rectangle in the Cartesian plane is specified by a pair of coordinates (x1; y1) and (x2; y2) indicating its lower-left and upper-right corners, respectively (where x1 <= x2 and y1 <= y2). Given a pair of rectangles, A = ((xA1 ; yA1 ); (xA2 ; yA2 )) and B = ((xB1 ; yB1 ); (xB2 ; yB2 )), we write A <= B (i.e., A \\precedes\" B), if xA2 < xB1 and yA2 < yB1 . In this problem, you are given a collection of rectangles located in the two-dimension Euclidean plane. Find the length L of the longest sequence of rectangles (A1,A2,....,AL) from this collection such that A1 <= A2 <= ...... <= AL \n#### Input\nThe input file will contain multiple test cases. Each test case will begin with a line containing a single integer n (where 1 <= n <= 100000), indicating the number of input rectangles. The next n lines each contain four integers xi1 yi1 xi2 yi2 (where -1000000 <= xi1 <= xi2 <= 1000000, -1000000 <= yi1 <= yi2 <= 1000000, and 1 <= i <= n), indicating the lower left and upper right corners of a rectangle. The end-of-�le is denoted by a single line containing the integer 0.\n#### Output\nFor each input test case, print a single integer indicating the length of the longest chain. \n#### Sample Input\n```\n3\n1 5 2 8\n3 -1 5 4\n10 10 20 20\n2\n2 1 4 5\n6 5 8 10\n0\n```\n\n#### Sample Output\n```\n2\n1\n```\n',10000,32768,'0',6,75,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('677','Rubik 2^3','',10000,32768,'0',6,76,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('678','Palindromic Squares','',10000,32767,'0',6,77,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('679','Prime Palindromes','',10000,32767,'0',6,78,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('68','Enumeration','#### Description\nWrite a program to read an integer N and output all integers from 1 to $$$N^{2}$$$.\n\n#### Input\nThe input will contains multiple test cases. The first line of the input is a single integer $$$T (1 \\leq T \\leq 100)$$$ which is the number of test cases. T test cases follow.\n\nEach test case contains an integer $$$N (1 \\leq N \\leq 100)$$$.\n\n#### Output\nFor each input test case, your program should output N lines, each containing N integers, separated by a single space(no space at the end of each line). The integers are 1 to $$$N^2$$$ in ascending order.\n\nThere should be a single blank line between two test cases. No blank line at the end of the last test case.\n\n#### Sample Input\n```\n2\n4\n3\n```\n\n#### Sample Output\n```\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n\n1 2 3\n4 5 6\n7 8 9\n```\n',10000,32768,'0',0,67,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('680','Prime Cryptarithm','',10000,32767,'0',6,79,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('681','The Tamworth Two','',10000,32767,'0',6,80,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('682','Subset Sums','',10000,32767,'0',6,82,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('683','Oh, Those Achin\' Feet','#### Description\nIn recent days, a number of people have been injured after being pushed off the sidewalks due to overcrowding. City Hall is interested in figuring out how much pedestrian traffic its sidewalks receive every day. The results of this study will be used to determine whether the city needs to fund more sidewalks. The city has surveyed various buildings in several blocks to determine the traffic patterns they generate. Your job is to take this survey data and convert it into sidewalk utilization information. \n\nYour program will read in the size of the map and a map of several city blocks. Buildings, streets, and building entrance/exits will be marked on the map. You will also be given a list of pedestrian load between several pairs of exits and entrances. Your program will determine the paths used by pedestrians between each source and destination, add up the total pedestrian load from all paths using each street, and output a table of the total pedestrian load on each square. \n\nNotes: \n\n1. The map is divided into squares. Each square of the map can be a street square, a building square, or an entrance/exit square. An entrance/exit square serves as both entrance and exit for that building. There will be no more than 90 street squares in the map. \n\n2. People will always follow the shortest path between their origin and destination. No shortest path will exceed 75 squares. \n\n3. If there are multiple equal-length shortest paths, the load will be divided equally amongst the paths. For shortest paths, there will be fewer than 50000 equallength path combinations. \n\n4. If a building entrance/exit has multiple sides facing a street (for example, a corner of a building), the pedestrians may enter or exit through any street-facing side. \n\n5. All movement will be strictly N, E, S, or W. No diagonal movement is permitted. \n\n6. Pedestrians cannot move through buildings or off the edge of the map. \n\n7. For convenience, you may ignore the fact that each street section may have two sidewalks. \n\n8. Traffic load is not applied to the actual exit/entrance squares themselves. \n\n9. If an origin and destination are adjacent on the map, pedestrians may move directly between them. In this case, there is no resulting load placed on any portion of the map because no streets are used.\n\n#### Input\nLine 1: X Y \nX is the number of columns in the map, Y is the number of rows. Each is a positive integer less than 20. \n\nLine 2-(Y+1): \nEach line contains exactly X symbols indicating the contents of that square on the map. The symbols are: \nX: building, non-entrance/exit \n.: (period) street \n{A-O}: letter indicating exit/entrance. Each letter may occur at most once. \n\nLines (Y+2)-?: \nEach line indicates a pedestrian route and specifies a source, destination, and pedestrian load. Source and destination will each be a letter {A-O} with no spaces in between. The load factor will be a nonnegative integer, separated from the destination by whitespace. Source and destination will never be equal. At most 25 routes will be given. There will be a valid path in the map for each requested route. \n\nThe file will terminate with the line: \nXX 0 \n\nAfter this line,a next test case can follow. The input file is terminated by two zeros in place of a map size.\n#### Output\nThe output consists of Y lines, each with X space-separated fields indicating the load factor. Each load factor is printed to two decimal places with 3 spaces for integer digits (C 6.2 format). \n\n#### Sample Input\n```\n4 4 \n.... \nA.X. \nXXX. \nB... \nAB 2 \nBA 1 \nXX 0 \n0 0\n```\n\n#### Sample Output\n```\n  1.50   3.00   3.00   3.00 \n  0.00   1.50   0.00   3.00 \n  0.00   0.00   0.00   3.00 \n  0.00   3.00   3.00   3.00 \n```\n',10000,32768,'0',6,83,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('684','Transmitters','',10000,32768,'0',6,84,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('685','Spell Checker','',10000,32768,'0',6,85,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('686','Number That Count','',10000,32768,'0',6,86,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('687','Number Game','',10000,32768,'0',6,87,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('688','Frame Stacking','',10000,32768,'0',6,88,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('689','Human Gene Functions','',10000,32768,'0',6,89,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('69','Special Prime Number','#### Description\nWhat kind prime number will be called as Special Prime Number here? Let me ask you another question first, do you know what is palindrome integer? Palindrome integer is equal to its revers. For example, 12321, 23432 are palindrome integers. The prime number which we called as Special Prime Number here is palindrome number. In this problem you will be given an integer $$$N(1 \\leq N \\leq 9,000,000)$$$. You are asked to write a program find out the smallest Special Prime Number M, which $$$N \\leq M$$$.\n\n#### Input\nThe input will contains multiple test cases. The first line of the input is a single integer $$$T (1 \\leq T \\leq 100)$$$ which is the number of test cases. T test cases follow.\n\nEach test case contains an integers $$$N (1 \\leq N \\leq 9,000,000)$$$ in a single line. \n\n#### Output\nFor each input test case, your program must output a single integer, the smallest Special Prime Number which greater than or equal to N, in a single line.\n\n#### Sample Input\n```\n2\n31\n180\n```\n\n#### Sample Output\n```\n101\n181\n```\n',10000,32768,'0',0,68,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('690','Cable Master','',10000,32768,'0',6,90,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('691','Nth Largest Value','#### Description\nFor this problem, you will write a program that prints the Nth largest value in a fixed sized array of integers. To make things simple, N will be 3 and the array will always be have 10 decimal integer values.\n#### Input\nThe first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. Each data set consists of a single line containing the data set number, followed by a space,followed by 10 space separated decimal integers whose values are between 1 and 1000 inclusive.\n#### Output\nFor each data set, generate one line of output with the following values: The data set number as a decimal integer, a space, and the 3rd largest value of the corresponding 10 integers.\n#### Sample Input\n```\n4\n1 1 2 3 4 5 6 7 8 9 1000\n2 338 304 619 95 343 496 489 116 98 127\n3 931 240 986 894 826 640 965 833 136 138\n4 940 955 364 188 133 254 501 122 768 408\n```\n\n#### Sample Output\n```\n1 8\n2 489\n3 931\n4 768\n```\n',10000,32768,'0',6,91,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('692','Equal Sum Partitions','#### Description\nAn equal sum partition of a sequence of numbers is a grouping of the numbers (in the same order as the original sequence) in such a way that each group has the same sum. For example, the sequence:\n2 5 1 3 3 7\nmay be grouped as:\n(2 5) (1 3 3) (7)\nto yield an equal sum of 7.\n\nNote: The partition that puts all the numbers in a single group is an equal sum partition with the sum equal to the sum of all the numbers in the sequence.\n\nFor this problem, you will write a program that takes as input a sequence of positive integers and returns the smallest sum for an equal sum partition of the sequence.\n\n#### Input\nThe first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. The first line of each data set contains the data set number, followed by a space, followed by a decimal integer M, (1 ≤ M ≤ 10000), giving the total number of integers in the sequence. The remaining line(s) in the dataset consist of the values, 10 per line, separated by a single space. The last line in the dataset may contain less than 10 values.\n\n#### Output\nFor each data set, generate one line of output with the following values: The data set number as a decimal integer, a space, and the smallest sum for an equal sum partition of the sequence.\n\n#### Sample Input\n```\n3\n1 6\n2 5 1 3 3 7\n2 6\n1 2 3 4 5 6\n3 20\n1 1 2 1 1 2 1 1 2 1\n1 2 1 1 2 1 1 2 1 1\n```\n\n#### Sample Output\n```\n1 7\n2 21\n3 2\n```\n',10000,32768,'0',6,92,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('693','Balls','#### Description\nThe classic Two Glass Balls brain-teaser is often posed as:\n\n\"Given two identical glass spheres, you would like to determine the lowest floor in a 100-story building from which they will break when dropped. Assume the spheres are undamaged when dropped below this point. What is the strategy that will minimize the worst-case scenario for number of drops?\"\n\nSuppose that we had only one ball. We\'d have to drop from each floor from 1 to 100 in sequence, requiring 100 drops in the worst case.\n\nNow consider the case where we have two balls. Suppose we drop the first ball from floor n. If it breaks we\'re in the case where we have one ball remaining and we need to drop from floors 1 to n-1 in sequence, yielding n drops in the worst case (the first ball is dropped once, the second at most n-1 times). However, if it does not break when dropped from floor n, we have reduced the problem to dropping from floors n+1 to 100. In either case we must keep in mind that we\'ve already used one drop. So the minimum number of drops, in the worst case, is the minimum over all n.\n\nYou will write a program to determine the minimum number of drops required, in the worst case, given B balls and an M-story building.\n\n#### Input\nThe first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. Each data set consists of a single line containing three (3) decimal integer values: the problem number, followed by a space, followed by the number of balls B, (1 ≤ B ≤ 50), followed by a space and the number of floors in the building M, (1 ≤ M ≤ 1000).\n\n#### Output\nFor each data set, generate one line of output with the following values: The data set number as a decimal integer, a space, and the minimum number of drops needed for the corresponding values of B and M.\n#### Sample Input\n```\n4\n1 2 10\n2 2 100\n3 2 300\n4 25 900\n```\n\n#### Sample Output\n```\n1 4\n2 14\n3 24\n4 10\n```\n',10000,32768,'0',6,93,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('694','Running Median','#### Description\nFor this problem, you will write a program that reads in a sequence of 32-bit signed integers. After each odd-indexed value is read, output the median (middle value) of the elements received so far.\n\n#### Input\nThe first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. The first line of each data set contains the data set number, followed by a space, followed by an odd decimal integer M, (1 ≤ M ≤ 9999), giving the total number of signed integers to be processed.\nThe remaining line(s) in the dataset consists of the values, 10 per line, separated by a single space.\nThe last line in the dataset may contain less than 10 values.\n\n#### Output\nFor each data set the first line of output contains the data set number, a single space and the number of medians output (which should be one-half the number of input values plus one). The output medians will be on the following lines, 10 per line separated by a single space. The last line may have less than 10 elements, but at least 1 element. There should be no blank lines in the output.\n\n#### Sample Input\n```\n3\n1 9\n1 2 3 4 5 6 7 8 9\n2 9\n9 8 7 6 5 4 3 2 1\n3 23\n23 41 13 22 -3 24 -31 -11 -8 -7\n3 5 103 211 -311 -45 -67 -73 -81 -99\n-33 24 56\n```\n\n#### Sample Output\n```\n1 5\n1 2 3 4 5\n2 5\n9 8 7 6 5\n3 12\n23 23 22 22 13 3 5 5 3 -3\n-7 -3\n```\n',1000,32768,'0',6,94,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('695','The Next Permutation','#### Description\nFor this problem, you will write a program that takes a (possibly long) string of decimal digits, and outputs the permutation of those decimal digits that has the next larger value (as a decimal number)\nthan the input number. For example:\n123 -> 132\n279134399742 -> 279134423799\nIt is possible that no permutation of the input digits has a larger value. For example, 987.\n#### Input\nThe first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. Each data set is a single line that contains the data set number, followed by a space, followed by up to 80 decimal digits which is the input value.\n#### Output\nFor each data set there is one line of output. If there is no larger permutation of the input digits, the output should be the data set number followed by a single space, followed by the string BIGGEST. Ifthere is a solution, the output should be the data set number, a single space and the next larger\npermutation of the input digits.\n\n#### Sample Input\n```\n3\n1 123\n2 279134399742\n3 987\n```\n\n#### Sample Output\n```\n1 132\n2 279134423799\n3 BIGGEST\n```\n',10000,32768,'0',6,95,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('696','Adjacent Bit Counts','#### Description\nFor a string of n bits x1, x2, x3, …, xn, the adjacent bit count of the string (AdjBC(x)) is given by\n\nx1*x2 + x2*x3 + x3*x4 + … + xn-1*xn\n\nwhich counts the number of times a 1 bit is adjacent to another 1 bit. For example:\n\nAdjBC(011101101) = 3<br>\nAdjBC(111101101) = 4<br>\nAdjBC(010101010) = 0<br>\n\nWrite a program which takes as input integers n and k and returns the number of bit strings x of n bits (out of 2n) that satisfy AdjBC(x) = k. For example, for 5 bit strings, there are 6 ways of getting\nAdjBC(x) = 2:\n\n11100, 01110, 00111, 10111, 11101, 11011\n\n#### Input\nThe first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. Each data set is a single line that contains the data set number, followed by a space, followed by a decimal integer giving the number (n) of bits in the bit strings, followed by a single space, followed by a decimal integer (k) giving the desired adjacent bit count. The number of bits (n) will not be greater than 100 and the parameters n and k will be chosen so that the result will fit in a signed 32-bit integer.\n#### Output\nFor each data set there is one line of output. It contains the data set number followed by a single space, followed by the number of n-bit strings with adjacent bit count equal to k\n#### Sample Input\n```\n10\n1 5 2\n2 20 8\n3 30 17\n4 40 24\n5 50 37\n6 60 52\n7 70 59\n8 80 73\n9 90 84\n10 100 90\n```\n\n#### Sample Output\n```\n1 6\n2 63426\n3 1861225\n4 168212501\n5 44874764\n6 160916\n7 22937308\n8 99167\n9 15476\n10 23076518\n```\n',10000,32768,'0',6,96,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('697','Convex Hull of Lattice Points','',10000,32768,'0',6,97,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('698','Interior Points of Lattice Polygons','',10000,32768,'0',6,98,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('699','Theta Puzzle','',10000,32768,'0',6,99,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('7','Reform direction','\n#### Description\nAlec is playing a new computer game recently. It is a virtual-life game. In this virtual-life game , it lets you create your own characters, objects, and houses through actual 3D modeling. Guess what, Alec build a road system in the game, it connects all the cities in the game. Just like in the real world, some roads are biconnected but some are not. \n\nIn the virtual-life game, one of the most interesting thing is, you can do anything you want, even it is unreasonable. Alec is going to do something like that. He wants to change all the biconnected roads to one-way roads, and make sure no one can go back to the original city.\n\nNow, Alec is asking your help, find a solution to accomplish the unreasonable plan.\n\n#### Input\nThe first number $$$T(1\\leq T \\leq 100)$$$ means how many test cases will followed.\n\nFor each test case, the first number $$$N(1\\leq N \\leq 50)$$$ indicate how may cities are there in the virtual-life game, then $$$N*N\\,$$$ 0-1 matrix show up in the next $$$N\\,$$$ lines. When the $$$j\\,$$$th element in $$$i\\,$$$th line of the matrix is \'1\', means you can travel from $$$i\\,$$$th city to $$$j\\,$$$th city. Otherwise, \'0\' means you can not do it. When there is a road from $$$i\\,$$$th city to $$$j\\,$$$th city and a road from $$$j\\,$$$th city to $$$i\\,$$$th city then we said there is a biconnected road between $$$i\\,$$$th city and $$$j\\,$$$th city.\n\n#### Output\nOutput $$$N+2\\,$$$ lines, if the test case can be solved. Or, output 2 lines only.\n\nThe first line will be how many cities, if there is a solution. Or, output \'-1\'.\n\nFor the solvable test case, the next $$$N\\,$$$ lines will be a $$$N*N\\,$$$ 0-1 matrix, as a solution after reform the direction of two-way roads. If more than one solution, anyone will be accepted.\n\nThe last lines will be an blank line.\n\n#### Sample Input\n```\n2\n\n4\n0100\n0010\n1001\n0010\n\n3\n010\n001\n000\n```\n\n#### Sample Output\n```\n-1\n\n3\n010\n001\n000\n```\n',1000,5120,'0',0,6,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('70','Elections','#### Description\nThe Class A of Computer Sciences 2003\'s holds an election to elect 3 classmates as the class monitor. The procedure for this election is the following. Some classmates in Class A are listed as candidates. On the day of the election, all classmates of Class A is allowed to vote for exactly one of the candidates. Finally all the votes are counted and the top three candidates are deemed elected.\n\nSuppose there are 5 candidates {1,2,3,4,5}, 10 classmates in the Class A and the votes cast are as follows:\n\n{| align=\"center\" cellspacing=\"0\" border=\"1\"\n|\'\'\'Voter\'\'\'|||\'\'\'Vote\'\'\'\n|-\n|1 || 2\n|-\n|2 || 5\n|-\n|3 || 4\n|-\n|4 || 4\n|-\n|5 || 3\n|-\n|6 || 1\n|-\n|7 || 2\n|-\n|8 || 1\n|-\n|9 || 1\n|-\n|10 || 2\n|}\n\n\nThen, candidates 1, 2 (with 3 votes each) and 4 (with 2 votes) are elected.\n\nYou are given the number of candidates and voters and the list of votes. Your task to determine the candidate finishing third. You may assume that the votes are cast in such a way that there is never a tie between the second and third best candidates or between the third and fourth best candidates. \n\n#### Input\nThe input will contains multiple test cases. The first line of the input is a single integer $$$T (1 \\leq T \\leq 100)$$$ which is the number of test cases. T test cases follow.\n\nThe first line of each test case consists of two integers $$$C (3 \\leq C \\leq 10,000)$$$ and $$$N(3 \\leq N \\leq 100,000)$$$, where C is the number of candidates and N is the number of voters. The next N lines, lines $$$2,\\cdots, N+1$$$, provide information on the votes. Line $$$i+1, 1 \\leq i \\leq N$$$, contains a single integer $$$V_i, 1 \\leq V_i \\leq C$$$, indicating the choice of voter.\n\n#### Output\nFor each input test case, your program must output a single integer, indicating the identity of the candidate finishing third., in a single line.\n\n#### Sample Input\n```\n2\n\n5 10\n2\n5\n4\n4\n3\n1\n2\n1\n1\n2\n\n5 10\n2\n5\n4\n4\n3\n1\n2\n1\n1\n2\n```\n\n#### Sample Output\n```\n4\n4\n```\n',10000,32768,'0',0,69,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('700','Fish','#### Description\n\nJohn is going on a fishing trip. He has h hours available (1 <= h <= 16), and there are n lakes in the area (2 <= n <= 125) all reachable along a single, one-way road. John starts at lake 1, but he can finish at any lake he wants. He can only travel from one lake to the next one, but he does not have to stop at any lake unless he wishes to. For each i = 1,...,n - 1, the number of 5-minute intervals it takes to travel from lake i to lake i + 1 is denoted ti (0 < ti <=192). For example, t3 = 4 means that it takes 20 minutes to travel from lake 3 to lake 4. \n\nTo help plan his fishing trip, John has gathered some information about the lakes. For each lake i, the number of fish expected to be caught in the initial 5 minutes, denoted fi( fi >= 0 ), is known. Each 5 minutes of fishing decreases the number of fish expected to be caught in the next 5-minute interval by a constant rate of di (di >= 0). If the number of fish expected to be caught in an interval is less than or equal to di , there will be no more fish left in the lake in the next interval. To simplify the planning, John assumes that no one else will be fishing at the lakes to affect the number of fish he expects to catch. \n\nWrite a program to help John plan his fishing trip to maximize the number of fish expected to be caught. The number of minutes spent at each lake must be a multiple of 5.\n\n#### Input\n\nThe first line of input contains T, the number of test cases. \n\nFor each test case, The first line contains two integers h and n. h is the hours John have. n is the number of lakes.\n\nThen the following n lines describe. Each line contains two integers fi and di, which descriped above.\n\nThe line contains (n-1) integers, the ith number means the distance between the (i-1)th lake to the ith lake.\n\n#### Output\n\nFor each test case, just output the maximal number of fish John can get on a single line.\n\n#### Sample Input\n```\n2\n1 3\n2 0\n5 1\n1 3\n1 2 \n1 3\n15 2\n7 6\n11 4\n2 0\n```\n\n#### Sample Output\n```\n28\n88\n```\n',10000,32768,'0',7,0,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('701','Color Me Less','#### Description\nA color reduction is a mapping from a set of discrete colors to a smaller one. The solution to this problem requires that you perform just such a mapping in a standard twenty-four bit RGB color space. The input consists of a target set of sixteen RGB color values, and a collection of arbitrary RGB colors to be mapped to their closest color in the target set. For our purposes, an RGB color is defined as an ordered triple (R,G,B) where each value of the triple is an integer from 0 to 255. The distance between two colors is defined as the Euclidean distance between two three-dimensional points. That is, given two colors (R1,G1,B1) and (R2,G2,B2), their distance D is given by the equation\n+ D= sqrt((r2-r1)^2+(g2-g1)^2+(b2-b1)^2)\n#### Input\nThe input file is a list of RGB colors, one color per line, specified as three integers from 0 to 255 delimited by a single space. The first sixteen colors form the target set of colors to which the remaining colors will be mapped. The input is terminated by a line containing three –1 values.\n#### Output\nFor each color to be mapped, output the color and its nearest color from the target set.\n#### Sample Input\n```\n0 0 0\n255 255 255\n0 0 1\n1 1 1\n128 0 0\n0 128 0\n128 128 0\n0 0 128\n126 168 9\n35 86 34\n133 41 193\n128 0 128\n0 128 128\n128 128 128\n255 0 0\n0 1 0\n0 0 0\n255 255 255\n253 254 255\n77 79 134\n81 218 0\n-1 –1 -1\n```\n\n#### Sample Output\n```\n(0,0,0) maps to (0,0,0)\n(255,255,255) maps to (255,255,255)\n(253,254,255) maps to (255,255,255)\n(77,79,134) maps to (128,128,128)\n(81,218,0) maps to (126,168,9)\n```\n',100000,32767,'0',7,1,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('702','Ballot','#### Description\nBefore the 2009 elections at the European Parliament, Bill and Ted have asked their friends to make guesses about the outcome of the ballot. Now, the results have been published, so Bill and Ted want to check who was right. But checking the results of their many friends would take a very long time, and they need the evaluation to be done by a computer. Since they are not so good at programming, they ask you for help.\n#### Input\nThe data provided by Bill and Ted has the following format: The first line consists of the number p of parties followed by the number g of guesses (with 1 ≤ p ≤ 50 and 1 ≤ g ≤ 10000). Then follow p lines, each line consisting of a unique party name of length ≤ 20 (only containing letters a-z, A-Z and digits 0-9) and the achieved vote percentage of this party with one digit after the decimal point. After the parties follow g lines, each consisting of a guess. A guess has the form P1 + P2 + ... + Pk COMP n, where P1 to Pk are party names, COMP is one of the comparison operators <, >, <=, >= or = and n is an integer between 0 and 100, inclusively. Each party name occurs at most once in each guess. \n#### Output\nFor each guess, sum up the vote percentages of the parties and compare them with the specified integer n. Then, print a line stating whether the guess was correct. See the sample output for details. \n#### Sample Input\n```\n6 5\nCDU 30.7\nSPD 20.8\nGruene 12.1\nFDP 11.0\nDIELINKE 7.5\nCSU 7.2\nFDP > 11\nCDU + SPD < 50\nSPD + CSU >= 28\nFDP + SPD + CDU <= 42\nCDU + FDP + SPD + DIELINKE = 70\n```\n\n#### Sample Output\n```\nGuess #1 was incorrect.\nGuess #2 was incorrect.\nGuess #3 was correct.\nGuess #4 was incorrect.\nGuess #5 was correct.\n```',100000,32767,'0',7,2,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('703','Scrabble','#### Description\nThe game of Scrabble is played with tiles. A tile either has a single letter written on it, or it is blank. In the latter case, the tile may be used to represent a letter of your choice. On your turn, you arrange the tiles to form a word. Each tile may be used at most once, but not all tiles need to be used. Given several Scrabble tiles and a dictionary,\ndetermine how many words in the dictionary can be formed using the given Scrabble\ntiles.\n#### Input\nThe input test file will contain multiple test cases. In each test case, the first line contains a positive integer n <= 1000 indicating the number of words in the dictionary. The following n lines each contain a single string with between 1 and 7 uppercase letters, representing a word in the dictionary. No word will appear in the dictionary twice. The next line contains a single string giving the tiles you have available. It will contain only capital letters, representing tiles with that letter on it, and underscores, representing blank tiles. The string will contain between 1 and 7 characters, possibly including duplicate tiles. The end-of-file is marked by a test case with n = 0 and should not be processed. \n#### Output\nFor each test case, write a single line with the number of dictionary words that can be spelled with the given Scrabble \ntiles. \n#### Sample Input\n```\n5\nPROGRAM\nCONTEST\nPIZZA\nZA\nPITA\n_PIZA\n3\nBANANAS\nCARROTS\nFIGS\nA__AA__\n0\n```\n\n#### Sample Output\n```\n3\n2\n```\n\n#### Hint\n﻿In the first test case, PIZZA, ZA and PITA can be spelled as PIZ A, ZA and PI A. There are not enough letters 	 \nto spell PROGRAM or CONTEST. In the second test case, BANANAS and FIGS can be spelled as A A A and . 	 \nOn the other hand, CARROTS would require 6 blanks in addition to the A. 	 \n',100000,32767,'0',7,3,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('704','Octal Fractions','#### Description\nFractions in octal (base 8) notation can be expressed exactly in decimal notation. For example, 0.75 in octal is 0.963125 (7/8 + 5/64) in decimal. All octal numbers of n digits to the right of the octal point can be expressed in no more than 3n decimal digits to the right of the decimal point. \nWrite a program to convert octal numerals between 0 and 1, inclusive, into equivalent\ndecimal numerals. The input to your program will consist of octal numbers, one per line, to be converted. \n\n#### Input\nEach input number has the form 0.d1d2d3 ... dk, where the di are octal digits (0..7). There is no limit on k. \n\n#### Output\nYour output will consist of a sequence of lines of the form 0.d1d2d3 ... dk [8] = 0.D1D2D3 ... Dm [10]\nwhere the left side is the input (in octal), and the right hand side the decimal (base 10) equivalent. There must be no trailing zeros, i.e. Dm is not equal to 0.\n\n#### Sample Input\n```\n0.75\n0.0001\n0.01234567\n```\n\n#### Sample Output\n```\n0.75 [8] = 0.953125 [10]\n0.0001 [8] = 0.000244140625 [10]\n0.01234567 [8] = 0.020408093929290771484375 [10]\n```',100000,32767,'0',7,4,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('705','Nim','#### Description\nNim is a 2-player game featuring several piles of stones. Players alternate turns, and on his/her turn, a player’s move consists of removing one or more stones from any single pile. Play ends when all the stones have been removed, at which point the last player to have moved is declared the winner. Given a position in Nim, your task is to determine how many winning moves there are in that position.\n\n#### Background\nA position in Nim is called “losing” if the first player to move from that position would lose if both sides played perfectly. A “winning move,” then, is a move that leaves the game in a losing position. There is a famous theorem that classifies all losing positions. Suppose a Nim position contains n piles having\nk1, k2, . . . , kn stones respectively; in such a position, there are k1 + k2 + . . . + kn possible moves. We write each ki in binary (base 2). Then, the Nim position is losing if and only if, among all the ki’s, there are an even number of 1’s in each digit position. In other words, the Nim position is losing if and only if the xor of\nthe ki’s is 0.\n\n\n#### Example\nConsider the position with three piles given by k1 = 7, k2 = 11, and k3 = 13. In binary, these values are as follows:\n+ 111\n+ 1011\n+ 1101\nThere are an odd number of 1’s among the rightmost digits, so this position is not losing. However, suppose k3 were changed to be 12. Then, there would be exactly two 1’s in each digit position, and thus, the Nim position would become losing. Since a winning move is any move that leaves the game in a losing position, it follows that removing one stone from the third pile is a winning move when k1 = 7, k2 = 11, and k3 = 13.In fact, there are exactly three winning moves from this position: namely removing one stone from any ofthe three piles.\n\n#### Input\nThe input test file will contain multiple test cases, each of which begins with a line indicating the number of piles, 1 <= n <= 1000. On the next line, there are n positive integers, 1 <= ki <= 1, 000, 000, 000, indicating the number of stones in each pile. The end-of-file is marked by a test case with n = 0 and should not be processed. \n#### Output\nFor each test case, write a single line with an integer indicating the number of winning moves from the given Nim position.\n#### Sample Input\n```\n3\n7 11 13\n2\n1000000000 1000000000\n0\n```\n\n#### Sample Output\n```\n3\n0\n```\n',100000,32767,'0',7,5,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('706','Dark roads','#### Description\nEconomic times these days are tough, even in Byteland. To reduce the operating costs, the government of Byteland has decided to optimize the road lighting. Till now every road was illuminated all night long, which costs 1 Bytelandian Dollar per meter and day. To save money, they decided to no longer illuminate every road, but to switch off the road lighting of some streets. To make sure that the inhabitants of Byteland still feel safe, they want to optimize the lighting in such a way, that after darkening some streets at night, there will still be at least one illuminated path from every junction in Byteland to every other junction. \nWhat is the maximum daily amount of money the government of Byteland can save, without making their inhabitants feel unsafe? \n#### Input\nThe input file contains several test cases. Each test case starts with two numbers m and n, the number of junctions in Byteland and the number of roads in Byteland, respectively. Input is terminated by m=n=0. Otherwise, 1 ≤ m ≤ 200000 and m-1 ≤ n ≤ 200000. Then follow n integer triples x, y, z specifying that there will be a bidirectional road between x and y with length z meters (0 ≤ x, y < m and x ≠ y). The graph specified by each test case is connected. The total length of all roads in each test case is less than 2^31. \n#### Output\nFor each test case print one line containing the maximum daily amount the government can save. \n#### Sample Input\n```\n7 11\n0 1 7\n0 3 5\n1 2 8\n1 3 9\n1 4 7\n2 4 5\n3 4 15\n3 5 6\n4 5 8\n4 6 9\n5 6 11\n0 0\n```\n\n#### Sample Output\n```\n51\n```\n',100000,32767,'0',7,6,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('707','A Knight\'s Journey','#### Description\n[[File:H_1.jpg]]\n\nThe knight is getting bored of seeing the same black and white squares again and again and has decided to make a journey \naround the world. Whenever a knight moves, it is two squares in one direction and one square perpendicular to this. The world of a knight is the chessboard he is living on. Our knight lives on a chessboard that has a smaller area than a regular 8 * 8 board, but it is still rectangular. Can you help this adventurous knight to make travel plans? \n\n#### Task\nFind a path such that the knight visits every square once. The knight can start and end on any square of the board.\n\n#### Input\nThe input begins with a positive integer n in the first line. The following lines contain n test cases. Each test case consists of a single line with two positive integers p and q, such that 1 <= p * q <= 26. This represents a p * q chessboard, where p describes how many different square numbers 1, . . . , p exist, q describes how many different square letters exist. These are the first q letters of the Latin alphabet: A, . . .\n#### Output\nThe output for every scenario begins with a line containing \"Scenario #i:\", where i is the number of the scenario starting at 1. Then print a single line containing the lexicographically first path that visits all squares of the chessboard with knight moves followed by an empty line. The path should be given on a single line by concatenating the names of the visited squares. Each square name consists of a capital letter followed by a number. \nIf no such path exist, you should output impossible on a single line.\n\n#### Sample Input\n```\n3\n1 1\n2 3\n4 3\n```\n\n#### Sample Output\n```\nScenario #1:\nA1\n\nScenario #2:\nimpossible\n\nScenario #3:\nA1B3C1A2B4C2A3B1C3A4B2C4\n```\n\n',100000,32767,'0',7,7,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('708','Another lottery','#### Description\nEven in times of an economic crisis, people in Byteland still like to participate in lotteries. With a bit of luck, they might get rid of all their sorrows and become rich. \nThe most popular lottery in Byteland consists of m rounds. In each round, everyone can purchase as many tickets as he wishes, and among all tickets sold in this round, one ticket is chosen randomly, each one with the same probability. The owner of that ticket wins the prize money of this round. Since people in Byteland like powers of 2, the prize money for the winner of round i amounts to 2^i Bytelandian Dollars. \nCan you determine for each participant in the lottery the probability that he will win more money than anybody else?\n\n#### Input\nThe input consists of several test cases. Each test case starts with a line containing two integers n and m, the number of participants in the lottery and the number of rounds in the lottery. You may assume that 1 ≤ n ≤ 10000 and 1 ≤ m ≤ 30. \nThe following n lines contain the description of the tickets bought by the participant. The ith such line contains m non-negative integers c1, ..., cm, where cj (1 ≤ j ≤ m) is the amount of tickets of round j bought by partipant i. The total number of tickets sold in each round is between 1 and 10^9. \nThe input ends with a line containing 2 zeros. \n\n#### Output\nFor each test case, print n lines of output, where line i contains the probability as a reduced fraction that participant i wins the most money. See the sample output for details. \n#### Sample Input\n```\n5 4\n3 1 2 3\n3 1 2 4\n3 1 3 5\n4 4 4 0\n5 5 0 0\n1 1\n1\n0 0\n```\n\n#### Sample Output\n```\n1 / 4\n1 / 3\n5 / 12\n0 / 1\n0 / 1\n1 / 1\n```\n\n',100000,32767,'0',7,8,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('709','Equal Total Scores','#### Description\nTaro and Hanako have numbers of cards in their hands. Each of the cards has a score on it. Taro and Hanako wish to make the total scores of their cards equal by exchanging one card in one\'s hand with one card in the other\'s hand. Which of the cards should be exchanged with which? \nNote that they have to exchange their cards even if they already have cards of the same total score. \n#### Input\nThe input consists of a number of datasets. Each dataset is formatted as follows. \n+ n m\n+ s1 \n+ s2 \n+ ...\n+ sn \n+ sn+1 \n+ sn+2 \n+ ...\n+ sn+m \nThe first line of a dataset contains two numbers n and m delimited by a space, where n is the number of cards that Taro has and m is the number of cards that Hanako has. The subsequent n+m lines list the score for each of the cards, one score per line. The first n scores (from s1 up to sn) are the scores of Taro\'s cards and the remaining m scores (from sn+1 up to sn+m) are Hanako\'s. \nThe numbers n and m are positive integers no greater than 100. Each score is a non-negative integer no greater than 100. \nThe end of the input is indicated by a line containing two zeros delimited by a single space.\n\n#### Output\n\nFor each dataset, output a single line containing two numbers delimited by a single space, where the first number is the score of the card Taro gives to Hanako and the second number is the score of the card Hanako gives to Taro. If there is more than one way to exchange a pair of cards that makes the total scores equal, output a pair of scores whose sum is the smallest. In case no exchange can make the total scores equal, output a single line containing solely -1. The output must not contain any superfluous characters that do not conform to the format. \n\n#### Sample Input\n```\n2 2\n1\n5\n3\n7\n6 5\n3\n9\n5\n2\n3\n3\n12\n2\n7\n3\n5\n4 5\n10\n0\n3\n8\n1\n9\n6\n0\n6\n2 3\n1\n1\n2\n2\n2\n0 0\n```\n\n#### Sample Output\n```\n1 3\n3 5\n-1\n-1\n```\n\n\n',10000,65536,'0',7,9,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('71','Locked Boxes','#### Description\nPoseidon has N boxes with lock. What\'s inside the box? (hum..., think by yourself) Each box can either be opened with its corresponding key or smashed. Poseidon has put the keys in some of the boxes. He remembers which key has been placed in which box. Poseidon wants to access to all of the boxes. However, he wants to destroy as few of them as possible. Please write a Program to help Poseidon to determine how many boxes have to be smashed.\n\n#### Input\nThe input will contains multiple test cases. The first line of the input is a single integer $$$T (1 \\leq T \\leq 30)$$$ which is the number of test cases. T test cases follow.\n\nEach test case contains a single integer $$$N (1 \\leq N \\leq 1,000,000)$$$ - this is the number of boxes owned by Poseidon. The boxes (as well as their corresponding keys) are numbered from 1 to N. Next, there are N lines: the i+1st line contains a single integer - the number of the box which the ith key has been placed in.\n\n#### Output\nFor each input test case, you are to output a single integer - the minimal number of boxes to be smashed in order to access to all of the boxes.\n\n#### Sample Input\n```\n2\n\n4\n2\n1\n2\n4\n\n4\n2\n1\n2\n4\n```\n\n#### Sample Output\n```\n2\n2\n```\n',10000,32768,'0',0,70,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('710','Calendar Game','#### Description\nAdam and Eve enter this year’s ACM International Collegiate Programming Contest. Last night, they played the Calendar Game, in celebration of this contest. This game consists of the dates from January 1, 1900 to November 4, 2001, the contest day. The game starts by randomly choosing a date from this interval. Then, the players, Adam and Eve, make moves in their turn with Adam moving first: Adam, Eve, Adam, Eve, etc. There is only one rule for moves and it is simple: from a current date, a player in his/her turn can move either to the next calendar date or the same day of the next month. When the next month does not have the same day, the player moves only to the next calendar date. For example, from December 19, 1924, you can move either to December  20,  1924,  the  next  calendar  date,  or  January  19,  1925,  the  same  day  of  the  next month.  From January 31 2001, however, you can move only to February 1, 2001, because February 31, 2001 is invalid.  \nA player wins the game when he/she exactly reaches the date of November 4, 2001.  If a player moves to a date after November 4, 2001, he/she looses the game. \n \nWrite a program that decides whether, given an initial date, Adam, the first mover, has a winning strategy. \n \nFor this game, you need to identify leap years, where February has 29 days. In the Gregorian calendar, leap years occur in years exactly divisible by four. So, 1993, 1994, and 1995 are not leap years, while 1992 and \n1996 are leap years. Additionally, the years ending with 00 are leap years only if they are divisible by 400. So, 1700, 1800, 1900, 2100, and 2200 are not leap years, while 1600, 2000, and 2400 are leap years.\n#### Input\nThe input consists of T test cases. The number of test cases (T ) is given in the first line of the input file. Each test case is written in a line and corresponds  to an  initial date. The  three  integers  in a  line, YYYY MM DD, represent  the  date  of  the DD-th  day  of  MM-th month  in  the  year  of  YYYY. Remember that initial dates are randomly chosen from the interval between January 1, 1900 and November 4, 2001. \n#### Output\nPrint exactly one line for each test case. The line should contain the answer “YES” or “NO” to the question of whether Adam has a winning strategy against Eve. Since we have T test cases, your program should output \ntotally T lines of “YES” or “NO”. \n#### Sample Input\n```\n3 \n2001 11 3 \n2001 11 2 \n2001 10 3 \n```\n\n#### Sample Output\n```\nYES \nNO \nNO \n```\n',10000,65536,'0',7,10,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('711','Split Windows','#### Description\nThe Dotty Software Company makes software that is displayed on inexpensive text based terminals.  One application for this system has a main window that can be subdivided into further subwindows. Your task is to take a description of the screen layout after a sequence of window splits and draw the minimum sized window grid that is consistent with the description. \nIn this problem we will concentrate on the boundaries of windows, so all the characters inside of windows will be left blank.  Each window that is not further subdivided has a label.  Each label is a distinct uppercase letter.  For a text terminal the boundaries of windows must be drawn with characters, chosen as follows:  A capital letter label is placed in the upper left-hand corner of each undivided window.  Asterisks,\'*\', appear in corners of windows where there is not a label. Dashes, \'-\', appear on upper and lower boundaries where there are not corners. Vertical bars, \'|\', appear on side boundaries where there are not corners. \nFor example, the sequence of splits below would generate Window 1:  Initially there could be an application window labeled M, that is split next into left and right subwindows, adding label R, and the left subwindow is split into top and bottom subwindows, adding the label C. \n[[File:V2c1.gif]]\n\nFor each pattern of splits there is a binary tree of characters that can describe it.  The window splitting and tree structures are described together, building up from the simplest cases. \n+ 1.	A window may be an undivided rectangle.  Such a window has a capital letter as label.  The tree for the window contains just the label. \n+ 2.	A window may either be split into left and right subwindows or into top and bottom subwindows, and the corresponding trees have as root the boundary character for the split: a vertical line \'|\' or a horizontal dash \'-\' respectively.  The root has left and right subtrees corresponding to the top and bottom or left and right subwindows respectively. \nTree 1, above, and Trees 2-4, below, would be consistent with Windows 1-4.  Note that Tree 4 contains Trees 2 and 3. \n[[File:V2c2.gif]]\n\n[[File:V2c3.gif]]\n \nThe trees may be more succinctly expressed via a preorder traversal: \n1.	The preorder traversal of a tree with just one node (containing a letter) is that letter. \n2.	The preorder traversal of a tree with a left and a right subtree is the character from the root of the tree (\'-\' or \'|\') followed by the preorder traversal of the left subtree, and then the preorder traversal of the right subtree. \nThe preorder traversals for Trees 1 through 4 are \n   |-MCR    -|-ABC-D|E-FG   -P-|Q|RST    |-|-ABC-D|E-FG-P-|Q|RST\nEach undivided window must have space for at least one character inside.  Hence each tree of splits will be associated with a minimum window size.  Windows 1-4 are minimum sized windows for Trees 1-4.  Each window illustrates the fact that even in a minimum sized window, not all undivided windows contain only one character. \nConsider Tree 4 and Window 4.  The main window is split into a left window with Tree 2 and right window with Tree 3. The left window is like Window 2, but the right window is not just like Window 3.  The heights of left and right subwindows must match, so the right window must be stretched. \nThe stretching rule depends on a definition of the size of windows.  For dimension calculations it is easiest to imagine that a window contains its interior and a half character wide boundary on all sides, so the total dimensions of a window are one more than the dimensions of the interior.   Hence the minimum dimensions of a window are 2 by 2, since a window must contain one character inside, and we add one for the boundary.  This definition also means that the sum of the widths of left and right subwindows is the width of their enclosing window.  The sum of the heights of top and bottom subwindows is the height of their enclosing window. \nThe right window in Window 4 must be stretched to match the height 10 of the left window.  The right window is split into a top with tree P having minimum height 2 and a bottom with tree -|Q|RST having minimum height 4.  The rule for the dimensions in the stretched window is that the heights of the subwindows expand in proportion to their minimum heights, if possible.  Some symbols may help here:  Let D = 10 be the height of the combined stretched window.  We want to determine D1 and D2, the stretched heights of the top and bottom subwindow.  Call the corresponding minimum dimensions d = 6, d1 = 2, and d2 = 4.  If the window were expanded from a total height d to D in proportion, we would have D1 = d1*(D/d) = 2*(10/6) = 3.333...and D2 = d2*(D/d) = 6.666....   Since the results are not integers we increase D1 to 4 and decrease D2 to 6. \nThere is a similar calculation for the bottom window with tree -|Q|RST.  It is further subdivided into a top with tree |Q|RS and a bottom with tree T, each having minimum height 2 = d1 = d2.  The heights need to add up to D = 6, so they are increased proportionally to D1 = D2 = 2*(6/4) = 3 (exact integers). \nThe final dimensions of an enclosing window are always determined before the final dimensions of its subwindows.  In this example only heights needed to be apportioned.  If all horizontal and vertical splits were interchanged in this example, producing a tree  -|-|ABC|D-E|FG|P|-Q-RST, then widths would be apportioned correspondingly, as shown in the third part of the sample output below.  If the proportion calculations do not work out to integers, it is always the top or left subwindow whose dimension is increased to the next integer. \n\n#### Input\nThe first line of input contains one integer, which is the total number of preorder traversals describing window structures.  This line is followed by one line for each preorder traversal.  Each preorder traversal will contain appropriate dividers \'|\' and \'-\' and from 1 to 26 uppercase letters. \n#### Output\nFor each preorder traversal, print the number of the preorder traversal on one line followed by the minimum sized window grid that the traversal could represent.  Contrary to the general contest output conventions, there may be more than one consecutive blank in this output, but the other general rules for contest output are followed.  The total number of rows or columns in output grids will be no more than 53. \n#### Sample Input\n```\n3\n|-MCR\n|-|-ABC-D|E-FG-P-|Q|RST\n-|-|ABC|D-E|FG|P|-Q-RST\n```\n\n#### Sample Output\n```\n1\nM-R-*\n| | |\nC-* |\n| | |\n+ -+ -+ \n2\nA-C-P-----*\n| | |     |\nB-* |     |\n| | |     |\nD-*-Q-R-S-*\n|   | | | |\nE-F-* | | |\n| | T-*-*-*\n| G-*     |\n| | |     |\n+ -+ -+ -----+ \n3\nA-B-D-E---*\n| | | |   |\nC-*-* F-G-*\n|   | | | |\nP---Q-*T*-*\n|   |  |  |\n|   R--*  |\n|   |  |  |\n|   S--*  |\n|   |  |  |\n+ ---+ --+ --+ \n```\n',10000,65536,'0',7,11,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('712','How can I satisfy thee? Let me count the ways...','#### Description\nThree-valued logic is a logic system that has, in addition to \"true\" and \"false\", \"unknown\" as a valid value. In the following, logical values \"false\", \"unknown\" and \"true\" are represented by 0, 1 and 2 respectively. \nLet \"-\" be a unary operator (i.e. a symbol representing one argument function) and let both \"*\" and \"+\" be binary operators (i.e. symbols representing two argument functions). These operators represent negation (NOT), conjunction (AND) and disjunction (OR) respectively. These operators in three-valued logic can be defined in Table C-1. \nTable C-1: Truth tables of three-valued logic operators \n```\n+   -X		          (X+ Y)		              (X+Y)\n```\n[[File:V2D1.jpg]]				\n \n	 \n	 \n\nLet P, Q and R be variables ranging over three-valued logic values. For a given formula, you are asked to answer the number of triples (P,Q,R) that satisfy the formula, that is, those which make the value of the given formula 2. A formula is one of the following form (X and Y represent formulas). \n 	Constants: 0, 1 or 2 \n 	Variables: P, Q or R \n 	Negations: -X \n 	Conjunctions: (X*Y) \n 	Disjunctions: (X+Y) \nNote that conjunctions and disjunctions of two formulas are always parenthesized. \nFor example, when formula (P*Q) is given as an input, the value of this formula is 2 when and only when (P,Q,R) is (2,2,0), (2,2,1) or (2,2,2). Therefore, you should output 3. \n#### Input\nThe input consists of one or more lines. Each line contains a formula. A formula is a string which consists of 0, 1, 2, P, Q, R, -, *, +, (, ). Other characters such as spaces are not contained. The grammar of formulas is given by the following BNF. \n<formula> ::= 0 | 1 | 2 | P | Q | R |\n              -<formula> | (<formula>*<formula>) | (<formula>+<formula>)\nAll the formulas obey this syntax and thus you do not have to care about grammatical errors. Input lines never exceed 80 characters. \nFinally, a line which contains only a \".\" (period) comes, indicating the end of the input. \n#### Output\nYou should answer the number (in decimal) of triples (P,Q,R) that make the value of the given formula 2. One line containing the number should be output for each of the formulas, and no other characters should be output. \n#### Sample Input\n```\n(P*Q)\n(--R+(P*Q))\n(P*-P)\n2\n1\n(-1+(((---P+Q)*(--Q+---R))*(-R+-P)))\n.\n```\n\n#### Sample Output\n```\n3\n11\n0\n27\n0\n7\n```\n',10000,65536,'0',7,12,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('713','Twirling Robot','#### Description\nLet\'s play a game using a robot on a rectangular board covered with a square mesh (Figure D-1). The robot is initially set at the start square in the northwest corner facing the east direction. The goal of this game is to lead the robot to the goal square in the southeast corner. \n\n[[File:V2e1.jpg]]\n\nFigure D-1: Example of a board \nThe robot can execute the following five types of commands. \n\"Straight\": \nKeep the current direction of the robot, and move forward to the next square. \n\"Right\": \nTurn right with 90 degrees from the current direction, and move forward to the next square. \n\"Back\": \nTurn to the reverse direction, and move forward to the next square. \n\"Left\": \nTurn left with 90 degrees from the current direction, and move forward to the next square. \n\"Halt\": \nStop at the current square to finish the game. \nEach square has one of these commands assigned as shown in Figure D-2. The robot executes the command assigned to the square where it resides, unless the player gives another command to be executed instead. Each time the player gives an explicit command, the player has to pay the cost that depends on the command type. \n \n[[File:V2e2.jpg]]\n\nFigure D-2: Example of commands assigned to squares \nThe robot can visit the same square several times during a game. The player loses the game when the robot goes out of the board or it executes a \"Halt\" command before arriving at the goal square. \nYour task is to write a program that calculates the minimum cost to lead the robot from the start square to the goal one. \n\n#### Input\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows. \n+ w h\n+ s(1,1) ... s(1,w)\n+ s(2,1) ... s(2,w)\n+ ...\n+ s(h,1) ... s(h,w)\n+ c0 c1 c2 c3 \nThe integers h and w are the numbers of rows and columns of the board, respectively. You may assume 2 ≤ h ≤ 30 and 2 ≤ w ≤ 30. Each of the following h lines consists of w numbers delimited by a space. The number s(i, j) represents the command assigned to the square in the i-th row and the j-th column as follows. \n+  	0: \"Straight\" \n+  	1: \"Right\" \n+  	2: \"Back\" \n+  	3: \"Left\" \n+  	4: \"Halt\" \nYou can assume that a \"Halt\" command is assigned to the goal square. Note that \"Halt\" commands may be assigned to other squares, too. \nThe last line of a dataset contains four integers c0, c1, c2, and c3, delimited by a space, indicating the costs that the player has to pay when the player gives \"Straight\", \"Right\", \"Back\", and \"Left\" commands respectively. The player cannot give \"Halt\" commands. You can assume that all the values of c0, c1, c2, and c3 are between 1 and 9, inclusive. \n\n#### Output\nFor each dataset, print a line only having a decimal integer indicating the minimum cost required to lead the robot to the goal. No other characters should be on the output line. \n#### Sample Input\n```\n8 3\n0 0 0 0 0 0 0 1\n2 3 0 1 4 0 0 1\n3 3 0 0 0 0 0 4\n9 9 1 9\n4 4\n3 3 4 0\n1 2 4 4\n1 1 1 0\n0 2 4 4\n8 7 2 1\n2 8\n2 2\n4 1\n0 4\n1 3\n1 0\n2 1\n0 3\n1 4\n1 9 3 1\n0 0\n```\n\n#### Sample Output\n```\n1\n11\n6\n```\n\n',10000,65536,'0',7,13,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('714','Modular multiplication of polynomials','#### Description\nConsider polynomials whose coefficients are 0 and 1. Addition of two polynomials is achieved by \'adding\' the coefficients for the corresponding powers in the polynomials. The addition of coefficients is performed by addition modulo 2, i.e., (0 + 0) mod 2 = 0, (0 + 1) mod 2 = 1, (1 + 0) mod 2 = 1, and (1 + 1) mod 2 = 0. Hence, it is the same as the exclusive-or operation. \n+  (x6 + x4 + x2 + x + 1) + (x7 + x + 1) = x7 + x6 + x4 + x2\nSubtraction of two polynomials is done similarly. Since subtraction of coefficients is performed by subtraction modulo 2 which is also the exclusive-or operation, subtraction of polynomials is identical to addition of polynomials. \n+    (x6 + x4 + x2 + x + 1) - (x7 + x + 1) = x7 + x6 + x4 + x2\nMultiplication of two polynomials is done in the usual way (of course, addition of coefficients is performed by addition modulo 2). \n+  (x6 + x4 + x2 + x + 1) (x7 + x + 1) = x13 + x11 + x9 + x8 + x6 + x5 + x4 + x3 + 1  \nMultiplication of two polynomials f(x) and g(x) modulo a polynomial h(x) is the remainder of f(x) ,g(x) divided by h(x). \n+  (x6 + x4 + x2 + x + 1) (x7 + x + 1) modulo (x8 + x4 + x3 + x + 1) =  x7 + x6 + 1 \nThe largest exponent of a polynomial is called its degree. For example, the degree of \n+   x7 + x6 + 1 is 7. \nGiven three polynomials f(x), g(x), and h(x), you are to write a program that computes f(x)g(x) modulo h(x). We assume that the degrees of both f(x) and g(x) are less than the degree of h(x). The degree of a polynomial is less than 1000. Since coefficients of a  polynomial are 0 or 1, a polynomial can be represented by d+1 and  a  bit  string of length d+1, where d is the degree of the polynomial and the bit string represents the  coefficients of the polynomial. \nFor example, x7 + x6 + 1 can be represented by \n+  8 1 1 0 0 0 0 0 1. \n\n#### Input\nThe input consists of T test cases.  The number of test cases (T) is given in the first line of the input file. Each test  case  consists  of  three  lines  that  contain  three  polynomials  f(x),  g(x),  and  h(x),  one  per  line.  Each polynomial is represented as described above.  \n#### Output\nThe output should contain the polynomial f(x)g(x) modulo h(x), one per  line. \n#### Sample Input\n```\n2 \n7 1 0 1 0 1 1 1 \n8 1 0 0 0 0 0 1 1 \n9 1 0 0 0 1 1 0 1 1 \n10 1 1 0 1 0 0 1 0 0 1 \n12 1 1 0 1 0 0 1 1 0 0 1 0 \n15 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1 \n```\n\n#### Sample Output\n```\n8 1 1 0 0 0 0 0 1 \n14 1 1 0 1 1 0 0 1 1 1 0 1 0 0\n```\n',10000,65536,'0',7,14,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('715','Roll-A-Big-Ball','#### Description\nACM University holds its sports day in every July. The \"Roll-A-Big-Ball\" is the highlight of the day. In the game, players roll a ball on a straight course drawn on the ground. There are rectangular parallelepiped blocks on the ground as obstacles, which are fixed on the ground. During the game, the ball may not collide with any blocks. The bottom point of the ball may not leave the course. \nTo have more fun, the university wants to use the largest possible ball for the game. You must write a program that finds the largest radius of the ball that can reach the goal without colliding any obstacle block. \nThe ball is a perfect sphere, and the ground is a plane. Each block is a rectangular parallelepiped. The four edges of its bottom rectangle are on the ground, and parallel to either x- or y-axes. The course is given as a line segment from a start point to an end point. The ball starts with its bottom point touching the start point, and goals when its bottom point touches the end point. \nThe positions of the ball and a block can be like in Figure E-1 (a) and (b). \n[[File:V2g1.jpg]]\n+ Figure E-1: Possible positions of the ball and a block \n#### Input\nThe input consists of a number of datasets. Each dataset is formatted as follows. \n+ N\n+ sx sy ex ey\n+ minx1 miny1 maxx1 maxy1 h1\n+ minx2 miny2 maxx2 maxy2 h2\n+ ...\n+ minxN minyN maxxN maxyN hN\nA dataset begins with a line with an integer N, the number of blocks (1 ≤ N ≤ 50). The next line consists of four integers, delimited by a space, indicating the start point (sx, sy) and the end point (ex, ey). The following N lines give the placement of blocks. Each line, representing a block, consists of five integers delimited by a space. These integers indicate the two vertices (minx, miny), (maxx, maxy) of the bottom surface and the height h of the block. The integers sx, sy, ex, ey, minx, miny, maxx, maxy and h satisfy the following conditions. \n+ -10000 ≤ sx, sy, ex, ey ≤ 10000\n+ -10000 ≤ minxi < maxxi ≤ 10000\n+ -10000 ≤ minyi < maxyi ≤ 10000\n+ 1 ≤ hi ≤ 1000\nThe last dataset is followed by a line with a single zero in it. \n\n#### Output\nFor each dataset, output a separate line containing the largest radius. You may assume that the largest radius never exceeds 1000 for each dataset. If there are any blocks on the course line, the largest radius is defined to be zero. The value may contain an error less than or equal to 0.001. You may print any number of digits after the decimal point. \n#### Sample Input\n```\n2\n-40 -40 100 30\n-100 -100 -50 -30 1\n30 -70 90 -30 10\n2\n-4 -4 10 3\n-10 -10 -5 -3 1\n3 -7 9 -3 1\n2\n-40 -40 100 30\n-100 -100 -50 -30 3\n30 -70 90 -30 10\n2\n-400 -400 1000 300\n-800 -800 -500 -300 7\n300 -700 900 -300 20\n3\n20 70 150 70\n0 0 50 50 4\n40 100 60 120 10\n130 80 200 200 1\n3\n20 70 150 70\n0 0 50 50 10\n40 100 60 120 10\n130 80 200 200 3\n1\n2 4 8 8\n0 0 10 10 1\n1\n1 4 9 9\n2 2 7 7 1\n0\n```\n\n#### Sample Output\n```\n30\n1\n18.16666666667\n717.7857142857\n50\n18.16666666667\n0\n0\n```\n\n',10000,65536,'0',7,15,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('716','Parencodings','#### Description\nLet S = s1 s2 … s2n  be a well-formed string of parentheses. S can be encoded in two different ways:\n+ 	By an integer sequence P = p1 p2 … pn where pi is the number of left parentheses before the ith right parenthesis in S (P-sequence).\n+ 	By an integer sequence W = w1 w2 … wn where for each right parenthesis, say a in S, we associate an integer which is the number of right parentheses counting from the matched left parenthesis of a up to a. (W-sequence).\n\nFollowing is an example of the above encodings:\n\n+ 	S		(((()()())))\n+ 	P-sequence	    4 5 6666\n+ 	W-sequence	    1 1 1456\n\nWrite a program to convert P-sequence of a well-formed string to the W-sequence of the same string.\n\n#### Input\nThe first line of the input file contains a single integer t (1<=t<=10), the number of test cases, followed by the input data for each test case. The first line of each test case is an integer n (1<=n<=20), and the second line is the P-sequence of a well-formed string. It contains n positive integers, separated with blanks, representing the P-sequence.\n#### Output\nThe output file consists of exactly t lines corresponding to test cases. For each test case, the output line should contain n integers describing the W-sequence of the string corresponding to its given P-sequence.\n#### Sample Input\n```\n2\n6\n4 5 6 6 6 6\n9 \n4 6 6 6 6 8 9 9 9\n```\n\n#### Sample Output\n```\n1 1 1 4 5 6\n1 1 2 4 5 1 1 3 9\n```\n',10000,65536,'0',7,16,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('717','Forever A+B','#### Description\n\nPlease calculate A+B (1<=A,B<=10).\n\nIs it too easy.Ok,we make it a litter harder.\n\nIn the problem,all the input and output are in English with lowercase letter.\n\n#### Input\n\nthe first line of input contain T(1<=T<=10), the number of test cases.\n\nthere is only line for each test case. It contains two integer A,B (1<=A,B<=10)\n\nPlease remember that T,A and B are string.\n\n#### Output\n\nFor each test case, output the sum of A and B. \n\n#### Sample Input\n```\ntwo\none two\ntwo three\n```\n\n#### Sample Output\n```\nthree\nfive\n```\n\n#### Hint\n```\n1.one        2.two       3.three     4.four\n5.five       6.six       7.seven     8.eight\n9.nine       10.ten      11.eleven   12.twelve\n13.thirteen  14.fourteen 15.fifteen  16.sixteen\n17.seventeen 18.eighteen 19.nineteen 20.twenty\n```',1000,32767,'0',7,17,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('718','ON or OFF','#### Description\n\nThere is man named \"Red Bean\" for switching on-off light in Shenzhen University. He switches on-off the lights in a corridor. Every bulb has its own toggle switch. That is, if it is pressed then the bulb turns on. Another press will turn it off. To save power consumption (or may be he is mad or something else) he does a peculiar thing. If in a corridor there is \'n\' bulbs, he walks along the corridor back and forth ,\'n\' times ,and in i\'th walk he toggles only the switches whose serial number is divisable by i. He does not press any switch when coming back to his initial position. A i\'th walk is defined as going down the corridor (while doing the peculiar thing) and coming back again.\n\n\nSuppose n is 4. \n\nThe first walk, Red Bean toggles all the switches whose serial number is divisable by 1, i.e:all the state of bulb is change. Now the last bulb is ON.\n\nThe second walk, Red Bean toggles bulb No.2 and bulb No.4, now the last bulb is OFF.\n\nThe third walk, the last bulb is still OFF.\n\nThe fourth walk, bulb No.4 is toggled. Now the last bulb is ON.\n\nThe final answer is ON for this case.\n\n+ Now you have to determine what is the final condition of the last bulb. Is it on or off?\n\n#### Input\nThe input will be an integer indicating the n\'th bulb in a corridor. Which is less then or equals 32767. A zero indicates the end of input. You should not process this input.\n#### Output\nOutput \"ON\" if the light is on, otherwise \"OFF\" , in a single line.\n#### Sample Input\n```\n3\n16\n6241\n8191\n0\n```\n\n#### Sample Output\n```\nOFF\nON\nON\nOFF\n```\n',1000,32767,'0',7,18,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('719','World Cup','#### Description\nThe World Cup held once every four year has just been over! No matter you are a football fan or not, football has played a crucial role in everybody’s life and given a lot of joy and excitement to us during the past month. A wild football fan as he is , Torres is so delighted to hear that his favorite football team—Spain has won the World Cup Trophy. As he review the 64 game played during the 2010 FIFA World Cup South Africa, Torres felt it’s hard to believe that there’s so many unexpected matches happened and a lot of traditional strong team ,such as Italy ,even failed to get into the elimination game! Suddenly, Torres doubts that whether the data analyzed by FIFA (Federation of International Football Associations) are correct or not! He wants to analyze the data again by himself, but it upsets him a lot because there is so many data. Luckily, he is reminded that you are an excellent programmer, and he is eager to know the ranking list of the game! So he asks for your aid!                                                         \n\nGiven the games played by the players, your task is to show us the ranking list according to following rules:\n\n+ (1)	If a team wins a game, they will get 3 points.\n+ (2)	If a team loses a game, they won’t have any point in this match.\n+ (3)	If there is a tie, both sides of the game will obtain 1 point.\n```\nPs: It’s guaranteed that no teams will have the same points!\n```\n\n#### Input\nThe first line contains N(1<=N<=32),which indicates the number of teams ,followed by N lines consisted of the names of the teams! \n\nThe N+2 th line contains M(1<=M<=20), followed by M lines consisted of the result of this match, eg. Spain Vs Netherlands 1:0 ,which means Spain beat Netherlands and will get 3 points!\n\n#### Output\nOutput the descending ranking list according to the matches that have been played as the format displayed in the Sample output! \n\nPlease don’t print any unwanted space, or you may get WA or PE!\n\n#### Sample Input\n```\n4\nIvoire\nPortugal\nBrazil\nKorea\n6\nIvoire Vs Portugal 0:0\nBrazil Vs Korea 2:1\nBrazil Vs Ivoire 3:1\nPortugal Vs Korea 7:0\nPortugal Vs Brazil 0:0\nKorea Vs Ivoire 0:3\n```\n\n#### Sample Output\n```\n1 Brazil 7\n2 Portugal 5 \n3 Ivoire 4\n4 Korea 0\n```\n',1000,32767,'0',7,19,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('72','Bridging signals','#### Description\n\'Oh no, they\'ve done it again\', cries the chief designer at the Waferland chip factory. Once more the\nrouting designers have screwed up completely, making the signals on the chip connecting the ports\nof two functional blocks cross each other all over the place. At this late stage of the process, it is too\nexpensive to redo the routing. Instead, the engineers have to bridge the signals, using the third\ndimension, so that no two signals cross. However, bridging is a complicated operation, and thus it\nis desirable to bridge as few signals as possible. The call for a computer program that finds the\nmaximum number of signals which may be connected on the silicon surface without crossing each\nother, is imminent. Bearing in mind that there may be thousands of signal ports at the boundary of a\nfunctional block, the problem asks quite a lot of the programmer. Are you up to the task?\n\n[[Image:A71.jpg|center]]\n\nA typical situation is schematically depicted in figure 1. The ports of the two functional blocks are\nnumbered from 1 to p, from top to bottom. The signal mapping is described by a permutation of the\nnumbers 1 to p in the form of a list of p unique numbers in the range 1 to p, in which the i:th\nnumber specifies which port on the right side should be connected to the i:th port on the left side.\nTwo signals cross if and only if the straight lines connecting the two ports of each pair do.\n\n#### Input\nOn the first line of the input, there is a single positive integer n, telling the number of test scenarios\nto follow. Each test scenario begins with a line containing a single positive integer p<40000, the\nnumber of ports on the two functional blocks. Then follow p lines, describing the signal mapping:\nOn the i:th line is the port number of the block on the right side which should be connected to the\ni:th port of the block on the left side.\n\n#### Output\nFor each test scenario, output one line containing the maximum number of signals which may be\nrouted on the silicon surface without crossing each other.\n\n#### Sample Input\n```\n4\n6\n4 2 6 3 1 5\n10\n2 3 4 5 6 7 8 9 10 1\n8\n8 7 6 5 4 3 2 1\n9\n5 8 9 2 3 1 7 4 6\n```\n\n#### Sample Output\n```\n3\n9\n1\n4\n```\n',10000,32768,'0',0,71,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('720','Number of Repeating Digits','#### Description\n\nWrite a program that will accept a fraction of the form N/D, where N is the numerator and D is the denominator and print the number of repeating digits that the decimal representation has. \n\nFor example\n```\n2/2    =  1.0                                     has 0 repeating digits\n3/8    =  0.375                                   has 0 repeating digits\n1/3    =  0.33333333....                          has 1 repeating digits\n22/5   =  4.4                                     has 0 repeating digits\n1/7    =  0.142857142857142857.....               has 6 repeating digits\n45/56  =  0.803571428571428571428......           has 6 repeating digits\n```\n#### Input\n\nThe first line of input is the number of test case.\nThen for each test case, there will be a single line with two space separated integers, N and D, 1 <= N,D <= 100.\n \n#### Output\n\nFor each test case, you should print the number of repeating digits. \n\n#### Sample Input\n```\n2\n45 56\n22 5\n```\n\n#### Sample Output\n```\n6\n0\n```\n',1000,32767,'0',7,20,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('721','Joseph','#### Description\nThe Joseph\'s problem is notoriously known. For those who are not familiar with the original problem: from among n people, numbered 1, 2, . . ., n, standing in circle every m-th is going to be executed and only the life of the last remaining person will be saved. Joseph was smart enough to choose the position of the last remaining person, thus saving his life to give us the message about the incident. For example when n = 6 and m = 5 then the people will be executed in the order 5, 4, 6, 2, 3 and 1 will be saved.\nNow,i will give you the value of n and m ,and you should tell me the safe position.\n\n#### Input\nThe input file consists of separate lines containing two integer n and m. The last line in the input file contains 0 0 . You can suppose that 2 <= n <= 20, 1 <= m <= n \n#### Output\nThe output file will consist of separate lines containing m corresponding to k in the input file. \n#### Sample Input\n```\n4 4\n6 5\n0 0\n```\n\n#### Sample Output\n```\n2\n1\n```\n',1000,32767,'0',7,21,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('722','ON or OFF Again','#### Description\nThere is man named \"Red Bean\" for switching on-off light in Shenzhen University. He switches on-off the lights in a corridor. Every bulb has its own toggle switch. That is, if it is pressed then the bulb turns on. Another press will turn it off. To save power consumption (or may be he is mad or something else) he does a peculiar thing. If in a corridor there is \'n\' bulbs, he walks along the corridor back and forth ,\'n\' times ,and in i\'th walk he toggles only the switches whose serial number is divisable by i. He does not press any switch when coming back to his initial position. A i\'th walk is defined as going down the corridor (while doing the peculiar thing) and coming back again. \n\nSuppose n is 4. \n\nThe first walk, Red Bean toggles all the switches whose serial number is divisable by 1, i.e:all the state of bulb is change. Now the last bulb is ON. \n\nThe second walk, Red Bean toggles bulb No.2 and bulb No.4, now the last bulb is OFF. \n\nThe third walk, the last bulb is still OFF. \n\nThe fourth walk, now the last bulb is ON. \n\nThe final answer is ON for this case. \n\nNow you have to determine what is the final condition of the last bulb. Is it on or off?\n\n#### Input\nThe input will be an integer indicating the n\'th bulb in a corridor. Which is less then or equals 2^31-1. A zero indicates the end of input. You should not process this input.\n\n#### Output\nOutput \"ON\" if the light is on, otherwise \"OFF\" , in a single line. \n\n#### Sample Input\n```\n3\n16\n6241\n8191\n0\n```\n\n#### Sample Output\n```\nOFF\nON\nON\nOFF\n\n```\n',3000,32767,'0',7,22,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('723','Your Rank is Pure','#### Description\n\nPontius: You know, I like this number 127, I don\'t know why.\nWoland: Well, that is an object so pure. You know the prime numbers.\nPontius: Surely I do. Those are the objects possessed by our ancient masters hundreds of years ago. Oh, yes, why then? 127 is indeed a prime number as I was told.\nWoland: Not... only... that. 127 is the 31st prime number; then, 31 is itself a prime, it is the 11th; and 11 is the 5th; 5 is the 3rd; 3, you know, is the second; and finally 2 is the 1st.\nPontius: Heh, that is indeed... purely prime.\n\nThe game can be played on any subset S of positive integers. A number in S is considered pure with respect to S if, starting from it, you can continue taking its rank in S, and get a number that is also in S, until in finite steps you hit the number 1, which is not in S. \n\nWhen n is given, in how many ways you can pick S, a subset of {2, 3, ..., n}, so that n is pure(therefor n has to be in the subset) , with respect to S? The answer might be a big number, you need to output it modulo 100003.\n\n#### Input\n\nThe first line of the input gives the number of test cases, T,T ≤ 100. T lines follow. Each contains a single integer n, 2 ≤ n ≤ 500. \n\n#### Output\n\nFor each test case, output one line containing \"Case #x: y\", where x is the case number (starting from 1) and y is the answer as described above.\n\n#### Sample Input\n```\n2\n5\n6\n```\n\n#### Sample Output\n```\nCase #1: 5\nCase #2: 8\n```\n',2000,32768,'0',7,23,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('724','Shopping','#### Description\n\nYou have just moved into a new apartment and have a long list of items you need to buy. Unfortunately, to buy this many items requires going to many different stores. You would like to minimize the amount of driving necessary to buy all the items you need. \nYour city is organized as a set of intersections connected by roads. Your house and every store is located at some intersection. Your task is to find the shortest route that begins at your house, visits all the stores that you need to shop at, and returns to your house. \n\n#### Input\n\nThe first line of input contains a single integer, the number of test cases to follow. Each test case begins with a line containing two integers N and M, the number of intersections and roads in the city, respectively. Each of these integers is between 1 and 100000, inclusive. The intersections are numbered from 0 to N-1. Your house is at the intersection numbered 0. M lines follow, each containing three integers X, Y, and D, indicating that the intersections X and Y are connected by a bidirectional road of length D. The following line contains a single integer S, the number of stores you need to visit, which is between 1 and 10, inclusive. The subsequent S lines each contain one integer indicating the intersection at which each store is located. It is possible to reach all of the stores from your house. \n\n#### Output\n\nFor each test case, output a line containing a single integer, the length of the shortest possible shopping trip from your house, visiting all the stores, and returning to your house. \n\n#### Sample Input\n```\n1\n4 6\n0 1 1\n1 2 1\n2 3 1\n3 0 1\n0 2 5\n1 3 5\n3\n1\n2\n3\n```\n\n#### Sample Output\n```\n4\n```\n',3000,32767,'0',7,24,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('725','Stack Machine','#### Description\nA mathematician observes one person get on a bus. Then two people get off the bus. The mathematician says: \"If one more person gets on the bus, the bus will be empty.\" \nA stack machine is a special kind of bus. It only has doors at the front, and it is so narrow that the people on the bus cannot move past each other. Of the people on the bus, the person who got on the bus last must be the first to get off. \n\nThe bus travels in a city in which roads connect intersections, and all the roads are unidirectional. Along each road, a person either gets on or off the bus. \n\nThe mathematician does not know the identity of the bus passengers, but can estimate their height. Note that there may be multiple people with the same height. \n\nYour task is to plan the route of the bus. The bus must be empty at the beginning and end of the route. Along the route, it must pick up and drop off the people corresponding to the roads it travels on. The height of the person that gets on or off the bus is fixed for each road. \n\n#### Input\nThe first line of input contains a single integer, the number of test cases to follow. Each test case begins with a line containing three integers N, M, Q, the number of intersections and roads in the city and the number of queries, respectively. The number of intersections is between 1 and 100, inclusive. The number of roads and the number of queries are each between 1 and 100000, inclusive. Intersections in the city are numbered from 1 to N. The first line of each test case is followed by M lines describing the roads. Each of these lines contains three integers X, Y, and Z. These integers indicate that a road exists from intersection X to intersection Y, and that when the bus travels on this road, a person who is Z centimetres tall gets on the bus, if Z is positive, or a person who is -Z centimetres tall gets off the bus, if Z is negative. For example, Z=170 indicates that a 170 cm tall person gets on the bus, and Z=-170 indicates that a 170 cm tall person gets off the bus. Each person is at least 40 cm and at most 220 cm tall. The lines describing the roads are followed by Q more lines, each describing a query. A line describing a query contains two integers, the beginning and ending intersections of the bus route. \n#### Output\nFor each query, output a line containing a single integer giving the length of the shortest non-empty path that the bus can take from the beginning to the end of the route. The input data will be such that this length is no more than 10^9. If there is no such path, output a line containing the word impossible. \n#### Sample Input\n```\n1\n2 2 4\n1 2 100\n2 1 -100\n1 1\n2 2\n1 2\n2 1\n```\n\n#### Sample Output\n```\n2\nimpossible\nimpossible\nimpossible\n```\n',3000,32767,'0',7,25,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('726','Saruman’s army','#### Description\nSaruman the White must lead his army along a straight path from Isengard to Helm’s Deep. To keep track\nof his forces, Saruman distributes seeing stones, known as palantirs, among the troops. Each palantir has a\nmaximum eﬀective range of R units, and must be carried by some troop in the army (i.e., palantirs are not\nallowed to “free ﬂoat” in mid-air). Help Saruman take control of Middle Earth by determining the minimum\nnumber of palantirs needed for Saruman to ensure that each of his minions is within R units of some palantir.\n\n#### Input\n\nThe input test ﬁle will contain multiple cases. Each test case begins with a single line containing an integer\nR, the maximum eﬀective range of all palantirs (where 0 ≤ R ≤ 1000), and an integer n, the number of\ntroops in Saruman’s army (where 1 ≤ n ≤ 1000). The next line contains n integers, indicating the positions\nx1, . . . , xn of each troop (where 0 ≤ xi ≤ 1000). The end-of-ﬁle is marked by a test case with R = n = −1.\n\n#### Output\n\nFor each test case, print a single integer indicating the minimum number of palantirs needed.\n\n#### Sample Input\n```\n0 3\n10 20 20\n10 7\n70 30 1 7 15 20 50\n-1 -1\n```\n\n#### Sample Output\n```\n2\n4\n```\n\n#### Hint\nIn the ﬁrst test case, Saruman may place a palantir at positions 10 and 20. Here, note that a single palantir\nwith range 0 can cover both of the troops at position 20.\nIn the second test case, Saruman can place palantirs at position 7 (covering troops at 1, 7, and 15), position\n20 (covering positions 20 and 30), position 50, and position 70. Here, note that palantirs must be distributed\namong troops and are not allowed to “free ﬂoat.” Thus, Saruman cannot place a palantir at position 60 to\ncover the troops at positions 50 and 70.\n',3000,32767,'0',7,26,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('727','Ideas','#### Description\nA unique feature of ideas is that they are not consumed when used. A good idea can benefit arbitrarily many people without diminishing the value of the idea. An idea can even serve as the basis for creative people to derive even better ideas. Each person relies on a specific set of ideas to build on and create new ideas. \nIn order to realize these benefits, ideas need to be communicated to the people who use them. People have developed an extensive worldwide communication network to satisfy this need. The network is composed of a series of tubes connecting people. The tubes are inhabited by curious creatures called packets which carry ideas from one person to another. In order to avoid collisions between packets, the tubes are all unidirectional. Each person can have zero or more incoming and zero or more outgoing tubes. \n\nAll of the packets start at the same person, and each packet follows the following algorithm: \n\n+ 1.Learn and remember the ideas created by the current person. \n+ 2.If there are no outgoing tubes from the current person, stop executing the algorithm. \n+ 3.Otherwise, choose an arbitrary outgoing tube and use it to travel to a new person. \n+ 4.Tell the new person all of the ideas that he or she needs from other people. \n+ 5.Go back to step 1. \nThe input data is such that it is possible for a packet to reach every person from person 0, and whenever a person P relies on a given idea, every path a packet could have taken to reach P will have visited at least one person who created that idea. It is possible for more than one person to independently create the same idea. \n\nTo ease the strain on each packet, you would like to minimize the number of ideas that it remembers at any given time by directing the packet to forget certain ideas in certain tubes. However, in so doing, you must ensure that no matter what path the packet takes, every time it visits a person, the packet knows all of the ideas that the person needs. \n\n\n#### Input\nThe first line of input contains a single integer, the number of test cases to follow. Each test case begins with a line containing three integers N, M, I, the number of people, tubes, and ideas, respectively. Each of these integers is between 1 and one thousand, inclusive. People are numbered from 0 to N-1, ideas from 0 to I-1. All of the packets start at person 0. 2N lines follow, two lines for each person in order from 0 to N-1. Each of these lines contains some number of integers separated by spaces. For each person, the first line lists the ideas that the person needs, and the second line lists the ideas that the person creates. A given idea will never appear on both lines for the same person. M more lines follow, each describing a tube using two integers: the source and destination person of the tube. \n#### Output\nFor each test case, output M lines, each corresponding to one of the tubes in the same order as in the input. For each tube, output a list of integers: the minimal set of ideas the packet must have in its memory when travelling through the given tube. Output the ideas in each set in increasing order. \n#### Sample Input\n```\n1\n3 3 2\n\n1\n1\n0\n0\n1\n0 1\n1 2\n2 1\n```\n\n#### Sample Output\n```\n1\n0\n1\n```',3000,32767,'0',7,27,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('728','Fibonacci','#### Description\nIn the Fibonacci integer sequence, F0 = 0, F1 = 1, and Fn = Fn−1 + Fn−2 for n ≥ 2. For example, the ﬁrst\nten terms of the Fibonacci sequence are:\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, . . .\nAn alternative formula1 for the Fibonacci sequence is\n [[File:H28.jpg]]\nGiven an integer n, your goal is to compute the last 4 digits of Fn.\n#### Input\nThe input test ﬁle will contain multiple test cases. Each test case consists of a single line containing n (where\n0 ≤ n ≤ 1,000,000,000). The end-of-ﬁle is denoted by a single line containing the number -1.\n#### Output\nFor each test case, print the last four digits of Fn. If the last four digits of Fn are all zeros, print ‘0’;\notherwise, omit any leading zeros (i.e., print Fn mod 10000).\n#### Sample Input\n```\n0\n9\n999999999\n1000000000\n-1\n```\n\n#### Sample Output\n```\n0\n34\n626\n6875\n```\n\n',3000,32767,'0',7,28,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('729','HST','#### Description\nOn July 1st, Ontario\'s Provincial Sales Tax (PST) was merged with the Federal Goods and Services Tax (GST), creating the Harmonized Sales Tax (HST). This changed the rate of tax Ontarians pay on various items. \nDalton would like to calculate how this change will affect his personal monthly budget. \n\n#### Input\nThe first line of input contains a single integer, the number of test cases to follow. Each test case begins with a line containing two integers N, M, the number of categories of items and the number of purchases Dalton makes each month, respectively. Each of these integers is between 1 and 100000, inclusive. N lines follow, each describing a category of item. Each of these lines contains a category name, which is a string of at most 30 uppercase letters, followed by three percentages, giving the PST, GST, and HST rate on that category. Each percentage is a number with up to two digits after the decimal point, and each percentage is followed by the % symbol. Each percentage is at least 0% and at most 100%. These lines are followed by M more lines, each describing one of Dalton\'s purchases. Each of these lines contains a category name and a price in dollars and cents and prefixed by the $ symbol. Each such line indicates the amount of pre-tax money that Dalton spends on an item in the specified category. The amount of each tax to be paid on an item is rounded to the nearest cent; if the tax amount is exactly half a cent more than a whole number of cents, it is rounded up to the nearest greater whole number of cents. \n#### Output\nFor each test case, output the difference, in dollars and cents, between the total HST payable and the total sum of PST and GST payable on Dalton\'s monthly purchases. If the HST is more than the PST+GST, output a positive amount. If the HST is less than the PST+GST, output a negative amount. \n#### Sample Input\n```\n1\n1 1\ngas 0% 5% 13%\ngas $100.00\n\n```\n\n#### Sample Output\n```\n8.00\n```\n',3000,32767,'0',7,29,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('73','Vase collection','#### Description\nMr Cheng is a collector of old Chinese porcelain, more specifically late $$$15^{th}$$$ century Feng dynasty\nvases. The art of vase-making at this time followed very strict artistic rules. There was a limited\nnumber of accepted styles, each defined by its shape and decoration. More specifically, there were\n36 vase shapes and 36 different patterns of decoration – in all 1296 different styles.\n\nFor a collector, the obvious goal is to own a sample of each of the 1296 styles. Mr Cheng however,\nlike so many other collectors, could never afford a complete collection, and instead concentrates on\nsome shapes and some decorations. As symmetry between shape and decoration was one of the\nmain aestheathical paradigms of the Feng dynasty, Mr Cheng wants to have a full collection of all\ncombinations of k shapes and k decorations, for as large a k as possible. However, he has discovered\nthat determining this k for a given collection is not always trivial. This means that his collection\nmight actually be better than he thinks. Can you help him?\n\n#### Input\nOn the first line of the input, there is a single positive integer n, telling the number of test scenarios\nto follow. Each test scenario begins with a line containing a single positive integer $$$m \\leq 100$$$ , the\nnumber of vases in the collection. Then follow m lines, one per vase, each with a pair of numbers,$$$ s_i$$$\nand $$$d_i$$$, separated by a single space, where $$$s_i ( 0 < s_i \\leq 36  )$$$ indicates the shape of Mr Cheng\'s i:th\nvase, and $$$d_i ( 0 < d_i \\leq 36)$$$ indicates its decoration.\n\n#### Output\nFor each test scenario, output one line containing the maximum k, such that there are k shapes and k\ndecorations for which Mr Cheng\'s collection contains all k*k combined styles.\n\n#### Sample Input\n```\n2\n5\n11 13\n23 5\n17 36\n11 5\n23 13\n2\n23 15\n15 23\n```\n\n#### Sample Output\n```\n2\n1\n```\n\n',10000,32768,'0',0,72,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('730','Tic-Tac-Toe','#### Description\nIn the game of tic-tac-toe, two players take turns marking squares of an initially empty 3×3 grid with either\nX’s or O’s. The ﬁrst player always marks squares using X’s, whereas the second player always marks squares\nusing O’s. If at any point during the game either player manages to mark three consecutive squares in a\nrow, column, or diagonal with his/her symbol, the game terminates.\nGiven a board conﬁguration, your goal is to determine whether the board conﬁguration represents the\npossible ﬁnal state of a valid tic-tac-toe game.\n#### Input\nThe input test ﬁle will contain multiple cases. Each test case consists of a single line containing 9 characters,\nwhich represent the 9 squares of a tic-tac-toe grid, given one row at a time. Each character on the line will\neither be ‘X’, ‘O’ (the letter O), or ‘.’ (indicating an unﬁlled square). The end-of-ﬁle is marked by a single\nline containing the word “end”.\n#### Output\nFor each input test case, write a single line containing either the word “valid” or “invalid” indicating whether\nthe given board conﬁguration is the ﬁnal state of some possible tic-tac-toe game.\n#### Sample Input\n```\nXXXOO.XXX\nXOXOXOXOX\nOXOXOXOXO\nXXOOOXXOX\nXO.OX...X\n.XXX.XOOO\nX.OO..X..\nOOXXXOOXO\nend\n```\n\n#### Sample Output\n```\ninvalid\nvalid\ninvalid\nvalid\nvalid\ninvalid\ninvalid\ninvalid\n```',3000,32767,'0',7,30,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('731','Tunnelling the Earth','#### Description\nThere are different methods of transporting people from place to place: cars, bikes, boats, trains, planes, etc. For very long distances, people generally fly in a plane. But this has the disadvantage that the plane must fly around the curved surface of the earth. A distance travelled would be shorter if the traveller followed a straight line from one point to the other through a tunnel through the earth. \nFor example, travelling from Waterloo to Cairo requires a distance of 9293521 metres following the great circle route around the earth, but only 8491188 metres following the straight line through the earth. \nFor this problem, assume that the earth is a perfect sphere with radius of 6371009 metres. \n#### Input\nThe first line of input contains a single integer, the number of test cases to follow. Each test case is one line containing four floating point numbers: the latitude and longitude of the origin of the trip, followed by the latitude and longitude of the destination of the trip. All of these measurements are in degrees. Positive numbers indicate North latitude and East longitude, while negative numbers indicate South latitude and West longitude. \n#### Output\nFor each test case, output a line containing a single integer, the difference in the distance between the two points following the great circle route around the surface of the earth and following the straight line through the earth, in metres. Round the difference of the distances to the nearest integer number of metres. \n#### Sample Input\n```\n1\n43.466667 -80.516667 30.058056 31.228889\n```\n\n#### Sample Output\n```\n802333\n```\n',3000,32767,'0',7,31,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('732','Crypto Columns','#### Description\nThe columnar encryption scheme scrambles the letters in a message (or plaintext) using a keyword\nas illustrated in the following example: Suppose BATBOY is the keyword and our message is MEET ME\nBY THE OLD OAK TREE. Since the keyword has 6 letters, we write the message (ignoring spacing and\npunctuation) in a grid with 6 columns, padding with random extra letters as needed:\n```\nMEETME\nBYTHEO\nLDOAKT\nREENTH\n```\nHere, we\'ve padded the message with NTH. Now the message is printed out by columns, but the columns\nare printed in the order determined by the letters in the keyword. Since A is the letter of the keyword\nthat comes first in the alphabet, column 2 is printed first. The next letter, B, occurs twice. In the\ncase of a tie like this we print the columns leftmost first, so we print column 1, then column 4. This\ncontinues, printing the remaining columns in order 5, 3 and fnally 6. So, the order the columns of the\ngrid are printed would be 2, 1, 4, 5, 3, 6, in this case. This output is called the ciphertext, which in this\nexample would be EYDEMBLRTHANMEKTETOEEOTH. Your job will be to recover the plaintext when given\nthe keyword and the ciphertext.\n\n#### Input\nThere will be multiple input sets. Each set will be 2 input lines. The first input line will hold the\nkeyword, which will be no longer than 10 characters and will consist of all uppercase letters. The\nsecond line will be the ciphertext, which will be no longer than 100 characters and will consist of all\nuppercase letters. The keyword THEEND indicates end of input, in which case there will be no ciphertext\nto follow.\n\n#### Output\nFor each input set, output one line that contains the plaintext (with any characters that were added for\npadding). This line should contain no spacing and should be all uppercase letters.\n#### Sample Input\n```\nBATBOY\nEYDEMBLRTHANMEKTETOEEOTH\nHUMDING\nEIAAHEBXOIFWEHRXONNAALRSUMNREDEXCTLFTVEXPEDARTAXNAARYIEX\nTHEEND\n```\n\n#### Sample Output\n```\nMEETMEBYTHEOLDOAKTREENTH\nONCEUPONATIMEINALANDFARFARAWAYTHERELIVEDTHREEBEARSXXXXXX\n```\n',3000,32768,'0',7,32,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('733','morse','#### Description\nMorse code represents characters as variable length sequences of dots and dashes. In practice, characters in a\nmessage are delimited by short pauses. The following table shows the Morse code sequences:\n```\nA .-    H ....  O ---   V ...-\nB -...  I ..    P .--.  W .--\nC -.-.  J .---  Q --.-  X -..-\nD -..   K -.-   R .-.   Y -.--\nE .     L .-..  S ...   Z --..\nF ..-.  M --    T -\nG --.   N -.    U ..-\n```\nNote that four dot-dash combinations are unassigned. For the purposes of this problem we will assign them as\nfollows (these are not the assignments for actual Morse code):\n```\n  underscore ..--            period ---.\n       comma .-.-     question mark ----\n```\nThus, the message “ACM_GREATER_NY_REGION” is encoded as:\n```\n.- -.-. -- ..-- --. .-. . .- - . .-. ..-- -. -.-- ..-- .-. . --. .. --- -.\n```\nM.E. Ohaver proposed an encryption scheme based on mutilating Morse code. Her scheme replaces the pauses\nbetween letters, necessary because Morse is a variable-length encoding that is not prefix-free, with a string that\nidentifies the number of dots and dashes in each. For example, consider the message “.--.-.--”. Without knowing\nwhere the pauses should be, this could be “ACM”, “ANK”, or several other possibilities. If we add length\ninformation, however, “.--.-.--242”, then the code is unabiguous.\nOhaver’s scheme has three steps, the same for encryption and decryption:\n+ 1. Convert the text to Morse code without pauses but with a string of numbers to indicate code lengths\n+ 2. Reverse the string of numbers\n+ 3. Convert the dots and dashes back into to text using the reversed string of numbers as code lengths\nAs an example, consider the encrypted message “AKADTOF_IBOETATUK_IJN”. Converting to Morse code with\na length string yields “.--.-.--..----..-...--..-...---.-.--..--.-..--...----.232313442431121334242”. Reversing the numbers\nand decoding yields the original message “ACM_GREATER_NY_REGION”.\nThis problem requires that you implement Ohaver’s encoding algorithm. \n#### Input\nThe input will consist of several messages\nencoded with Ohaver’s algorithm. The first line of the input is an integer n that specifies the number of test cases.\nThe following n lines contain one message per line. Each message will use only the twenty-six capital letters,\nunderscores, commas, periods, and question marks. Messages will not exceed 100 characters in length.\n#### Output\nFor each message in the input, output the line number starting in column one, a colon, a space, and then the decoded\nmessage. The output format must be adhered to precisely.\n#### Sample Input\n```\n5\nAKADTOF_IBOETATUK_IJN\nPUEL\nQEWOISE.EIVCAEFNRXTBELYTGD.\n?EJHUT.TSMYGW?EJHOT\nDSU.XFNCJEVE.OE_UJDXNO_YHU?VIDWDHPDJIKXZT?E\n```\n\n#### Sample Output\n```\n1: ACM_GREATER_NY_REGION\n2: PERL\n3: QUOTH_THE_RAVEN,_NEVERMORE.\n4: TO_BE_OR_NOT_TO_BE?\n5: THE_QUICK_BROWN_FOX_JUMPS_OVER_THE_LAZY_DOG\n```\n\n#### Hint\nAs presented, this encryption scheme is only trivially secure. In fact it offers no security at all if the algorithm is\nknown to the attacker. The key is the string of numbers needed to decide where the pauses should be inserted to\nrecover the message, but with the method shown here, this information is encoded in and easily recovered from the\nencrypted data. Even should some other method be chosen to scramble the length information in the encoding,\nsecrecy of the algorithm is the real key in this technique. Modifications of Ohaver’s technique do exist in which the\nsecurity is not based on the secrecy of the algorithm.\n\n',3000,32768,'0',7,33,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('734','maxsum','#### Description\nGiven a two-dimensional array of positive and negative integers, a sub-rectangle is any contiguous sub-array of size\n1 × 1 or greater located within the whole array. The sum of a rectangle is the sum of all the elements in that\nrectangle. In this problem the sub-rectangle with the largest sum is referred to as the maximal sub-rectangle.\nAs an example, the maximal sub-rectangle of the array:\n```\n 0 –2 –7  0\n 9  2 –6  2\n-4  1 –4  1\n-1  8  0 –2\n```\nis in the lower left corner:\n```\n 9 2\n-4 1\n-1 8\n```\nand has a sum of 15.\n#### Input\nThe input consists of an N × N array of integers. The input begins with a single positive integer N on a line by itself,\nindicating the size of the square two-dimensional array. This is followed by N ^ 2 integers separated by whitespace\n(spaces and newlines). These are the N ^ 2 integers of the array, presented in row-major order. That is, all numbers in\nthe first row, left to right, then all numbers in the second row, left to right, etc. N may be as large as 100. The\nnumbers in the array will be in the range [-127,127].\n\n#### Output\nOutput the sum of the maximal sub-rectangle.\n#### Sample Input\n```\n4\n0 –2 –7 0\n 9 2 –6 2\n-4 1 –4 1\n–1 8 0 -2\n```\n\n#### Sample Output\n```\n15\n```',3000,32768,'0',7,34,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('735','Jailer','#### Description\n\nA certain prison contains a long hall of n cells, each right next to each other. Each cell has a prisoner in it, and each\ncell is locked.\n\nOne night, the jailer gets bored and decides to play a game. \n\nFor round 1 of the game, he takes a drink of whiskey,and then runs down the hall unlocking each cell. \n\nFor round 2, he takes a drink of whiskey, and then runs down the hall locking every other cell (cells 2, 4, 6, …). \n\nFor round 3, he takes a drink of whiskey, and then runs down the hall. He visits every third cell (cells 3, 6, 9, …). \n\nIf the cell is locked, he unlocks it; if it is unlocked, he locks it. He repeats this for n rounds, takes a final drink, and passes out.Some number of prisoners, possibly zero, realizes that their cells are unlocked and the jailer is incapacitated. They immediately escape.\n\nGiven the number of cells, determine how many prisoners escape jail.\n\n#### Input\nThe first line of input contains a single positive integer. This is the number of lines that follow. Each of the\nfollowing lines contains a single integer between 5 and 100, inclusive, which is the number of cells n.\n#### Output\nFor each line, you must print out the number of prisoners that escape when the prison has n cells.\n#### Sample Input\n```\n2\n5\n100\n```\n\n#### Sample Output\n```\n2\n10\n```\n\n\n',3000,32768,'0',7,35,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('736','Lingo','#### Description\nA new TV game show requires contestants to deduce a five letter word based on hints obtained by guessing other\nfive letter words. The way the game is played is as follows: a secret five letter word is selected by the production\nstaff of the game show. The object of the game is for the contestant to guess the secret word. The first letter of the\nsecret word is revealed. The contestant will then guess a five letter word that may match the secret word. A\ncomputer then provides feedback to the contestant on the accuracy of the guess. Feedback consists of a report\nindicating if any letters in the guessed word are correct and in the same position in the secret word, if any letters in\nthe guessed word are correct but not in the correct position in the secret word, and any letters in the guessed word\nthat do not appear in the secret word.\nAs an example, the production staff chooses the secret word: “HELLO”. The contestant is told the first letter of the\nword is “H”. The contestant then guesses what the word could be, knowing it begins with the letter “H”. Let’s say\nthe contestant guesses the word: “HOLES”. The game show computer would report that the “H” and “L” are in the\nsecret word and in the correct position. In addition, the “O” and “E” are in the secret word, but in the incorrect\nposition, and the “S” is not in the secret word. This is conveyed to the contestant by a single line report:\n```\nHoLe.\n```\nThe upper case letters (“H” and “L”) indicate correct letter and position. The lower case letters (“o” and “e”)\nindicate correct letter, wrong position. The period (“.”) indicates a wrong letter (not in the secret word).\nYou will write a program that evaluates the contestant guesses, and prints out the single line report for each guess.\nIf the contestant guesses the secret word exactly, then the five capital letters of the secret word will be displayed in\nthe report.\n#### Input\nThe input data file consists of datasets for one or more games. A blank line marks the beginning of the next dataset\n(game). The line after the blank line contains the secret word. The remaining lines in the dataset represent the\ncontestant’s guesses; there may be too few or too many guesses than are necessary to guess the secret word. The\nsecret word will contain exactly five upper case letters. The contestant’s guesses, however, have to be checked for\nvalidity: valid guesses consist of exactly five upper case letters. Input is terminated by a dataset with the secret\nword: “LINGO” (that is, game play is stopped at that point, the program terminates, and no further guessing\noccurs).\n#### Output\nEach game’s output should be preceded by a single blank line (except for the terminating case). The first single line\nstatus report should be printed, which consists of the first letter of the secret word, followed by four periods. For\neach guess, print the single line status report for that guess. For an invalid guess, repeat the previous single line\nstatus report. If the guess exactly matches the secret word, that game ends and you should move on to the next one.\nThe contestant may guess a maximum of six times; after the sixth guess, if the contestant did not guess the secret\nword, or you run out of guesses (the contestant gives up) print out the secret word in lower case letters and move on\nto the next game.\n#### Sample Input\n```\n\nHELLO\nHOLES\nHAPPY\nHELMS\nHELLO\nHELPS\n\nPARTY\nPARKS\nPARES\nPARIS\nPONDER\nPATTY\nPUNTS\nPARTY\n\nHELIX\nHeLIX\nHELIX\n\nLINGO\n```\n\n#### Sample Output\n```\nH....\nHoLe.\nH....\nHEL..\nHELLO\n\nP....\nPAR..\nPAR..\nPAR..\nPAR..\nPA.TY\nparty\n\nH....\nH....\nHELIX\n```\n\n\n',3000,32768,'0',7,36,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('737','NumberBase','#### Description\nWrite a program to convert numbers in one base to numbers in a second base. There are 62 different digits:\n```\n{ 0-9,A-Z,a-z }\n```\nHINT: If you make a sequence of base conversions using the output of one conversion as the input to the next, when\nyou get back to the original base, you should get the original number.\n#### Input\nThe first line of input contains a single positive integer. This is the number of lines that follow. Each of the\nfollowing lines will have a (decimal) input base followed by a (decimal) output base followed by a number\nexpressed in the input base. Both the input base and the output base will be in the range from 2 to 62. That is (in\ndecimal) A = 10, B = 11, …, Z = 35, a = 36, b = 37, …, z = 61 (0-9 have their usual meanings).\n#### Output\nThe output of the program should consist of three lines of output for each base conversion performed. The first line\nshould be the input base in decimal followed by a space then the input number (as given expressed in the input\nbase). The second output line should be the output base followed by a space then the input number (as expressed in\nthe output base). The third output line is blank.\n#### Sample Input\n```\n8\n62 2 abcdefghiz\n10 16 1234567890123456789012345678901234567890\n16 35 3A0C92075C0DBF3B8ACBC5F96CE3F0AD2\n35 23 333YMHOUE8JPLT7OX6K9FYCQ8A\n23 49 946B9AA02MI37E3D3MMJ4G7BL2F05\n49 61 1VbDkSIMJL3JjRgAdlUfcaWj\n61 5 dl9MDSWqwHjDnToKcsWE1S\n5 10 42104444441001414401221302402201233340311104212022133030\n```\n\n#### Sample Output\n```\n62 abcdefghiz\n2 1011100000100010111110010010110011111001001100011010010001\n\n10 1234567890123456789012345678901234567890\n16 3A0C92075C0DBF3B8ACBC5F96CE3F0AD2\n\n16 3A0C92075C0DBF3B8ACBC5F96CE3F0AD2\n35 333YMHOUE8JPLT7OX6K9FYCQ8A\n\n35 333YMHOUE8JPLT7OX6K9FYCQ8A\n23 946B9AA02MI37E3D3MMJ4G7BL2F05\n\n23 946B9AA02MI37E3D3MMJ4G7BL2F05\n49 1VbDkSIMJL3JjRgAdlUfcaWj\n\n49 1VbDkSIMJL3JjRgAdlUfcaWj\n61 dl9MDSWqwHjDnToKcsWE1S\n\n61 dl9MDSWqwHjDnToKcsWE1S\n5 42104444441001414401221302402201233340311104212022133030\n\n5 42104444441001414401221302402201233340311104212022133030\n10 1234567890123456789012345678901234567890\n\n```\n',3000,32768,'0',7,37,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('738','Trust groups','#### Description\nThe personnel department of Association of Cookie Monsters (ACM) has noticed that the productivity of various work groups in the company is not as good as it could be. They have interviewed the employees in the affected groups and they have detected the root of the problem: trust (or, rather, the lack thereof). Some employees do not trust the rest of the group, and this is decreasing their motivation and happiness. The personnel department wants to solve this problem, and has decided to reorganize the groups so that they are stable, i.e., they are formed by people who trust each other. They have asked the employees, and they know the people each employee trusts directly. Moreover, if employee A trusts employee B and employee B trusts employee C, then employee A will trust employee C. And obviously, each employee trusts himself. They want to create as few groups as possible to reduce administration overhead (they also do not want to work too hard). \n\nWith this information they have contacted you, and asked you to write a program that finds the minimum number of stable groups that can be created. \n\n#### Input\nThe input consists of several test cases. Each test case begins with a line containing two positive integers P and T ( 1<=P<=1000, 0<=T<=999000) separated by a single space. P lines come next, each containing the name of one person. The names will have the following format: surname, a comma, a space and first name (for example McBride, John or Smith, Peter). Both the surname and the first name will be strings of uppercase or lowercase characters (with no blanks or punctuation marks), with a maximum length of 10 characters. There will not be repetitions in the complete names of the people. After the names there will appear T blocks of 2 lines representing the trust relations between people. Each line of the block will contain the name of a person in the same format as before, and the block will mean that the person in the first line trusts the person in the second line. All people appearing in the confidence relations will have appeared in the previous list of P people. \nThe input will end with the ``phantom\'\' test case `0 0\', which must not be processed.\n\n#### Output\nFor each test case, the output will be a line containing a positive integer representing the minimum number of stable groups of people that can be formed. \n\n\n#### Sample Input\n```\n3 2\nMcBride, John\nSmith, Peter\nBrown, Anna\nBrown, Anna\nSmith, Peter\nSmith, Peter\nBrown, Anna\n3 2\nMcBride, John\nSmith, Peter\nBrown, Anna\nBrown, Anna\nSmith, Peter\nMcBride, John\nSmith, Peter\n0 0\n\n\n```\n\n#### Sample Output\n```\n2\n3\n```\n',5000,32768,'0',7,38,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('739','Fractions, fractions, fractions','#### Description\nFor this problem, we will number the fractions strictly between zero and one precisely as follows:\n\n1.   1/2\n\n2.   1/3\n\n3.   2/3\n\n4.   1/4\n\n5.   2/4\n\n6.   3/4\n\n7.   1/5\n\n8.   2/5\n\n9.   3/5\n\n10.  4/5\n\n11.  1/6\n\n12.  2/6\n\n13.  3/6\n\n14.  4/6\n\nand so on, the \"halves\" first, then the \"thirds,\" the \"fourths,\" and so on. Each fraction appears in all of its equivalent forms (like 2/3, 4/6, 6/9, ...). \n\n\nYour job is to add two fractions given by their positions in this list, giving as your answer the position of their sum in lowest terms. You may assume that the input values will correspond to fractions with denominators less than 100, and you may also assume that their sum will appear in this list.\n\n#### Input\nThe first line of the input will be an integer T(1<=T<100),which represents the number of tests.For each case,there will be two integers on the same line, representing the positions of two fractions in this list.\n#### Output\nFor each case,there should be one integer, the position in this list of the sum of the two fractions in lowest terms.\n#### Sample Input\n```\n2\n2 13\n4 3\n```\n\n#### Sample Output\n```\n15\n66\n```\n',3000,32768,'0',7,39,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('74','Gladiators','#### Description\nIn the TV game show Gladiators, the final competition is to run through a steeplechase course. To\nget some variation, the producer has decided to change the course each week. The course is always\nbuilt out of m obstacles, all of different heights, placed along a straight line. An obstacle consists of\ntwo initially connected platforms which may be separated. Between the two platforms of an\nobstacle, other higher obstacles may be put. Also, obstacles may be put after one another.\n\n[[Image:A73.jpg|center]]\n\nThe producer thinks it is most desirable that the results from different weeks may be compared to\neach other. Therefore, he wants to build courses of similar degree of difficulty.\n\nA proposed measure of difficulty is the number of platforms that are higher than their immediately\npreceeding platform along the course. Moreover, the leftmost (first) platform of the course always\ngive rise to one point since it is located above the floor. E.g. the course to the right in figure 1 has\nfour points of difficulty.\n\nYour mission is to find out how many ways there are to build a course of a given point of difficulty,\nfrom a given number of obstacles.\n\n#### Input\nOn the first line of input is a single positive integer n, telling the number of test scenarios to follow.\nEach test scenario consists of one line containing two non negative integers m and k, where $$$m \\leq 50$$$\nis the number of obstacles, and k is the point of difficulty asked for.\n\n#### Output\nFor each test scenario, output one line containing a single positive integer equal to the number of\ndifferent courses constructable from the m obstacles, amounting to a point of difficulty of exactly k.\nYou may safely assume that the answer is less than $$$10^{100}$$$.\n\n#### Sample Input\n```\n6 \n1 0 \n1 1 \n2 1 \n2 2 \n3 1 \n3 2\n```\n\n#### Sample Output\n```\n0\n1\n1\n2\n1\n8\n```',10000,32768,'0',0,73,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('740','Digital Roots','#### Description\nThe digital root of a positive integer is found by summing the digits of the integer. If the resulting value is a single\ndigit then that digit is the digital root. If the resulting value contains two or more digits, those digits are summed\nand the process is repeated. This is continued as long as necessary to obtain a single digit.\nFor example, consider the positive integer 24. Adding the 2 and the 4 yields a value of 6. Since 6 is a single digit, 6\nis the digital root of 24. Now consider the positive integer 39. Adding the 3 and the 9 yields 12. Since 12 is not a\nsingle digit, the process must be repeated. Adding the 1 and the 2 yeilds 3, a single digit and also the digital root of\n39.\n#### Input\nThe input file will contain a list of positive integers, one per line. The end of the input will be indicated by an\ninteger value of zero.\n\n#### Output\nFor each integer in the input, output its digital root on a separate line of the output.\n#### Sample Input\n```\n24\n39\n0\n```\n\n#### Sample Output\n```\n6\n3\n```\n',3000,32768,'0',7,40,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('741','Rent yachts','#### Description\nZhujiang Yacht Club has set up N station (station 1,station 2,station3,…,station n),in which travelers can rent yachts. Travelers can rent yacht at any station and return it at any stations in the downstream. The rent from station i to station j is r(i ,j),1<=i<j<=n. Given all r(i ,j) information, you are expected to compute the minimum rent required to travel from station 1 to station n by yachts.\n\n#### Input\nThe first line of input will be a number n(n<=200),representing the amount of stations where traveler can rent yacht.Following n,there will be n-1 lines. There will be n-i integers on the ith line of the n-1 lines, and the jth integer of them represents that the rent from station i to station i+j.\n\n#### Output\nOutput the minimum rent required to travel from station 1 to station n by yacht.\n\n#### Sample Input\n```\n3\n5 15\n7\n```\n\n#### Sample Output\n```\n12\n```\n',1000,32768,'0',7,41,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('742','A simple game','#### Description\nThis is a simple game. We will give you a form N*N which is filled with capital letters, like picture 1. Then we will give you some words, you should tell me whether the words appear in the form or not. A word can appear in the form in the following three ways: \n\nFirst, from position i to position j (i<=j) in a column can be a word; \n\nSecond, from position i to position j (i<=j) in a row can be a word; \n\nThird, from position i to position j (i<=j) in a left oblique line can also be a word. \n\nFor example, if we ask you whether the word ACCEPT appears in the form, you can find it in Row 2 from position 2 to 7. The word WRONG is in column 8, from position 1 to 5. The word DATE is in a catercomer which begin in (1,1), from position 1 to 4.\n\n```\nDFDAWEDWFG\nSACCEPTRHK\nSFTHFJGOLE\nWRYEMCANLO\nQETUORTGCF\nENCVPEMDPD\n\nprcture 1\n```\n\nThe position on a left oblique is like (i,j),(i+1,j+1) ...(i+n,j+n).\n\n#### Input\nThe first line of input contains T, the number of test cases. Then there will follow T test cases. Each test case starts with two integers N and Q(1<=N<=20, 1<=Q<=10000) indicating the table has N rows and N columns, Q is the number of questions. Then follow Q lines, for each line there is a word. All letters in the input is capital.\n\n#### Output\nFor each test case, you should print “Case #d” in the first line, d is the case number. Then if the word in the map, you should print “Yes”, else print “No” in a line. See more detail in the sample.\n\n#### Sample Input\n```\n2\n2 2\nIN\nYE\nIN\nER\n10 5\nDFDAWEDWFG\nSACCEPTRHK\nSFTHFJGOLE\nWRYEMCANLO\nQETUORTGCF\nENCVPEMDPD\nDAHJADFKAF\nWERIWRIWER\nASDFADFKJD\nERQCNVCODF\nACCEPT\nYES\nWRONG\nRIGHT\nDATE\n```\n\n#### Sample Output\n```\nCase #1\nYes\nNo\nCase #2\nYes\nNo\nYes\nNo\nYes\n```\n',1000,32767,'0',7,42,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('743','Boy\'s worry','#### Description\n\nLast term, the story of \"love code\" was known by many people. (If you don\'t know, I will not tell you, for it is not too much concerned with this problem.) Since then,many girls long for the method to encode words so that they can express their feelings to the boys. So they turned to the boy for helps.The boy was asked again and again, and he became so weary. Therefore, he wants you to make a program to help the girls encode.\n\n\nHow to encode the word? I will tell you. Suppose the words is(the words is a string): \n```\nILOVEYOUTOO (I Love You Too!)\n```\n\nFirstly, reverse the string \n```\nO O T U O Y E V O L I\n```\n\n\nSecondly，devide the string into two strings according to odd number and even number（first character in the string is odd number）,then we get two string\n```\nodd ：O T O E O I\neven：O U Y V L\n```\nThen after putting them together, odd first，we get \n```\nO T O E O I O U Y V L\n```\n\nThirdly，we use our computer keyboards this time. Our familiar keyboard often arranges letters in the order of \"QWERTY...”. And alphabet is \"ABCDEF...\". \n\nSo we suppose \'A\' to \'Q\', \'B\' to \'W\', \'E\' TO \'T\' ...at last \'Z\' to \'M\'.\n```\nG Z G T G O G X N C S\n```\n\nFourthly, we use the keyboard of cell phone, we will decorate 26 letters on the key 2-9 so that we can use two numbers to get one letter. For example, write \'A\' use the keyboard of cell phone, we should press the key 2 first then press key 1, it\'s 21.write \'E\' we should press the key 3 and key 2.\nThe new code is \n```\n41 94 41 81 41 63 41 92 62 23 74\n```\n\n\nFinally, using Morse code, we can transform the number into the new code. Every \'/\' separates a number, and the string begin with a \'/\' and end with a \'/\'.\n```\n/****-/*----/----*/****-/****-/*----/---**/*----/****-/*----/-****/***--/****-/*----/----*/**---/-****/**---/**---/***--/--***/****-/\n```\n\n#### Input\nThe first line is an integer t ,means the number of test cases. The next t lines, each has a string as the test data. \n(The string won’t be longer than 30 character.) \n\n#### Output\nOutput the final code.\n\n#### Sample Input\n```\n2\nILOVEYOUTOO\nACMICPC\n```\n\n#### Sample Output\n```\n/****-/*----/----*/****-/****-/*----/---**/*----/****-/*----/-****/***--/****-/*----/----*/**---/-****/**---/**---/***--/--***/****-/\n/***--/**---/***--/**---/***--/*----/--***/**---/****-/**---/-****/***--/***--/**---/\n```\n\n#### Hint\n```\nMorse code table (number part)\n\n0 -----  5 *****\n1 *----  6 -****\n2 **---  7 --***\n3 ***--  8 ---**\n4 ****-  9 ----*\n\ncell phone keyboard character table\n2.abc    3.def\n4.ghi    5.jkl\n6.mno    7.pqrs\n8.tuv    9.wxyz\n\ncomputer keyboard order table\n\"QWERTYUIOPASDFGHJKLZXCVBNM\"\nalphabet order\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n```\n',1000,32767,'0',7,43,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('744','Citadel','#### Description\nThere are many pirates in the world, who like attacking citadels and robbing of a large amount of treasure. Pirates always prefer the shortest way to get close to the citadels, although they choose this way at the risk of their lives. The walking speed (S) of the pirates is fixed. As long as the pirates enter the citadel, all the treasure will be lost. In order to protect the citadel, we build many guard towers. The tower can attack the pirates who are R meters away from it, and the attacking power is (P) per second. Here we use the Descartes Coordinate for orientation. Now we assume that we have one pirate with his location (BX, BY), speed (S), power (N). There are several guard towers to protect a citadel located (CX, CY). The number of the towers is (M). Please figure out whether we can succeed in protecting this citadel or not. \n#### Input\nThe first line of input contains T, the number of test cases. Then there will follow T test cases. In each test, the first line contain four integers, BX, BY, S, N, (0<=BX<=BY<=100, 1<=S<=10, 1<=N<=1000) indicating the bandits are in (BX, BY), their speed is S and has N power. The next line contain three integers, CX, CY, M, (0<=CX<=CY<=100, 1<=M<=100) indicating the citadel is in (CX, CY), and has M tower. Then follow M lines, for each line there are four TXi, TYi, Ri, Pi,(0<=TXi<=TYi<=100, 1<=r<=100,0<=Pi<=1000) indicating the ith tower is in (TXi, TYi), and its attack range is Ri, and has Pi power.\n\n#### Output\nFor each test case, if the citadel isn’t attacked, you should print “We can protect the citadel.”, else print “We cannot protect the citadel.” in a line.\n#### Sample Input\n```\n2\n0 0 1 10\n1 1 2\n0 1 1 5\n1 0 1 5\n0 0 1 100\n1 1 2\n0 1 1 5\n1 0 1 5\n```\n\n#### Sample Output\n```\nWe can protect the citadel.\nWe cannot protect the citadel.\n```\n',1000,32767,'0',7,44,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('745','Daffodil','#### Description\n\nLuther and his girl friend have many daffodils, and he numbered them from 0 to n. He must water them and record the water how much water he has water everyday. \n\nBut you know, Luther is a naughty child, he has two way to water the flowers:\n\n1. water i X: water the ith daffodil X milliliter(S) \n\n2. water i j X : water the ith to jth daffodil X milliliter(S) each\n\n\nAnd Luther\'s girl friend will ask him at anytime, and she has two ways, too.\n\n1. ask i : how much water be water in ith daffodils\n\n2. ask i j : which daffodils be watered most between ith to jth daffodils, and you should answer how much water be water in this daffodils \n\n\nFor 1.ask Luther should answer X(milliliter), For 2.ask Luther should answer X(milliliter). \n\n\nNow Luther ask you for help. \n\nFirstly, all of daffodils have no be watered.\n\n#### Input\nThere is only a test case.\n\nThe first line of input contains N and C(1<=N,C<=100000), the number of daffadils they has and the number of commands. \n\nThen there will follow C line. In each line, There is a command. All of the command happened in time order.\n\nIt may be \"water i X\" or \"water i j X\" or \"ask i\" or \"ask i j\". (0<=i, j<=N , 0<=X<=1000)\n\n#### Output\n\nFor each ask, you should print the answer.\n\n#### Sample Input\n```\n5 5\nwater 3 2\nask 1 5\nwater 1 4 3\nask 3\nask 2 4\n```\n\n#### Sample Output\n```\n2\n5\n5\n```\n',3000,65536,'0',7,45,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('746','Easy Problem','#### Description\nYou know this is a simple problem.\nSo I don\'t want to say anything. ^-^\nSee the sample input and output.\n\n\nI know you are smart enough to find the rule of the matrix formed.\n\n#### Input\nThe first line of input contains T, the number of test cases. There is only one line for each test case. It contains one integers N(1<=N<=100). \n\n#### Output\nFor each input you should output the matrix (N*N) we ask.\n\n#### Sample Input\n```\n2\n3\n5\n```\n\n#### Sample Output\n```\n1 4 7\n8 2 5\n6 9 3\n1  6  11 16 21\n22 2  7  12 17\n18 23 3  8  13\n14 19 24 4  9\n10 15 20 25 5\n```\n\n#### Hint\n',1000,32767,'0',7,46,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('747','Arrange Service Order','#### Description\nAs a strange shoe store manager,Danial do not like first come,first serve.All he concerns about is the average waiting time customers need to waste,which sounds really reasonable as every consumer fancies efficient services.Being annoying to arrange the best service order,Danial has no choice but to turn to you who is the best programmer he knew.Assuming that there are n customers waiting for the same sort of service and we need ti to finish customer i\'s request,what \nyou need to do is to find out the best service order which minimizes the average waiting time(the average waiting time=the sum of every customer\'s waiting time divides n). \n\nps: customer i\'s waiting service time = the moment that the store begins to serve customer i plus ti.\n\n#### Input\nThe first line of the input is a positive integer n(1<=n<=200) ,which means there are n customers waiting for the same service.The second line will be n integers indicating the time needed to finish customer i\'s request.\n\n#### Output\nJust output the minimum average waiting time specified to 2 decimal points in a line.\n\n#### Sample Input\n```\n5\n2 9 6 1 8\n```\n\n#### Sample Output\n```\n11.20\n```\n',1000,32768,'0',7,47,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('748','Scheduling Problem','#### Description\nSuppose that you are the manager of a manufactory which owns two machines,Machine A and Machine B.Every spare part can be manufactured by either Machine A or Machine B,but none of the two machines can manufacture two spare parts at the same time.After using the machines for a long time,we are familiar with the time used to manufacture every kind of spare part by each machine.If the ith spare part is arranged to be manufactured by Machine A,it will takes $$${}a_i$$$ minutes. otherwise it will cost $$${}b_i$$$ minutes to finish by Machine B.(1<=$$${}a_i$$$, $$${}b_i$$$<=20)\n\nGiven all information of the manufacturing time for each machine,what you need to do is to make a best schedule which makes sure that we can finish manufacturing all spare parts as soon as possible.\n\n#### Input\nThe first line of the input will be an integer N(1<=N<=30) followed by two lines.In the following two lines there will be n positive integers in each line representing the time needed to manufacture the ith spare parts by Machine A and Machine B respectively.\n\n#### Output\nOutput the minimun time needed to finish manufacturing all spare parts.\n\n#### Sample Input\n```\n6\n2 5 7 10 5 2\n3 8 4 11 3 4\n```\n\n#### Sample Output\n```\n15\n```\n',1000,65536,'0',7,48,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('749','Dating with Q','#### Description\nT has being in love with Q since several years ago.Although it is really hard to maintain a long distance relationship(T and Q are not studying in the same university),T endeavors to impress and please Q every time they have a date.And as the winter holiday is approaching,T is racking his brain to make their date interesting and funny.Because Q is crazy about ice cream,T is planning to make a big ice cream which consists of different kind of small ball of ice cream.As T is a romantic and considerate boy,he wants to make Q happy and make sure the big ice cream won\'t contain too much calories. T finds N kind of \nsmall ball of ice cream with calories information of them.Since T knows Q immensely,he knows that if the ith kind small ball of ice cream  is added to the big ice cream,Q\'s happy point will increase pi.\n\nKnowing the ith kind of small ball of ice cream has ci units of calories and pi happy points,T finds it difficult to choose certain kinds of small ball of ice cream to make the big ice cream which has no more than M unit calories and can make Q as happy as possible(having the maximum happy points).Can you help T?\n\n#### Input\nThe first line of the input contains two integers M(1<=M<=1000) and N(1<=N<=20).And there will be N lines follow.Each of them involves the information of the ith kind small ball of ice cream,Ci(the calories the ith kind of small ball of ice cream contains) and Pi(the happy point the ith kind of small ball of ice cream contains).\n#### Output\nJust output the maximum happy point the big ice cream could have.\n\n#### Sample Input\n```\n100 3\n95 120\n30 30\n10 10\n```\n\n#### Sample Output\n```\n120\n```\n',3000,32768,'0',7,49,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('75','Who\'s the boss?','#### Description\nSeveral surveys indicate that the taller you are, the higher you can climb the corporate ladder. At\nTALL Enterprises Inc. this “de facto standard” has been properly formalized: \n\nyour boss is always at least as tall as you are. \n\nFurthermore, you can safely assume that your boss earns a bit more than you\ndo.\n\nIn fact, you can be absolutely sure that your immediate boss is the person who earns the least\namong all the employees that earn more than you and are at least as tall as you are. \n\nFurthermore, if\nyou are the immediate boss of someone, that person is your subordinate, and all his subordinates are\nyour subordinates as well. If you are nobody’s boss, then you have no subordinates. \n\nAs simple as\nthese rules are, many people working for TALL are unsure of to whom they should be turning in\ntheir weekly progress report and how many subordinates they have. \n\nWrite a program that will help\nin determining for any employee who the immediate boss of that employee is and how many\nsubordinates they have. Quality Assurance at TALL have devised a series of tests to ensure that\nyour program is correct. These test are described below.\n\n#### Input\nOn the first line of the input is a single positive integer n, telling the number of test scenarios to\nfollow. Each scenario begins with a line containing two positive integers m and q, where m (at most\n30000) is the number of employees and q (at most 200) is the number of queries. The following m\nlines each list an employee by three integers on the same line: employee ID number (six decimal\ndigits, the first one of which is not zero), yearly salary in Euros and finally height in mm (1 mm =\n$$$10^{-6}$$$ meters – accuracy is important at TALL). The chairperson is the employee that earns more than\nanyone else and is also the tallest person in the company. Then there are q lines listing queries. Each\nquery is a single legal employee ID.\n\nThe salary is a positive integer which is at most 10,000,000. No two employees have the same ID,\nand no two employees have the same salary. The height of an employee is at least\n1,000,000 mm and at most 2,500,000 mm.\n\n#### Output\nFor each employee ID x in a query output a single line with two integers y k, separated by one space\ncharacter, where y is the ID of x’s boss, and k is the number of subordinates of x. If the query is the\nID of the chairperson, then you should output 0 as the ID of his or her boss (since the chairperson\nhas no immediate boss except, possibly, God).\n\n#### Sample Input\n```\n2\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n4 4\n200002 12234 1832001\n200003 15002 1745201\n200004 18745 1883410\n200001 24834 1921313\n200004\n200002\n200003\n200001\n```\n\n#### Sample Output\n```\n123457 0\n0 2\n123458 1\n200001 2\n200004 0\n200004 0\n0 3\n```',10000,32768,'0',0,74,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('750','a trip of Ali','#### Description\nAli lives in a castle in a corner of an island. Of course, there are also many other beautiful castles on the island. Among one of them is the castle where Peach lives.\n\nOne day, Ali decides to start a journey looking for Peach, the one he has been missing desperately. With the help of a map of the island, Ali finds out that between some of the castles, there are roads connected to each other. However, the journey is so difficult that Ali stops at every castle to get some rest.\n\nOf cause, nothing is free. Ali knows very well about how much he would spend in resting in the castles. It would be a large amount of gold coins, so Ali has to ask his mother for help. After thinking for a while, Ali’s mother says, “My dear son, I would like to help you so much, but I don’t have enough money now. All I can provide is the accommodation fee for one castle on your journey.”\n\nHowever, money is not the only problem Ali has to face to. He should bring a gift for Peach, but there are only a few castles that sell presents on the island, because the gift is free. That is to say, Ali should be able to pass at least one of the gift castles. \n\nAli wants to see Peach so much, but he only has a limited amount of gold coins. Therefore, he asks you for help. You may help him to figure out a route that would cost him the least gold corns (not including the money his mother provide) to see his dear Peach.\n\n#### Input\nIn the first line there is an integer T (T≤20), indicating the number of cases. \n\nEach case begins with a line containing two integer numbers N (0≤N≤100) and M (0≤M≤5000), indicating the number of the castles and the number of roads. The castles are numbered from 1 to N, and Ali lives in Castle 1 and Peach lives in Castle 2. \n\nThe second line of each test case there are N integers, stands for the gold to be spent on the accommodation from Castle 1 to Castle N. (the cost of Castle 1 and Castle 2 is always zero, for Ali lives in his own home when he arrives at castle 1 and he lives in Peach\'s house when reaching Castle 2).\n\nEach of the following M lines contains two integers u and v (1<=u, v<=N), indicating there is a road between Castle u and Castle v. \n\nFollowing there is a line containing an integer P, indicating the number of castles that sell presents. The next line is P integers, represent the number of castle that sell presents.\n\n#### Output\nIf Ali can complete the tour and see his dear Peach in Castle 2, you should output the least gold corns that he cost. Otherwise just output “stay at home”.\n\n#### Sample Input\n```\n2\n3 2\n0 0 5\n1 3\n3 2\n1\n3\n7 9\n0 0 370 150 600 400 200\n1 3\n4 5\n3 6\n4 6\n1 5\n5 7\n7 4\n2 7\n6 2 \n2\n6 4\n```\n\n#### Sample Output\n```\n0\n350\n```\n\n#### Hint\nIn the second sample, Ali can go the path “1-5-4-7-2” to see his dear Peach. He can buy present in Castle 4. And his mother can provide the accommodation fee for Castle 5, so Ali should pay the cost of Castle 4 and Castle 7 by himself. So the total cost is 150+200=350(gold coins). \n',3000,36768,'0',7,50,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('751','e！e！e！','#### Description\nThe number e is sometimes called Euler\'s number after the Swiss mathematician Leonhard Euler. (e is not to be confused with γ—the Euler–Mascheroni constant, sometimes called simply Euler\'s constant.)\nThe number e is of eminent importance in mathematics, alongside 0, 1, π and i. Besides being abstract objects, all five of these numbers play important and recurring roles across mathematics, and are the five constants appearing in one formulation of Euler\'s identity.\n\nThe number e is irrational; it is not a ratio of integers. Furthermore, it is transcendental; it is not a root of any non-zero polynomial with rational coefficients. The numerical value of e truncated to 40 decimal places is\n2.7182818284590452353602874713526624977572...\n\n\nA simple mathematical formula for e is\n\n$$$\\sum_{i=0}^n\\frac{1}\n {i!}$$$\n\n\nWhere n is allowed to go to infinity. This can actually yield very accurate approximations of e using relatively small values of n.\n\n#### Input\nNO INPUT\n#### Output\nOutput the approximations of e generated by the above formula for the values of n from 0 to 9. The beginning of your output should appear similar to that shown below. See sample output.\n#### Sample Input\n```\nNO SAMPLE INPUT\n```\n\n#### Sample Output\n```\n0 1\n1 2\n2 2.5\n3 2.666666667\n4 2.708333333\n```',3000,36768,'0',7,51,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('752','GCC','#### Description\nThe GNU Compiler Collection (usually shortened to GCC) is a compiler system produced by the GNU Project supporting various programming languages.  But it doesn’t contains the math operator “!”.\nIn mathematics the symbol represents the factorial operation. The expression n! means \"the product of the integers from 1 to n\". For example, 4! (read four factorial) is 4 × 3 × 2 × 1 = 24. (0! is defined as 1, which is a neutral element in multiplication, not multiplied by anything.)\nWe want you to help us with this formation: (0! + 1! + 2! + 3! + 4! + ... + n!)%m\n\n#### Input\nThe first line consists of an integer T, indicating the number of test cases.\nEach test on a single consists of two integer n and m.\n\n#### Output\nOutput the answer of (0! + 1! + 2! + 3! + 4! + ... + n!)%m.\n\n#### Constrains\n```\n0 < T <= 20\n0 <= n < 10^100 (without leading zero)\n0 < m < 1000000\n```\n\n#### Sample Input\n```\n1\n10 861017\n\n```\n\n#### Sample Output\n```\n593846\n```\n',3000,36768,'0',7,52,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('753','J Loves X','\n\n#### Description\n<span style=\"color:red\">Boy J loves Girl X for a long time.</span> \n\nHe is trying his best to get the chance dating with X. One day, J invites X to have a dinner. X set a problem for J. She says that, if J could solve the problem, she will go with J. It is a crazy math problem, because X is fond of mathematics.\n\nThe problem is described as follow:\n\nGiven an positive integer N, you are to find the smallest positive integer X, so that \n$$$\\sqrt{N}$$$ =$$$\\sqrt{X}$$$ - $$$\\sqrt{Y}$$$, where Y is also a positive integer of any value. Since J is not good at math, he is asking you to write a program for him to solve the problem. I am sure you would like to help him.\n\n#### Input\nThere may be multiple test cases. \n\nThere is only line for each test case. It contains one integer N.\n\nN is limited to a 32 bits integer, but it doesn\'t mean that all numbers are fit in 32 bits.\nIt depends on your algorithm.\n\nThe end of the input will be signaled by an input case with N=0, that must not be processed.\n\n#### Output\nFor each test case, output the smallest X.\n#### Sample Input\n```\n4\n0\n```\n\n#### Sample Output\n```\n9\n```\n\n#### Hint \n1.\'\'\'Note that N,X,Y are all positive integers. $$$\\sqrt{N}$$$, $$$\\sqrt{X}$$$, $$$\\sqrt{Y} $$$ are not  guaranteed to be integers\'\'\'.\n\n2.If you use an integer larger than （2^31-1） but less than （2^63-1), you need to use (long long) instead of (int), (%lld) instead of (%d) for the SZU ONLINE JUDGE. If you are using Visual C++ for debugging, you  must use (__int64) instead of (int), (%I64d) instead of (%d).\n\n\n',3000,36768,'0',7,53,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('754','St. Ives','#### Description\nRobert the chapman (a medieval traveling merchant) made regular trips between his home village and St. Ives to peddle his cloth, ribbons, and needles. On one such trip he encountered a curious procession:\n+ As I was traveling to St. Ives\n+ I met a man with seven wives.\n+ Every wife had seven sacks.\n+ Every sack had seven cats.\n+ Every cat had seven kits.\n+ Kits, cats, sacks, wives -\n+ How many were traveling to St. Ives?\nThe answer to this classic ancient riddle is ’one’. Robert was traveling to St. Ives. The others were all traveling away from St. Ives. However, if we prefer to ask the question of how many were traveling from St. Ives, we can add up:\n• 1 man\n• 7 wives\n• 7*7 sacks\n• 7*7*7 cats\n• 7*7*7*7 kittens\nfor a total of 2801.\nOn his next trip to St. Ives, Robert met the same man, this time accompanied by 3 wives, each with 3 sacks, and so on. Becoming curious about what seemed to be a bizarre village ritual of some kind, Robert kept track of how many traveled with the man each time he encountered him during the subsequent year.\nOn average, what was the size of the processions that Robert encounter on his trips to St. Ives?\n\n#### Input\nInput consists of multiple data sets. Each data set consists of a line with a single floating point number number representing the numbers of wives, sacks per wife, cats per sack, and kittens per cat that Robert encountered that year.\nEnd of input is indicated by a value of zero.\n#### Output\nFor each data set, print the size of the average procession as a real number presented to 2 decimal points precision.\n#### Sample Input\n```\n7\n1\n2.5\n0\n```\n\n#### Sample Output\n```\n2801.00\n5.00\n64.44\n```',3000,65535,'0',7,54,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('755','StuPld','#### Description\nAt DUT, the Dreamland University of Technology, all students have personal id, numbers with six or seven digits. But they\'re not just any numbers. Only those that have a checksum with a zero as last digit can be valid ids. \n\nHere\'s how to compute the checksum of an id number. Multiply the digits from back to front (!) with repeating factors 9, 3, 7. Then simply add the products. Example: \nid number :  1  3  9  0  2  7  2\nfactors   :  9  7  3  9  7  3  9\nproducts  :  9 21 27  0 14 21 18\nHere the checksum is 9+21+27+0+14+21+18 = 110. The last digit is zero, so the id is valid. Sometimes students have very bad handwriting and the teaching assistents have a hard time identifying the id’s. You\'re asked to help in special cases, where exactly one digit is unreadable. In that case, the missing digit can be computed (there\'s always exactly one correct digit, thanks to 9, 3 and 7 being relatively prime to 10). Note that the students always begin concentrated and thus the first digit will always be readable (and not zero).\n#### Input\nThe first line contains the number of scenarios. Each scenario is a single line that contains an id number with one digit replaced by a question mark and with six or seven digits length.\n\n#### Output\nThe output for every scenario begins with a line containing \"Scenario #i:\", where i is the number of the scenario starting at 1. Then print a single line containing the correct id number. Terminate the output for the scenario with a blank line.\n\n#### Sample Input\n```\n4\n13?0272\n3?5678\n345?78\n314?592\n```\n\n#### Sample Output\n```\nScenario #1:\n1390272\n\nScenario #2:\n335678\n\nScenario #3:\n345778\n\nScenario #4:\n3146592\n```\n\n#### Hint\n\nHuge input and output,scanf and printf are recommended.\n',3000,65535,'0',7,55,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('756','Prime Cuts','#### Description\nA prime number is a counting number (1, 2, 3, ...) that is evenly divisible only by 1 and itself. In this problem you are to write a program that will cut some number of prime numbers from the list of prime numbers between (and including) 1 and N. Your program will read in a number N; determine the list of prime numbers between 1 and N; and print the C*2 prime numbers from the center of the list if there are an even number of prime numbers or (C*2)-1 prime numbers from the center of the list if there are an odd number of prime numbers in the list. \n\n#### Input\nEach input set will be on a line by itself and will consist of 2 numbers. The first number (1 <= N <= 1000) is the maximum number in the complete list of prime numbers between 1 and N. The second number (1 <= C <= N) defines the C*2 prime numbers to be printed from the center of the list if the length of the list is even; or the (C*2)-1 numbers to be printed from the center of the list if the length of the list is odd. \n\n#### Output\nFor each input set, you should print the number N beginning in column 1 followed by a space, then by the number C, then by a colon (:), and then by the center numbers from the list of prime numbers as defined above. If the size of the center list exceeds the limits of the list of prime numbers between 1 and N, the list of prime numbers between 1 and N (inclusive) should be printed. Each number from the center of the list should be preceded by exactly one blank. Each line of output should be followed by a blank line. Hence, your output should follow the exact format shown in the sample output. \n\n#### Sample Input\n```\n21 2\n18 2\n18 18\n100 7\n```\n\n#### Sample Output\n```\n21 2: 5 7 11 \n\n18 2: 3 5 7 11 \n\n18 18: 1 2 3 5 7 11 13 17 \n\n100 7: 13 17 19 23 29 31 37 41 43 47 53 59 61 67 \n\n```\n',3000,65535,'0',7,56,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('757','Cross product','#### Description\nIn geometry, a simple polygon is a closed polygonal chain of line segments in the plane which do not have points in common other than the common vertices of pairs of consecutive segments. If a polygon is a simple polygon and every internal angle of it is less than 180 degrees, this polygon is a convex polygon.\n\n[[Image:H57_1.JPG|800px]]\n\nFor figure 1, polygon (1), (2) and (3) are convex polygons, and polygon (4), (5) and (6) is not convex polygon, but all of them are polygon.\n \nNow given a polygon of n points, your goal is to tell whether the polygon is a convex polygon or not. \n\nBut why this problem called cross product? This is a secret.\n\n#### Input\nThe input consists of several input cases. The first line of each input case is the number n (with n < 100) of vertices in the polygon. Then you are given n lines each containing a couple of integers (xi, yi) that define the coordinates of the vertices.And the the vertices input in order(may in a clockwise order or counterclockwise order).\nThe end of the input will be signaled by an input case with n = 0 vertices, that must not be processed.\n\n#### Output\nIf the polygon is necessarily convex you have to print \"Yes\",otherwise print \"No\".\n#### Sample Input\n```\n3\n0 0\n0 1\n1 0\n4\n0 0\n10 0\n2 2\n0 10\n0\n```\n\n#### Sample Output\n```\nYes\nNo\n```\n\n\n#### Hint\n\nIt’s not necessary for you to read the following lines, if you know how to solve this problem.\n\nThere are many ways to distinguish convex polygons from polygons. For example, a polygon is strictly convex if every edge has some other vertices on the same side of this line. In addition, a simple polygon is strictly convex if every internal angle is strictly less than 180 degrees. Equivalently, a polygon is strictly convex if every line segment between two nonadjacent vertices of the polygon is strictly interior to the polygon except at its endpoints. \n\nDo you want to know the secret of this problem? OK! I will tell you.\n\nCross product, which we learn from Advanced Mathematics, has many other usages that you don’t know.\n\nA two-dimensional vector can be described as (x, y). If we have two vectors a(xa, ya) and b(xb, yb), the cross product of them can described as this:\n[[Image:H57_2.JPG|thumb|Posidone]]\n\nb × a = xa * yb – xb * ya = - ( xb * ya – xa * yb) = - a × b. \n\nThis is an important character of cross product and we can use it to figure out the location of two vectors. If b × a is a positive number, then a × b is a negative number.\n\nLet\'s see a simple example to help us understand the problem better.\nSee the following figures. We have three vectors B(3,3),A(4,2),C(1,5).\n\nA is on the right side of B, and B×A = 4*3 - 3*2 = 6 is a positive number.\n\nC is on the left side of B, and B×C = 1*3 - 3*5 = -12 is a negative number.\n\nCan you tell the secret of cross product and polygon now? If no, think about the relationship of vertices’ locations.\n\nThe uses of cross product are not only the examples above; if you are interested in learning more, spend some more time after the competition.\n',1000,65536,'0',7,57,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('758','Special prime number','#### Description\nA prime number is a positive integer that can be evenly divided only by one and itself. The smallest prime number is 2.\nIn this problem you should calculate the number of “special prime number” between X and Y (including X and Y). A “special prime number” N is a prime number, and $$$\\lfloor{N/10}\\rfloor$$$ is also a prime number, and there exists a number M (0<=M<=9) which makes N*10+M a prime number, too.\n\n#### Input\nThe first line of input is the number of test cases T (1<=n<=50). Then T lines follow. Each line contains two positive integers X and Y (0<=X<Y<=1000000).\n\n#### Output\nFor each test case you should output the number of special prime number between X and Y in a line.\n#### Sample Input\n```\n2\n9 15\n25 30\n```\n\n#### Sample Output\n```\n0\n1\n```\n',10000,65535,'0',7,58,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('759','Square substring','#### Description\nGive you a string that consists of \'0\' to \'9\'. Your task is to find the number of “square substrings”. A “square substring” is a substring that can be converted to a square number and the substring’s first character is not ‘0’. String “121” is a “square string” and “0121” is not a “square string” (Please remember “0” is not a “square string”).\n\nSquare number is number that is the square of some integer. Such as 144, 121, because 144=12*12, 121=11*11. \n\nTo simplify the problem, you only need to calculate the number of “square substrings” that are no more than k.\n\n#### Input\nThe first line of input is the number of test cases n (1<=n<=50). Then n lines follow. Each line contains a positive integer k (1 <=k < 1,000,000) and a string. The string only contains digital characters. The length of any string is less than 1000.\n\n#### Output\nFor each string of input you should output the number of “square substrings” in a line.\n\n#### Sample Input\n```\n5\n100 4\n121 121\n2 9144121121121\n999999 12313154564897512135468\n1000 1001\n```\n\n#### Sample Output\n```\n1\n3\n7\n11\n3\n```\n\n#### Hint\nTake “2 9144121121121” for an example. First we should find the “square substrings” which number is no more than k, in this sample just square substrings “1” satisfy. And in the string “9144121121121” we can find “1” appear 7 times. So the answer is 7.\n\n',3000,65535,'0',7,59,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('76','Subway tree systems','#### Description\nSome major cities have subway systems in the form of a tree, i.e. between any pair of stations, there\nis one and only one way of going by subway. Moreover, most of these cities have a unique central\nstation. Imagine you are a tourist in one of these cities and you want to explore all of the subway\nsystem. You start at the central station and pick a subway line at random and jump aboard the\nsubway car. Every time you arrive at a station, you pick one of the subway lines you have not yet\ntravelled on. If there is none left to explore at your current station, you take the subway line back on\nwhich you first came to the station, until you eventually have travelled along all of the lines twice,\nonce for each direction. At that point you are back at the central station. Afterwards, all you\nremember of the order of your exploration is whether you went further away from the central station\nor back towards it at any given time, i.e. you could encode your tour as a binary string, where 0\nencodes taking a subway line getting you one station further away from the central station, and 1\nencodes getting you one station closer to the central station.\n\n[[Image:A75.jpg|center]]\n\nFigure 1. To the left: A subway tree system. The larger dot is the central station. To the right: Three\nout of several possible encodings of exploration tours for the subway system.\n\n#### Input\nOn the first line of input is a single positive integer n, telling the number of test scenarios to follow.\nEach test scenario consists of two lines, each containing a string of the characters \'0\' and \'1\' of\nlength at most 3000, both describing a correct exploration tour of a subway tree system.\n\n#### Output\nFor each test scenario, output one line containing the text “same” if the two strings may encode\nexploration tours of the same subway tree system, or the text “different” if the two strings cannot be\nexploration tours of the same subway tree system.\n\n#### Sample Input\n```\n2\n0010011101001011\n0100011011001011\n0100101100100111\n0011000111010101\n```\n\n#### Sample Output\n```\nsame\ndifferent\n```\n',10000,32768,'0',0,75,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('760','Rubik\'s Cube','#### Description\n\nRubik\'s Cube is made in the shape of a regular hexahedron, and has 6 face center pieces, 8 corner pieces, and 12 edge pieces. The face centers each have a single color, which identifies the color of that face in the solved state. The edge pieces have two colors, and the corner pieces have three colors. Each face contains a center piece, 4 corner pieces and 4 edge pieces. The corner and edge pieces are shared with adjacent faces. The face centers can only rotate in place, but the other pieces can be permuted by twisting the face layer around the face center. It is showed in Figure 1.\n\n[[Image:H601.JPG|500px]]\n\nIn this problem, the start state of the Rubik\'s Cube is in Figure 1 where each side of the Rubik\'s Cube has a single color. According to Figure 2, all sides are numbered as follows: yellow ‘1’ …… white \'6\'. There is a series of operations. What you need to do is to print the end state of the Rubik\'s Cube after these operations. In each operation, there are two integers s and d. The first integer s indicates which side of the Rubik\'s Cube should be turned.\n\n[[Image:H602.JPG|350px]]\n\n\nThe second integer d indicates in which direction the side s should be turned. The value of d is either \'1\' or \'-1\' where \'1\' indicates a clockwise turn and \'-1\' indicates a counterclockwise turn. The direction is given under the assumption that the viewer is looking directly at the specific side of the Rubik\'s Cube.\n\n[[Image:H603.JPG|500px]]\n\nFigure 3 is an example of operation “1 1”. Figure 3(1) indicates the Rubik\'s Cube before the operation, and Figure 3(2) indicates the Rubik\'s Cube after the operation.\n\n#### Input\nIn the first line there is an integer T (T≤50), indicating the number of cases. Each case begins with a line containing an integer number N (0≤N≤1,000), the number of the operations. Each of the following N lines contains two integers s (1≤s≤6) and d, s indicates which side of the Rubik\'s Cube should be turned, d indicates which direction the side s should be turned and d can be either \'1\' or \'-1\'.\n\n[[Image:H604.JPG|400px]]\n\n#### Output\nFor each test case, print a line containing the test case number (beginning with 1) on its own line, then output six lines indicating the six sides according to the side numbers as said above. Each line contains nine integers separated by a blank space indicating the color of each block. Please output the color of each block according to the block number, the block number is showed in Figure 4.\n\n#### Sample Input\n```\n2\n1\n1 1\n0\n```\n\n#### Sample Output\n```\nCase 1:\n1 1 1 1 1 1 1 1 1\n3 3 3 2 2 2 2 2 2\n4 4 4 3 3 3 3 3 3\n5 5 5 4 4 4 4 4 4\n2 2 2 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\nCase 2:\n1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n```\n',3000,65535,'0',7,60,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('761','Middle is the best','#### Description\nChinese people follow the thought of moderation. We call that thought “zhongyongzhidao”, which means that people should not tend to be extreme. In short, to make others satisfied is the best. When this thought applies to three integers, the best number of them is the one in the middle according to the ordered sequence. Please find out the so called best num.\n\n#### Input\nThe first line of input contains T(1<=T<=1000) , the number of test cases. There is only line for each test case. It contains three integers A,B,C(0<=A,B,C<=1000).\n\n#### Output\nFor each test case, output the best number.\n#### Sample Input\n```\n2\n2 5 6\n5 8 5\n```\n\n#### Sample Output\n```\n5\n5\n```\n',1000,65535,'0',7,61,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('762','ACb0y\'s configuration files','#### Description\n	ACb0y在ACcompany实习，在熟悉项目过程中，他发现项目中用到了很多的配置文件，而且经常需要读写配置文件，他知道你是一位编程高手，便向发出求助。\n	你要帮ACb0y完成的任务很简单，你只需要完成指定的操作读或写指定节点的下的指定变量的值，并输出操作结果。\n\n#### Input\n\n	第一行为测试数据的个数n(1 <= n <= 100)，第二行为配置文件中包含内容行数m(1 <= m <= 2600)，接下来为的m行数据位配置文件的内容，接下来一行为整数操作的次数k，最后的k(1 <= k <= 10000)行为操作，每行的操作格式为op sessionName valueName value或\nop sessionName valueName其中op为操作类别(op 为“U”是表示更新操作，为“G”表示读取操作)sessionName（最长为100个字符）为节点名，valueName（最长为100个字符）为变量名，value（最长为100个字符）更新的值，注意在配置文件中节点的格式是[sessionName]，变量的格式是 valueName = value，所有的节点名和变量名都是由小写字符组成，而变量名是由可见字符组成，sessionName，valueName和value前面和后面有可能会有空格或Tab键（空白符的两种），处理时请忽略，在配置文件中的同一个节点下可能会有多个一样的变量，变量的值请以最后一个为准，变量名和节点名可以是相等的，在配置文件中不会有一样的节点。\n\n#### Output\n	对于每组测试数据先输出“case n：”n为第几组测试数据n从1开始。然后按照操作输出相应的操作结果，对于“U”的操作，如果成功输出“S”否则输出“F”，对于“G”的操作如果成功输出指定节点下指定变量的值，否则输出“not found”。\n#### Sample Input\n```\n1\n10\n[abc]\nabc=100\nvalue=test\nip=168.192.125.02\n[userinf]\nname=ACb0y\npassword=123456\n[softversion]\nversion	=3.0.1\ndate=2011-2-20\n8\nU abc abc 110\nG abc abc\nG userinf pass\nG userinf name\nU softversion version 3.0.1\nU softversion date 2011-2-14\nG softversion version\nG softversion date\n```\n\n#### Sample Output\n```\ncase 1:\nS\n110\nnot found\nACb0y\nS\nS\n3.0.1\n2011-2-14\n```\n\n#### Author\nACb0y\n',2000,65535,'0',7,62,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('763','Cup','#### Description\n中科黑超推出了一种新型水杯，我们可以将其称为椭球。\n\n[[Image:H63.jpg|254px]]\n\n如图所示，水杯的外壳可以用方程\n\n$$$\\frac {x^2}{r^2} + \\frac {y^2}{r^2} + \\frac {z^2}{h^2} = 1$$$\n\n来表示，水杯的 z 轴总是垂直于地面。\n假设杯口在外壳顶部，且大小可忽略不计。 \n你恰好买了一个新型水杯，并且灌入了 v 单位体积的水。 \n请问此时水面距离杯底有多远？虽然直接用尺子就可以量出，但很不巧我们手头没有尺子。\n不过我们有台电脑，所以请写个程序告诉我答案。\n\n#### Input\n\n输入包括多组数据。 \n\n每组数据占一行，包含三个整数 r,h,v(r>0,h>0,0<=v<=4/3 $$$\\pi\\,$$$ hr^2)\n\n输入数据以  ”0 0 0”  结束。\n\n#### Output\n\n对每组数据输出水面和杯底的距离，四舍五入到小数点后四位。\n\n#### Sample Input\n```\n1 1 1\n1 1 0\n1 1 4\n0 0 0\n```\n\n#### Sample Output\n```\n0.6355\n0.0000\n1.7437\n```\n\n== Author==\n',1000,65536,'0',7,63,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('764','1/(n^m)','#### Description\n\n一天khp突发奇想，回忆起小学时候一个整数分为两个整数的加法运算问题，譬如4=1+3=2+2，虽然khp四则运算不过关，但是对10以内的整数加法还是能够用最原始的办法（扳扳手指计算）顺利解决问题，但现在他遇到更大问题了，假如上述问题不是整数而是分数怎办—_—||？？更让khp无奈的是这一个问题要求的是1/(n^m)有多少种分解办法（即分解为两个分数相加譬如1/(2^2)=1/5+1/20=1/6+1/12=1/8+1/8共3种），于是khp就去Orz“FJNU数论神”耳火鬼斗。不久，耳火鬼斗用他犀利数论常识+C语言帮khp解决问题！现在请你试一下通过编程解决问题。\n\n#### Input\n包含多组测试数据，每一组测试数据一行，每组测试数据包括n,m值（0<n<=10^8,0<=m<=1000）.n=0，m=0时表示输入结束\n\n#### Output\n对于每一组数据请在一行输出1/(n^m)分解办法总数mod2010.\n\n#### Sample Input\n```\n2 2\n0 0\n```\n\n#### Sample Output\n```\n3\n```\n\n#### Author\nkhp@FJNU\n',1000,32768,'0',7,64,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('765','Little Six’s luckly number','#### Description\n\n小六最喜欢的数字，当然是6了。当然，他也喜欢一切6的倍数或者有6个数位是6的数字。那么给你一个很大很大的数字，你是否能告诉我，这是否是小六的幸运数呢？\n\n#### Input\n输入数据的第一行为测试数据的个数t(1 <= t <= 100)，接下来有t行。\n每一行是一个数字n(1 <= n <= 10^100000)。\n#### Output\n对于每一组测试数据，如果是小六的幸运数字则输出“Yes”，否则输出“No”。每一组数据输出一行。\n#### Sample Input\n```\n3\n655666\n222\n6666665\n```\n\n#### Sample Output\n```\nNo\nYes\nYes\n```\n',1000,32768,'0',7,65,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('766','Escape','#### Description\n\n小M一个人躲在迷宫中钻研魔法，结果不知道是不是一不小心把迷宫的某些地方引燃了。可怜的他魔法又没学到家，现在他要做的就是赶紧逃出去。\n现在假设你知道小M和迷宫中着火的位置，小M每个单位时间移动一个单位距离，火苗在单位时间内向上下左右四个方向各蔓延一个单位距离，小M和火焰无法穿过迷宫的障碍，迷宫的上下左右只要有能脱离的路小M都可能走，请你确定小M至少要花多少时间逃出迷宫。\n\n#### Input\n输入一个N表示有N组测试数据，每组测试数据由两部分组成\n第一部分：一行包含X和Y（1 <= X,Y <= 100）；\n第二部分：一个X*Y的矩阵（X行，每行有Y个字符），矩阵由下面4个字符组成\n\n‘#’表示障碍，‘.’表示空地，‘M’表示小M，‘F’表示火，矩阵必然有一个‘M’，而‘F’可能没有或者有多个\n\n#### Output\n针对每组测试数据输出小M至少要花多少个单位时间才能逃生，如果无法逃生输出IMPOSSIBLE\n#### Sample Input\n```\n2\n4 4\n1. 1. 1. 1. \n1. MF1. \n1. ..1. \n1. ..1. \n3 3\n1. 1. 1. \n1. M.\n1. .F\n```\n\n#### Sample Output\n```\n3\nIMPOSSIBLE\n```\n',1000,32768,'0',7,66,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('767','ACgirl\'s SMS guards','#### Description\n	ACgirl是FJAU的ACM集训队里的一朵奇葩(大家懂的……)，在学校有很多GG对ACgirl心生爱慕之情，因为学校的GG比较害羞，不敢当着ACgirl面表白，还好现在大家都有手机，于是GG们疯狂的给ACgirl发爱慕表白的短信。于是ACgirl的手机的短信都爆满，为了改变这样的状况，她叫你帮忙写一个短信过滤的短信卫士，过滤哪些无聊的短信。\n#### Input\n	第一行是一个整数n（1 <= n <= 100）表示有多少组测试数据，接下来是每一组测试数据，\n\n每一组测试数据的第一行是一个整数m(1 <= m <= 100000)，表示ACgirl的手机短信的“白名单”,\n\n接下来是m行的白名单，每一个行数据代表一个手机号码TelNumber(最长为11个字符)全由数字组成(0~9)，\n\n接下来为一个整数k(1 < = k <= 10000)表示有k条来访短信，每条短信的的格式为getTime,TelNumber,Context。\n\n其中getTime（yyyy-mm-tt:hh:mm:ss）为接收到短信的时间（精确到秒），TelNumber(最多为11个字符)为发送短信的手机号码，Context（最多为100个字符）为短信内容。\n\n\",\"为英文的“,”\n\n#### Output\n	对于每组测试数据，先输出”Case n:”，n从1开始，对于手机号码为不是白名单的短信和无效的短信（短信的某个域不合法）进行过滤。其他的都进行回复，回复格式和收到的短信的格式是一样的，其中getTime为接收到的短信时间，TelNumber 为15980698888，context为Sorry,I am ACb0y’s girl friend。每一组测试数据最后输出统计信息，统计一共回复了多少短信，格式为：”count = xxx”，等号左右各一个空格，具体看输出样例。\n\n#### Sample Input\n```\n1\n5\n15980698852\n18580693352\n16345698867\n15666456445\n12340694552\n2\n2011-03-09:13:32:34,15980698881,I love you.\n2011-03-10:23:15:48,12340694552,My name is Smith,I like you very much.\n```\n\n#### Sample Output\n```\nCase 1:\n2011-03-10:23:15:48,15980698888,Sorry,I am ACb0y’s girl friend\ncount = 1\n```\n#### Author\nACb0y\n\n',1000,65536,'0',7,67,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('768','Permutation','#### Description\n	给定n个数，两两不同，且都不大于n，通过两两交换位置使得这n个数单调递增，每次交换付出代价为两个数的和，求出使得这n个数单调递增所需要的最小代价。\n\n#### Input\n	有多组测试数据，每组测试数据第一行包括一个整数n(0<n<100000)，第二行包含n个整数xi  (0<xi<=n ，xi==xj当且仅当i==j)\n\n#### Output\n	输出使得这个序列递增所需要的最小代价\n#### Sample Input\n```\n3\n2 3 1\n```\n\n#### Sample Output\n```\n7\n```\n',10000,65536,'0',7,68,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('769','Mapping','#### Description\n3D 游戏中的场景经常用材质贴图来表现，例如石头、水面等。 \n通常，材质贴图是一张正方形的位图，上下边界的像素对应相同，左右边界的像素也对应相\n同。例如下图中，左边是一张材质贴图，而右边的不是（左右边界不同）。 \n\n[[Image:H69_1.jpg|350px]]\n\n给定一张 n×n 的位图，请在这张位图中寻找一块材质贴图，使得材质贴图尺寸最大。\n\n[[Image:H69_2.jpg|350px]]\n\n#### Input\n输入包含多组数据。 \n每组数据第一行是一个整数 n (1≤n≤50)，表示位图的大小。 \n然后 n 行每行n 个在 0到 255 之间的整数，描述位图的内容。 \n输入数据以 n=0 结束，不要处理这组数据。 \n#### Output\n对每组数据输出最大的材质贴图的边长。请注意，1×1 的位图也是材质贴图。 \n#### Sample Input\n```\n2 \n255 0 \n0 127 \n5 \n5 251 127 11 195 \n23 13 0 13 23 \n211 0 13 0 67 \n211 13 0 13 23 \n1 251 127 11 47 \n0\n```\n\n#### Sample Output\n```\n1 \n3 \n```\n',10000,65536,'0',7,69,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('77','Prison rearrangement','#### Description\nIn order to lower the risk of riots and escape attempts, the boards of two nearby prisons of equal\nprisoner capacity, have decided to rearrange their prisoners among themselves. They want to\nexchange half of the prisoners of one prison, for half of the prisoners of the other. However, from\nthe archived information of the prisoners\' crime history, they know that some pairs of prisoners are\ndangerous to keep in the same prison, and that is why they are separated today, i.e. for every such\npair of prisoners, one prisoners serves time in the first prison, and the other in the second one. The\nboards agree on the importance of keeping these pairs split between the prisons, which makes their\nrearrangement task a bit tricky. In fact, they soon find out that sometimes it is impossible to fulfil\ntheir wish of swapping half of the prisoners. Whenever this is the case, they have to settle for\nexchanging as close to one half of the prisoners as possible.\n\n#### Input\nOn the first line of the input is a single positive integer n, telling the number of test scenarios to\nfollow. Each scenario begins with a line containing two non-negative integers m and r, 1<m<200\nbeing the number of prisoners in each of the two prisons, and r the number of dangerous pairs\namong the prisoners. Then follow r lines each containing a pair xi yi of integers in the range 1 to m,\nwhich means that prisoner xi of the first prison must not be placed in the same prison as prisoner yi\nof the second prison.\n\n#### Output\nFor each test scenario, output one line containing the largest integer $$$k \\leq m/ 2$$$ , such that it is\npossible to exchange k prisoners of the first prison for k prisoners of the second prison without\ngetting two prisoners of any dangerous pair in the same prison.\n\n#### Sample Input\n```\n3 \n101 0 \n3 3 \n1 2\n1 3\n1 1\n8 12\n1 1\n1 2\n1 3\n1 4\n2 5\n3 5\n4 5\n5 5\n6 6\n7 6\n8 7\n8 8\n```\n\n#### Sample Output\n```\n50\n0\n3\n```\n',10000,32768,'0',0,76,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('770','Ali and Snoopy','#### Description\n阿狸被困在迷宫，Snoopy要去救他，Snoopy可以向上、下、左、右四个方向行走，每走一步（格）就要喝掉一瓶益力多。\n\n[[Image:H70.jpg|350px]]  \n\n现在给他一个迷宫地图请问：snoopy最少需要多少瓶益力多才能找到阿狸。\n\n#### Input\n先输入一个数t，表示测试的数据个数\n\n下面输入的就是t个迷宫\n\n每个迷宫的输入都应包含以下数据\n\n输入迷宫的大小 n（n<=15），表示迷宫大小为n*n，接下来的n行表示迷宫。\n用大写字母“S”表示snoopy的位置,用大写字母“E”表示阿狸被困的位置\n用“.”表示空白,用“*”表示障碍\n你知道的阿狸和snoopy都只有一个\n\n#### Output\n输出需要的最少的益力多的瓶数m \n（数据保证一定有最少需要的益利多的瓶数）\n\n#### Sample Input\n```\n1\n8\nS..*....\n.*...**.\n.**.**..\n.*..*..*\n+ ..+ + .+ + \n........\n.***..*.\n....*..E\n```\n\n#### Sample Output\n```\n16\n```\n',1000,32768,'0',7,70,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('771','Gem','#### Description\n\n给两个有一定容量的箱子，往里面装宝石（宝石容量不能超过箱子容量），不同的宝石有不同的容量和价值。求两个箱子里最大宝石的价值。\n\n#### Input\n包含多组测试数据，每一组数据的信息如下\n\nline 1: Input n;  n:表示宝石数量    1<n<=100\n\nline 2: Input C1,C2;   C1:第一个箱子的容量  C2:第二个箱子的容量  1<C1,C2<=100\n\nline 3~n+3-1: Ci,Vi   Ci:宝石所占容量  Vi:宝石价值\n\n#### Output\n两个箱子里的宝石的最大价值。\n#### Sample Input\n```\n4\n10 20\n5 20 \n11 15\n6 8\n8 9\n6\n10 20\n6 8\n4 15\n8 9\n4 16\n15 20\n3 15\n```\n\n#### Sample Output\n```\n44\n66\n```\n',2000,32768,'0',7,71,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('772','How many prime numbers','#### Description\n\n质数又称素数。指在一个大于1的自然数中，除了1和此整数自身外，没法被其他自然数整除的数。换句话说，只有两个正因数（1和自己）的自然数即为素数。\n\n现在给你两个数 a 和 b， 请你计算出a和b间（包括a和b）有多少个素数。\n\n#### Input\n\n输入数据的第一行是 t ，表示有t组数据。\n\n接下来的t行，每一行有两个数 a 和 b。\n\n1<=t<=12, 1<=a<=b<=10000\n\n#### Output\n对于每一组测试数据，请在一行里输出答案，即是输出a和b间（包括a和b）有多少个素数。\n\n#### Sample Input\n```\n2\n1 10\n5 20\n```\n\n#### Sample Output\n```\n4\n6\n```\n',5000,65536,'0',7,72,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('773','Prime factor','#### Description\n\n一个数的因数指的是所有可以整除这个数的数.\n\n素数指在一个大于1的自然数中，除了1和此整数自身外，没法被其他自然数整除的数。(1不是素数)\n\n现在你的任务是找出一个数的因数之中有多少个素数.\n\n如:15的因数是1,3,5,15,其中有3,5是素数,\n\n#### Input\n\n第一行输入一个t,表示下面将有t组测试数据.\n接下来的t行每行有一个数n(0<n<=10000)\n\n#### Output\n\n对于每一组测试数据，输出一行，n的因数中所有素数的个数。\n\n#### Sample Input\n```\n2\n15\n6\n```\n\n#### Sample Output\n```\n2\n2\n```\n',3000,32768,'0',7,73,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('774','Black Friday','#### Description\n\n黑色星期五是一种文件型病毒,它在1987年秋天被发现的,后来在世界广为流传,因为如果当天是13号,又恰好是星期五,该病毒就会发作起来毁坏计算机的存储系统.\n\n试编程找出1990年~2012年这种病毒可能发作的日期.\n\n1990年1月1日是星期一.\n\n#### Input\n没有输入\n#### Output\n以yyyy-mm-dd的形式，每行输出一个发作日期.\n日期必须以升序排列，样例只是输出前两个日期，你必须将所有可能发作的日期都输出。\n\n#### Sample Input\n```\n无\n```\n\n#### Sample Output\n```\n1990-4-13\n1990-7-13\n```',1000,32768,'0',7,74,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('775','Hanxin','#### Description\n\n相传韩信才智过人,从不直接清点自己军队的人数,只要让士兵先后以三人一排,五人一排,七人一排地变换队形,而他每次只掠一眼队尾就知道总人数了.\n\n输入3个非负整数a,b,c,表示每种队形排尾的人数(0<=a<3,0<=b<5,0<=c<7),输出总人数的最小值(或报告无解).\n\n已知总人数不小于10,不超过100.\n\n#### Input\n\n第一行输入一个t,表示下面将有t组测试数据.\n接下来的t行每行三个数,a,b,c(0<=a<3,0<=b<5,0<=c<7)\n\n#### Output\n\n对于每一组测试数据输出一行，包含总人数s(10<=s<=100),无解则输出no answer\n\n#### Sample Input\n```\n2\n2 1 6\n2 1 3\n```\n\n#### Sample Output\n```\n41\nno answer\n```\n',1000,32768,'0',7,75,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('776','Left Rotation','#### Description\n\n输入一个N*M的矩阵，要求将这个矩阵向左旋转90度后输出。\n\n比如现在有矩阵 ：\n\na b c\n\nd e f\n\n向左旋转90度后的矩阵变为：\n\nc f\n\nb e\n\na d\n\n#### Input\n\n输入数据的第一行是 t ，表示有t组数据。 \n\n接下来的是t组测试数据，每一组数据开始是两个数 n 和 m。\n\n1<=n,m<=20\n\n表示输入的矩阵的大小，接下来有n行， 每行有m个数。\n\n表示需要向左旋转90度的矩阵，矩阵的每一个元素的值在0~200之间。\n\n#### Output\n\n对于每一组数据，输出m行每行n个数，表示向左旋转90度后的矩阵。\n\n#### Sample Input\n```\n2\n1 2\n4 5\n2 3\n1 2 3\n4 5 6\n```\n\n#### Sample Output\n```\n5\n4\n3 6\n2 5\n1 4\n```\n',1000,32768,'0',7,76,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('777','Find letter','#### Description\n\n搜索字母，输入一个单词，再输入一个字母，求单词包含字母的数量，区分大小写，例如输入shenzhen，再输入e，最终结果是2。\n\n#### Input\n\n输入数据的第一行是 t ，表示有t组数据。 \n\n接下来的是t组测试数据，每一组数据包含两行，第一行是输入的单词，第二行是要搜索的字母。\n\n单词最长可以包含200个字母。\n\n#### Output\n对于每一组数据，请将结果输出到一行里。\n#### Sample Input\n```\n2\nshenzhen\ne\nszuacm\na\n```\n\n#### Sample Output\n```\n2\n1\n```\n',1000,32768,'0',7,77,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('778','Cartesian product','#### Description\n\nThe Cartesian product (also known as cross product), \'\'\'R × S\'\'\', is close to the cross product operation on sets. If \'\'\'r\'\'\' and \'\'\'s\'\'\' are relational instances corresponding to \'\'\'R\'\'\' and \'\'\'S\'\'\', respectively, the value of this expression, denoted \'\'\'r × s\'\'\', is the set of all tuples, \'\'\'t\'\'\', that can be obtained by concatenation of a tuple \'\'\'r ϵ R\'\'\' and a tuple \'\'\'s ϵ S\'\'\'.\n\n[[Image:H78.jpg|center|600px]]\n\n#### Input\n\nThe first line of input contains $$$T(0 \\leq T \\leq 100)$$$ , the number of test cases. First line of each test case contains two integers \'\'\'Rn and Rm (0<Rn,Rm<100)\'\'\', \'\'\'Rn\'\'\' and \'\'\'Rm\'\'\' denotes the number of tuples and the attributes of  the relation R. Following \'\'\'Rn+1\'\'\' lines denotes the relation \'\'\'R\'\'\', which the first line contains the \'\'\'Rm\'\'\' attributes of the relation and the following Rn line , each line contains one tuple, \'\'\'Rm\'\'\' values of attributes. The length of value of attributes will not large than 20. The following line contains two integers \'\'\'Sn and Sm(0<Sn,Sm<100)\'\'\', and following \'\'\'Sn+1\'\'\' lines denotes the relation \'\'\'S\'\'\'.\n\n#### Output\nFor each case, output the Cartesian product of  \'\'\'R × S\'\'\'. Every value of tuples should be separated by a single space (no space at the end of each line). There should be a single blank line between two test cases. No blank line at the end of the last test case.\n\n#### Sample Input\n```\n1\n3 2\nId Name\n111223344 Smith,Mary\n023456789 Simpson,Homer\n987654321 Simpson\n2 2\nId DepartmentId\n555666777 CSS\n101202303 CSS\n```\n\n#### Sample Output\n```\nId Name Id DepartmentId\n111223344 Smith,Mary 555666777 CSS\n111223344 Smith,Mary 101202303 CSS\n023456789 Simpson,Homer 555666777 CSS\n023456789 Simpson,Homer 101202303 CSS\n987654321 Simpson 555666777 CSS\n987654321 Simpson 101202303 CSS\n```',1000,32768,'0',7,78,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('779','Daffodil number','#### Description\n\n输出100~999中的所有水仙花数.若3位数ABC满足ABC=A^3+B^3+C^3,则称其为水仙花数.\n\n例如:153=1^3+5^3+3^3,所以153是水仙花数.\n\n你的任务是输出100~999中所有的水仙花数.每行输出一个.\n\n#### Input\n\n没有输入\n\n#### Output\n\n请输出100~999中所有的水仙花数.每行输出一个.\n\n样例输出只输出一个水仙花数，你必须将所有的水仙花数都输出。\n\n#### Sample Input\n```\n无输入\n```\n\n#### Sample Output\n```\n153\n```\n',1000,32768,'0',7,79,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('78','Sightseeing tour','#### Description\nThe city executive board in Lund wants to construct a sightseeing tour by bus in Lund, so that\ntourists can see every corner of the beautiful city. They want to construct the tour so that every\nstreet in the city is visited exactly once. The bus should also start and end at the same junction. As\nin any city, the streets are either one-way or two-way, traffic rules that must be obeyed by the tour\nbus. Help the executive board and determine if it’s possible to construct a sightseeing tour under\nthese constraints.\n\n#### Input\nOn the first line of the input is a single positive integer n, telling the number of test scenarios to\nfollow. Each scenario begins with a line containing two positive integers m and s,$$$ 1 \\leq m\\leq 200$$$,\n$$$1\\leq s \\leq 1000$$$ being the number of junctions and streets, respectively. The following s lines contain the\nstreets. Each street is described with three integers, $$$x_i, y_i, and d_i$$$, $$$1 \\leq x_i,y_i \\leq m$$$, $$$0 \\leq d_i \\leq 1$$$, where$$$ x_i$$$ and $$$y_i$$$\nare the junctions connected by a street. If $$$d_i=1$$$, then the street is a one-way street (going from xi to\nyi), otherwise it’s a two-way street. You may assume that there exists a junction from where all\nother junctions can be reached.\n\n#### Output\nFor each scenario, output one line containing the text “possible” or “impossible”, whether or not it’s\npossible to construct a sightseeing tour.\n\n#### Sample Input\n```\n4 \n5 8 \n2 1 0 \n1 3 0\n4 1 1\n1 5 0\n5 4 1\n3 4 0\n4 2 1\n2 2 0\n4 4\n1 2 1\n2 3 0\n3 4 0\n1 4 1\n3 3\n1 2 0\n2 3 0\n3 2 0\n3 4\n1 2 0\n2 3 1\n1 2 0\n3 2 0\n```\n\n#### Sample Output\n```\npossible\nimpossible\nimpossible\npossible\n```\n',10000,32768,'0',0,77,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('780','1 + 2 + ... + n^2','#### Description\n\n求1到n平方的和，例如n=2，则1+2+3+4=10\n\n#### Input\n\n第一行输入一个t,表示下面将有t组测试数据. 接下来的t行每行有一个数n(0<n<=10000) \n\n#### Output\n\n对于每一组测试数据，输出一行，输出1到n平方的和\n\n\n#### Sample Input\n```\n2\n1\n5\n```\n\n#### Sample Output\n```\n1\n325\n```\n\n#### Hint\n```\n整型(int)数据的范围是-2147483648~2147483647，如果需要表示更大的整数（不是大的很多）可以用64位整数long long表示。long long的使用方法如下：\nlong long val;          //定义\nscanf(“%lld”,&val);     //输入\nprintf(“%lld\\n”,val);  	//输出\nlong long只能在judge系统中使用(linux环境)，而在vc6.0中，则需要用__int64\n__int64 val;		//定义\nscanf(“%I64d”,&val);	//输入\nprintf(“%I64d\\n”,val);	//输出\n```\n\n',1000,32768,'0',7,80,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('781','No Space','#### Background\nWe all use spaces to separate words, but Michael hates spaces. He think that spaces is a waste and he wants every sentense contains no space. So how will he separate words? Well, he will capitalize the first letter of a word. Now he\'s got some lines of sentences, he\'s asking you to modify these lines for him according to the rules above.\n\n#### Description\nYou\'ll have several lines of words, please eliminate the spaces between these words and capitalize the first alphabet of the words. And for punctuations, please keep it where it were.\n\n#### Input\nThe first line of the input contains an integer T(1<=T<=50) which means the number of test cases. Then T lines follow, each line contains several words with spaces. The whole length of each line will be less than 300, and the lines will contain nothing other than alphabets, spaces and four punctuations: , ? . ! \n\n#### Output\nFor each test case, please output the modified line.\n\n#### Sample Input\n```\n2\nMichael is a bad boy? That is kidding me! He is good, very good.\nbut he hates space, that is so freaky.\n```\n\n#### Sample Output\n```\nMichaelIsABadBoy?ThatIsKiddingMe!HeIsGood,VeryGood.\nButHeHatesSpace,ThatIsSoFreaky.\n```\n',1000,32768,'0',7,81,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('782','Max sum','#### Description\nGiven a sequence a[1],a[2],a[3]......a[n], your job is to calculate the max sum of a sub-sequence. For example, given (6,-1,5,4,-7), the max sum in this sequence is 6 + (-1) + 5 + 4 = 14.\n\n#### Input\nThe first line of the input contains an integer T(1<=T<=20) which means the number of test cases. Then T lines follow, each line starts with a number N(1<=N<=1000), then N integers followed(all the integers are between -1000 and 1000).\n \n#### Output\nFor each test case, you should output two lines. The first line is \"Case #:\", # means the number of the test case. The second line contains three integers, the Max Sum in the sequence, the start position of the sub-sequence, the end position of the sub-sequence. If there are more than one result, output the first one. Output a blank line between two cases.\n\n#### Sample Input\n```\n2\n5 6 -1 5 4 -7\n7 0 6 -1 1 -6 7 -5\n```\n\n#### Sample Output\n```\nCase 1:\n14 1 4\n\nCase 2:\n7 1 6\n```\n',1000,32768,'0',7,82,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('783','Max sum again','#### Description\nNow that you have solved the problem \"max sum\", it\'s very easy, right? Here comes the same problem, but with \'\'\'larger input\'\'\'\'.\nGiven a sequence a[1],a[2],a[3]......a[n], your job is to calculate the max sum of a sub-sequence. For example, given (6,-1,5,4,-7), the max sum in this sequence is 6 + (-1) + 5 + 4 = 14.\n\n#### Input\nThe first line of the input contains an integer T(1<=T<=20) which means the number of test cases. Then T lines follow, each line starts with a number N(1<=N<=100000), then N integers followed(all the integers are between -1000 and 1000).\n \n#### Output\nFor each test case, you should output two lines. The first line is \"Case #:\", # means the number of the test case. The second line contains three integers, the Max Sum in the sequence, the start position of the sub-sequence, the end position of the sub-sequence. If there are more than one result, output the first one. Output a blank line between two cases.\n\n#### Sample Input\n```\n2\n5 6 -1 5 4 -7\n7 0 6 -1 1 -6 7 -5\n```\n\n#### Sample Output\n```\nCase 1:\n14 1 4\n\nCase 2:\n7 1 6\n```\n',1000,32768,'0',7,83,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('784','Lcm problem','#### Description\nGive you two positive integers, a and b. The common multiple of a and b is a positive integer c such that c%a==0 and c%b==0. The least common multiple of a and b is the smallest common multiple of a and b.\n\n#### Input\nThe first line of the input contains an integer T(1<=T<=50) which means the number of test cases. Then T lines follow, each line contains two positive integers a and b(0<a<=10000, 0<b<=10000).\n \n#### Output\nFor each test case, you should output one lines containing the least common multiple of a and b.\n\n#### Sample Input\n```\n3\n3 4\n8 6\n1 3\n```\n\n#### Sample Output\n```\n12\n24\n3\n```\n',1000,32768,'0',7,84,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('785','Snapper Chain','#### Description\nThe Snapper is a clever little device that, on one side, plugs its input plug into an output socket, and, on the other side, exposes an output socket for plugging in a light or other device. \n\n\nWhen a Snapper is in the ON state and is receiving power from its input plug, then the device connected to its output socket is receiving power as well. When you snap your fingers -- making a clicking sound -- any Snapper receiving power at the time of the snap toggles between the ON and OFF states. \n\n\nIn hopes of destroying the universe by means of a singularity, I have purchased N Snapper devices and chained them together by plugging the first one into a power socket, the second one into the first one, and so on. The light is plugged into the Nth Snapper. \n\n\nInitially, all the Snappers are in the OFF state, so only the first one is receiving power from the socket, and the light is off. I snap my fingers once, which toggles the first Snapper into the ON state and gives power to the second one. I snap my fingers again, which toggles both Snappers and then promptly cuts power off from the second one, leaving it in the ON state, but with no power. I snap my fingers the third time, which toggles the first Snapper again and gives power to the second one. Now both Snappers are in the ON state, and if my light is plugged into the second Snapper it will be on. \n\n\nI keep doing this for hours. Will the light be on or off after I have snapped my fingers K times? The light is on if and only if it\'s receiving power from the Snapper it\'s plugged into.\n\n#### Input\nThe first line of the input gives the number of test cases, T. T lines follow. Each one contains two integers, N and K. \n\n#### Output\nFor each test case, output one line containing \"Case #x: y\", where x is the case number (starting from 1) and y is either \"ON\" or \"OFF\", indicating the state of the light bulb. \n\n#### Limits\n\n\'\'\'1 ≤ T ≤ 10,000\'\'\'\n\n\'\'\'1 ≤ N ≤ 30\'\'\'\n\n\'\'\'0 ≤ K ≤ $$$10^8$$$\'\'\'\n\n#### Sample Input\n```\n4\n1 0\n1 1\n4 0\n4 47\n```\n\n#### Sample Output\n```\nCase #1: OFF\nCase #2: ON\nCase #3: OFF\nCase #4: ON\n```\n',1000,32768,'0',7,85,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('786','Variance','#### Description\nYour task is to find out the variance Var of a set of numbers. Here\'s the formula of variance:  \n$$$Var = ( \\sum_{i=1}^n (S_i - \\overline{S})^2 )/n $$$\n，where $$$\\overline{S}$$$ is the average value of all the numbers in the set. For example, given(1, 3, 4, 8), the variance is 6.5, \'\'\'so it is 7, if we don\'t keep any digits after the decimal point\'\'\'.\n\n#### Input\nThe first line of the input contains an integer T(1<=T<=50) which means the number of test cases. Then T lines follow, each line starts with a number N(1<=N<=100), then N integers followed(all the integers are between 0 and 1000).\n\n#### Output\nFor each test case, you should output one lines containing the variance of the N integers. Don\'t keep any digits after the decimal point.\n\n\n#### Sample Input\n```\n1\n4 1 3 4 8\n```\n\n#### Sample Output\n```\n7\n```\n',1000,32768,'0',7,86,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('787','Figures triangle','#### Description\n\n设有如下图所示数字三角形，编写程序，计算从顶至底的一条路径，该路径所经过的数字总和最大。\n \n①每个数字点，只可沿左斜线向下或右斜线向下，如：第一行的7只能走到第二行3或8，第三行的1只能走到第四行的7或4。第四行的7只能走到第五行的5或2。 \n\n②1＜三角形行数≤100 \n\n③三角形中的数字为0..99的整数 \n```\n     7\n\n    3 8 \n\n   8 1 0 \n\n  2 7 4 4 \n\n 4 5 2 6 5\n```\n\n#### Input\n输入的第一行是测试数据的个数。\n\n每组输入的数据第一行是三角形的总行数，接下去是每行的数字，数字间用空格分隔，例如： \n\n5 \n\n7 \n\n3 8 \n\n8 1 0 \n\n2 7 4 4 \n\n4 5 2 6 5\n\n#### Output\n输出包括一行，输出从顶至底，所经过的路径中，最大的数字和。如上例输出：30。\n\n#### Sample Input\n```\n1\n5\n7\n3  8\n8  1  0\n2  7  4  4\n4  5  2  6  5\n```\n\n#### Sample Output\n```\n30\n```\n',1000,32768,'0',7,87,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('788','Big Integer III','#### Description\nPlease calculate the answer of A+B 、the answer of A-B and the answer of A*B, both A and B are positive integer.\n\n#### Input\nThe first line of input contains T (1<=T<=100) , the number of test cases. There is only line for each test case. It contains two integers A and B (0<=A, B<=10^100000). \n\n\n#### Output\nFor each test case, output three lines A+B 、 A-B and A*B. \n\n\n#### Sample Input\n```\n2\n1 2\n6 5\n```\n\n#### Sample Output\n```\n3\n-1\n2\n11\n1\n30\n```\n\n#### Hint\n<source lang=\"c\">\nvoid add(char a[], char b[])\n{\n	int alen, blen;\n	int temp;\n	int  i, j, k;\n	char c[100];\n\n	alen = strlen(a);//4\n	blen = strlen(b);//3\n	\n	memset(c,\'0\',sizeof(c));\n	i = alen - 1;\n	j = blen - 1;\n	k = alen > blen ? alen+1 : blen+1;\n	c[k+1]=\'\\0\';\n	while(i>=0 && j>=0)\n	{\n		temp = (a[i]-\'0\')+(b[j]-\'0\')+(c[k]-\'0\');\n		c[k] = \'0\' + temp;\n		if(temp>=10) c[k]-=10; \n		c[k-1] = c[k-1] + temp/10;\n		k--;\n		i--;\n		j--;\n	}\n	while(i>=0)\n	{\n		temp = (a[i]-\'0\') + (c[k]-\'0\');\n		c[k] = \'0\' + temp;\n		if(temp>=10) c[k]-=10;\n		c[k-1] = c[k-1] + temp/10;\n		i--;\n		k--;\n	}\n	while(j>=0)\n	{\n		temp = (b[j]-\'0\') + (c[k]-\'0\');\n		c[k] = \'0\' + temp;\n		if(temp>=10) c[k]-=10;\n		c[k-1] = c[k-1] + temp/10;\n		j--;\n		k--;	\n	}\n\n	if(c[k]==\'0\')\n		printf(\" c = %s\\n\",&c[k+1]);\n	else \n		printf(\"c = %s\\n\", &c[k]);\n\n}\n</source>\n\n<source lang=\"c\">\nvoid sub(char a[],char b[])\n{\n	char *x, *y;\n	char c[100];\n	int i, j, k;\n	int xlen, ylen;\n	int flag = 0 ;\n\n	int t = cmp(a,b);\n	if(t==0)\n	{\n		printf(\"0\\n\");\n		return ;\n	}\n	else if(t==1) \n	{\n		x=a;\n		y=b;\n	}\n	else\n	{\n		flag = 1;\n		x=b;\n		y=a;\n	}\n	xlen = strlen(x);\n	ylen = strlen(y);\n	k = xlen > ylen ? xlen : ylen;\n	c[k+1]=\'\\0\';\n\n	i = xlen - 1;\n	j = ylen - 1;\n\n	while(i>=0 && j>=0)\n	{\n		if(x[i]<y[j])\n		{\n			x[i-1]=x[i-1]-1;\n			x[i]+=10;\n		}\n		c[k] = (x[i]-\'0\') - (y[j]-\'0\') + \'0\';\n		i--;\n		j--;\n		k--;\n	}\n	while(i>=0)\n	{\n		if(x[i]<\'0\')\n		{\n			x[i-1]--;\n			x[i]+=10;\n		}\n		c[k]=x[i];\n		k--;\n		i--;\n	}\n	k++;\n	for(;c[k]==\'0\';k++)\n		;\n\n	if(flag == 1) printf(\"-\");\n	printf(\"%s\\n\", &c[k]);\n}\n</source>',1000,32768,'0',7,88,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('789','Grade','#### Description\n\n给一些学生的成绩，对它进行排序，输出排名表。\n学生的信息包括：姓名 成绩。\n排序要求：\n按成绩从高到低排序，\n如果成绩一样，按姓名升序排序\n\n#### Input\n输入的第一行是学生的个数n（0<n<1000）\n接下来n行是学生的信息。\n学生信息包括姓名和成绩，\n姓名是一个只由字母和数字组成的字符串(小于30个字符)，成绩是一个正整数，姓名和成绩间由若干个空格隔开\n\n#### Output\n将排序后的结果输出。输出n行，每一行为一个学生的信息。\n\n#### Sample Input\n```\n4\nboy 50\nman 100\ngirl 60\nwoman 80\n```\n\n#### Sample Output\n```\nman 100\nwoman 80\ngirl 60\nboy 50\n```\n',1000,32768,'0',7,89,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('79','A number game','#### Description\nThe wide dissemination of calculators and computers is not without disadvantages. Teachers all\nover the world find out that even students in technical disciplines tend to have a surprising lack of\ncalculating ability. Accustomed as they are to the use of calculators and computers, many of them\nare unable to make calculations like 7*8 mentally, or to factor 91 by heart.\n\nWe all know, but who cares?\n\nProfessor Bartjens cares. Professor Bartjens is a bit old-fashioned. He decided to give his students\nsome training in calculating without electronic equipment - even without a slide rule. He invented a\ntwo-person game involving mental calculations.\n\nProfessor Bartjens would write a positive number on the blackboard. During the game more\npositive numbers may appear on the blackboard. The two players will then make moves in turn. A\nplayer on move is obliged to make a move, unless the blackboard is empty, in which case the game\nis over. A move is one of the following:\n+ If you see the number 1 on the blackboard, you may take it. That means: you gain one point, and the number disappears from the blackboard.\n+ If you see a prime number p on the blackboard, you may subtract one. That is: you gain one point, and the p on the blackboard is replaced by p – 1.\n+ If you see a composite number c on the blackboard, you may replace it by two smaller (positive) numbers, a and b, such that a +  b = c. You do not gain any points.\n\nThe goal is of course to obtain as many points as you can.\n\nProfessor Bartjens was hoping that his students would find the game so interesting that they would\nspend all day playing, thereby improving their skills in calculation. Indeed his students did find the\ngame interesting, and spent many hours, not so much playing the game as\ndiscussing optimal strategies.\n\nThe students came to two conclusions. First, the sum of the two players\' points after any given\ngame are the same regardless of the actual scheme played. Thus,\" a player maximising his own\npoints also minimises his opponent\'s! Second, it is always best to take a point when you have the\nchance. Thus, whenever prime numbers or ones are written on the blackboard, the player on move\ntakes one of them.\n\nHere is your problem: given a starting number, and assuming both players play to maximise their\nown points, what will be the outcome?\n\n#### Input\nOn the first line of the input is a single positive integer n, telling the number of test scenarios to\nfollow. Each scenario consists of a single line containing the positive integer $$$m<1000000$$$, the\nnumber initially written on the blackboard.\n\n#### Output\nFor each test scenario, output one line containing two numbers separated by one space character,\nequal to the points gained by the two players, both playing to maximise their own points. The first\nnumber is the number of points gained by the first player.\n\n#### Sample Input\n```\n6\n1\n2\n3\n4\n5\n6\n```\n\n#### Sample Output\n```\n1 0\n1 1\n2 1\n2 2\n3 2\n2 3\n```\n\n',10000,32768,'0',0,78,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('790','A - B','#### Description\nRecently, the hare and the tortoise have begun another race again. Every time, the hare makes the record of his starting time and finishing time, but he does not know how to calculate how long he has run.\n\nNow you are given the starting time and finishing time of the hare, please help him to calculate the entire time he has spent. As we know, the races will finish in a day.\n\n#### Input\nThe first line of the input is a positive integer T (1 ≤ T ≤ 200), which means the number of test cases. The next n line will be n test cases. In each test case, there will be two time A and B separated by one space. The format of the time is “hh:mm:ss”, hh for the hour, mm for the minute and ss for the second. (0 ≤ hh < 24, 0 ≤ mm < 60, 0 ≤ ss < 60).\n\n#### Output\nFor each test case just output the result of time A - B in the format “hh:mm:ss” in a line. See the sample for the detail. We promise the result is positive.\n\n#### Sample Input\n```\n2\n15:40:51 11:10:50\n04:05:00 03:04:01\n```\n\n#### Sample Output\n```\n04:30:01\n01:00:59\n```\n',1000,32768,'0',7,90,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('791','Birthday presents','#### Description\nThere are many kinds of toys in the shop. Any pair of toys of different kinds can match each other, but not the ones of the same kind. So we can tell that if toys can match each other, they are in different kinds.\n\nAs you know, Rabbit likes the number TWO very much. Therefore, he would like to have only two kinds of toys, no matter what kinds of them.\n\nRabbit’s birthday is coming soon. Snoopy would like to buy N toys as birthday presents for Rabbit. She decides to buy two kinds of toys from the shop, but as the salesman is very careless, he sometimes gets the wrong toys for the customers.\n\nSnoopy numbers the toys from 1 to N after she gets the toys. In order to make sure that there are only two kinds of toys, she needs your help.\n\nYour task is to tell Snoopy whether he can sort all the toys into two kinds, so that Rabbit may like the presents.\n\n#### Input\nThe first line of input contains T (0 < T ≤ 100), the number of test cases. \n\nEach case begins with a line containing two integer numbers N and M (1 ≤ N ≤ 1000, 0 ≤ M ≤ 5000), indicating the number of the toys and the relations between of the toys. The toys are numbered from 1 to N. Each of the following M lines contains two integers u and v (1≤u, v ≤ N), indicating that toy u and toy v can match each other.\n\n#### Output\nFor each test case, output one line containing \"Case #x: y\", where x is the case number (starting from 1) and y is either \"Rabbit doesn’t like them\" or \"Rabbit may like them”. If you can sort all the toys into only two kinds, y is “Rabbit may like them”, otherwise y is “Rabbit doesn’t like them”.\n\n#### Sample Input\n```\n3\n2 1\n1 2\n2 0\n4 4\n1 2\n1 3\n1 4\n3 4\n```\n\n#### Sample Output\n```\nCase #1: Rabbit may like them\nCase #2: Rabbit may like them\nCase #3: Rabbit doesn\'t like them\n```\n',1000,32768,'0',7,91,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('792','Constructing a Magic Square','#### Description\nCWJ is a funny rabbit who is fond of mathematics. One day he got to solve an interesting problem involved magic square.\n\nNext paragraph is about what is a magic square, if you have known that you can skip it.\n\nIn recreational mathematics, a magic square of order n is an arrangement of n2 numbers, usually distinct integers, in a square, such that the n numbers in all rows, all columns, and both diagonals sum to the same constant. A normal magic square contains the integers from 1 to n^2. Normal magic squares exist for all orders n ≥ 1 except n = 2, although the case n = 1 is trivial, consisting of a single cell containing the number 1. The smallest nontrivial case, shown below, is of order 3.\n\nNext paragraph is about how to construct a magic square. \n\nA method for constructing magic squares of odd order was published by the French diplomat de la Loubère in his book A new historical relation of the kingdom of Siam (Du Royaume de Siam, 1693), under the chapter entitled The problem of the magical square according to the Indians. The method operates as follows:\n\n1. Starting from the central column of the first row with the number 1, the fundamental movement for filling the squares is diagonally up and right, one step at a time.\n\n2. If a filled square is encountered, one moves vertically down one square instead, then continuing as before. \n\n3. When a move would leave the square, it is wrapped around to the last row or first column, respectively.\n\nSee the following figure to find more detail about the rule.\n\n[[Image:H92.jpg‎|800px]]\n\nPicture 1. Steps of Constructing a 3 Order Magic Square\n\nIf you are still confused with the rule. Let\'s do it step by step. If you has already understood the rule, just skip it.\n\nLet\'s begin in the middle of the top row with the 1.(In this example, n=3,E for empty square)\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| E || 1 || E\n|-\n| E || E || E\n|-\n| E || E || E \n|}\n\nWe suppose that the bottom row is the row immediately above the top row. Moving diagonally upwards to the right means moving up one row and over one column to the right. So the 2 goes in the bottom row one column to the right of the column containing the 1.\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| E || 1 || E\n|-\n| E || E || E\n|-\n| E || E || 2 \n|}\n\nSimilarly, moving right one column from the  rightmost column puts us in the leftmost column, so the 3 must be placed in the leftmost column, and moving up one row we put the 3 in the row above the row containing the 2.\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| E || 1 || E\n|-\n| 3 || E || E\n|-\n| E || E || 2 \n|}\n\nWhat if there is a number already occupying the grid one would like to move into? When this happens, the rules is to abandon, just this once, the plan of moving diagonally upwards to the right and instead just drop down one grid from the grid one is in presently. So the 4 will be placed directly below the 3.\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| E || 1 || E\n|-\n| 3 || E || E\n|-\n| 4 || E || 2 \n|}\n\nThen:\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| E || 1 || 6\n|-\n| 3 || 5 || E\n|-\n| 4 || E || 2 \n|}\n\nSince 6 is in the top row, 7 would normally go in the bottom row. Since 6 is on the right edge, 7 would normally go on the left edge. The position which is in the bottom row and the left edge is the lower left corner. That is where we want to put the 7. Unfortunately, it is already occupied by the number 4. So there is a number in the way, and the rule is then to drop down to the square below the 6. So the 7 should be directly below the 6.\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| E || 1 || 6\n|-\n| 3 || 5 || 7\n|-\n| 4 || E || 2 \n|}\n\nThen:\n{|cellspacing=\"0\" border=\"1\" style=\"background:#F9F9F9 none repeat scroll 0%;border:1px solid #AAAAAA; margin-left: auto; margin-right: auto; text-align: center; width: 6em; height: 6em; table-layout: fixed;\"\n|-\n| 8 || 1 || 6\n|-\n| 3 || 5 || 7\n|-\n| 4 || 9 || 2 \n|}\n\nCWJ want to verify if the rule is correct for a specific odd order magic square (actually it is correct), but he is a lazy guy that he hates to construct magic squares with his pen and paper. So he turns to ask for help of you who is good at programming.\n\nWould you help him to construct a specific odd order magic square?\n\n#### Input\nThe first line of input contains T (1<=T<=100), the number of test cases. There is only line for each test case. Each line contains one odd integer N (3<=N<=999), indicates the order of the magic square to be constructed.\n\n#### Output\n\nFor each test case, print the magic square constructed by using the above method. Each test case contains N lines with N integer per Line. See output sample to find more detail.\n#### Sample Input\n```\n2\n3\n5\n```\n\n#### Sample Output\n```\n8 1 6\n3 5 7\n4 9 2\n17 24 1 8 15\n23 5 7 14 16\n4 6 13 20 22\n10 12 19 21 3\n11 18 25 2 9\n```\n',5000,32768,'0',7,92,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('793','Dragon ball','#### Description\n\nHave you ever watched the cartoon Dragon Ball? If you gather all the balls, your dreams will come true.\n\nThere are also dragon balls in the Kingdom of Rabbit. However, the number of the dragon balls is not seven but X. We will not discuss why they are not called Rabbit Balls here. All the dragon balls of the Kingdom of Rabbit are separately hided in X boxes that can be opened by X keys. The boxes are the same and the keys are the same, too. Every key will disappear after it is used to open the box.The boxes and keys are scattered in a maze.\n\nNaughty Rabbit has got the map of the maze, as you can see in Picture 1, “B” represents a boxes; “K” represents a key; the sign “.” represents an empty place; “#” represents the wall in the maze; “S” represents the position of Snoopy; “E” represents the Exit of the maze.\n```\nB...B\nK.##.\n..E#.\n.K##.\n....S\nPicture 1\n```\n\nSnoopy can turn east, west, north and south in the maze, but every time he can walk only a step. He cannot walk through the walls. But remember that he can walk on everywhere except the walls.\nIn order to send a wish to the Rabbit, Snoopy is going to gather all the dragon balls. With the map of the maze, now you should find out how can Snoopy gather all the dragon balls and leave from the exit with the fewest steps. \n\n#### Input\nThe first line of input contains T (1 ≤ T ≤ 20), the number of test cases. \n\nIn the first line of each test case there is a number N (1≤N≤50), indicating that the size of the maze is N*N. The next N line is the maze and each line exactly has N character. The maze just contains the characters described above.\n\nX, the number of Dragon ball in the maze, is at least 1 and no more than 9, and the number of the keys is the same of the boxes.\n\n#### Output\nFor each test case, if Snoopy can collect all the Dragon balls and leave the maze, you should output in a line the number of the fewest steps that Snoopy should take to collect them and leave the maze. Otherwise output “Rabbit is unhappy” in a line.\n\n#### Sample Input\n```\n2\n4\nE..B\n....\n1. 1. 1. .\n.K#S\n5\nB...B\nK.##.\n..E#.\n.K##.\n....S\n```\n\n#### Sample Output\n```\nCase #1: Rabbit is unhappy\nCase #2: 18\n```\n#### Hint\n\nFor the second sample input, Rabbit is in (5,5), the Exit of the maze is in (3,3), and there are two boxes and two keys. Rabbit’s route may be this: \n\n(5,5) -> (4,2) -> (2,1) ->(1,1)-> (1,5) -> (3,3)\n\nIt will take Rabbit 18 steps to collect all the Dragon balls and leave the maze, and this is the least number of steps that take to collect all the Dragon balls and leave the maze.\n\n',2000,65535,'0',7,93,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('794','Enough Sleeping','#### Description\nRabbit who lives on the east of the island has to run to the west of the island to go to school. On this island, there stand lots of buildings with paths between them. The rabbit, running on these paths, go through these buildings to go to school. It’s really a long way for the rabbit. So it has to get up very early every day and has not enough sleeping.\n\nFortunately, the department of transportation makes an announcement that more roads will be built in the future. And the rabbit thinks that he may find some shortcut to school.\n\nSo urgent to know when it can sleep half an hour more, the rabbit went to the department for the timetable. The department will build the paths one by one according the timetable. And Rabbit want to know after which path will been build he can have enough sleep.\n\nApparently, it is not clever enough for Rabbit to do this. He is in need of your help. As a master of computer, you are the only person that can give him the answer.\n\n#### Input\nThe first line of input contains T (1 ≤ T ≤ 200), the number of test cases. \n\nIn the first line of each test case there is two integers N (1 ≤ N ≤ 500) and M (1 ≤ M ≤ 50000), indicating the number of the buildings and the number of the paths that has been build. Number the building from 1 to N, Building 1 is Rabbit’s home and Building N is school. \n\nEach of the following M lines contains three integers u, v and t (1 ≤ u, v ≤ N, 1 ≤ t ≤ 100), indicating there is a path between Building u and Building v, and it takes Rabbit t minutes to go through it.\n\nThe next line is an integer K (1 ≤ K ≤ 10000), indicating the number of paths that will be build in the future. The department will build the paths one by one according the following order.\n\nEach of the following K lines contains three integers u, v and t (1 ≤ u, v ≤ N, 1 ≤ t ≤ 100), indicating there is a path between Building u and Building v, and it takes Rabbit t minutes to go through it. We number them from 1 to K.\n\n#### Output\nFor each test case, you should output the number of path, after which will have been build, Rabbit can have enough sleep. Otherwise you should output -1 instead.\n\n#### Sample Input\n```\n2\n5 6\n1 5 100\n1 3 40\n1 2 20\n3 5 50\n3 4 20\n1 4 80\n4 \n1 5 90\n3 4 10\n4 5 10\n3 5 20\n3 2\n1 2 10\n2 3 40\n1\n1 3 40\n```\n\n#### Sample Output\n```\n3\n-1\n```\n#### Hint\nFor the first sample, it takes the Rabbit 90min to go to school at the beginning. Firstly it goes to the 3rd building for 40min, and goes to the 5th building for 50min.\n\nBut after the 3rd path has been build, it can go to school just use 60min.The Rabbit takes 40 min go to the 3rd building. And then go to the 4th building with 10min. Finally, it goes to the 5th building for 10min, totally 60min.\n\nSo it can sleep half an hour more after the 3rd path has been build.\n',3000,32768,'0',7,94,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('795','Flying game','#### Description\nRabbit likes playing flying game very much. So he wants to be the chessman. But he jumps instead of flying. He draws N grids in a line and numbers them from 1 to N.\n\nHe starts from the grid no. 1, and then jump according to the number on the dice he threw. When his jump went beyond the grid no. N, he will jump back the excess amount of grids. For instance, he stands on the grid no. [N-2] and the number on the dice turns out to be 6. In this case, he has to jump to the grid no. N then back 4 steps to the grid no. [N-4].\n\nOf course, he can choose not to move if he doesn’t like the number on the dice.  \n\nHaving played for a long time, the impatient rabbit is eager to jump to the grid NO.N. Therefore, he starts throwing the dice and makes a record to find out the most efficient way which takes least steps to the ending grid.\n\n#### Input\nThe first line of the input is one integer T (1 ≤ T ≤ 100), and then following T test cases follow.\n\nEach test case begins with a line containing only two integers N and M (6 ≤ N ≤ 500, 1 ≤ M ≤ 2000), N means there are N grids and M means Rabbit has recorded M number of dice. The following line is M integers, all the integers which are between 1 and 6.\n\n#### Output\nFor each test case, if Rabbit can jump to the grid no. N, please output the minimum step it takes to go to the grid no. N in one line. Otherwise output -1 instead.\n\n#### Sample Input\n```\n3\n6 6\n1 2 3 4 5 6\n6 4\n1 2 1 3\n7 4\n1 4 4 4\n```\n\n#### Sample Output\n```\n1\n2\n-1\n```\n== Hint == \nFor the second test case, firstly Rabbit is on the grid no. 1, he will drop the first “1”, he jump to the grid no. 3 when the number is “2”, then he drop a “1”, finally he jump to the grid no. 6 when the number is “3”. So it take him 2 step to the ending grid.\n',5000,32768,'0',7,95,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('796','Get the best','#### Description\nRabbit has a different thought “The last the best”.\n\nNow Rabbit is given number 1 to number N. The first time, Rabbit takes out the odd numbers, like 1, 3, 5, 7…… He then makes a list of the rest numbers, from the smallest one to the biggest. After that, he continues to take out the numbers whose positions are odd. At last, there is only one number left; it is the last one, which is the favorite number of Rabbit.\n\nSo we can know that for each N if we do as above stated there will be a number left, which is not larger than N.\n\n#### Input\nThe first line of the input is a positive integer T (1≤T≤200), which means the number of test cases. For each test case there is a positive integer N (1≤N≤100,000,000).\n\n#### Output\nFor each test case, output one line containing the number that Rabbit likes best.\n\n#### Sample Input\n```\n2\n1\n5\n```\n\n#### Sample Output\n```\n1\n4\n```\n',1000,32768,'0',7,96,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('797','How many “rabbit”?','#### Description\nEveryone loves rabbits, so do I. \n\nThis task is very simple. You are supposed to find out “rabbit\" as many as possible in these long words. As we know “hare” is also a kind of rabbit. Such as the \"rabbithellorabbitwordhhhare\", we can find three “rabbit”s, including one “hare”..\n\n#### Input\nThere will be several test cases. In the first line there is a number T (1≤T≤100), the number of test case. \n\nFor each test case there is string in one line, the length of the string is less than 400. And the characters in the string all are lowercase, without any other character.\n\n#### Output\nFor each test case you should print the numbers of rabbits in a line.\n\n#### Sample Input\n```\n2\nrabbithellorabbitwordhhhare\nrabbit\n```\n\n#### Sample Output\n```\n3\n1\n```\n',1000,32768,'0',7,97,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('798','Penney Game','#### Description\nPenney’s game is a simple game typically played by two players. One version of the game calls for each player to choose a unique three-coin sequence such as HEADS TAILS HEADS (HTH). A fair\ncoin is tossed sequentially some number of times until one of the two sequences appears. The\nplayer who chose the first sequence to appear wins the game.\n\nFor this problem, you will write a program that implements a variation on the Penney Game. You will read a sequence of 40 coin tosses and determine how many times each three-coin sequence\nappears. Obviously there are eight such three-coin sequences: TTT, TTH, THT, THH, HTT, HTH,\nHHT and HHH. Sequences may overlap. For example, if all 40 coin tosses are heads, then the\nsequence HHH appears 38 times.\n\n看完上面的描述？你懂了吗？不懂没关系，我跟你讲把。\n\n题目的意思可以理解为给你一个长度为40，只由H和T组成的字符串，\n\n问你在这个字符串中TTT, TTH, THT, THH, HTT, HTH,HHT and HHH这个8个字符串出现的次数分别是多少？\n\n#### Input\nThe first line of input contains a single integer P, (1 <= P <= 1000), which is the number of data sets that follow. Each data set consists of 2 lines. The first line contains the data set number N. The second\nline contains the sequence of 40 coin tosses. Each toss is represented as an upper case H or an upper case T, for heads or tails, respectively. There will be no spaces on any input line.\n\n它怎么输入的呢？这个我就不详细讲了，大家仔细看清楚，输入的都是大写。\n\n#### Output\nFor each data set there is one line of output. It contains the data set number followed by a single space, followed by the number of occurrences of each three-coin sequence, in the order shown above, with a space between each one. There should be a total of 9 space separated decimal integers on each output line.\n\n对于每一个测试数据，输出一行。 \n\n#### Sample Input\n```\n4\n1\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\n2\nTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\n3\nHHTTTHHTTTHTHHTHHTTHTTTHHHTHTTHTTHTTTHTH\n4\nHTHTHHHTHHHTHTHHHHTTTHTTTTTHHTTTTHTHHHHT\n```\n\n#### Sample Output\n```\n1 0 0 0 0 0 0 0 38\n2 38 0 0 0 0 0 0 0\n3 4 7 6 4 7 4 5 1\n4 6 3 4 5 3 6 5 6\n```\n',3000,32768,'0',7,98,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('799','Nim-B* Sum','#### Description\n\'\'* This problem has nothing to do with siting sewage plants, power lines or wind farms. NIM is an ambigram .\'\'\n\nThe game of NIM is played with any number of piles of objects with any number of objects in each pile. At each turn, a player takes one or more (up to all) objects from one pile. In the normal form of the game, the player who takes the last object is the winner. There is a well-known strategy for this\ngame based on the nim-2 sum.\n\nThe Nim-B sum (nim sum base B) of two non-negative integers X and Y (written NimSum(B, X, Y)) is computed as follows:\n\n    1) Write each of X and Y in base B.\n    2) Each digit in base B of the Nim-B sum is the sum modulo B of the rresponding digits in the base B representation of X and Y.\n\nFor example:\n     NimSum(2, 123, 456) = 1111011 ¤ 111001000 = 110110011 = 435\n     NimSum(3, 123, 456) = 11120 ¤ 121220 = 102010 = 300\n     NimSum(4, 123, 456) = 1323 ¤ 13020 = 10303 = 307\nThe strategy for normal form Nim is to compute the Nim-2 sum T of the sizes of all piles. If at any time, you end your turn with T = 0, you are guaranteed a WIN. Any opponent move must leave T not 0 and there is always a move to get T back to 0. This is done by computing NimSum(2, T, PS)for each pile; if this is less than the pile size (PS), compute the difference between the PS and the Nim-2 sum and remove it from that pile as your next move.\n\nWrite a program to compute NimSum(B, X, Y).\n\n\n看完上面那么多东西，很晕把。\n\n计算NimSum(B, X, Y) （B、X、Y是十进制表示的数）可以分下面几步去完成：\n\n1、将X和Y分别用B进制表示\n\n2、NimSum的每一位的值就是用B进制表示的X、Y的每一位的值相加再对B取模，即是$$$NimSum_i = (x_i + y_i)%B$$$\n\n3、将B进制数NimSum转化为10进制数输出\n\n```\n例如   NimSum(4, 123, 456)\n\n123 (based 10) =  1323 (based 4)\n456 (based 10) = 13020 (based 4)\n                 10303 (based 4) = 307 (based 10)\n```\n\n#### Input\nThe first line of input contains a single integer P, (1 <= P <= 1000), which is the number of data sets that follow. Each data set is a single line that ontains the data set number, followed by a space, followed by three space  separated decimal integers, B, X and Y. 2 <= B <= 2000000, 0 <= X <= 2000000, 0 <= Y <= 2000000.\n\n#### Output\nFor each data set there is one line of output. It contains the data set number followed by a single space, followed by N, the decimal representation of the Nim sum in base B of X and Y.\n\n#### Sample Input\n```\n4\n1 2 123 456\n2 3 123 456\n3 4 123 456\n4 5 123 456\n```\n\n#### Sample Output\n```\n1 435\n2 300\n3 307\n4 429\n```\n',3000,32768,'0',7,99,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('8','Substitution','#### Description\nSimple Substitution is a method of encryption. It can be demonstrated by writing out the alphabet in some order to represent the substitution. Let\'s have a look on an example. \n\nExamples:\n```\nPlaintext alphabet: 	abcdefghijklmnopqrstuvwxyz\nCiphertext alphabet: 	ZEBRASCDFGHIJKLMNOPQTUVWXY\n\nA message of \"flee at once. we are discovered!\"\nEncoded to   \"SIAA ZQ LKBA. VA ZOA RFPBLUAOAR!\"\n```\n\nYour job is write a program, which can tell if two strings can be a pair of plain and cipher text.\n\n#### Input\nThe first number $$$T(1\\leq T \\leq 50,000)$$$ means how many test cases will followed. For every test case will be two string in two lines. Both the string will contain lower only, and the length will in the range $$$[1,50]\\,$$$ only.\n\n#### Output\nFor every test case output \'Yes\' if it can be a pair, or \'No\' if it can not be, in one line.\n\n#### Sample Input\n```\n2\nalec\nalec\naaaa\nbbbc\n```\n\n#### Sample Output\n```\nYes\nNo\n```\n',1000,1024,'0',0,7,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('80','Weekend Lottery','#### Description\nSome people are against lotteries on moral grounds, some governments forbid lotteries, but\nwith the advent of Internet this popular form of gambling, which started in China and helped\nfinance the Great Wall, is thriving.\nBut the odds of winning a national lottery are tiny, and therefore your college classmates\ndecided to organize a private lottery, with draws every Friday. The lottery is based on a popular\nstyle: a student who wants to bet chooses C distinct numbers from 1 to K and pays US$ 1.00\n(notice that traditional lotteries such as US National Lotto use C = 6 and K = 49). On Friday\nduring lunch C numbers (also from 1 to K) are drawn. The student whose bet has the largest\nnumber of correct guesses receives the amount collected in the bets. This amount is shared in\ncase of ties and accumulates to next week if no one guessed any of the numbers drawn.\nSome of your colleagues do not believe in the laws of probability and asked you to write a\nprogram that determines the numbers that have been drawn the fewest times considering all\nprevious draws, so that they can bet on those numbers.\n#### Input\nThe input contains several test cases. The first line of a test case contains three integers\nN, C and K which indicate respectively the number of draws that have already happened\n$$$(1 \\leq N \\leq 10000),$$$ how many numbers comprises a bet $$$(1 \\leq C \\leq 10)$$$ and the maximum value\nof the numbers to be chosen in a bet $$$(C < K \\leq 100).$$$ Each of the next N lines contains C\ndistinct integers Xi indicating the numbers drawn in each previous contest ($$$1 \\leq Xi \\leq K$$$, for\n$$$1 \\leq i \\leq C$$$). The end of input is indicated by N = C = K = 0.\nThe input must be read from file lottery.in.\n#### Output\nFor each test case in the input your program must write one line of output, containing the\nset of numbers that have been drawn the fewest times. This set must be printed as a list, in\nincreasing order of numbers. Leave one blank space between two consecutive numbers in the\nlist.\nThe output must be written to standard output.\n\n#### Sample Input\n```\n5 4 6\n6 2 3 4\n3 4 6 5\n2 3 6 5\n4 5 2 6\n2 3 6 4\n4 3 4\n3 2 1\n2 1 4\n4 3 2\n1 4 3\n0 0 0\n```\n\n#### Sample Output\n```\n1\n1 2 3 4\n```\n',10000,32768,'0',0,79,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('800','Just The Simple Fax','#### Description\nFax machines use a form of compression based on run-length encoding. Run-length encoding (RLE) is a very simple form of data compression in which runs of data (that is, sequences in which the same data value occurs in many consecutive data elements) are stored as a single data value and count, rather than as the original run. This is most useful on data that contains many such runs: for example, relatively simple graphic images such as icons, text, and line drawings. It is not useful with files that don\'t have many runs as it could potentially double the file size (photograph, for example).\n\nFor this problem, you will write a program that encodes a block of data using a very simple RLE algorithm. A run is encoded using a two byte sequence. The first byte of the sequence contains the count, and the second contains the value to repeat. The count is encoded using an 8 bit value with the high order bit set to 1. The remaining 7 bits represent the count-3. This gives a maximum run count of 130 per 2 byte sequence. (This implies that the minimum run count is 3). Bytes that are not part of a run are encoded as-is with a prefix byte indicating the count of bytes in the non-run minus 1, 0 through 127, presenting a range of 1 - 128 (the high order bit will always be 0 in the case of nonrun\ndata).\n\nIf a run contains more than 130 bytes, then it must be encoded using multiple sequences, the first of which will always be a run of 130. All runs of 3 or more must be encoded as a run. If a non-run contains more than 128 bytes, then multiple non-run sequences must be used. For example, a run of 262 would be encoded as two runs of 130 followed by a non-run of 2.\n\n#### Input\nThe first line of input contains a single integer P, (1 <= P <= 1000), which is the number of data sets that follow. Each data set consists of multiple lines. The first line contains two (2) decimal integer values: the problem number, followed by a space, followed by the number of bytes B, (1 <= B <= 5000), to\nencode. The remaining line(s) contain(s) the data to be encoded. Each line of data to encode will contain 80 hexadecimal digits (except the last line, which may contain less). 2 hexadecimal digits are used to represent each byte. Hexadecimal digits are: 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F.\n\n#### Output\nFor each data set, there are multiple lines of output. The first line contains a decimal integer giving the data set number followed by a single space, followed by a decimal integer giving the total number of encoded bytes. The remaining lines contain the encoded data each with 80 hexadecimal digits, except the last, which may contain less.\n\n#### Sample Input\n```\n4\n1 1\n07\n2 5\nF4A5A5A5A5\n3 44\n0000000000000000FFFFFF66665A5A5A5A5A71727374758008011011135555555555555501020399\n777777CC\n4 40\n68686868686868686868686868686868686868686868686868686868686868686868686868686868\n```\n\n#### Sample Output\n```\n1 2\n0007\n2 4\n00F481A5\n3 32\n850080FF016666825A0A717273747580080110111384550301020399807700CC\n4 2\nA568\n```\n',3000,32768,'0',8,0,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('801','Show Me The Fax','#### Description\nFax machines use a form of compression based on run-length encoding. Run-length encoding (RLE) is a very simple form of data compression in which runs of data (that is, sequences in which the same data value occurs in many consecutive data elements) are stored as a single data value and count, rather than as the original run. This is most useful on data that contains many such runs: for example, relatively simple graphic images such as icons, text, and line awings. It is not useful with files that don\'t have many runs as it could potentially double the file size (photograph, for example).\n\nFor this problem, you will write a program that decodes a block of data using a very simple RLE algorithm. A run is encoded using a two byte sequence. The first byte of the sequence contains the count, and the second contains the value to repeat. The count is encoded using an 8 bit value with the high order bit set to 1. The remaining 7 bits represent the count-3. This gives a maximum run count of 130 per 2 byte sequence. (This implies that the minimum run count is 3). Bytes that are not part of a run are encoded as-is with a prefix byte indicating the count of bytes in the non-run minus 1, 0 through 127, resenting a range of 1 - 128 (the high order bit will always be 0 in the case of nonrun\ndata).\n\n#### Input\nThe first line of input contains a single integer P, (1 <= P <= 1000), which is the number of data sets that follow. Each data set consists of multiple lines. The first line contains two (2) decimal integer values: the problem number,followed by a space, followed by the number of bytes B, (1 <= B <= 5000), to code. The remaining line(s) contain(s) the data to be decoded. Each line of data to decode contains 80 hexadecimal digits (except the last line, which may contain less). 2 hexadecimal digits are used to represent each byte. Hexadecimal digits are: 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F\n\n#### Output\nFor each data set, there are multiple lines of output. The first line contains a decimal integer giving the data set number followed by a single space, followed by a decimal integer giving the total number of decoded bytes. The remaining lines contain the decoded data, 80 hexadecimal digits per line, except the last line which may contain less.\n\n#### Sample Input\n```\n4\n1 2\n0007\n2 4\n00F481A5\n3 32\n850080FF016666825A0A717273747580080110111384550301020399807700CC\n4 2\nA568\n```\n\n#### Sample Output\n```\n1 1\n07\n2 5\nF4A5A5A5A5\n3 44\n0000000000000000FFFFFF66665A5A5A5A5A71727374758008011011135555555555555501020399\n777777CC\n4 40\n68686868686868686868686868686868686868686868686868686868686868686868686868686868\n```\n',3000,32768,'0',8,1,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('802','Non-Decreasing Digits','#### Description\nA number is said to be made up of non-decreasing digits if all the digits to the left of any digit is less than or equal to that digit. For example, the four-digit number 1234 is composed of digits that are non-decreasing. Some other four-digit numbers that are composed of non-decreasing digits are 0011, 1111, 1112, 1122, 2223. As it turns out, there are exactly 715 four-digit numbers composed of non-decreasing digits. Notice that leading zeroes are required: 0000, 0001, 0002 are all valid four-digit numbers with nondecreasing\ndigits.\n\nFor this problem, you will write a program that determines how many such numbers there are with a\nspecified number of digits.\n\n#### Input\nThe first line of input contains a single integer P, (1 <= P <= 1000), which is the number of data sets that follow. Each data set is a single line that contains the data set number, followed by a space, followed by a decimal integer giving the number of digits N, (1 <= N <= 64).\n\n#### Output\nFor each data set there is one line of output. It contains the data set number followed by a single space, followed by the number of N digit values that are composed entirely of non-decreasing digits.\n\n#### Sample Input\n```\n3\n1 2\n2 3\n3 4\n```\n\n#### Sample Output\n```\n1 55\n2 220\n3 715\n```\n',3000,32768,'0',8,2,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('803','I^2 C','#### Description\nI²C (Inter-Integrated Circuit) is a serial communication protocol that is used to attach low-speed peripherals (~100 kbit/sec) to a motherboard, embedded system or cell phone. A single I2C data bus may have several devices attached, each with a different 7-bit address. One of the nice things about I2C is that it only requires two signal lines, SCL (clock) and SDA (data). One bit of data is presented on the I2C data bus (SDA line) per clock (SCL). Typically, one device on the bus is designated as the master, and the other devices are slaves. The master will initiate communication to a specific device\non the bus by specifying its address in a transaction.\n\nIf there is no activity on the I2C bus, both the SCL and SDA signals are in a high state (1). The master initiates a transaction on the bus by pulling the SDA signal to a low state (0), while the SCL signal is high (1): this is called a START bit. At this point, all slaves on the bus must start paying attention to the signaling to see if the transaction is directed at them. The master will then send the 7-bit slave address (most significant bit first), one bit at-a-time. This is done by bringing the SCL signal low (0), presenting the next bit value on the SDA line, then releasing the SCL signal so it goes high (1). The slaves will read the SDA signal as soon as the clock goes high (1). This ation is repeated 7 times, one for each bit of the desired slave address. Another data bit is presented on the bus in the same manner. This last bit is an indicator as to whether the master wants to read from (1) or write to (0) the addressed slave device. When a slave recognizes its address on the bus, it must\nacknowledge (ACK) that it is available and ready by pulling the SDA line low. The master will see this the next time it brings the clock high, at which point, the data transfer can begin. If no ACK is seen this means that the slave specified by the address does not exist. Note: If no device pulls a signal low, it will go high by default; a device simply releases a signal, and it will go high.\n\nData is always transferred as 8 bit bytes, 1 bit at-a-time, most significant bit first. After each byte, the slave must ACK the master by pulling the SDA line low. If the slave is not ready to transmit (or receive) the next byte of data, it may pull the SCL line low. This will cause the master to go into a\nwait mode until the slave is ready. The slave indicates it is ready by bringing SDA low, and releasing the SCL line so it goes high. The next byte of data can then be transferred. The sequence repeats until the master decides all the data has been transferred, at which point it will send a STOP bit. This is done when the master lets the SDA line go high while the SCL line is high.\n\nFor this problem, you will write a program that sniffs the I2C bus signals and displays the details of transactions.\n\n#### Input\nThe first line of input contains a single integer P, (1 <= P <= 1000), which is the number of data sets that follow. Each data set consists of multiple lines which represents a single I2C transaction. The first line contains two (2) decimal integer values: the problem number, followed by a space, followed by\nthe number of signal samples S, (1 <= S <= 1161), for the transaction. The remaining line(s) contain(s) the signal samples. Each line of samples contains 40 samples (except the last which may contain less). Each sample consists of 2 binary digits characters representing SCL and SDA in that order.\n\n#### Output\nFor each data set, display a single line containing a decimal integer giving the data set number followed by a single space, followed by a description of the transaction. There will only be six different descriptions (two non-error cases, and four error cases):\n\nNon-error cases:\n    WRITE OF n BYTES TO SLAVE xx\n    READ OF n BYTES FROM SLAVE xx\n\nError cases:\n    ERROR NO START BIT\n    ERROR NO STOP BIT\n    ERROR NO ACK FROM SLAVE xx\n    ERROR NO ACK FOR DATA\n\nn is a decimal integer (1 – 128) representing the number of data bytes.\nxx is a 2 digit hexadecimal value (00-7F) representing the slave address.\n\nThe ERROR NO ACK FROM SLAVE xx case occurs when there is no ACK for the supplied address \n\nThe ERROR NO ACK FOR DATA case occurs when there is no ACK after a data byte\nFor the error cases, only the first error detected should be displayed.\n\n#### Sample Input\n```\n4\n1 97\n01111001110010001000100111011101110111001000100010011100100010001000100010001000\n10001001110010001000100010011100100010001001110010001000100111001000100010001001\n1100100010001001110111001000101111\n2 169\n01111000100010011100100010001001110010001000100010011100100010001000100010001000\n10001001110010001000100010011100100010001001110010001000100111001000100010001001\n11001000100010011101110010001000100111001000100111001000100010001000100111001000\n10011100100111001000100010011100100010011101110010001000100010011100100010011101\n110111001000101111\n3 60\n01111000100010001001110010011101110010001000100010011100100010001000100010001000\n1000100111001000100010001001110010001111\n4 40\n01111000100010011101110010011100100111001111111111111111111111111111111111111111\n```\n\n#### Sample Output\n```\n1 READ OF 4 BYTES FROM SLAVE 47\n2 WRITE OF 8 BYTES TO SLAVE 11\n3 ERROR NO STOP BIT\n4 ERROR NO ACK FROM SLAVE 0B\n```\n',3000,32768,'0',8,3,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('804','Old Faioned Typeſetting','#### Description\nIn Olden Days, before digital typesetting (before Babbage, even), typesetting was an art, practiced by highly skilled craftsmen. Certain character binations, such as a-e or f-i were typeset as a single character, called a ligature, to save space and to make the characters look better together on the printed page (the ligatures for a-e and f-i were ‘æ’ and ‘fi’, respectively; the table on the next page, lists all possible ligature combinations).\n\nIn addition, there were two different versions of the lowercase letter s: the “long s” and the “short s”. Only the short s is used today. The rules for when to use which version are odd, but straightforward:\n1.Short s is used at the end of a word, or before punctuation within a word, such as a hyphen or apostrophe: programs, success, hocus-pocus, revis’d. (programs, ſucceſs, hocus-pocus, revis’d)\n2.Short s is used before the letters ‘f’, ‘b’, or ‘k’: transfer, husband, ask, successful. (transfer, husband, ask, ſucceſsful)\n3.Long s is used everywhere else, except...\n4.It is possible that a compound word consists of a word ending in a double s followed by a word beginning with s (this is the only situation where the sequence “sss” occurs in English text). In this case, the middle s is set short and the other two are set long: crossstitch, crossstaff. (croſsﬅitch,\ncroſsﬅaff)\n\nNote that a “word” is not the same thing as an “identifier.” While identifiers can contain punctuation marks such as ‘_’ or ‘$’, words can contain only letters (at least as far as typographers are concerned). Therefore, identifiers like “radius3” and “adios_amigo” would be typeset as “radius3” and “adios_amigo,” respectively, rather than “radiuſ3” and “adioſ_amigo.”\n\n#### Input\nThe first line of input contains a single integer P, (1 £ P £ 1000), which is the number of data sets that follow. Each data set consists of a single line containing the data set number, followed by a space, followed by a string of no more than 1000 characters.\n\n#### Output\nFor each data set, print the data set number, a space, and the input string, with the appropriate ligature and “long s” codes substituted into the string. The table on the next page shows the code strings to use for each symbol or ligature (note that the short s remains unchanged on output; note also that ‘Æ’ and ‘OE’ are the only uppercase ligatures):\n\nInput Sequence Symbol Output Code\n[[File:I04_0 1.gif|center|400px]]\nNote that the rules for the use of long and short s can combine with these ligatures in interesting (and not always obvious) ways. For example, the input word “crossstitch” becomes “cro[longs]s[longst]itch,” not “cro[longs]s[longs]titch,”\n\n#### Sample Input\n```\n3\n1 Last night, we went to see\n2 \"Oedipus Rex\" at the\n3 AEgyptian\'s theater.\n```\n\n#### Sample Output\n```\n1 La[longst] night, we went to [longs]ee\n2 \"[OE]dipus Rex\" at the\n3 [AE]gyptian\'s theater.\n```\n\n#### Hint\nWe are sorry about OE and oe, but you should change both Oe and OE into [OE], and both oe and oE must be changed into [oe]. Be careful!\n',3000,32768,'0',8,4,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('805','Scanning UPC Barcodes','#### Description\n[[File:I05_1.gif|right|200px]]\nThe UPC-A bar code encodes 12 decimal digits in alternating “dark”\nand “light” bars as 15 patterns SLLLLLLMRRRRRRE where S is the\nstart pattern 101 (1 indicates “dark” and 0 indicates “light”), M is the\nmiddle pattern 01010 and E is the end pattern 101. Each L is a left\npattern corresponding to one of the first 6 digits and each R is a right\npattern corresponding to one of the last 6 digits. The width of each\nbar is a multiple of a fixed value (the X dimension). Again a 1 indicates a\n“dark” band and 0 indicates a “light” band. The tick marks above the bar\ncode illustration indicate the start of each code. There are 3 + 5 + 3\n+ 12*7 = 95 bands total. In addition there must be at least 9 “light”\nbands at either end of the bar code.\n\n[[File:I05_2.gif|right|200px]]\n\n```\nThe last decimal digit in the code is a check sum digit which is computed\nas follows:\n    CheckSum = 3*(digit1 + digit3 + digit5 + digit7 +\n    digit9 + digit11) + digit2 + digit4 + digit6 + digit8 + digit10.\n    Code = CheckSum Mod(10);\n    If Code = 0, check digit = 0. Other wise, check digit = (10 – Code).\n```\nA bar code scanner could use a camera to take a narrow image across the bar code and deduce the\non/off pattern of bands as below:\n\n[[File:I05_3.gif|center|800px]]\n\nif the code was scanned right side up or the following if it was scanned upside down:\n\n[[File:I05_4.gif|center|800px]]\n\nAgain, the tick marks above each image indicate the start of each code.\nUnfortunately, the images are not always this clear due to lack of contrast or reflections off shiny\nmaterial, as shown here:\n\n[[File:I05_5.gif|center|800px]]\n\nWhen scanning the image, it is not always clear whether a particular band is dark or light. It is often\nstill possible to determine the bar code even if we do not know exactly whether a particular band is\n“dark” or “light”. First, only 20 of 128 possible 7-bit digit codes are used. Second, only codes with a\ncorrect check digit are valid. Finally, even if several codes match, it is unlikely that more than one will\nbe in the database for a particular application. For this problem we will use a ‘?’ to indicate\nuncertainty in the value of a particular band. The start (S), middle (M) and end (E) codes must match\nin order for a match to be considered valid.\nWrite a program which takes as input a string of 95 characters, ‘0’, ‘1’, or ‘?’ and outputs all valid\nUPC-A digit strings which could scan to that sequence of band values in either direction.\n\n#### Input\nThe first line of input contains a single integer P, (1 <= P <= 1000), which is the number of data sets that\nfollow. Each data set consists of 3 lines. The first line contains a single decimal integer which is the\nproblem number (starting at 1). The second line contains the first 50 characters of the input string.\nThe third line contains the final 45 characters of the input string. As noted above, the input string\nconsists of only the characters ‘0’, ‘1’, or ‘?’.\n\n#### Output\nFor each data set there are varying number of lines of output. If no UPC codes match the input\nstring, then the only line of output should contain the problem number (starting at 1), a space, then\nthe digit 0. If more than 8 codes match the input string, the first line of output contains the problem\nnumber, a space, then the digit 9. This line is followed by the first 8 codes which match, in ascending\nnumeric order, one per line. Otherwise, the first line of output contains the problem number, a space,\nthen a single decimal digit (1-8) which is the number of matching codes. This line is followed by the\nmatching codes, in ascending numeric order, one per line.\n\n#### Sample Input\n```\n3\n1\n10100110110100111010000100110110001001000010101010\n100011010110001101110110100011000101011000101\n2\n1010001101010001100010????????????1101011000101010\n101000010010001101100100001011100101101100101\n3\n1010001101010001100010????????????1101011000101010\n```\n\n#### Sample Output\n<pre>1 1\n049705682302\n2 2\n049705682302\n049835682302\n3 9\n049005681302\n049005682002\n049035688302\n049035689002\n049105684302\n049105685002\n049135681302\n049135682002\n```\n',3000,32768,'0',8,5,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('806','Cutting the Cake','#### Description\nFor each birthday of twins James and John, their mother bakes a special triangular birthday cake with\na different shape each year. The sides of the cake are frosted with chocolate icing and the top is\nfrosted with special pink icing. James and John both like both types of icing and insist that they get\ntheir equal share of each.\n\nWrite a program to help James and John cut the cake so they each get an equal share. A triangle\nequalizer is a line through a triangle that simultaneously divides the perimeter and area of the triangle\ninto two equal pieces. If the triangle is isosceles, the bisector of the angle between two equal sides\nis such a line (A and B below). In general, a triangle may have1, 2 or 3 such lines (2 requires special\nconditions not likely to be found in a random triangle).\n\n[[File:I06_1.gif|center|600px]]\n\nWrite a program to compute the equation of one such dividing line (it does not matter which one) for a\nnon-degenerate input triangle. You should use double-precision calculations for intermediate values.\n\n#### Input\nThe first line of input contains a single integer P, (1 <= P <= 1000), which is the number of data sets that\nfollow. Each data set consists of a single line containing a single decimal integer and 6 floating point\nnumbers. The integer is the data set number (starting at 1). The floating-point numbers are the\ncoordinates of the vertices of the input triangle: x0, y0, x1, y1, x2, y2.\n\n#### Output\nFor each data set, there is a single line of output. The line contains a decimal integer giving the data\nset number followed by a single space, followed by 3 space-separated floating-point numbers to 5\ndecimal places. The 3 floating-point values are the coefficients (A, B and C) of the equation of the\nequalizer line:\n\n                                       A * x + B * y = C\nwhere A*A + B*B = 1.0 and A >= 0.\n\n#### Sample Input\n```\n4\n1 0 0 4 10 8 0\n2 0 0 10 8 8 0\n3 0 0 -8 4.5 5 0\n4 0 0 -5 4.6 5 0\n```\n\n#### Sample Output\n```\n1 1.00000 0.00000 4.00000\n2 0.99347 -0.11408 5.98771\n3 0.45018 0.89294 0.81417\n4 0.66369 0.74801 1.01564\n```\n',3000,32768,'0',8,6,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('807','Digit','#### Description\n输入正整数n，输出n是几位数。\n#### Input\n第一行为一个整数 t  (t<100)，表示测试数据的组数。接下来有 t 行，每行有个n(0<=n<=2,000,000,000)。\n#### Output\n输出t行，对应每组数据的答案。\n#### Sample Input\n```\n3\n0\n500\n712364\n```\n\n#### Sample Output\n```\n1\n3\n6\n```',1000,32768,'0',8,7,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('808','Word','#### Description\n输入若干个单词，输出他们的品均长度。单词只包含字母，用空格隔开。\n#### Input\n第一行为一个整数 t  (t<100)，表示测试数据的组数。接下来有 t 行，每行有若干个单词，总长度不超过1000\n#### Output\n输出 t 行，为各组数据的答案，输出结果为下取整,舍去小数\n\n#### Sample Input\n```\n3\nYou should carry on\njust get it    away\nStop\n```\n\n#### Sample Output\n```\n4\n3\n4\n```',1000,32768,'0',8,8,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('809','Rotate','#### Description\n输入一个n*n的字符矩阵，把它向左旋转90度，然后输出结果\n#### Input\n第一行为一个整数 t  (t<50)，表示测试数据的组数。接下来有 t 组数据，每组数据第一行为一个正整数n （1<n<50）。接下来n行，每行n个可显字符。\n#### Output\n对于每组数据，输出旋转后的矩阵，然后输出一个空行。\n#### Sample Input\n```\n3\n3\nabc\nabc\nabc\n2\nab\nba\n2\naa\nbb\n```\n\n#### Sample Output\n```\nccc\nbbb\naaa\n\nba\nab\n\nab\nab\n\n```',1000,32768,'0',8,9,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('81','Lazy Jumping Frog','#### Description\nMr. Frog lives in a grid-like marsh of rectangular shape, composed of equally-sized cells,some of which are dry, some of which are only watery places. Mr. Frog lives in a dry cell andcan jump only from a dry cell to another dry cell on his wanderings around the marsh.\n\nMr. Frog wants to visit his girlfriend, Ms. Toad, who also lives in a dry cell in the same marsh. But Mr. Frog is lazy, and wants to spend the minimum amount of energy in his jumpingway to Ms. Toad’s home. Mr. Frog knows how much energy he spends in any of his jumps. For any single jump, Mr. Frog always uses the following figure to determine which are the possible\ntarget cells from his current position (the cell marked F), and the corresponding energy spent in the jump, in calories. Any other cell is unreachable from Mr. Frog’s current position with a single jump.\n\n[[Image:A80.jpg|center]]\n\nYour task is to determine the minimum amount of energy that Mr. Frog needs to spend to get from his home to Ms. Toad’s home.\n\n#### Input\nThe input contains several test cases. The first line of a test case contains two integers, C and R, indicating respectively the number of columns and rows of the marsh $$$(1 \\leq C,R \\leq 1000)$$$. The second line of a test case contains four integers Cf , Rf , Ct, and Rt, where $$$(C_f ,R_f )$$$ specify Mr. Frog’s home location and $$$(C_t,R_t)$$$ specify Ms. Toad’s home location $$$(1 \\leq C_f ,C_t \\leq C \\,and\\, 1 \\leq R_f ,R_t \\leq R)$$$. The third line of a test case contains an integer$$$ W (0 \\leq W \\leq 1000)$$$ indicating the number of watery places in the marsh. Each of the next W lines contains four integers C1,\nR1, C2, and R2 $$$(1 \\leq C_1 \\leq C_2 \\leq C and 1 \\leq R_1 \\leq R_2 \\leq R)$$$ describing a rectangular watery place comprising cells whose coordinates (x, y) are so that $$$C_1 \\leq x \\leq C_2 \\,and\\, R_1 \\leq y \\leq R_2$$$. The end of input is indicated by C = R = 0.\n\nThe input must be read from standard input.\n\n#### Output\nFor each test case in the input, your program must produce one line of output, containing the minimum calories consumed by Mr. Frog to go from his home location to Ms. Toad’s home location. If there is no way Mr. Frog can get to Ms. Toad’s home, your program should output impossible.\n\nThe output must be written to standard output.\n\n#### Sample Input\n```\n4 4\n1 1 4 2\n2\n2 1 3 3\n4 3 4 4\n4 4\n1 1 4 2\n1\n2 1 3 4\n7 6\n4 2 7 6\n5\n4 1 7 1\n5 1 5 5\n2 4 3 4\n7 5 7 5\n6 6 6 6\n0 0\n```\n\n#### Sample Output\n```\n14\nimpossible\n12\n```\n',10000,32768,'0',0,80,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('810','Basel','#### Description\n输入基数b(1<b<11)和正整数n(十进制)，输出n的b进制表示。\n#### Input\n第一行为一个整数 t  (t<100)，表示测试数据的组数。接下来有 t 行，每行有两个整数b(1<b<11)跟n(0<n<2,000,000,000)。\n#### Output\n输出 t 行，对应各组输入，输出n的b进制表示。\n#### Sample Input\n```\n3\n2 5\n9 12\n3 6\n```\n\n#### Sample Output\n```\n101\n13\n20\n```',1000,32768,'0',8,10,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('811','Harmony','#### Description\n输入正整数n，输出Hn = 1+1/2+1/3+...+1/n的值。\n#### Input\n第一行为一个整数 t  (t<100)，表示测试数据的组数。接下来有 t 行，每行有个n(0<n<100)。\n#### Output\n对应每组输入，输出Hn，保留4位小数。\n#### Sample Input\n```\n3\n4\n5\n7\n```\n\n#### Sample Output\n```\n2.0833\n2.2833\n2.5929\n```',1000,32768,'0',8,11,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('812','AAAAHH! Overbooked!','#### Description\nElaine is excited to begin the school year|so excited, in fact, that she signed herself up to attend several\nevents today (This programming contest, sadly, is not one of them). She may have overdone it, though; she\ndidn\'t bother to check whether the events she signed up for have conicting times. While you\'re sitting here in this contest, why not check for her?\n\n\n题目的意思就是给你一些时间段，问你这些时间段有没有交叉？\n\n\n#### Input\nThe input consists of multiple test cases. Each test case begins with an integer N, 1 <= N <= 100, on a line\nby itself denoting the number of events. After that follow N lines giving the start and end times of each\nevent, in hh:mm-hh:mm 24-hour format. The end time is guaranteed to be strictly after the start time. Input\nis followed by a single line with N = 0, which should not be processed.\n\n#### Output\nFor each test case, print out a single line that says \"conflict\" (no quotes) if Elaine\'s events have con\nicting\ntimes, and \"no conflict\" (no quotes) otherwise. Assume that Elaine can travel around campus instan-\ntaneously, so if an event starts at the same time another event ends, the two events do not con\nict.\n\n#### Sample Input\n```\n3\n09:00-09:50\n13:00-17:00\n09:50-10:30\n2\n10:00-11:00\n09:00-12:00\n0\n```\n\n#### Sample Output\n```\nno conflict\nconflict\n```\n',3000,32768,'0',8,12,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('813','Betting Sets','#### Description\n\n#### Input\n\n#### Output\n\n#### Sample Input\n```\n```\n\n#### Sample Output\n```\n```\n',3000,32768,'0',8,13,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('814','Counting Pixels','#### Description\n\n#### Input\n\n#### Output\n\n#### Sample Input\n```\n```\n\n#### Sample Output\n```\n```\n',3000,32768,'0',8,14,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('815','Matryoshka Dolls','#### Description\n\n#### Input\n\n#### Output\n\n#### Sample Input\n```\n```\n\n#### Sample Output\n```\n```\n',3000,32768,'0',8,15,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('816','Equilateral Dominoes','#### Description\n\n#### Input\n\n#### Output\n\n#### Sample Input\n```\n```\n\n#### Sample Output\n```\n```\n',10000,32768,'0',8,16,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('817','Four Gate Push','#### Description\n\n#### Input\n\n#### Output\n\n#### Sample Input\n```\n```\n\n#### Sample Output\n```\n```\n',3000,32768,'0',8,17,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('818','Game Rigging','#### Description\n\n#### Input\n\n#### Output\n\n#### Sample Input\n```\n```\n\n#### Sample Output\n```\n```\n',3000,32768,'0',8,18,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('819','Highway Construction','#### Description\n\n#### Input\n\n#### Output\n\n#### Sample Input\n```\n```\n\n#### Sample Output\n```\n```\n',3000,32768,'0',8,19,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('82','Jukebox','#### Description\nThe ICPC judges are preparing a party for the opening ceremony. For the party, they intend\nto add a playlist with some songs to the jukebox software (a simple MP3 player). However,\nthere are so many songs in the computer that it is difficult to find the ones they want to add.\nAs a consequence, they need to use the search feature many times.\n\nIn this jukebox, when you search for a string s, the software returns every music whose title\nor artist name contains s as a substring. String s is a substring of string t if t contains all\ncharacters of s as a contiguous sequence (for example, ‘bc’ is a substring of ‘abcd’, but ‘ac’ is\nnot). To save their precious time, while looking for a song, they always use one of the song’s\ngolden string, i.e. one of the shortest strings for which the search returns as a result only the\nsong they want.\n[[Image:A81_1.JPG|center]]\n\nIn the example above, a possible golden string for the song ‘johnnatan’ is ‘ta’. Note that\n‘ta’ is not a substring of the name of another song nor a substring of the artist of another\nsong. Note also that there is no string of size equal to 1 that could identify uniquely the song\n‘johnnatan’.\n\n[[Image:A81_2.JPG|center]]\nThey discovered that if they remove the artist fields from some of the songs they can get\neven smaller golden strings. For the song ‘john’, there is no golden string. However, if one\nremoves the artist field from all other songs, the string ‘c’ becomes the golden string for the\nsong ‘john’.\n\nGiven the song list (each song with name and artist), your job is to determine the minimum\nsum of the golden string sizes for all songs that can be obtained if one is allowed to remove\nsome of the artist fields. In the figure above you can see a possible best result with the golden\nstrings in bold. The minimum sum of the golden string sizes in this case is 10.\n\n#### Input\nThe input contains several test cases. The first line of each test case contains one integer $$$N\n(1 \\leq N \\leq 30)$$$, which indicates the number of songs. Following there will be N pairs of lines$$$\n(2 \\leq N \\,lines)$$$, one pair for each song. The first line of a pair will contain the song name, the\nsecond line will contain the artist name. Both artist and song names are strings containing only\nlower case letters or underlines and having at least 1 and at most 30 characters. There will be\nat most $$$6\\,$$$ different artists in the list.\n\nThe end of the input is given by N = 0.\n\nThe input must be read from standard input.\n\n#### Output\nFor each test case your program must output one single line with the minimum sum of the\ngolden string sizes. You may assume that there will always be a solution.\n\nThe output must be written to standard output.\n\n#### Sample Input\n```\n8\na_flor\nlos_hermanos\nanna_julia\nlos_hermanos\nquem_sabe\nlos_hermanos\npierrot\nlos_hermanos\nazedume\nlos_hermanos\njohnny\nmassacration\njohnnatan\nmassacration\njohn\nmassacration\n4\nc\naxc\nb\naxc\nd\ncc\nxc\ncc\n0\n```\n\n#### Sample Output\n```\n10\n5\n```\n',10000,32768,'0',0,81,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('820','Ants Colony','',3000,32768,'0',8,20,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('821','Bingo!','',3000,32768,'0',8,21,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('822','Cocircular Points','',10000,32768,'0',8,22,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('823','Digits Count','',3000,32768,'0',8,23,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('824','Electric Needs','',3000,32768,'0',8,24,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('825','Flowers Flourish from France','',3000,32768,'0',8,25,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('826','Growing Strings','',10000,32768,'0',8,26,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('827','Hyperactive Girl','',10000,32768,'0',8,27,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('828','Ingenious Metro','',3000,32768,'0',8,28,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('829','Jollo','',3000,32768,'0',8,29,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('83','Bubble Maps','#### Description\nBubble Inc. is developing a new technology for browsing a map at different zoom levels. Their\nnew technology assumes that the region to be mapped is a rectangular plane surface and it\ndivides this surface in rectangular sub-regions, which represent deeper zoom levels.\n\nBubble Inc. technology represents maps using a structure known as quad-tree. In a quadtree,\na rectangular region named x may be divided in half, both horizontally and vertically,\nresulting in four equal-sized rectangular sub-regions. Those sub-regions are called child regions\nof x, and are named xp for the top-left, xq for the top-right, xr for the bottom-right and xs for\nthe bottom-left regions, where xc represents the concatenation of string x and character c =\n‘p’, ‘q’, ‘r’ or ‘s’. For example, if the base region to be mapped is called m, the child regions of\nm are, from top-left in clockwise order: mp, mq, mr and ms, as illustrated below.\n[[Image:A82_1.jpg|center]]\nAny region can be further subdivided. For example, the region named ms can be further\ndivided into sub-regions msp, msq, msr and mss, as illustrated below.\n[[Image:A82_2.jpg|center]]\nAs another example, the figure below shows the result of subdividing the child sub-regions\nof the region named msr.\n[[Image:A82_3.jpg|center]]\nSub-regions with names of the same length have the same zoom level, since they represent\nregions of the same size. Sub-regions in the same zoom level that share a common side are said\nto be neighbors.\n\nAnything that lies outside the base region m is not mapped and, for every zoom level, all\nsub-regions of m are mapped.\n\nBubble’s map technology provides a way for the user to navigate from a given sub-region to\nneighboring sub-regions in the directions up, down, left and right. You mission is to help Bubble\nInc. in finding the neighboring sub-regions of a given sub-region. That is, given the name of a\nrectangular sub-region, you must determine the names of its four neighboring sub-regions.\n\n#### Input\nThe input contains several test cases. The first line contains one integer N indicating the\nnumber of test cases. Each of the following N lines represents a test case, containing the name\nof a region composed by C characters $$$(2 \\leq C \\leq 5000)$$$, the first always being the letter ‘m’ and\nthe following being either ‘p’, ‘q’, ‘r’ or ‘s’.\n\nThe input must be read from standard input.\n\n#### Output\nFor each test case in the input your program must produce one line of output, containing the\nnames of the four neighboring regions of the given region in the order of direction up, down,\nleft, right. For the neighbors that are not mapped you should output <none> instead of its\nname. Leave one blank space between two consecutive names.\n\nThe output must be written to standard output.\n\n#### Sample Input\n```\n2\nmrspr\nmps\n```\n\n#### Sample Output\n```\nmrspq mrssq mrsps mrsqs\nmpp msp <none> mpr\n```\n',10000,32768,'0',0,82,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('830','Kids’ Wishes','',10000,32768,'0',8,30,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('831','the Perplexity of Zhujin Otaku','#### Description\n朱槿宅男的困惑\n\n住在朱槿斋的Flueg最近遇到了大麻烦。由于朱槿斋成了危楼，所有人都要搬出朱槿，另找宿舍。于是Flueg想到了到桂庙找个空床位。\n\n但是由于Flueg很宅，对桂庙的情况一点都不了解，他在朋友的帮助下拿到了所有桂庙宿舍大楼的地图。\n\n地图是这样的。图上有N幢大楼，编号为桂1到桂N。图上有M条通道，用（u，v）表示桂u到桂v有一条通道，当然，所有的大楼都是连通的,某两幢大楼可能有多条通道。基于这些信息Flueg想找出能不能这样的一条路线，满足：走完所有的通道，但所有通道都只能走一次。\n\n（Flueg是个很奇怪的宅男，所以对于他的这个想法，你懂的。）\n  \n#### Input\n第一行两个正整数N(3<=N<=20)和M(N-1<=M<=N*N)，N表示地图上有N幢大楼，桂1到桂N；M表示地图上有M条通道。\n\nM行，每行两个正整数ｕ和ｖ，表示桂ｕ和桂ｖ有一条通道。当N=0和M=0时结束输入。\n#### Output\n输出Flueg能否走完所有的通道，且所有通道都只能走一次。能输出Yes，否则输出No。\n\n#### Sample Input\n```\n3 3\n1 2\n1 3\n2 3\n\n4 3\n1 2\n1 3\n1 4\n\n0 0\n```\n\n#### Sample Output\n```\nYes\nNo\n```\n#### Hint\n欧拉回路',1000,32768,'0',8,31,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('832','Networking','#### Description\nFlueg在搬出朱槿斋之前的某个晚上做了个奇怪的梦，他的梦是这样的：Flueg顺利住进了桂庙宿舍，他举办了一个Party来庆祝这个日子。\n\n但是Flueg在桂庙只有两个朋友，所以他的Party邀请的人要满足一个很奇怪的规则：受到邀请的人能够邀请0个或者1个或者2个他的朋友，如此类推。Flueg除外（他的2个朋友都会被邀请）。为了简化问题，保证所有的人只受到一次邀请，并且所有人只认识邀请他的人和他邀请的人。\n\n那个晚上，Flueg的Party上来了N个人，但是他想知道在这个Party上，他想和全部的人成为朋友，要通过多少层朋友关系的介绍。\n\n#### Input\n第一行有1个正整数N（3 <= n <= 20），N表示FLueg举办Party上来的人数。1表示Flueg，2到N表示其他的人（Flueg的朋友是其中的两个）。\n\n接下来N-1行，每行两个正整数g和f，表示受到邀请的人g邀请了他的朋友f。N=0时结束输入。\n#### Output\n输出Flueg要和所有参加Party的人成为朋友时，需要多少层朋友关系的介绍。\n#### Sample Input\n```\n5\n1 2\n1 3\n3 4\n4 5\n\n10\n1 3\n1 5\n3 2\n5 7\n5 6\n2 4\n2 8\n7 10\n10 9\n\n0\n```\n\n#### Sample Output\n```\n3\n4\n```\n\n#### Hint\n二叉树的深度',1000,32768,'0',8,32,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('833','Card game','#### Description\n桌上有一叠牌,从第一张牌(即位于顶面的牌)开始从上往下依次编号为1~n.当至少还剩两张牌时进行以下操作:把最后一张牌扔掉,然后把新的最后一张放到整叠牌的顶面.你的任务是输出每次扔掉的牌,以及最后剩下的牌.\n\n#### Input\n首先输入一个t(0<t<100),代表下面有多少组测试数据,\n\n然后接下来的t行每行有一个n(0<n<100),代表开始一共有多少张牌\n#### Output\n输出每次扔掉的牌,以及最后剩下的牌.\n\n牌号之间以一个空格隔开.\n#### Sample Input\n```\n2\n7\n8\n```\n\n#### Sample Output\n```\n7 5 3 1 4 6 2\n8 6 4 2 7 3 5 1\n```',1000,32768,'0',8,33,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('834','Moving balls','#### Description\n你有一些小球,从左到右依次编号为1,2,3,4...,n\n\n你可以执行两种指令:\n\n其中\n\nA X表示把小球X移到最左端,\n\nB X表示把小球X移到最右端.\n\n你的任务是经过一系列的指令后,这些小球的最终位置是怎样,从左到右输出最后的序列\n\n#### Input\n第一行输入一个t(0<t<100),表示有t组测试数据\n\n每组测试数据的第一行有一个正整数n(0<n<100)和s(0<s<100),\n\nn表示有多少个小球,s表示对这些小球有多少组指令要操作,接下来的s行就是指令A X或B X\n#### Output\n每组测试数据都要输出小球经过所有指令后,从左至右的最后序列,以空格隔开\n\n#### Sample Input\n```\n2\n4 2\nA 4\nB 1\n\n5 3\nA 3\nB 4\nB 1\n```\n\n#### Sample Output\n```\n4 2 3 1\n3 2 5 4 1\n```',1000,32768,'0',8,34,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('835','Counting in English','#### Description\nGiven two positive integers a and b, count from a to b, in English.\n\n\nNumber 1 to 10 in English:\n\none,two,three,four,five,six,seven,eight,nine,ten\n\n#### Input\nThe first line contains t (1 <= t <= 10), the number of test cases followed. Each line contains two strings a\nand b(1 <= a <= b <= 10), in lowercase.\n\n#### Output\nFor each test case, count from a to b in a single line. Each two consecutive words should be separated\nby a single space. Every English word must be in lowercase.\n\n#### Sample Input\n```\n3\none four\nfive nine\nten ten\n```\n\n#### Sample Output\n```\none two three four\nfive six seven eight nine\nten\n```\n',2000,65536,'0',8,35,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('836','A Small Shop','',2000,65536,'0',8,36,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('837','String Statistics','',5000,65536,'0',8,37,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('838','Water Tanks','',2000,65536,'0',8,38,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('839','Magic Squares','#### Description\nA magic square is an n * n arrangement of numbers 1, 2, . . . $$$n^2$$$, such that the sum of numbers in each row, column, and main diagonal is the same. There are exactly two main diagonals in a square.\nGiven a 3 * 3 square of digits 1 to 9, your task is to find the minimal steps needed to transform it to a\nmagic square. Each step is rotating any of the four 2 * 2 sub-square in the corners, either clockwise or counter-clockwise, 90 degrees.\n\n#### Input\nThe first line contains t (1 <= t <= 25), the number of test cases followed. Each test case is a string\ncontaining exactly 9 characters. The string is guaranteed to be a permutation of nine digits 1, 2, . . . . 9.\n\n#### Output\nFor each test case, print the minimal number of steps needed. If the task is impossible, print -1.\n\n#### Sample Input\n```\n4\n135876492\n438975261\n672159834\n129764583\n```\n\n#### Sample Output\n```\n2\n1\n0\n4\n```\n',5000,65536,'0',8,39,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('84','Onion Layers','#### Description\nDr. Kabal, a well recognized biologist, has recently discovered a liquid that is capable of\ncuring the most advanced diseases. The liquid is extracted from a very rare onion that can\nbe found in a country called Onionland. But not all onions of Onionland are worth to take to\nthe lab for processing. Only those onions with an odd number of layers contain the miraculous\nliquid. Quite an odd discovery!\n[[Image:A83_1.jpg|center]]\nDr. Kabal has hired a lot of research assistants to collect and analyse onions for him. Since\nhe does not want to share his discovery with the world yet, he didn’t tell the assistants to look\nfor onions with an odd number of layers. Instead, each assistant was given the task of collecting\nonions, and selecting points from each of the layer’s outer borders, so that an approximation of\nthe layer structure of the onion can be reconstructed later. Dr. Kabal told the assistants that\nthe next step will be a “complicated analysis” of these points. In fact, all he will do is simply\nto use the points to count the number of layers in each of the onions, and select the ones with\nan odd number of layers.\n[[Image:A83_2.jpg|center]]\nIt is clear that the approximation obtained by Dr. Kabal, from the points collected, might\nhave a different shape than the original onion. For instance, only some of the points of the\nonion shown in Figure 1 would be extracted in the process, giving rise to a set of points as\nshown in Figure 2. With these points Dr. Kabal will try to approximate the original layers of\nthe onion, obtaining something like what is shown in Figure 3. The approximation procedure\nfollowed by Dr. Kabal (whose result is shown in Figure 3) is simply to recursively find nested\nconvex polygons such that at the end every point belongs to precisely one of the polygons.\nThe assistants have been told to select points in such a way that the number of layers in the\napproximation, if done in this recursive manner, will be the same as in the original onion, so\nthat is fine with Dr. Kabal. The assistants are also aware that they need at least three points\nto approximate a layer, even the innermost one.\n[[Image:A83_3.jpg|center]]\nYour task is to write a program that, given a set of points collected by an assistant (as\nshown in Figure 2), determines if the respective onion should be taken to the laboratory.\n\n#### Input\nThe input contains several test cases. Each test case consists of an integer $$$3 \\leq N \\leq 2000$$$ in\na single line, indicating the number of points collected by the assistants. Following, there are\nN lines, each containing two integers $$$-2000 \\leq X, Y \\leq 2000$$$ corresponding to the coordinates\nof each point. The input is finished by a problem with N = 0 points, which should not be\nprocessed.\n\nThe input must be read from standard input.\n\n#### Output\nThere should be one line of output for each test case in the input. For each test case print the\nstring\nTake this onion to the lab!\n\nif the onion should be taken to the laboratory or\n\nDo not take this onion to the lab!\n\nif the onion should not be taken to the laboratory.\n\n\nThe output must be written to standard output.\n\n#### Sample Input\n```\n7\n0 0\n0 8\n1 6\n3 1\n6 6\n8 0\n8 8\n11\n2 6\n3 2\n6 6\n0 0\n0 11\n1 1\n1 9\n7 1\n7 9\n8 10\n8 0\n0\n```\n\n#### Sample Output\n```\nDo not take this onion to the lab!\nTake this onion to the lab!\n```\n',10000,32768,'0',0,83,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('840','Bomb the Bridge','',2000,65536,'0',8,40,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('841','Discount','#### Description\nPeople like to buy gifts in discount. For example, gift A with initial price RMB50, 30% off actually costs\nRMB35, gift B with initial price RMB104, 17% off actually costs RMB86.32.\n\nMr.Richman is a rich man. He hates small money, so he always pays an integer number of RMBs\nwithout getting any change. What\'s more, being a traditional Chinese person, the amount of money he\npays always contains the lucky digit \'8\' (of course, the integer MUST be at least the actual price after\ndiscount). For example, he would pay RMB38 for gift A, and RMB87 for gift B.\n\nGiven the initial price and the discount for a gift, calculate how much Mr.Richman would like to pay.\n\n#### Input\nThe first line contains t (1 <= t <= 20), the number of test cases followed. Each line contains two integers\nP and D(1 <= P <= 500; 1 <= D <= 99), the initial price and discount.\n\n#### Output\nFor each test case, print the amount of money Mr.Richman would like to pay.\n\n#### Sample Input\n```\n5\n50 30\n104 17\n500 4\n498 6\n40 5\n```\n\n#### Sample Output\n```\n38\n87\n480\n478\n38\n```\n',2000,65536,'0',8,41,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('842','Fences','',2000,65536,'0',8,42,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('843','Parenthesis','#### Description\n\n\nTo a computer, there is no difference between the expression (((x)+(y))(t)) and\n(x+y)t; but, to a human, the latter is easier to read. When writing automatically generated\nexpressions that a human may have to read, it is useful to minimize the number of\nparentheses in an expression. We assume expressions consist of only two operations:\naddition (+) and multiplication (juxtaposition), and these operations act on single lower-case\nletter variables only. Specifically, here is the grammar for an expression E:\n```\nE : P | P \'+\' E\nP : F | F P\nF : V | \'(\' E \')\'\nV : \'a\' | \'b\' | .. | \'z\'\n```\nThe addition (+, as in x+y) and multiplication (juxtaposition, as in xy) operators are\nassociative: x+(y+z)=(x+y)+z=x+y+z and x(yz)=(xy)z=xyz. Commutativity and\ndistributivity of these operations should not be assumed. Parentheses have the highest\nprecedence, followed by multiplication and then addition.\n\n#### Input\nThe input consists of a number of cases. Each case is given by one line that satisfies the grammar above.\nEach expression is at most 1000 characters long.\n\n#### Output\nFor each case, print on one line the same expression with all unnecessary parentheses\nremoved.\n\n#### Sample Input\n```\nx\n(x+(y+z))\n(x+(yz))\n(x+y(x+t))\nx+y+xt\n```\n\n#### Sample Output\n```\nx\nx+y+z\nx+yz\nx+y(x+t)\nx+y+xt\n```\n',3000,65535,'0',8,43,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('844','Ropes','#### Description\nWhen climbing a section or “pitch”, the lead climber ascends first, taking a rope with them\nthat they anchor to the rock for protection to ascend. Once at the top of a pitch, the lead\nclimber has the second climber attach to the rope, so they can ascend with the safety of the\nrope. Once the second climber reaches the top of the pitch, the third attaches, and so on until\nall the climbers have ascended.\n\nFor example, for a 10 meter pitch and 50 meter rope, at most 6 climbers could ascend, with\nthe last climber attaching to the end of the rope. To ascend safely, there must be at least 2\nclimbers and the rope must be at least as long as the pitch.\n\nThis process is repeated on each pitch of the climb, until the top is reached. Then to descend,\nthe climbing rope is hung at its midpoint from an anchor (each half must reach the ground).\nThe climbers then each rappel from this rope. The rope is retrieved from the anchor by\npulling one side of the rope, slipping it though the anchor and allowing it to fall to the\nground.\n\nTo descend safely, the rope must be at least twice as long as the sum of the lengths of the\npitches.\n\nFor example, a 60 meter rope is required to rappel from a 30 meter climb, no matter how\nmany climbers are involved.\n\nClimbing ropes come in 50, 60 and 70 meter lengths. It is best to take the shortest rope\nneeded for a given climb because this saves weight. You are to determine the maximum\nnumber of climbers that can use each type of rope on a given climb.\n\n#### Input\nThe input consists of a number of cases. Each case specifies a climb on a line, as a sequence\nof pitch lengths as in:\n\nN P1 P2 ... PN\n\nHere N is the positive number of pitches, with 1 ≤ N ≤ 100, and Pk is the positive integer\nlength (in meters) of each pitch, with 1 ≤ Pk ≤ 100. The last line (indicating the end of\ninput) is a single 0.\n\n#### Output\nThree numbers for each climb separated by a space, indicating the maximum number of\nclimbers that could use the 50, 60, or 70 meter rope lengths, respectively. State 0 if the given\nrope length is not suitable for that climb.\n\n#### Sample Input\n```\n1 25\n2 10 20\n0\n```\n\n#### Sample Output\n```\n3 3 3\n0 4 4\n```\n',3000,65535,'0',8,44,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('845','Chain Code','#### Description\nIn a black and white (bi-level) image, collections of connected black pixels can be defined as oreground or objects, while white can be thought of as background. Each set of connected black pixels can be completely described by listing the positions of the pixels on its boundary in counterclockwise order, starting at some arbitrary point on the boundary. This list of pixels can, in turn, be represented simply as the direction to the next one in the list.This list of directions is called the chain code of the object, and describes the shape of the object precisely while being position independent.\n\nThere are 8 possible directions from one pixel to an adjacent pixel, and while assigning these numbers is arbitrary, figure 1 shows the standard convention. The direction 0 means \"to the right of\", 2 \"means immediately above\", and 1 is at 45 degrees, bisecting 0 and 2, and so on.Two black pixels are considered to be adjacent if the square of the distance between them is less than or equal to 2. This is based on a standard graphics coordinate system having a pixel at each integer coordinate. Two pixels are connected if a contiguous path of adjacent pixels can be traced between them. A connected region is a set of black pixels in which all members are connected to each other. A boundary pixel of a connected region (from now on just a region) is a pixel within the region that has at least one neighbor (in the four compass directions) that is not black. For this problem, you may assume that there are no “holes” in the region, so that there is only one boundary of the region.\n\nThe chain code of a region can start at any pixel on the boundary. It proceeds by finding the next adjacent pixel on the boundary in a counter-clockwise direction, saving the direction (0-7) in an output buffer, and then continuing the process from the new pixel. When we arrive at the starting pixel again, the chain code is complete. The output buffer contains a set of direction values which comprise the chain code itself, and from which the original set of pixels can be recreated starting at any pixel position in an image.\n\nAs an example, a chain code for the region in figure 2 is \'\'\'446567001232\'\'\'. The chain code describes the shape of the region unambiguously, although its position is completely unknown. Shape related measures such as perimeter and area (number of pixels in the region) can be determined directly from the chain code description alone. You are to write a program that calculates the area of a connected region given only the chain code.\n\n#### Input\n\nThe input will be a collection of chain code strings, one per line. Each chain code contains at\nmost 1000000 characters. You may assume that each chain code describes a valid region,\nand does not describe a boundary that intersects itself.\n\n[[Image:I451.jpg|400px]]\n[[Image:I452.jpg|400px]]\n\n#### Output\n\nFor each chain code in the input, the output will be the area of the region (i.e. the number of\npixels belonging to it), each printed on its own line.\n\n#### Sample Input\n```\n446567001232\n6024\n```\n\n#### Sample Output\n```\n19\n4\n```\n',5000,65535,'0',8,45,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('846','Task','#### Description\nIn most recipes, certain tasks have to be done before others. For each task, if we are given a\nlist of other tasks that it depends on, then it is relatively straightforward to come up with a\nschedule of tasks that satisfies the dependencies and produces a stunning dish. Many of us\nknow that this can be solved by some algorithm called toplogical sort.\n\nBut life is not so easy sometimes. For example, here is a recipe for making pizza dough:\n\n 1. Mix the yeast with warm water, wait for 5 to 10 minutes.\n 2. Mix the the remaining ingredients 7 to 9 minutes.\n 3. Mix the yeast and the remaining ingredients together for 10 to 15 minutes.\n 4. Wait 90 to 120 minutes for the dough to rise.\n 5. Punch the dough and let it rest for 10 to 15 minutes.\n 6. Roll the dough.\n\nIn this case, tasks 1 and 2 may be scheduled after the first minute (we always spend the first\nminute to read the recipe and come up with a plan). The earliest task 3 may be started is at 8\nminutes, and task 4 may start at 18 minutes after the start, and so on. This recipe is relatively\nsimple, but if some tasks have many dependent tasks then scheduling can become\nunmanageable. Sometimes, the recipe may in fact be impossible to execute. For example,\nconsider the following abstract recipe:\n\n 1. task 1\n 2. after task 1 but within 2 minutes of it, do task 2\n 3. at least 3 minutes after task 2 but within 2 minutes of task 1, do task 3\nIn this problem, you are given a number of tasks. Some tasks are related to another based on\ntheir starting times. You are asked to assign a starting time to each task to satisfy all\nconstraints if possible, or report that no valid schedule is possible.\n\n#### Input\nThe input consists of a number of cases. The first line of each case gives the number of tasks\nn, (1 ≤ n ≤ 100). This is followed by a line containing a non-negative integer m giving\nthe number of constraints. Each of the next m lines specify a constraint. The two possible\nforms of constraints are:\n task i starts at least A minutes later than task j\n task i starts within A minutes of the starting time of task j\nwhere i and j are the task numbers of two different tasks (1 ≤ i, j ≤ n), and A is a\nnon-negative integer (A ≤ 150). The first form states that task i must start at least A\nminutes later than the start time of task j. The second form states that task i must start no\nearlier than task j, and within A minutes of the starting time of task j. There may be\nmultiple constraints involving the same pair of tasks. Note that at least and within\ninclude the end points (i.e. if task 1 starts at 1 minute and task 2 starts at 4 minutes, then task\n2 starts at least 3 minutes later than task 1, and within 3 minutes of the starting time of task\n1).\n\nThe input is terminated by n = 0.\n\n#### Output\nFor each case, output a single line containing the starting times of task 1 through task n\nseparated by a single space. Each starting time should specify the minute at which the task\nstarts. The starting time of each task should be positive and less than 1000000. There may be\nmany possible schedules, and any valid schedule will be accepted. If no valid schedule is\npossible, print Impossible. on a line instead.\n\n#### Sample Input\n```\n6\n10\ntask 3 starts at least 5 minutes later than task 1\ntask 3 starts within 10 minutes of the starting time of task 1\ntask 3 starts at least 7 minutes later than task 2\ntask 3 starts within 9 minutes of the starting time of task 2\ntask 4 starts at least 10 minutes later than task 3\ntask 4 starts within 15 minutes of the starting time of task 3\ntask 5 starts at least 90 minutes later than task 4\ntask 5 starts within 120 minutes of the starting time of task 4\ntask 6 starts at least 10 minutes later than task 5\ntask 6 starts within 15 minutes of the starting time of task 5\n34\ntask 2 starts at least 0 minutes later than task 1\ntask 2 starts within 2 minutes of the starting time of task 1\ntask 3 starts at least 3 minutes later than task 2\ntask 3 starts within 2 minutes of the starting time of task 1\n0\n```\n\n#### Sample Output\n```\n3 1 8 18 108 118\nImpossible.\n```\n',5000,65535,'0',8,46,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('847','Page Count','#### Description\n\nWhen you execute a word processor\'s print command, you are normally prompted to specify the pages you want printed. \nYou might, for example, enter:\n\n10-15,25-28,8-4,13-20,9,8-8\n\nThe expression you enter is a list of print ranges, separated by commas.\n\nEach print range is either a single positive integer, or two positive integers separated by a hyphen. In the latter \ncase we call the first integer low and the second one high. A print range for which low > high is simply ignored. A \nprint range that specifies page numbers exceeding the number of pages is processed so that only the pages available\nin the document are printed. Pages are numbered starting from 1.\n\nSome of the print ranges may overlap. Pages which are common to two or more print ranges will be printed only once. \n(In the example given, pages 13, 14 and 15 are common to two print ranges.)\n\n#### Input\nThe input will contain data for a number of problem instances. For each problem instance\nthere will be two lines of input. The first line will contain a single positive integer: the\nnumber of pages in the document. The second line will contain a list of print ranges, as\ndefined by the rules stated above. End of input will be indicated by 0 for the number of\npages. The number of pages in any book is at most 1000. The list of print ranges will be not\nbe longer than 1000 characters.\n\n\n#### Output\n\nFor each problem instance, the output will be a single number, displayed at the beginning of\na new line. It will be the number of pages printed by the print command.\n\n#### Sample Input\n```\n30\n10-15,25-28,8-4,13-20,9,8-8\n19\n10-15,25-28,8-4,13-20,9,8-8\n0\n```\n\n#### Sample Output\n```\n17\n12\n```\n',3000,65535,'0',8,47,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('848','Soccer','#### Description\nIn soccer, there are many different rewards (and punishments) depending on how you rank in the league\nat the end of a season. For example, in the British Premier League, the top 4 teams are eligible to play in\nthe Champions League, the next team is eligible to play in the Europa League, and the bottom three\nteams are relegated to the lower division. It is now near the end of the soccer season, and there are still a\nnumber of games to be played. For any given team, we wish to know what is the highest and lowest rank\nit can have at the end of the season.\n\nFor each game played, a team wins if it scores more goals than its opponent. A team loses a game if it\nscores fewer goals. When both teams score the same number of goals, we call it a draw. A team earns 3\npoints for each win, 1 point for each draw and 0 point for each loss. Teams are ranked according to the\nnumber of points earned (more points result in a higher ranking). Teams that are tied are given the same\nrank. For example, if two teams are tied and have the next highest point total after the 3rd place team,\nthen they are both ranked 4th (and the next team is ranked 6th). In real life, factors such as goal\ndifferences and goals scored are used to break ties, but we will not consider these for this problem.\n\nYou are given a list of soccer teams and a list of matches in a season. You may assume that every team\nwill play the same number of games at the end. Some of the matches have been played and the results are\nknown.\n#### Input\nThe input consists of a number of cases. The first line in each case specifies two integers n and m (2 ≤ n\n≤ 20, 1 ≤ m ≤ 1000) indicating the number of teams in the league and the number of matches in the\nseason. The next n lines contain the name of each team in its own line. The team names contain only\nalphabetic characters and have lengths at most 30 characters. This is followed by m lines each of the form\n\n team1 vs team2: x y\n\nwith team1 and team2 being the names of two different teams, and x and y are non-negative integers\n(or both are -1), indicating that in the game between team1 and team2, team1 scores x goals and\nteam2 scores y goals. If both x and y are -1, then the game has not yet been played. At most 12 games\nwill not have been played yet.\n\nThe input is terminated with n = m = 0.\n\n#### Output\nFor each team in the same order as the team list in the input, print one line of the following form:\nTeam XXX can finish as high as nth place and as low as mth\nplace.\n\nUse st, nd, and rd instead of th for first, second, and third place, respectively. Print a blank line\nbetween cases.\n\n#### Sample Input\n```\n4 6\nManUnited\nArsenal\nChelsea\nTottenham\nManUnited vs Arsenal: 3 1\nChelsea vs Arsenal: 2 2\nManUnited vs Chelsea: 1 0\nTottenham vs ManUnited: -1 -1\nTottenham vs Chelsea: 0 4\nTottenham vs Arsenal: -1 -1\n0 0\n```\n\n#### Sample Output\n```\nTeam ManUnited can finish as high as 1st place and as low as 1st place.\nTeam Arsenal can finish as high as 2nd place and as low as 4th place.\nTeam Chelsea can finish as high as 2nd place and as low as 3rd place.\nTeam Tottenham can finish as high as 1st place and as low as 4th place.\n```\n',10000,65535,'0',8,48,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('849','Railroad','#### Description\nA train yard is a complex series of railroad tracks for storing, sorting, or loading/unloading\nrailroad cars. In this problem, the railroad tracks are much simpler, and we are only\ninterested in combining two trains into one.\n[[File:I49_1.jpg|center|800px]]\nThe two trains each contain some railroad cars. Each railroad car contains a single type of\nproducts identified by a positive integer up to 1,000,000. The two trains come in from the\nright on separate tracks, as in the diagram above. To combine the two trains, we may choose\nto take the railroad car at the front of either train and attach it to the back of the train being\nformed on the left. Of course, if we have already moved all the railroad cars from one train,\nthen all remaining cars from the other train will be moved to the left one at a time. All\nrailroad cars must be moved to the left eventually. Depending on which train on the right is\nselected at each step, we will obtain different arrangements for the departing train on the left.\nFor example, we may obtain the order 1,1,1,2,2,2 by always choosing the top train until all\nof its cars have been moved. We may also obtain the order 2,1,2,1,2,1 by alternately\nchoosing railroad cars from the two trains.\n\nTo facilitate further processing at the other train yards later on in the trip (and also at the\ndestination), the supervisor at the train yard has been given an ordering of the products\ndesired for the departing train. In this problem, you must decide whether it is possible to\nobtain the desired ordering, given the orders of the products for the two trains arriving at the\ntrain yard.\n\n#### Input\nThe input consists of a number of cases. The first line contains two positive integers N1 N2\nwhich are the number of railroad cars in each train. There are at least 1 and at most 1000\nrailroad cars in each train. The second line contains N1 positive integers (up to 1,000,000)\nidentifying the products on the first train from front of the train to the back of the train. The\nthird line contains N2 positive integers identifying the products on the second train (same\nformat as above). Finally, the fourth line contains N1+N2 positive integers giving the desired\norder for the departing train (same format as above).\n\nThe end of input is indicated by N1 = N2 = 0.\n\n#### Output\nFor each case, print on a line possible if it is possible to produce the desired order, or\nnot possible if not.\n\n#### Sample Input\n```\n3 3\n1 2 1\n2 1 1\n1 2 1 1 2 1\n3 3\n1 2 1\n2 1 2\n1 1 1 2 2 2\n0 0\n```\n\n#### Sample Output\n```\npossible\nnot possible\n```\n',3000,65535,'0',8,49,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('85','Odd or Even','#### Description\nThere are several versions of Odd or Even, a game played by competitors to decide random\nissues (such as “who will code this problem?”). In one of the versions, for two players, the game\nstarts with each player calling either odds or evens. Then they count to three (some people\nchant “Once, twice, three, SHOOT!”). On three, both players hold out one of their hands,\nshowing a number of fingers (from zero to five). If the fingers add to an even number, then the\nperson who called evens wins. If the fingers add to an odd number, then the person who called\nodds wins.\nJohn and Mary played several games of Odd or Even. In every game John chose odds (and,\nconsequently, Mary chose evens). During the games each player wrote down, in small cards,\nhow many fingers he/she showed, using one card for each game – Mary used blue cards, John\nused red cards. Their objective was to be able to re-check the results later, looking at the cards\nfor each game. However, at the end of the day John dropped the deck of cards, and although\nthey could separate the cards by color, they are now out of order.\nGiven the set of numbers written on red cards and on blue cards, you must write a program\nto determine the minimum number of games that Mary certainly won.\n#### Input\nThe input contains several test cases. The first line of a test case contains an integer N\nrepresenting the number of games played $$$(1 \\leq N \\leq 100)$$$. The second line of a test case\ncontains N integers Xi, indicating the number of fingers shown by Mary in each of the games\n$$$(0 \\leq Xi \\leq 5, for\\, 1 \\leq i \\leq N)$$$. The third line of a test case contains N integers Yi, indicating\nthe number of fingers shown by John in each of the games $$$(0 \\leq Yi \\leq 5, for\\, 1 \\leq i \\leq N)$$$. The\nend of input is indicated by N = 0.\nThe input must be read from file odd.in.\n#### Output\nFor each test case your program must write one line, containing one integer, indicating the\nminimum number of games that Mary certainly won.\nThe output must be written to standard output.\n#### Sample Input\n```\n3\n1 0 4\n3 1 2\n9\n0 2 2 4 2 1 2 0 4\n1 2 3 4 5 0 1 2 3\n0\n```\n\n#### Sample Output\n```\n0\n3\n```\n\n',10000,32768,'0',0,84,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('850','Post Office','#### Description\nOther than postcards, the post office department of some country recognizes three classes of\nmailable items: letters, packets, and parcels. The three dimensions of a mailable item are\ncalled length, height and thickness, with length being the largest and thickness the smallest\nof the three dimensions.\n\nA letter\'s length must be at least 125mm but not more than 290mm, its height at least 90mm\nbut not more than 155mm, and its thickness at least 0.25mm but not more than 7mm. (The\nunit millimeter is abbreviated by mm.)\n\nAll three of a packet\'s dimensions must be greater than or equal to the corresponding\nminimum dimension for a letter, and at least one of its dimensions must exceed the\ncorresponding maximum for a letter. Furthermore, a packet\'s length must be no more than\n380mm, its height no more than 300mm, and its thickness no more than 50mm.\n\nAll three of a parcel\'s dimensions must be greater than or equal to the corresponding\nminimum dimension for a letter, and at least one of its dimensions must exceed the\ncorresponding maximum for a packet. Furthermore, the parcel\'s combined length and girth\nmay not exceed 2100mm. (The girth is the full perimeter measured around the parcel,\nperpendicular to the length.)\n\n#### Input\nThe input will contain data for a number of problem instances. For each problem instance,\nthe input will consist of the three dimensions (measured in mm) of an item, in any order. The\nlength and width will be positive integers. The thickness will be either a positive integer or a\npositive floating point number. The input will be terminated by a line containing three zeros.\n\n#### Output\n\nFor each problem instance, your program will classify the item as letter, packet,\nparcel or not mailable. This verdict will be displayed at the beginning of a new line,\nin lower case letters.\n\n#### Sample Input\n```\n100 120 100\n0.5 100 200\n100 10 200\n200 75 100\n0 0 0\n```\n\n#### Sample Output\n```\nnot mailable\nletter\npacket\nparcel\n```\n',3000,65535,'0',8,50,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('851','Aronson','#### Description\nAronson\'s sequence ak is a sequence of integers defined by the sentence \"t is the first, fourth,\neleventh, ... letter of this sentence.\", where the ... are filled in appropriately so that the\nsentence makes sense. The first few values are 1, 4, 11, 16, 24, 29, 33, 35, 39, .... Note the\nnon-letter characters and spaces are not considered in the formulation of the sequence. When\nk ≤ 100000, it turns out that ak ≤ 1000000.\n\nTo formulate the sequence, you must be able to write the ordinal numbers in English. The\nordinal numbers are first, second, third, ..., while the cardinal numbers are one, two, three, ....\nIt is easiest to define the ordinals in terms of the cardinals, so we describe these first.\nA cardinal number less than twenty is written directly from the first two columns of table 1\n(3→three, 17→seventeen, etc.). A cardinal number greater than or equal to twenty, but less\nthan one hundred is written as the tens part, along with a nonzero ones part (40→ forty,\n56→fifty six, etc). A cardinal number greater than or equal to one hundred, but less than one\nthousand, is written as the hundreds part, along with a nonzero remainder (100→one\nhundred, 117→one hundred seventeen, 640→six hundred forty, 999→nine hundred ninety\nnine). A cardinal number greater than or equal to one thousand, but less than one million, is\nwritten as the thousands part, along with a nonzero remainder (12345→twelve thousand\nthree hundred forty five). An ordinal number is written as a cardinal number, but with the\nlast word ordinalized using the columns three and four of table 1.\n\nSome example ordinal numbers are 3rd→third, 56th→fifty sixth, 100th→one hundredth, and\n12345th→twelve thousand three hundred forty fifth.\n\n#### Input\nThe input consists of a number of cases. Each case is specified by a positive integer k on one\nline (1 ≤ k ≤ 100000). The sequence of k values will be non-decreasing. The input is\nterminated by a line containing a single 0.\n\n#### Output\nFor each k, print the value of ak on one line. The values of ak will be at most 1000000.\n\n#### Sample Input\n```\n1\n3\n9\n0\n```\n\n#### Sample Output\n```\n1\n11\n39\n```\n\n== HINT == \n```\nn cardinal nth ordinal\n1 one 1st first\n2 two 2nd second\n3 three 3rd third\n4 four 4th fourth\n5 five 5th fifth\n6 six 6th sixth\n7 seven 7th seventh\n8 eight 8th eighth\n9 nine 9th ninth\n10 ten 10th tenth\n11 eleven 11th eleventh\n12 twelve 12th twelfth\n13 thirteen 13th thirteenth\n14 fourteen 14th fourteenth\n15 fifteen 15th fifteenth\n16 sixteen 16th sixteenth\n17 seventeen 17th seventeenth\n18 eighteen 18th eighteenth\n19 nineteen 19th nineteenth\n20 twenty 20th twentieth\n30 thirty 30th thirtieth\n40 forty 40th fortieth\n50 fifty 50th fiftieth\n60 sixty 60th sixtieth\n70 seventy 70th seventieth\n80 eighty 80th eightieth\n90 ninety 90th ninetieth\n100 hundred 100th hundredth\n1000 thousand 1000th thousandth\nTable 1: Translation table.\n```\n',3000,65535,'0',8,51,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('852','Arbitrage?','#### Description\nIf you are going to travel to the World Finals, you cannot rely on Czech Crowns. You would\nhave to exchange your money for various foreign currencies. This problem deals with multiple\ncurrencies and their exchange rates. Your task is to verify that some set of exchange rates is\nsafe, namely detect a possibility of so-called arbitrage.\n\nAn arbitrage∗ is a risk-free combination of buy and sell operations that gains profit from imbalance\nin market prices. The prices may apply to various things, typically stock exchange but\nalso currencies.\n\n#### Input\nThe input consists of several test cases. Each case begins with a line containing one positive\ninteger number C, 1 ≤ C ≤ 200, the number of currencies.\n\nThe second line of each test case contains C currency codes separated by a space. Each code is\ncomposed of 3 uppercase letters and all codes in one test case are different.\n\nThe third line contains one integer number R, 0 ≤ R ≤ C · (C − 1), the number of exchange\nrates available. Each of the following R lines contains one exchange rate in the following format:\nfirst currency code, space, second currency code, space, integer number Ai, colon (“:”), and\ninteger number Bi. The meaning is as follows: If you pay Ai units of the first currency, you will\nget Bi units of the second currency. You may assume that 1 ≤ Ai,Bi ≤ 100 and that the two\ncurrencies are different.\n\n#### Output\nFor each test case, print one line of output. If there exists any possible sequence of currency\nexchange operations that would result in a profit, the line should contain the word “Arbitrage”.\nOtherwise, simply print “Ok”.\n\nThe word profit in this case means that you start with any amount of any currency and after\nperforming any number of exchanges you will have strictly higher amount of the same currency.\n\n#### Sample Input\n```\n2\nCZK EUR\n2\nCZK EUR 25:1\nEUR CZK 1:25\n2\nGBP USD\n2\nUSD GBP 8:5\nGBP USD 5:9\n3\nBON DEM CZK\n3\nDEM BON 1:6\nBON CZK 1:5\nDEM CZK 1:20\n3\nCZK EUR GBP\n3\nCZK EUR 24:1\nEUR GBP 5:4\nGBP CZK 1:30\n3\nCZK USD GBP\n4\nCZK USD 28:1\nCZK GBP 31:1\nGBP CZK 1:31\nUSD GBP 1:1\n0\n```\n\n#### Sample Output\n```\nOk\nArbitrage\nOk\nOk\nArbitrage\n```\n',3000,32768,'0',8,52,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('853','Bus Schedules','#### Description\nImagine that you happen to be the one to advance to the World Finals. Sounds good, doesn’t it?\nThen you would be going to travel by various means of transport: airplanes, trains, buses, etc.\nAre you ready for that? This problem tries to evaluate your orientation skills in bus schedules\n(“time-tables”).\nAs you know, not all buses operate on every-day basis. In bus schedules, the days when the\nbus operates are typically given by a list of various specifiers, some of them being simple (“only\non Mondays”), some a little bit more confusing (“only on workdays”), and some totally impenetrable\n(“every day directly preceding Sunday or holiday, unless it is itself a holiday or a day\nfollowing a holiday inside a leap year”).\nFor the purposes of this problem, the specifier may be one the following:\n\n{| align=\"center\" cellspacing=\"0\" border=\"1\"\n|“1”|| The bus operates on Mondays.\n|-\n|“2” .. .|| The bus operates on Tuesdays, etc.\n|-\n|“7” || The bus operates on Sundays.\n|-\n|“t” ||The bus operates on Sundays and official holidays, that is January 1, Easter\nMonday, May 1, May 8, July 5, July 6, September 28, October 28, November\n17, and December 24, 25, and 26.\n|-\n|“w” ||The bus operates on workdays, that is Monday to Friday except for the days\nspecified in t.\n|-\n|“a” ||The bus operates on workdays immediately following the days specified in t.\n|}\n\nFurthermore, the days may be restricted only to specific dates or a range of dates, given as\na comma-separated list of elements. Each element may be either a single date (written in the\nform of “D.M.”, where D is the day number and M is the month number) or a date range\n(written as “D1.M1.-D2.M2.”, where the first of the dates must precede the second one, and\nboth of these boundary dates are included in the range). For example\n\n3a 1.1.-30.6.,31.7.,1.9.-31.12.\n\ndescribes a bus that goes only on Wednesdays and on workdays immediately following holidays,\nbut only if one of these occurs on July 31 or between January 1 and July 30, or between\nSeptember 1 and December 31 (inclusive).\n\nYour task is to count all days that the bus operates in a given year.\n\nRemarks:\n\n• Today is Saturday, October 23, 2010.\n\n• Each year has 365 days, except for leap years, in which an additional day (February 29) is\ninserted. A year Y is a leap year, if the number Y is evenly divisible by 4. The exception\nare years divisible by 100, which are leap years only if they are also divisible by 400.\n\nIn all non-leap years, if 29.2. is used as a single date, it is ignored; if it is used as a date-range\nstart, it is interpreted as March 1, and if it is used as a date-range end, it is interpreted\nas February 28.\n\n• Easter Monday is the Monday immediately following the Easter Sunday. Easter Sunday\nis the first Sunday strictly after the Paschal Full Moon date of the year. The Paschal Full\nMoon date for year y can be determined by the following algorithm:\n\nint golden, solar, lunar, p;\n\ngolden = (y % 19) + 1;\n\nsolar = (y - 1600) / 100 - (y - 1600) / 400 ;\n\nlunar = (((y - 1400) / 100) * 8) / 25;\n\np = (3003 - (11 * golden) + solar - lunar) % 30;\n\nif (p == 29 || (p == 28 && golden > 11)) p--;\n\nPaschal Full Moon date is then p days (0 ≤ p ≤ 28) after March 21.\n#### Input\nThe input contains several test cases, each case consists of a single line. The line contains two\nnon-empty strings S, R, and an integer Y (1600 ≤ Y ≤ 3000) separated by a space. The string\nS will contain only characters “1”, . . . , “7”, “t”, “w”, “a”, each appearing at most once (in\nany order). The string R of length at most 1000 is a comma-separated list of dates and date\nranges whose format was specified above. The dates and date ranges in R do not overlap and\nare always given in an ascending order.\n\n#### Output\nFor each input instance, output a single line containing one integer, the number of days in the\nyear Y that belong to the range R and satisfying at least one condition specifier given by S.\n\n#### Sample Input\n```\n3a 1.1.-30.6.,31.7.,1.9.-31.12. 2010\n```\n\n#### Sample Output\n```\n89\n```\n',5000,32768,'0',8,53,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('854','Bus Clock Display','#### Description\nWhen you travel to Egypt, you will probably want to enjoy the famous pyramids and possibly\nalso to take a bus to Luxor to visit the Valley of the Kings. To overcome boredom during such\na long trip, imagine you are trying to keep yourself occupied by observing a large clock above\nthe driver’s seat. The clock is a digital one and uses the classical 7-segment display. Since the\nEgyptian buses are crowded and most local people use to carry strange things with them, your\nview may be obstructed and some segments possibly hidden.\n\nIf you think about such situations, you will quickly notice that it is sometimes possible to read\nthe time reliably even if some of the segments are not visible. For example, in Figure 1, the\nclock cannot show anything else than 12:04.\n\n[[Image:I541.jpg|800px]]\n\nIn some other cases, there may be several possibilities and you cannot tell for sure what time is\ndisplayed. Figure 2 is a good example – the last digit may be 0, 5, 6, 8, or 9. But even if you\ncannot tell the time immediately, you do not lose hope. After a while, you take another look\nat the clock and see another “sample” of it. Meanwhile, the people moved a little bit, so you\ncan see a different portion of the display now, as shown in Figure 3. The new picture is even\nmore ambiguous if seen alone. But you are quite sure that no more than four minutes passed\nbetween the two samples. With this knowledge, you may not only say what time it is now, but\nalso retroactively determine what time it was before.\n\nYour task is to write a program that automates this process. Given samples of the display\n(with some segments potentially hidden) and the estimate of the time elapsed between every\ntwo consecutive samples, you have to compute what time was displayed at the clock when the\nsamples were taken.\n\n\n#### Input\nThe input contains several bus descriptions. Each description starts with a positive integer\nnumber S, which denotes the number of samples taken, 1 ≤ S ≤ 100. Then the individual\nsamples follow. Each sample is represented by 28 characters that give states of all segments, in\nthe order shown in Figure 4. The characters are separated by at least one space or new-line.\nAdditional spaces may be used for better presentation in printed materials.\n\n[[Image:I542.jpg|800px]]\n\nEach character is either a dash “-” when you see that a horizontal segment is lit, a pipe character\n“|” for a vertical segment lit, a dot “.” for a horizontal or vertical segment that you know is\nnot lit, or a question mark “?” if the corresponding segment cannot be seen at all.\nShapes of individual digits used by the display are shown in Figure 5. The clock uses the 24-hour\nformat with values between 0:00 and 23:59. The first of four digit positions never displays zero,\nit will be blank if the number of hours is less than 10.\nBetween each two consecutive samples, there are two integer numbers separated by a space,\nTmin and Tmax, 0 ≤ Tmin ≤ Tmax ≤ 120, denoting the minimal and maximal number of minutes\nthat may have elapsed between those two samples. The last bus description is followed by a line\ncontaining zero.\n\n\n#### Output\n\nFor each bus description, print one line for every sample taken in that bus. If the time shown\nby the clock can be determined uniquely, print the time as three or four digits with a colon\nbetween hours and minutes. If the time is ambiguous, print the sentence “ambiguous, Pi\npossibilities”, where Pi is the total number of different times that might have been displayed\nat that moment. Remember to always consider all those (and only those) possibilities that are\nconsistent with all samples. Print one empty line after each bus.\n\n\n#### Sample Input\n```\n3\n -   -   .   -\n. | . | | | | |\n -   -   -   .\n| . . | . | | |\n -   -   .   -\n16 30\n ?   ?   ?   -\n? ? ? ? ? ? | .\n ?   ?   ?   -\n? ? ? ? ? ? . |\n ?   ?   ?   -\n15 30\n ?   ?   ?   ?\n? ? ? ? ? ? ? |\n ?   ?   ?   ?\n? ? ? ? ? ? ? ?\n ?   ?   ?   ?\n1\n. - - .\n. | . | | | | ?\n? ? . ?\n? ? ? . | ? ? ?\n? ? ? ?\n2\n .   -   -   -\n. | . | | | | ?\n ?   ?   .   ?\n? ? ? . | ? ? ?\n ?   ?   ?   ?\n0 4\n ?   ?   .   -\n? ? ? ? ? | . |\n ?   ?   ?   -\n? ? ? ? ? ? ? |\n ?   ?   ?   -\n0\n```\n\n#### Sample Output\n```\n23:40\n0:05\nambiguous, 13 possibilities\n\n12:04\n\n12:09\n12:13\n```\n',3000,32768,'0',8,54,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('855','Measuring Problem Difficulty','#### Description\n\nIf you are the lucky one to advance to the ACM-ICPC World Finals, one of the situations you\nwill face is the world finals competition itself. Wait, isn’t that the main reason to go there?\nIn the beginning of each ACM-ICPC competition, there are two separate goals each team tries\nto accomplish:\n\n1. among the given set of problems, find the easiest one,\n\n2. solve that problem as fast as possible.\n\nTo evaluate the performance of all teams in detail, we want to test your abilities for each of these\ntwo goals separately. This problem deals with the former goal (finding the easiest problem), the\nlatter one (solving it) is analyzed in another problem (easy).\n\nThe main trouble with comparing problem difficulty is that the opinions of different people may\nvary. To satisfy everyone, we need to find some consensus. Let’s start with determining all\nproblems on which the opinions agree.\n\nYour team is given a set of ICPC problems. Each team member sorts all of the problems in the\norder of their expected difficulty. Then we want to find all pairs of problems such that their\nrelative order is the same according to all given orderings.\n\n#### Input\n\nThe input contains several tasks. Each task starts by one line containing single integer N,\n2 ≤ N ≤ 150 000, the number of problems to consider.\n\nAfter that, there are three blocks, each of them describing opinion of one team member. (ICPC\nteams have three members, right?) Every block specifies an arbitrary permutation of N numbers\n1 . . .N representing the problems. You should know from the school that the word “permutation”\nmeans each of the numbers will appear exactly once in each block.\n\nEach block starts on a new line. For presentation reasons, the numbers inside a block may\nbe split among any number of lines. If there are more than one number per line, they will be\nseparated by at least one space. Empty lines may occur before and after blocks.\n\nThe last task is followed by a line containing zero.\n\n#### Output\n\nFor each task, print one line containing a single integer number: the number of all pairs of\nproblems, whose mutual order is the same in all three permutations.\n\nPlease note that the result may be as high as N·(N−1)/2 and may therefore exceed 232.\n\n#### Sample Input\n```\n4\n1 2 3 4\n2 3 4 1\n4 1 2 3\n6\n3 6 1 2 4 5\n3 6 1 4 2 5\n3 6 1 2 4 5\n0\n```\n\n#### Sample Output\n```\n1\n14\n```\n',20000,32768,'0',8,55,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('856','The Easiest Problem is This One','#### Description\nIf you are the lucky one to advance to the ACM-ICPC World Finals, one of the situations you\nwill face is the world finals competition itself. Wait, isn’t that the main reason to go there?\nIn the beginning of each ACM-ICPC competition, there are two separate goals each team tries\nto accomplish:\n\n1. among the given set of problems, find the easiest one,\n\n2. solve that problem as fast as possible.\n\nTo evaluate the performance of all teams in detail, we want to test your abilities for each of\nthese two goals separately. The former goal (finding the easiest problem) is analyzed in another\nproblem (difficult), here we deal with the latter goal (solving the easiest problem).\n\nTo isolate other influences, we will tell you clearly which problem is the easiest one to solve in\nthis problem set (CTU Open Contest 2010). It is this one! What more can we do to emphasize\nthat fact? The title says it. The problem name is easy. And believe us, it is true. This is\nindeed the easiest of all nine problems. We recommend you to do it first.\nA positive integer number N can be expressed in the decimal system (numeral system with the\nbase of 10) as the sequence of digits di\n\n$$$N = d_1d_2d_3d_4 . . . d_k$$$ \n\n\nwhere ∀i, 1 ≤ i ≤ k : 0 ≤ di ≤ 9.\n\nThe digits express the value which has to be multiplied by a power of ten:\n\n$$$ N = d_1 * 10^{k-1} + d_2 * 10^{k-2} + ... +d_{k-1} * 10 +d_k =\\sum_{i=0}^{k-1} { d_{i+1} * 10^{k-i-1} } $$$\n\nThe sum of the digits S(N) is then defined as the plain sum of all individual digits without\nmultiplying them by powers of ten:\n\n$$$ S(N) = d_1 + d_2 + d_3 +...+d_k =\\sum_{i=0}^{k-1} { d_{i+1} } $$$\n\nFor example:\n$$$ N = 3029 = 3 * 10^3 + 2 * 10 + 9$$$\n\n$$$S(N) = 3 + 0+2 + 9 = 14$$$\n\nIf we multiply the original number N with another number m, the sum of the digits typically\nchanges. For example, if m1 = 26:\n\n$$$N * m_1 = 78754 = 7 * 10^4 + 8 * 10^3 + 7 * 10^2 + 5 * 10 + 4$$$\n\n$$$S(N * m_1) = 7 + 8+7 + 5 +4 = 31$$$\n\nHowever, there are some numbers that, if multiplied by N, will result in the same sum of the\ndigits as the original number N. For example, consider m2 = 37:\n$$$N * m_2 = 112073 = 10^5 + 10^4 + 2 * 10^3 + 7 * 10 + 3$$$\n$$$S(N * m_2) = 1 + 1+2 + 0+7 + 3 = 14 = S(N)$$$\n\nYour task is to find the smallest positive integer p among those that will result in the same sum\nof the digits when multiplied by N. To make the task a little bit more challenging, the number\nmust also be higher than ten.\n\n\n#### Input\nThe input consists of several test cases. Each case is described by a single line containing one\npositive integer number N, 1 ≤ N ≤ 100 000. The last test case is followed by a line containing\nzero.\n\n#### Output\nFor each test case, print one line with a single integer number p which satisfies all of the following\nconditions:\n\n• p > 10\n\n• S(N) = S(N · p)\n\n• ∀q ∈ N : [S(N) = S(N · q)] ⇒ [(q ≥ p) ∨ (q ≤ 10)]\n\n#### Sample Input\n```\n3029\n4\n5\n42\n0\n```\n\n#### Sample Output\n```\n37\n28\n28\n25\n```\n',3000,32768,'0',8,56,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('857','Prohibici´on de fumar','#### Description\nWhen travelling abroad (to theWorld Finals, for example), you should always obey all local laws\nof every country you visit. In some countries, they have laws that prohibit smoking closer than\nsome given distance D from any building. In a modern world, it becomes a pressing question\nwhether there is any place where you could legally smoke in a town at all.∗\n\nFortunately, the town we consider here was built in an orderly way, making it easier to decide\nthis question. The boundary of the town is an axis-parallel rectangle R and the buildings are\npairwise disjoint axis-parallel rectangles contained inside R. Since police patrols are generally\nnot equipped with micrometers, it is possible to smoke at any spot within the town (including\nthe boundary rectangle) whose distance to the closest building is at least (D−1) meters and 90\ncentimeters.\n\n#### Input\nThe input contains several towns. Each town description consists of several lines. The first line\ncontains four integers D, Rx, Ry, and N separated by a space. The number D (1 ≤ D ≤ 100 000)\ngives the minimum distance from the buildings at which the smoking is legal. Rx and Ry\n(1 ≤ Rx,Ry ≤ 100 000) give the dimensions of the town, which covers a rectangle with vertices\nat the coordinates (0, 0), (Rx, 0), (Rx,Ry), and (0,Ry). Finally, N (0 ≤ N ≤ 200) is the number\nof buildings in the town.\n\nEach of the following N lines contains four integers Fx, Fy, Tx, Ty (0 ≤ Fx < Tx ≤ Rx,\n0 ≤ Fy < Ty ≤ Ry), giving the coordinates (Fx, Fy), (Fx, Ty), (Tx, Ty), and (Tx, Fy) of the\ncorners of the particular buildings.\n\nThe last town is followed by a line containing four zeros.\n\n#### Output\nFor each input instance, if there is any place in the town where smoking is permitted, output\na single line containing two real numbers X and Y rounded to two decimal places, giving the\ncoordinates (X, Y ) of any point inside the town boundaries whose distance is at least D − 0.1m from any of the buildings. Otherwise, the line should contain the string “Smoking not\npermitted!”.\n\nTo avoid rounding errors, you may assume that the town is built in such a way that either there\nexists a point whose distance from every building is at least D +0.1m, or that all points in the\ntown are closer than D − 0.1m to some building.\n\n#### Sample Input\n```\n8 20 20 1\n7 7 13 13\n10 20 20 1\n7 7 13 13\n0 0 0 0\n```\n\n#### Sample Output\n```\n1.34 1.34\nSmoking not permitted!\n```\n',3000,32768,'0',8,57,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('858','Pyramid Guards','#### Description\nWithout a doubt, the Great Pyramid of Giza is the most famous tourist attraction in Egypt. It\nis a less known fact that building it was only a part of the task. The other part was security.\n\nWhen the Pyramid was finished, some people had an opinion that the Pharaoh’s corpse does\nnot really need all of the fancy treasures. So, they wanted to take something for themselves.\nTo prevent the Pyramid from being robbed, a pair of guards were constantly walking around in\nopposite directions. To allow for better planning, your task is to determine the closest distance\nfrom which the guards can see each other in any moment.\n\nThe Great Pyramid is a pyramid (in the terms of geometry) with a square base and its apex perpendicularly\nabove the center of the base. The original base length is believed to be 440 cubits∗\nand the height is 280 cubits.\n\nBoth guards move on the surface of the pyramid, one of them walking clockwise and the other\ncounter-clockwise around the pyramid apex. The path of each guard forms a quadrilateral – it\nhas four line segments, each of them running through one side of the pyramid. After reaching\nhis† starting point, the guard immediately continues with another round across the exactly same\npath.\n#### Input\nThe input consists of several test cases. Each test case is composed of two lines, each of them\ndescribing the path of one guard. Each line contains five integer numbers: H1, H2, H3, H4\n(0 ≤ Hi < 280) and T (1 ≤ T ≤ 120).\n\nThe guard starts at one of the edges at height H1 (measured vertically from the ground level).\nThe other three numbers give heights at which he crosses the other three edges of the pyramid.\nT stands for the number of minutes after which the guard returns back and starts another loop.\n\nAt the beginning, both guards start at the same moment at opposite edges of the pyramid,\nwalking in opposing directions. They always move at a constant speed and you may assume\nthat their shift is infinitely long.‡\n\nThe last test case is followed by a line containing five zeros.\n\n#### Output\nFor each test case, output the minimal distance between the two guards. Consider only such\ncases when the guards can really see each other, i.e., when they walk the same side/edge of the\npyramid.\n\nThe distance must be printed in cubits, with exactly three digits after the decimal point.\n\n#### Sample Input\n```\n0 0 0 0 20\n0 0 0 0 17\n100 200 100 200 50\n50 150 50 150 60\n0 0 0 0 0\n```\n\n\n#### Sample Output\n```\n0.000\n44.481\n```\n\n#### HINT\n∗Cubit was the unit of length used in the ancient Egypt.\n\n†A modern and politically correct text should use either the word their or explicitly mention both variants:\nhis and her. However, in the ancient Egypt, the people did not care about gender emancipation and women were\nsimply not allowed to guard pyramids.\n\n‡Well, several thousand years, at least.',3000,32768,'0',8,58,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('859','Hack around the Lock','#### Description\nFor your travel to the ACM-ICPC World Finals in Egypt, you have bought a brand new luggage.\nThe luggage has a numeric lock composed of K wheels with digits 0 . . .9 on each of them. Each\ncombination of the values on the wheels can be represented as a K-digit number (possibly with\nleading zeros that count as digits). Only one combination opens the luggage.\n\nAs a little bit paranoid programmer, you wrote a sophisticated random number generator to\nchoose the secret number and you can feel safe now because nobody will ever be able to guess\nit easily.\n\nUnfortunately, after arriving to the hotel, you realize “nobody” does also include you. Sad story,\nisn’t it? Instead of starting to frenetically rotate the wheels trying to find the right combination,\nyou decided to write another program that will help you. Given an initial numeric combination,\nthe program should find fastest way to try all other possible combinations — as we all know,\nthe correct combination will always be the one we try at the very last.\n\nIt is possible to rotate one wheel at a time only. After changing the digit by one, you can check if\nthe combination is correct. You also know that the initial combination is not correct (otherwise,\nyou wouldn’t need the whole thing at all, would you?). So, the overall time needed to open the\nluggage is proportional to the number of steps, each step corresponding to the rotation of some\nwheel by one. To make the things worse, it is impossible to turn a wheel directly from 0 to 9 or\nvice versa — you need 9 steps instead.\n#### Input\nThe input contains several instances; input of each instance is a line with a single decimal number\nN, which is the initial combination. The number may have leading zeros, which are counted into\nits number of digits K, 1 ≤ K ≤ 7. For example, “007” is considered to be a 3-digit number.\nThe last instance is followed by a line containing “-1”.\n\n#### Output\nFor each instance, print two lines: the first one containing the minimum possible number of\nsteps S. The second line must contain a sequence of S K-digit numbers. Every possible K-digit\nnumber (except for the initial one) must appear at least once in the sequence and each two\nconsecutive numbers must differ in exactly one digit by exactly one (in the digit value).\n\n#### Sample Input\n```\n5\n00\n-1\n```\n\n#### Sample Output\n```\n13\n6 7 8 9 8 7 6 5 4 3 2 1 0\n99\n10 20 30 40 50 60 70 80 90 91 81 71 61 51 41 31 21 11 01\n02 12 22 32 42 52 62 72 82 92 93 83 73 63 53 43 33 23 13 03\n04 14 24 34 44 54 64 74 84 94 95 85 75 65 55 45 35 25 15 05\n06 16 26 36 46 56 66 76 86 96 97 87 77 67 57 47 37 27 17 07\n08 18 28 38 48 58 68 78 88 98 99 89 79 69 59 49 39 29 19 09\n```\nThe last line of the sample output above is cut into several lines to fit into the page width, but it\nshould be a single line in the real output.',10000,196608,'0',8,59,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('86','Power Generation','#### Description\nDemand for electricity grew rapidly in the country over recent years, and is projected to grow\neven faster in the next twenty years. To cope with this increase in demand, the government is\nplanning to privatize the country’s electricity power-generation sector, ending the monopoly of\nthe state-owned company, ICPC (Independent Circuit Power Corporation).\nICPC owns a set of power-generation plants (hydroelectric and nuclear). ICPC’s plants\nare connected by power lines that cross the country. Each power line connects two distinct\npower plants and is constructed in a straight line. A power path is a sequence of power lines\nl1, l2, . . . , lm, with each power line li connecting directly plants pi−1 and pi, such that any two\nconsecutive power lines li and li+1 are linked to a common power plant pi.\nPower plants were built over several years, one at a time, due to budget restrictions. Also\ndue to budget restrictions, every time a new power plant was built, only one new power line\nwas constructed to integrate the new plant to the existing ICPC system. The new power line\nalways linked the newly built power plant to the nearest power plant already in the system. If\nmore than one such plant existed (that is, if more than one plant was located at a minimum\ndistance from the new plant), the oldest plant was chosen.\nIn the privatization project, the aim is to break up the ICPC power-generation system\ninto smaller companies, each company owning a set of power plants (each power plant will be\nowned by only one company). After the privatization, ICPC will cease to exist; only the new\ncompanies will own the power plants. The division of power plants among new companies must\nobey the following restrictions:\n• the total capacity of every new company must be at least C, where C is a value in MW\n(Mega Watts) decided by the government. The total capacity of a set of power plants is\nthe sum of capacities of those plants;\n• power paths between any two plants owned by a new company must include only plants\nowned by that company.\nYou have been hired by ICPC to determine which is the largest number of new companies\nthat can be created in the privatization process.\n#### Input\nThe input contains several test cases. The first line of a test case contains two integers N and\nC indicating respectively the total number of power plants owned by ICPC $$$(1 \\leq N \\leq 10000)$$$\nand the minimum total capacity, in MW, that every new company must have $$$(1 \\leq C \\leq 10000)$$$.\nPower plants are identified by integers from 1 to N; plant 1 was the first to be built, plant 2 the\nsecond to be built, and so on. Each of the next N lines describes a power plant; the first line\ndescribes power plant 1, the second line describes power plant 2, and so on. Each description\nconsists of three integers X, Y and P, where (X, Y ) is the plant location $$$(0 \\leq X \\leq 1000   and\\, \n0 \\leq Y \\leq 1000)$$$ and P is the plant capacity $$$(1 \\leq P \\leq 1000)$$$. Plants were built at different\nlocations (that is, no two plants have the same location). The end of input is indicated by\nN = C = 0.\nThe input must be read from file power.in.\nACM ICPC2006 – South American Regionals 15\n#### Output\nFor each test case in the input your program must produce one line of output, containing only\none integer: the largest number of new companies that can be created in the privatization\nprocess.\nThe output must be written to standard output.\n\n\n#### Sample Input\n```\n2 22\n0 0 20\n10 20 30\n4 430\n10 20 100\n20 10 400\n50 10 50\n25 25 500\n3 100\n10 10 33\n0 10 33\n10 0 33\n0 0\n```\n\n#### Sample Output\n```\n1\n2\n0\n```',10000,32768,'0',0,85,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('860','God Save the i-th Queen','#### Description\nDid you know that during the ACM-ICPC World Finals a big chessboard is installed every year\nand is available for the participants to play against each other? In this problem, we will test\nyour basic chess-playing abilities to verify that you would not make a fool of yourself if you\nadvance to the World Finals.\n\nDuring the yesterday’s Practice Session, you tried to solve the problem of N independent rooks.\nThis time, let’s concentrate on queens. As you probably know, the queens may move not only\nhorizontally and vertically, but also diagonally.\n\nYou are given a chessboard with i−1 queens already placed and your task is to find all squares\nthat may be used to place the i-th queen such that it cannot be captured by any of the others.\n\n#### Input\nThe input consists of several tasks. Each task begins with a line containing three integer numbers\nseparated by a space: X, Y , N. X and Y give the chessboard size, 1 ≤ X, Y ≤ 20 000. N = i−1\nis the number of queens already placed, 0 ≤ N ≤ X · Y .\n\nAfter the first line, there are N lines, each containing two numbers xk, yk separated by a space.\nThey give the position of the k-th queen, 1 ≤ xk ≤ X, 1 ≤ yk ≤ Y . You may assume that those\npositions are distinct, i.e., no two queens share the same square.\n\nThe last task is followed by a line containing three zeros.\n\n#### Output\nFor each task, output one line containing a single integer number: the number of squares which\nare not occupied and do not lie on the same row, column, or diagonal as any of the existing\nqueens.\n\n#### Sample Input\n```\n8 8 2\n4 5\n5 5\n0 0 0\n```\n\n#### Sample Output\n```\n20\n```\n',5000,32768,'0',8,60,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('861','Always Follow the Rules in Zombieland','#### Description\n[[Image: I611.png| 250px ]][[Image: I612.png| 150px ]]\n\nWelcome to Zombieland! For the next five hours, your team will battle wits with hordes of the undead. Do you\nhave the cunning, will, and stamina to survive? Follow the rules, and you may live to tell the tale.\n\nIn Zombieland, there are a fundamental set of rules you must follow to stay alive. Rule 8 is “Get a kick&@%\npartner”, rule 18 is “Limber up”, rule 29 is “The buddy system”, and rule 22 is, “When in doubt, know your\nway out”.\n\nIf you intend to survive for long in Zombieland, you’ll need to know which rule number goes with which quote.\n\nWrite a program to display the correct quote given the rule number.\n\nHave fun during your stay in Zombieland, and remember rule 32, “Enjoy the little things”.\n\n#### Input\nInput will begin with an integer q, 0 < q <= 50, on its own line signifying the number of quotes. On the\nfollowing lines will be the quotes, one per line. No quote will be greater than 65 characters. The first quote\nwill be rule 1, the second quote rule 2, etc. Following these quotes will be an integer r, 0 < r <= 50 on a\nline of its own signifying the number of rules to look up quotes for, followed by a sequence of r rule numbers,\none per line.\n\n#### Output\nFor each rule number, display “Rule”, followed by a single space, then the rule number, then a “:” and a\nsingle space followed by the appropriate quote. If a rule number falls outside the range of quotes, display the\nmessage “No such rule”, instead of a quote.\n#### Sample Input\n```\n4\nCardio\nThe double tap\nBeware of bathrooms\nSeatbelts\n5\n2\n-10\n5\n1\n4\n```\n\n#### Sample Output\n```\nRule 2: The double tap\nRule -10: No such rule\nRule 5: No such rule\nRule 1: Cardio\nRule 4: Seatbelts\n```\n',3000,32768,'0',8,61,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('862','Zombie Containment','#### Description\nAssociated with the zombie apocalypse is the notion of a critical\nmass of zombies: once the number of zombies exceeds a certain\nthreshold T, all is lost. Your city is in a precarious state: its current\npopulation is 3T. Even worse, you suspect someone in the city may\nbe infected, although you have no idea who it may be. Once the\nsymptoms manifest, it will be too late for that person, as well as for\neveryone else in the city that person can reach.\n\nTo prevent the possibility of reaching critical mass, you are going to divide the city into 3 regions via a set of\nwalls. The city is triangular, and so you are going to divide the city into 3 smaller triangles by choosing a single\nsplitting point and erecting straight walls between that point and the three vertices of the outer wall. This must\nbe done immediately, i.e., there is no time to relocate people. Can you find a splitting point such that the three\nresulting regions each have exactly T people?\n\n#### Input\nThe input consists of multiple test cases. Each test case is formatted as follows:\n\n· Line 1: An integer n, 3 ≤ n ≤ 30000, denoting the number of people. n is always a multiple of 3.\n\n· Lines 2 to 4: Two numbers xi and yi denoting the coordinates of the ith corner of the city, with\n-10 ≤ xi, yi ≤ 10. The three corners are specified in counterclockwise order.\n\n· Lines 5 to n + 4: Two numbers xi and yi denoting the coordinates of the ith person, with\n-10 ≤ xi, yi ≤ 10. All people lie in the interior of the city triangle.\n\nInput is followed by a single line with a 0, which should not be processed.\nIt is guaranteed that no two people will be collinear with any of the corners of the city. In particular, it is\nguaranteed that for any two people I and J and any corner A, the angle IAJ will be at least 10-7 rad.\n\n#### Output\nFor each test case, print out a single line with two numbers x and y denoting the splitting point of the city. Each\nperson must lie in the interior of one of the three generated triangles. Assume a person is a single point with\nzero radius, and that a wall is a line with zero thickness. It is guaranteed that there exists a splitting point; in\nfact, it is guaranteed that there exists a splitting point such that if the point were moved by 10-7 in any direction,\nit would still be a splitting point. Any splitting point that partitions the people into 3 sets of equal size will be\njudged correct.\n#### Sample Input\n```\n3\n0.0 0.0\n10.0 0.0\n0.0 10.0\n4.0 4.0\n1.0 4.0\n4.0 1.0\n0\n```\n\n#### Sample Output\n```\n3.0 3.0\n```\n',3000,32768,'0',8,62,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('863','Mesmerization of The Count','#### Description\n“Sesame Street’s” The Count has gone bad. He has escaped the hard-scrabble New York streets where he\ngained his fame and now haunts Oregon, surprising and killing unwary programmers throughout the state. Only\none defense has been found: he is mesmerized by equations of the form\n\n(a/b)^3 + (c/b)^3 = n\n\nfor natural numbers a, b, c, and n. For instance,\n\n(415280564497/348671682660)^3 + (676702467503/348671682660)^3 = 9\n\nstopped him in his tracks for a good 20 minutes, giving mathematician Henry Dudeney enough time to escape a\ncertain death. Unfortunately, large numbers like this are too hard to memorize, so shorter ones such as\n\n(2/1)^3 + (1/1)^3 = 9\n\nare better. Each such equation is only good for one mesmerization, so your job is to write a program that will\ngenerate new such equations. In particular, you will be given n, and your job is to generate values for the\nnatural numbers a, b, c that satisfy the first equation. When multiple solutions exist, you should report the one\nwith the minimum possible sum a + b + c + b, such that the value of a/b is greater than or equal to the\nvalue of c/b. You may assume such a solution is unique. If you cannot find three natural numbers a, b, c\nsuch that a + b + c + b is less than 4,000, you should print “No value.”\n\n#### Input\nThe input will be a sequence of lines; each line will contain a single natural number less than 10,000. Input is\nterminated with a 0, which should not be processed.\n#### Output\nFor any valid equation you find, print the equation with the appropriate values for a, b, and c. A single space\nshould precede and follow the + and the = in the equation. When no valid equation exists, print “No value.”\n#### Sample Input\n```\n1\n9\n7\n6000\n0\n```\n\n#### Sample Output\n```\nNo value.\n(2/1)^3 + (1/1)^3 = 9\n(5/3)^3 + (4/3)^3 = 7\n(370/21)^3 + (170/21)^3 = 6000\n```\n',10000,32768,'0',8,63,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('864','Zombie Swallows','#### Description\nIn the movie, Monty Python and the Holy Grail, a very crucial scene centered\naround the question “What is the airspeed velocity of an unladen swallow?”\nPerhaps the more important question for an undead ornithologist, “What is the\nswallowing capacity of a zombie swallow?”\n\nIt turns out that in order to control a zombie swallow, you must control what the\nzombie swallow swallows. After rising from its grave, a zombie swallow has an\nempty stomach. To keep a zombie swallow alive, you must feed it immediately.\nFurthermore, each zombie swallow must swallow enough insects to meet its minimum energy requirements, yet\nat the same time, no more insects than can fit inside its stomach. Thus, when presented with a set of insects to\nfeed upon, the swallow does its best to choose which insects it will swallow so that it meets its minimum energy\nrequirement of Cmini micrograms of insects and does not exceed its stomach capacity of Cmaxi micrograms of\ninsects. If a swallow finds enough micrograms of insects to meet these requirements, the swallow will survive\nto swallow another day. Whenever a swallow starts to feed, it attempts to find a subset of insects that are as\nclose to the midrange of its feeding requirements as possible.\n\n#### Input\nThe first line of input will be S, the number of swallows that need to swallow insects. This will be followed by\nS lines where S <= 30, and each of these lines will contain the feeding information for a single swallow:\n\n• The first two integers 0 <= Cmini < Cmaxi <= $$$2^{26}$$$ respectively represent the swallow’s minimum\nenergy requirements and maximum feeding capacity.\n\n• An integer ni where 0 <= ni <= 150 denotes the number of insects available to the swallow.\n\n• Finally, a list of ni positive integer weights <=  $$$2^{26}$$$, where each weight (micrograms) is the weight of a\nspecific insect.\n\nBecause of the characteristics of zombie swallows, 1 <= (Cmaxi / (Cmaxi - Cmini)) <= 60,000.\n\n#### Output\nFor each swallow, your program should determine whether or not that particular swallow’s feeding\nrequirements are achievable. If the swallow can feed according to its requirements (given the insects it is\nallowed to choose from), the program should output “Sallow swallow swallows.” However, if there is\nno combination of insects that satisfy the eating restrictions for that swallow, the program should output\n“Sallow swallow wallows in dust.”, i.e., the swallow would be underfed or overfed regardless of\nits choice of insects to swallow.\n#### Sample Input\n```\n2\n8 11 2 3 5\n299 300 9 1 2 3 4 5 60 130 260 270\n```\n\n#### Sample Output\n```\nSallow swallow swallows.\nSallow swallow wallows in dust.\n```\n',3000,32768,'0',8,64,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('865','Decomposing Fibonacci Numbers','#### Description\nSome Fibonacci numbers are immune to zombie attack — as prime numbers they can’t be decomposed.\n\nFibonacci numbers are defined by the following recurrence:\n\n[[Image: I651.jpg | 250px]]\n\nYou will be given an indefinite number of integer ranges of numbers that can be represented as 64-bit signed\nintegers. Your job is to report in increasing order the Fibonacci numbers that fall within that range, as well as\ntheir base-2 logarithm* and their prime decomposition — the prime numbers in increasing order which, when\nmultiplied together, give the value of the Fibonacci number. If there is no Fibonacci number in the range, report\nthat fact.\n\nA reminder: the logarithm of zero is undefined, even though zero is the first Fibonacci number. Also note that,\nby definition, 0 and 1 have no prime factors, even though they are Fibonacci numbers.\n\n#### Input\nThe input file contains an indeterminate number of lines consisting of two non-negative integers (lo and hi)\nseparated by one space, given in hexadecimal format (as in 0x1a meaning 26 in decimal). Each integer is\nguaranteed to fit within a 64-bit signed integer. The program terminates when it either encounters an end-of-file\ncondition or when lo >= hi.\n\n#### Output\nFor each range in the input file, print the range and the Fibonacci number information as shown in the sample\noutput, with each range separated by a blank line. Note that the base-2 logarithm (lg) is reported with six\ndigits to the right of the decimal point, and that the prime factors are separated by single spaces.\n\n+  Reminder: to calculate the base c logarithm, note that logc(x) = log(x) / log(c), using on the right-hand side\nyour favorite logarithm (common logarithm or natural logarithm).\n#### Sample Input\n```\n0x0 0x8\n0x9 0xc\n0x9 0x40\n0x0 0x0\n```\n\n#### Sample Output\n```\nRange 0 to 8:\nFib(0) = 0, lg does not exist\nNo prime factors\nFib(1) = 1, lg is 0.000000\nNo prime factors\nFib(2) = 1, lg is 0.000000\nNo prime factors\nFib(3) = 2, lg is 1.000000\nPrime factors: 2\nFib(4) = 3, lg is 1.584963\nPrime factors: 3\nFib(5) = 5, lg is 2.321928\nPrime factors: 5\nFib(6) = 8, lg is 3.000000\nPrime factors: 2 2 2\n\nRange 9 to 12:\nNo Fibonacci numbers in the range\n\nRange 9 to 64:\nFib(7) = 13, lg is 3.700440\nPrime factors: 13\nFib(8) = 21, lg is 4.392317\nPrime factors: 3 7\nFib(9) = 34, lg is 5.087463\nPrime factors: 2 17\nFib(10) = 55, lg is 5.781360\nPrime factors: 5 11\n\n```\n',3000,32768,'0',8,65,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('866','Pride and Prejudice and Zombies','#### Description\nPride and Prejudice and Zombies, by Jane Austen and Seth Grahame-Smith, spices up the\nfamous 1813 satire about marriage and social convention with intercalary appearances by\nzombies, skunks, ghouls, chipmunks and ninjas. Most literary critics praised PPZ (as it’s known\non Facebook) as “clever”, “insightful”, holding “indomitable appeal”, although Macy Halford of\nThe New Yorker condemned Mr. Grahame-Smith’s retelling as “awful”, and “one hundred per\ncent terrible”.\n\nHere’s a little known fact: the book’s release was delayed by some 8 years due to several heated\ndisagreements between Mr. Grahame-Smith and the editors at Quirk Books, the small publishing\nhouse in Philadelphia that eventually published the novel. The most impassioned of the\narguments centered on the controversial “Vampire Number” chapter, where Mrs. Bennett —\ndesperate to rally the English countryside’s interest in matrimony — contrives a social event\nwhere 50 men and 50 women draw slips of paper from a large, feathery hat. “It is an axiom\ngenerally acknowledged, that a single man in possession of the complementary multiplicand,\nmust be in want of a wife”, says Mrs. Bennett in announcing the event. On each slip of paper is\na single three-digit number. The goal of the event was for each of the women to find the man\nwhose three-digit number, when multiplied by her own, produced a six-digit number that\nreproduced the digits of the two “multiplicands” (Mrs. Bennett’s word) with the correct\n“distribution” (also her word) in some order.\n\nMr. Grahame-Smith insisted the chapter was vital to the story arc, whereas Quirk Books\nconsidered it forced, obscure, boring, and unnecessarily intellectual. Furthermore, Quirk Books\nwas initially contemplating a limited New England release and argued that no one outside of the\nPacific Northwest understood math. Mr. Grahame-Smith eventually conceded this to be true,\nand agreed to cut the chapter. The chapter’s existence only surfaced recently in a follow-up\narticle in The New Yorker where Ms. Halford noted the novel would have “benefitted\nsubstantially” had it been included.\n\n\'\'\'Vampire Numbers\'\'\'\n\nIt is generally acknowledged that Vampire numbers are positive integers with an even number —\nwe’ll say 2n — of digits where the 2n digits can be distributed across two n-digit numbers such\nthat their product equals the original 2n-digit number. None of the three numbers can include\nleading zeroes, and neither of the two n-digit numbers can have consecutive zeroes anywhere.\n\nFor examples:\n\n• 125460 = 204 x 615 (so 125460 is a Vampire number).\n\n• 16758243290880 = 1982736 x 8452080 (so 16758243290880 is a Vampire number).\n\n• 353 has an odd number of digits, so it can’t be a Vampire number by definition.\n\n• 3421 can’t be subdivided properly, so it’s not a Vampire number either.\n\nWrite a program that reads in a series of numbers (each at most 18 digits) and prints whether or\nnot that number is a Vampire number.\n\n#### Input\nThere will be an arbitrary number of inputs, one per line, with no leading zeroes or extraneous\nwhitespace. Each number will have at most 18 digits. End of input is marked by a single 0 on\nits own line, for which no output should be produced.\n#### Output\nFor each input, print the number, followed by a colon, followed by a space, followed by “yes” if\nthe number is a Vampire number or “no” if it is not.\n#### Sample Input\n```\n1260\n6880\n8680\n102510\n108135\n110758\n115672\n116725\n125248\n12054060\n13078260\n46847902\n46847921\n1001795850\n315987404670\n472812953760\n10174695862032\n10174695862037\n2512099504480801\n8186379410403769\n170147428389340249\n189598345243224241\n968781726110944201\n968781726110944203\n698781726110944201\n0\n```\n\n#### Sample Output\n```\n1260: yes\n6880: yes\n8680: no\n102510: yes\n108135: yes\n110758: yes\n115672: yes\n116725: yes\n125248: yes\n12054060: yes\n13078260: yes\n46847902: no\n46847921: no\n1001795850: yes\n315987404670: yes\n472812953760: yes\n10174695862032: yes\n10174695862037: no\n2512099504480801: yes\n8186379410403769: yes\n170147428389340249: yes\n189598345243224241: yes\n968781726110944201: yes\n968781726110944203: no\n698781726110944201: no\n```\n',10000,32768,'0',8,66,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('867','Tales from DeCrypt','#### Description\nIn newsgroups, lists, and other ways of publicly sharing information, one popular method of obscuring\ninformation without actually hiding it has been the ROT13 algorithm: alphabetic characters are simply rotated\nby 13 positions (modulo 26), so that the encryption and decryption algorithms are identical. Messages that are\npotentially offensive to some readers of the newsgroup or list are purposely posted in ROT13 form, on the\ntheory that the reader is responsible for changing the offensive material into clear-text form, and so that the\nreader cannot complain about it.\n\nWe can use a rotational cipher to hide information as well as obscure it. You are responsible for generating the\ndecryption algorithm for the encryption algorithm described here. It is restricted to 7-bit ASCII/ANSI\ncharacters, and we will deal only with the printing characters — 0x20 (space) up to and including 0x7e (‘~’) for\n95 characters. This way the encrypted text can still be dealt with as pure text for file manipulation and\ntransmission purposes.\n\n\'\'\'Encryption Algorithm\'\'\'\n\nSelect three numbers to encode all the necessary information for this linear congruential random number\ngenerator: the multiplier (a), the modulus (m), and the seed (s):\n```\ndouble r(in int a, in int m, inout int s)\n  double val = s modulo m / double(m)\n  s = ( a * s + 1 ) modulo m\n  return val\n```\nThe two integers for the random number generator and the initial seed (s in the pseudo code above) are\ncontained within the file as the first line, which contains three white-space delimited 32-bit integers, given in\nthe order \"a m s\". Range: 2 < number < 65536. So a first line of \"12343 65536 11\" generates\n\n• a = 12343\n\n• m = 65536\n\n• s = 11\n\nThe output file of the encryption program contains these three numbers, white-space delimited, on one line. The\nencrypted text begins on the next line. This constitutes the input to your decryption program.\n\nEncrypted text is generated by the following algorithm:\n```\nfor each character c in the input stream\n   if the character is not in the range 0x20 through 0x7e\n      pass it through to the output\n   otherwise\n      c = ( (c – 32) + ceiling( 95 – r(a,m,seed)*95) ) ) modulo 95 + 32\n      send c to the output\n```\n\n#### Input\nThe input for your program is the output of the encryption program: three white-space delimited numbers on\none line. The encrypted text begins on the next line, and continues to the end of file.\n#### Output\nYour output is the decryption of the text encrypted in the input file.\n#### Sample Input\n```\n12343 65536 11\na[+d\'x/vKmV<WP(+2:N]%CN+u#rjNQB\nvW\'ecvzcK5E%F;^Qlo~pt\\]kwGr*.yv\nSo|#p36LhPNM#\"N<I|}2c[cGX5I3o!u\nm48rOK1&N=&8%Q-2Jq^[v&r;at\"z#\'C\n```\n\n#### Sample Output\n```\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\nccccccccccccccccccccccccccccccc\nddddddddddddddddddddddddddddddd\n```\n',3000,32768,'0',8,67,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('868','A Smart Brain is a Tasty Brain','#### Description\nThe zombies have cornered you and your team. There’s no hope…\n\nBut wait! Suddenly, they all stop advancing and offer you a deal instead. As it turns out,\nthe zombies are having a problem finding good tasting brains, which, to a zombie, are the\nsmart brains (there is nothing more disgusting to a zombie than the brains of a\ncommunications major). While your brains would be really delicious, the zombies realize\nthat they could be put to better use by helping them to find other smart brains. The deal is\nthis: help the zombies determine whether a given brain is smart (and therefore tasty) or not,\nand they will let your team go (at least for now).\n\nBeing the big-brained team that you are, you quickly discover that brains can be determined to be smart or not if\nthe brain can return a correct answer to a given Boolean expression. You quickly compile a list of Boolean\nexpressions together and set off testing one expression on each brain.\n\nEvery Boolean expression is deterministic and is recursively defined as follows\n\n1. expression = ‘(’ + (value or expression) + operation + (value or expression) + ‘)’\n\n2. value = ‘t’ or ‘f’\n\n3. operation = ‘&’ or ‘|’\n\n4. All values and expressions can be preceded with an optional ‘!’ symbol.\n\nThere are no characters in the expression other than what’s listed below. Here is each character’s definition:\n\n1. ‘&’ represents AND. (a&b) evaluates to true if both a and b are true; false otherwise.\n\n2. ‘|’ represents OR. (a|b) evaluates to false if both a and b are false; true otherwise.\n\n3. ‘!’ represents NOT. !(a) evaluates to false if a is true; true otherwise.\n\n4. ‘(‘ and ‘)’ are the endpoints of expressions. Order of operations stipulates that all expressions inside\nparentheses must be evaluated first. There is always a corresponding end parenthesis ‘)’ for every\nbeginning parenthesis ‘(’.\n\n5. ‘t’ and ‘f’ represent true and false, respectively.\n\n#### Input\nThe first line contains an integer x such that 0 < x <= 10000. This is followed by x lines each containing a\ncomplete Boolean expression (up to 500 characters long) followed by one space, the equals symbol ‘=’, another\nspace, and the test brain’s evaluation of the expression (either ‘t’ or ‘f’).\n\n#### Output\nOn one line for each test brain, print the number of the brain followed by a colon and a space followed by either\n“Good brain” if the expression was evaluated correctly or “Bad brain” if the expression was not\nevaluated correctly. Once you are finished, I suggest you start running as fast as you can, as the zombies will\nonly give you so much of a head start for your help.\n#### Sample Input\n```\n4\n(t|f) = f\n((t|f)&((f|t)&f)) = f\n((f&f)|(f|!(t&f))) = t\n(f|(f|t)) = f\n```\n\n#### Sample Output\n```\n1: Bad brain\n2: Good brain\n3: Good brain\n4: Bad brain\n```\n',3000,32768,'0',8,68,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('869','Containing Zombies and Respecting Building Codes','#### Description\nIt’s well documented that the only way to thwart zombies is to trap them in closed fences. Zombie hunters have\nfor years been luring zombies into clear spaces and then erecting such fences at lightning speeds so they can’t\ngo very far.\n\nUnfortunately, government has its zoning laws, its taxes, and its building codes, and recently they started to\nenforce silly constraints on how these zombie-enclosing fences can be constructed. According to city codes,\nfence posts must be planted at regular intervals, and the fences themselves must respect arbitrary limits on how\nmany walls can surround a unit square of land. We also want to build as long of an enclosing fence as possible,\nbecause the government has plenty of money to waste on such things.\n\n\'\'\'Building Zombie Fences\'\'\'\n\nBuild walls between vertices to form a single enclosed fence without crossings or branches. The number\nindicates \'\'\'exactly\'\'\' how many walls — according to the crazy city building laws — must surround it (and a lack\nof number means there’s no constraint.) So, presented with the following 5 x 5 grid of land squares:\n\n[[Image:I691.jpg | 150px | center]]\n\nthe following fence could be constructed:\n\n[[Image:I692.jpg | 150px | center]]\n\nThe grid of lots is always n x n [1 <= n <= 6], and each lot is either a number (0, 1, 2, or 3) to impose a\nconstraint, or a blank if no constraint is being imposed. You’re to output the length of the longest possible loop\n(or equivalently, the number of vertices in the loop), or -1 if no loop exists. Note that loops of length 0 are\ninvalid. A valid loop must enclose a non-zero amount of area.\n\n#### Input\nThe input is a series of zombie fencing problems, expressed by n, the dimension of the problem, followed by an\nn x n grid (1 � n � 6) with the number constraints (with the – to represent no constraint), followed by a\nblank line. End of input is marked by a single 0.\n#### Output\nFor each fence problem, you should print the length of the longest fence loop that can be constructed for that\nproblem while still respecting all constraints, or you should print -1 if the problem has no such solution. There\nshould be no extraneous white space, save for the newlines that separate each of the fence lengths.\n#### Sample Input\n```\n2\n22\n22\n\n3\n222\n222\n222\n\n5\n----0\n2---2\n3--2-\n2-2--\n22---\n\n6\n222222\n2-22-2\n22222-\n22-2-2\n2-22-2\n222222\n\n0\n```\n\n#### Sample Output\n```\n8\n-1\n32\n46\n```\n',3000,32768,'0',8,69,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('87','Report Recovery','#### Description\nAt the end of the week, John asked Mary to send him an urgent sales report. Mary was in\na hurry because she was leaving for her holiday. She then copy-pasted the sales sheet on an\nemail, sent it to John and went out. She did not want to be annoyed with work issues, so she\nleft without telling anyone where she would be. She announced that she would be simply not\navailable for the next two weeks, turned off her cell phone, and left.\nWhen John received the message he realized that the report had no spaces at all! He knew\nthat the report should have a header line with product codes of the form P1, P2, . . ., PN and\nthe word Totals at the end. Then there would be several lines reporting product sales for the\ndifferent sellers of Mary’s office. Each seller was identified with a name composed by one word\n(only alphabetical characters). The line corresponding to a seller should begin with his/her\nname, followed by the number of sold products, according to the columns’ report. The last line\nof the report should begin with the two letters TP followed by the totals of each column in the\nreport (of course, no seller’s name began with the letters TP). John knew that there were no\nnegative numbers in the report, a zero quantity was reported with a single 0, and there were\nno leading zeros when reporting a positive quantity.\nAt this point, John decided to reconstruct Mary’s report. He knew that there could be more\nthan one possible result, but he wanted to do it anyway with the first consistent solution that\nhe could find (maybe he could fix any mistakes when Mary comes back).\nCould you help John with the recovering of Mary’s sales report?\n#### Input\nThe input consists of several test cases. The first line in the input contains an integer C\nspecifying the number of test cases. The first line of a report is a header line, containing the\nproduct codes P1, P2, . . . PN and the word Totals, as described above. The numbering of\nproducts in this header line is consecutive, from 1 to N, with $$$1 \\leq N \\leq 5$$$. Then there are a\nnumber of lines, each representing a row of the report, as described above. The last line of the\nreport starts with the letters TP and have the format described above. Consider that each seller\nsold less than 1000 units of each product. There are no more than 4 sellers on each test case.\nEach seller name will not exceed 10 characters (only uppercase and lowercase letters).\n\n#### Output\nFor each test case in the input your program must produce one possible Mary’s report. Each\nline of the answer must be left aligned, with its items separated by a single space, and with no\nspace at its end.\n\n#### Sample Input\n```\n2\nP1P2P3Totals\nAmanda121100131\nCharles5141772\nMonique14121238\nTP1862629241\nP1P2Totals\nIngrid9519851936\nCandid49212504\nPeter10313\nCamila000\nTP145310002453\n```\n\n#### Sample Output\n```\nP1 P2 P3 Totals\nAmanda 121 10 0 131\nCharles 51 4 17 72\nMonique 14 12 12 38\nTP 186 26 29 241\nP1 P2 Totals\nIngrid 951 985 1936\nCandid 492 12 504\nPeter 10 3 13\nCamila 0 0 0\nTP 1453 1000 2453\n```',10000,32768,'0',0,86,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('870','Save the Python Programmers!','#### Description\nIn post-apocalyptic California, only six teams of Python programmers remain: three who use CPython and three\nwho use Jython. Unfortunately, C++-programming zombies roam the streets, so the programmers may only\nleave their safe houses under the guidance of their benevolent dictator, Guido.\n\nThe six teams control a network of safe houses, and through discussions on their social network Facelessbook,\nthey have agreed to swap safe houses — that is, the CPython programmers will move to the houses occupied by\nthe Jython programmers, and vice versa. Each night, Guido will guide one team from one safe house to a\ndifferent, nearby one, and he will do this every night until the six teams have exchanged safe houses.\n\nEach safe house is only large enough for one team, so no two teams can be in the same house at the same time.\nTremendous distrust exists between the CPython and the Jython programmers, so they insist that Guido\nalternate between leading a CPython team and a Jython team (although on the first night he may pick either.)\n\nThe network of safe houses is well known, both how many exist, and which pairs of houses are close enough to\ntravel between in a single night. Your job is to determine the minimum number of nights it will take to\nexchange the six teams, if it can be done at all.\n\nThere will be at most twenty safe houses, each identified by a single lower-case letter. The CPython teams start\nin houses a, b, and c; the Jython teams start in houses d, e, and f. At the end of the transfer, the CPython teams\nmust end up in houses d, e, and f, and the Jython teams must end up in houses a, b, and c.\n#### Input\nThe input will be in a single line, which gives the connections between the houses. Each line will consist of\nspace-separated “words”. Each word indicates a connection between the house represented by the first character\nof the word, and the houses represented by every subsequent character of the word.\n\nFor each scenario, if there is a solution, print the minimum number of nights required for the move; if there is\nno way to make the move, print a single line containing “No solution.”\n#### Output\nThe first example puzzle, Figure 1, described by gabd hbcf edf, can be solved in 34 moves. (It is presented\nhere in a size where you can try it by hand, by placing pennies on the top row and nickels on the bottom row,\nand swapping the two rows according to the constraints listed above.)\n\n[[Image:I701.jpg | 250px]]\n\nFigure 1: A moderately difficult puzzle\n\nThe next puzzle, shown in Figure 2, described by bacgh dge feh, requires 46 moves.\n\n[[Image:I702.jpg | 250px]]\n\nFigure 2: A harder puzzle\nThe situation depicted in Figure 3, gab hbdf ibc edf, requires 62 moves.\n\n[[Image:I703.jpg | 250px]]\n\nFigure 3: Good luck with this one!\n\n#### Sample Input\n```\ngabcdef\ngabcdefh\nbac dce feg ga\nade bef cfg gd\ngab hbdf ibc edf\n```\n\n#### Sample Output\n```\nNo solution.\nNo solution.\nNo solution.\n7\n62\n```\n',3000,32768,'0',8,70,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('871','Zombie Blast!','#### Description\nHelp!!! The zombies are marching! The zombie invasion has begun, and their legion is on the field, coming\ntoward our last line of defense.\n\nAll hope is not lost though. In anticipation of the forthcoming doom, you have deployed a host of Adjustable\nConflagration Mines (ACMs) on the battlefield. You can detonate all these mines simultaneously to a single,\nblast radius you control, and each mine will instantaneously incinerate any zombie within its blast radius.\n\nYou take a satellite image to give you a map of the situation. The map is a rectangular region divided into\nsquare cells of unit side length. Each cell is either empty, occupied by a zombie (Z), or occupied by a mine (M).\nFor example, it could look like this:\n\n```\nM..Z\n..ZZ\nM..Z\n```\n\nA zombie will be incinerated by a mine if the distance between the center of the cell it occupies and the center\nof the mine\'s cell is less than or equal to the blast radius. In order to minimize collateral damage, you have to set\noff the mines with the smallest blast size that will still incinerate all the zombies. For a given invasion scenario,\nwhat exactly is that radius?\n\n#### Input\nInput begins with a line containing a single integer N, the number of invasion scenarios (maps) for which you\nneed to determine a blast radius. Each scenario begins with a line containing two space-separated integers, w\nand h (1 <= w, h <= 2000), indicating the width and height of the map. Then the map follows as h lines of\ntext with w characters each, telling you what occupies each cell:\n\n• \'Z\' denotes a zombie\n\n• \'M\' denotes a mine\n\n• \'.\' denotes an empty cell.\n\nEvery map will have at least one zombie (Z) and one mine (M) on it.\n\n#### Output\nFor each invasion scenario, output on a single line a real number r, the smallest blast radius with you must set\noff the mines in order to incinerate all the zombies. Your output must be accurate to an error of no more than a\nfactor of 10-6 relative to the exact answer. (For example, if the correct answer is 50, any answer between\n49.99995 and 50.00005 will be accepted.)\n#### Sample Input\n```\n2\n4 3\nM..Z\n..ZZ\nM..Z\n5 4\n.ZZ.M\nZ.Z..\n.Z.ZZ\nZ.Z.Z\n```\n\n#### Sample Output\n```\n3.16227766\n5\n```\n',10000,262144,'0',8,71,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('872','cake','#### Description\nYou are given a rectangular cake of integral dimensions w × h. Your goal is to divide this cake into m\nrectangular pieces of integral dimensions such that the area of the largest piece is minimal. Each cut must\nbe a straight line parallel to one of the sides of the original cake and must divide a piece of cake into two\nnew pieces of positive area. Note that since a cut divides only a single piece, exactly m−1 cuts are needed.\n\nExamples\n\nIf w = 4, h = 4, and m = 4, then the following cuts minimize the area of the largest piece:\n\n[[Image:I721.jpg|150px|center]]\n\nHowever, if w = 4, h = 4, and m = 3, then the following cuts are optimal:\n\n[[Image:I722.jpg|150px|center]]\n\n#### Input\nThe input test file will contain multiple test cases, each of which consists of three integers w, h, m separated\nby a single space, with 1 <= w, h,m <= 20 and m <= wh. The end-of-file is marked by a test case with\nw = h = m = 0 and should not be processed.\n\n#### Output\nFor each test case, write a single line with a positive integer indicating the area of the largest piece.\n\n#### Sample Input\n```\n4 4 4\n4 4 3\n0 0 0\n```\n\n\n#### Sample Output\n```\n4\n6\n```\n',3000,65535,'0',8,72,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('873','election','#### Description\n\nGiven the voting preferences of a population of M people, you are to determine the winner of an election\namong N candidates, numbered 1, . . . ,N. For this problem, the M people are partitioned into G “groups”\nwhere all members within a group have the same voting preferences. The candidate preferences for a group\nare specified by listing candidates from most preferred to least preferred. Election results are determined by\nan instant-runoff voting procedure.\n\nIn this method, the first choices of the M people in the population are counted and the least popular\ncandidate is eliminated. In the event of a tie, the highest-numbered candidate is eliminated. Then, the\neliminated candidate is removed from the preference list of all M individuals in the population, and again\nthe least popular candidate is eliminated. This process repeats until only a single candidate is left.\n\n\n#### Input\n\nThe input test file will contain multiple test cases. Each input test case begins with a single line containing\nthe integers G and N where 2 ≤ N ≤ 5 and 1 ≤ G ≤ 20. The next G lines are of the format “Mi ai1 ai2\n. . . aiN” where 1 ≤ Mi ≤ 20 and ai1, . . . , aiN is a permutation of the integers 1, . . . ,N. Mi is the number\nof individuals in the ith group, and ai1, . . . , aiN is the ordering of the N candidates from most preferred to\nleast preferred for the ith group. The end-of-file is marked by a test case with G = N = 0 and should not\nbe processed. For example:\n\n#### Output\nFor each input case, the program should print the winner of the election on a single line.\n\n#### Sample Input\n```\n3 4\n10 1 4 2 3\n15 3 2 1 4\n12 4 3 2 1\n3 2\n10 1 2\n10 1 2\n20 2 1\n0 0\n```\n\n#### Sample Output\n```\n4\n1\n```\n',3000,65535,'0',8,73,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('874','nash','#### Description\nA two-player normal form game between two individuals A and B is completely specified by\n\n• {a1, . . . , am}, a set of actions for player A,\n\n• {b1, . . . , bn}, a set of actions for player B,\n\n• PA, an m× n payoff matrix for player A, and\n\n• PB, an m× n payoff matrix for player B.\n\nIn such a game, both players simultaneously select actions to be played (say ai and bj for players A and B,\nrespectively). Then payoffs for each player are determined according to the payoff matrices (PA[i, j] and\nPB[i, j] for players A and B, respectively). The goal of each player is to maximize his or her payoff.\n\nFor player A, the set of best responses to a particular action bj by player B consists of any action ai which\nmaximizes A’s payoff, that is, whose payoff is maxi0PA[i0, j]. Similarly, for player B, the set of best responses\nto a particular action ai by player A is any action bj whose payoff is maxj0PB[i, j0]. A pair of strategies\n(ai, bj) is said to be a pure strategy Nash equilibrium if ai is a best response to bj and bj is a best response to ai.\n\nIn this problem, you are given the payoff matrices for two players A and B, and your task is to find and list\nall pure strategy Nash equilibria.\n\nConsider the following two-player game in which A and B each have two possible actions, and the payoff\nmatrices are:\n\n{| align=\"center\" cellspacing=\"0\" border=\"1\"\n|-\n|PA || b1||b2\n|-\n|a1 || 1||5\n|-\n|a2 || 0||3\n|}\n\n\n{| align=\"center\" cellspacing=\"0\" border=\"1\"\n|-\n|PB || b1||b2\n|-\n|a1 || 1||0\n|-\n|a2 || 5||3\n|}\n\n\nHere, if player A chooses a1, then choosing b1 allows player B to maximize his payoff (PB[1, 1] = 1 >\n0 = PB[1, 2]). Similarly, if player B choose b1, then choosing a1 allows player A to maximize his payoff\n(PA[1, 1] = 1 > 0 = PA[2, 1]). Thus, a1 is the best response for b1 and vice versa, so (a1, b1) is a pure\nstrategy Nash equilibrium of this game. However, note that (a2, b2) is not a Nash equilibrium; if player A\nchooses action a2, b1 is the best response since PB[2, 1] = 5 > 3 = PB[2, 2].\n\n#### Input\nThe input test file will contain multiple test cases. Each test case begins with a single line containing two\nintegers, m and n, where 1 <= m, n <= 20. The next m lines specify the m rows of payoff matrix PA. The m\nlines after that specify the m rows of payoff matrix PB. All payoff matrix values will be integers between\n-100 and 100, inclusive. The end-of-file is marked by a test case with m = n = 0 and should not be processed.\n\n#### Output\nFor each input case, suppose that N is the number of Nash equilibria for the described normal form game.\nThen, the output of the program consists of (1) a line containing the single integer N, and (2) N lines\ncontaining two integers i and j, where (ai, bj) is the corresponding Nash equilibrium. Note that the program\nmust list all Nash equilibria in lexicographical order, i.e., (ai1 , bj1 ) is listed before (ai2 , bj2 ) if i1 < i2 or if\ni1 = i2 and j1 < j2. \n\n#### Sample Input\n```\n3 4\n1 5 -3 2\n4 2 -1 -3\n3 -2 5 9\n0 -4 -1 -5\n-9 2 8 3\n-3 4 -2 3\n2 2\n1 10\n0 5\n1 0\n10 5\n2 2\n1 1\n1 1\n1 1\n1 1\n0 0\n```\n\n#### Sample Output\n```\n0\n1\n1 1\n4\n1 1\n1 2\n2 1\n2 2\n```\n',3000,65535,'0',8,74,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('875','triangle','#### Description\nA lattice point is an ordered pair (x, y) where x and y are both integers. Given the coordinates of the vertices\nof a triangle (which happen to be lattice points), you are to count the number of lattice points which lie\ncompletely inside of the triangle (points on the edges or vertices of the triangle do not count).\n\n#### Input\nThe input test file will contain multiple test cases. Each input test case consists of six integers x1, y1, x2, y2,\nx3, and y3, where (x1, y1), (x2, y2), and (x3, y3) are the coordinates of vertices of the triangle. All triangles\nin the input will be non-degenerate (will have positive area), and −15000 ≤ x1, y1, x2, y2, x3, y3 ≤ 15000.\nThe end-of-file is marked by a test case with x1 = y1 = x2 = y2 = x3 = y3 = 0 and should not be processed.\n\n#### Output\nFor each input case, the program should print the number of internal lattice points on a single line.\n\n#### Sample Input\n```\n0 0 1 0 0 1\n0 0 5 0 0 5\n0 0 0 0 0 0\n```\n\n#### Sample Output\n```\n0\n6\n```\n',3000,65535,'0',8,75,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('876','brackets','#### Description\n\nWe give the following inductive definition of a “regular brackets” sequence:\n\n• the empty sequence is a regular brackets sequence,\n\n• if s is a regular brackets sequence, then (s) and [s] are regular brackets sequences, and\n\n• if a and b are regular brackets sequences, then ab is a regular brackets sequence.\n\n• no other sequence is a regular brackets sequence\n\nFor instance, all of the following character sequences are regular brackets sequences:\n\n(), [], (()), ()[], ()[()]\n\nwhile the following character sequences are not:\n\n(, ], )(, ([)], ([(]\n\nGiven a brackets sequence of characters a1a2 . . . an, your goal is to find the length of the longest regular\nbrackets sequence that is a subsequence of s. That is, you wish to find the largest m such that for indices\ni1, i2, . . . , im where 1 ≤ i1 < i2 < . . . < im ≤ n, ai1ai2 . . . aim is a regular brackets sequence.\n\nGiven the initial sequence ([([]])], the longest regular brackets subsequence is [([])].\n\n#### Input\nThe input test file will contain multiple test cases. Each input test case consists of a single line containing\nonly the characters (, ), [, and ]; each input test will have length between 1 and 100, inclusive. The\nend-of-file is marked by a line containing the word “end” and should not be processed.\n\n#### Output\nFor each input case, the program should print the length of the longest possible regular brackets subsequence\non a single line.\n\n#### Sample Input\n```\n((()))\n()()()\n([]])\n)[)(\n([][][)\nend\n```\n\n\n#### Sample Output\n```\n6\n6\n4\n0\n6\n```\n',3000,65535,'0',8,76,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('877','repeatless','#### Description\nA repeatless number is a positive integer containing no repeated digits. For instance, the first 25 repeatless\nnumbers are\n\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, . . .\n\nGiven an integer n, your goal is to compute the nth repeatless number.\n\n#### Input\nThe input test file will contain multiple test cases, each consisting of a single line containing the integer n,\nwhere 1 ≤ n ≤ 1000000. The end-of-file is marked by a test case with n = 0 and should not be processed.\n\n#### Output\nFor each input case, the program should print the nth repeatless number on a single line.\n\n#### Sample Input\n```\n25\n10000\n0\n```\n\n#### Sample Output\n```\n27\n26057\n```\n',3000,65535,'0',8,77,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('878','planet','#### Description\nIn a fictitious solar system consisting of star S, a planet P, and its moon M, planet P orbits in a perfect\ncircle around star S with a revolution period of exactly T Earth days, and moon M orbits in a perfect circle\naround planet P with an unknown revolution period. Given the position of moon M relative to star S at\nthree different time points, your goal is to compute the distance of planet P from star S.\n\nTo do this, consider a two-dimensional Cartesian coordinate system with its origin centered at star S.\nYou may assume that P’s counterclockwise orbit around S and M’s counterclockwise orbit around P both\nlie completely within the x−y coordinate plane. Let (x1, y1) denote the position of the moon M on the first\nobservation, let (x2, y2) denote its position k1 Earth days later, and let (x3, y3) denote its position k2 Earth\ndays after the second observation.\n\n#### Input\nThe input test file will contain multiple test cases. Each test case consists of two lines. The first line contains\nthe integers T , k1, and k2, where 1 ≤ T, k1, k2 ≤ 1000. The second line contains six floating-point values\nx1, y1, x2, y2, x3, and y3. Input points have been selected so as to guarantee a unique solution; the final\ndistance from planet P to star S will always be within 0.1 of the nearest integer. The end-of-file is denoted\nwith a single line containing “0 0 0”.\n\n#### Output\nFor each input case, the program should print the distance from planet P to star S, rounded to the nearest\ninteger.\n\n#### Sample Input\n```\n360 90 90\n5.0 1.0 0.0 6.0 -5.0 1.0\n0 0 0\n```\n\n#### Sample Output\n```\n5\n```\n',3000,65535,'0',8,78,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('879','1^k + 2^k + .. + N^k','#### Description\n求1到n的k次方总和\n例如n=3，k=2，总和为1^2 + 2^2 + 3^2 =1 + 4 + 9 = 14\n\n#### Input\n第一行输入一个t，表示下面将有t组测试数据。接下来的t行每行有两个参数n(0<n<=50)，k（0<= k <= 10）\n\n注意k的取值范围，结果会超过int，请使用64位整型，long long\n\n#### Output\n\n对于每一组测试数据，输出的一行是1到n的k次方总和。\n\n#### Sample Input\n```\n2\n3 2\n4 3\n```\n\n#### Sample Output\n```\n14\n100\n```\n\n#### Hint\n```\n整型(int)数据的范围是-2147483648~2147483647，如果需要表示更大的整数（不是大的很多）可以用64位整数long long表示。\nlong long的使用方法如下：\n\nlong long val;          //定义\nscanf(“%lld”,&val);     //输入\nprintf(“%lld\\n”,val);  	//输出\n\nlong long只能在judge系统中使用(linux环境)，而在vc6.0中，则需要用__int64\n\n__int64 val;		//定义\nscanf(“%I64d”,&val);	//输入\nprintf(“%I64d\\n”,val);	//输出\n```',1000,32768,'0',8,79,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('88','Turkish Roulette','#### Description\nTurkish Roulette is a betting game that uses a roulette with S slots, each one numbered with\nan integer between -64 and 64. In each turn of the game players bet on B balls, each one also\nnumbered from -64 to 64. For each of the B balls, exactly one player will bet on it.\n\nAfter spinning the roulette, the dealer throws in the B balls sequentially. When the roulette\nstops, each ball is lodged over two (adjacent) slots, as depicted in the figure below, which shows\na roulette with thirty two slots and four balls. Notice that, as the figure illustrates, a ball\noccupies the space of two adjacent slots, and therefore there is room for at most $$$\\lfloor s/2 \\rfloor$$$  balls in\nthe roulette.\n\n[[Image:A87.jpg|center]]\n\nBalls end up lodged in the same relative positions that they were thrown in the roulette.\nThat is, if balls a, b and c are thrown in that sequence, they end up lodged such that, in\nclockwise direction, a is followed by b which is followed by c which is followed by a.\n\nThe value of a ball in a turn is calculated by multiplying the ball’s number by the sum of\nthe numbers of the two adjacent slots over which the ball is lodged. If a ball’s value is positive,\nthe player who bet on that ball receives that amount (the ball’s value) from the dealer; if a\nball’s value is negative, the player who bet on that ball must pay that amount to the dealer.\nThe profit of the dealer in a turn is the total amount received minus the total amount paid.\n\nFor example, in the figure above, the dealer pays $5.00 for ball numbered −1, pays $7.00 for\nball numbered −7, receives $24.00 for ball numbered 12 and does not pay nor receive anything\nfor ball numbered 3. Therefore, in this turn the dealer makes a profit of $12.00 (24 − 5 − 7);\nnote that the dealer’s profit in a turn may be negative (loss).\n\nYou will be given the description of the roulette, the description of the balls and the sequence\nin which the balls are thrown into the roulette. Write a program to determine the maximum\nprofit that the dealer can make in one turn.\n#### Input\nInput contains several test cases. The first line of a test case contains two integers S and B\nwhich indicate respectively the number of slots in the roulette $$$(3 \\leq S \\leq 250)$$$ and the number\nof balls used $$$(1 \\leq B \\leq \\lfloor S/2 \\rfloor)$$$. The second line of a test case contains S integers Xi, indicating\nthe numbers associated to the roulette’s slots, in clockwise direction $$$(-64 \\leq X_i \\leq 64, for\n1 \\leq i \\leq S)$$$. The third line of a test case contains B integers Yi, indicating the numbers\nassociated to the balls $$$(-64 \\leq Y_i \\leq 64, \\,for 1 \\leq i \\leq B)$$$, in the sequence the balls are thrown\ninto the roulette (notice it is in this order that they end lodged in the roulette, in clockwise\ndirection). The end of input is indicated by S = B = 0.\n\nThe input must be read from standard input.\n\n#### Output\nFor each test case in the input your program must write one line of output, containing an\ninteger indicating the maximum profit the dealer can make in one turn.\n\nThe output must be written to standard output.\n#### Sample Input\n```\n4 2\n-1 0 2 -1\n-1 1\n\n5 2\n3 2 -1 7 1\n2 3\n\n7 3\n-4 3 2 1 0 -4 -2\n-10 0 1\n\n4 2\n0 2 3 0\n-2 -2\n\n0 0\n```\n\n#### Sample Output\n```\n4\n-11\n56\n10\n```\n',10000,32768,'0',0,87,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('880','Number of prime number','#### Description\n素数是指在大于1的自然数中，除了1和此整数自身外，没法被其他自然数整除的数，例如2, 3, 5, 7, 11……\n\n求n以内的素数个数，是指小于等于n的素数数量\n\n例如n=4，因为小于4的素数是2、3，所以数量是2\n\n#### Input\n第一行输入一个t，表示下面将有t组测试数据。接下来的t行的每行包含参数n(0<=n<=1000000)\n\n#### Output\n对于每一组测试数据，输出的一行是n以内的素数个数。\n\n#### Sample Input\n```\n3\n18\n9\n11\n```\n\n#### Sample Output\n```\n7\n4\n5\n```',1000,32768,'0',8,80,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('881','Word queue','#### Description\n输入一组单词,按照字母表顺序进行排队,规则为:\n\n1、每个单词长度不少于2\n\n2、按照单词首字母排列,如果两个单词首字母相同,按照尾字母排列;如果尾字母也相同,按照输入顺序排列。\n\n3、字母区分大小写,小写字母优先于大写字母\n\n\n#### Input\n只有一组数据,不多于1000个单词。每个单词一行,单词长度不少于2,不大于20,单词仅包含大小写字母 .\n文件输入结束时,测试结束.\n\n提示:(while(scanf(\"%s\",ss)!=EOF))\n\n例如：A00_A+B题目中，如果是以文件输入结束来结束输入时，我们可以这样写代码\n\n```\n1. include <stdio.h>\nint main()\n{\n   int a, b;\n   while(scanf(\"%d%d\",&a,&b)!=EOF)\n   {\n      printf(\"%d\\n\",a+b);\n   }\n   return 0;\n}\n```\n\n#### Output\n按排序后输出单词\n\n#### Sample Input\n```\nBye\nARE\nAir\nsky\nHello\nBaby\n```\n\n#### Sample Output\n```\nsky\nAir\nARE\nBye\nBaby\nHello\n```',1000,32768,'0',8,81,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('882','Encipher','#### Description\n一种字母加密的方法是按照字母表顺序，把每个字母循环右移k位，从而转换为加密的另一个字母。\n\n例如偏移2位，即A对应C，B对应D，……X对应Z，Y对应A，Z对应B；同样a对于c，b对应d，……x对应z，y对应a，z对应b。\n\n当前设定加密规则是：循环右移4位，对于输入的字符，只对字母进行加密，字母区分大小写，其他字符例如空格、标点符号等不做加密，直接输出。\n\n#### Input\n第一行输入一个t，表示下面将有t组测试数据。接下来的t行的每行包含任意长度的字符串(最长不超过200个字符).\n\n#### Output\n对于每一组测试数据，输出的一行是加密后的字符串\n\n#### Sample Input\n```\n2\nI am a boy\nShenzhen\n```\n\n#### Sample Output\n```\nM eq e fsc\nWlirdlir\n```',1000,32768,'0',8,82,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('883','Random number generator','#### Description\n一种随机数生成的方法如下公式：\n\n$$$seed[x+1]=(seed[x]+STEP)%MOD $$$\n\n设定一个初始随机种子seeed，下一个随机数根据上述公式进行计算。该公式包含两个参数STEP和MOD，另外“%”表示取模运算，生成的随机数范围是0到MOD-1\n\n例如设定STEP=3，MOD=5，初始种子为0，根据公式可以算出随机数序列为：0，3，1，4，2…….，整个随机数序列就是不断的重复生成0，3，1，4，2。该参数设定被称为“好”参数，因为它生成的随机数刚好覆盖了0到MOD-1之间所有的数。\n\n有些参数设定被称为“坏”参数，例如设定STEP=15，MOD=20，初始种子为0，根据公式重复生成的随机数：0，15，10，5……。因为生成的随机数只覆盖了0到MOD-1中的四个数，没有完全覆盖，所以称为“坏”参数。\n\n#### Input\n第一行输入一个t，表示下面将有t组测试数据。接下来的t行的每行包含两个参数STEP(0<STEP<1000000)和MOD(0<MOD<=1000) \n\n#### Output\n对于每一组测试数据，输出的一行是判断结果，好用GOOD表示，坏用BAD表示\n\n#### Sample Input\n```\n2\n3 5\n15 20\n```\n\n#### Sample Output\n```\nGOOD\nBAD\n```',1000,32768,'0',8,83,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('884','Superfluous words detector','#### Description\n老师Octopus经常收到学生意见，内容五花八门，他需要设计一个废话探测器判断投诉意见的重要性。\n\n该探测器将内置一组废话关键词(任何两个关键词不相同)，不区分大小写，如果意见包含的废话关键词超过三个或等于三个(重复出现的也算)，就判定为废话.\n\n当意见的单词（单词可以包含除字母外的其他可见字符）少于三个,且有一个以上废话关键词,则此意见也是废话.\n\n关键词最多有50个;\n\n每个意见的单词不会多于50个,每个单词和废话关键词的长度也不长于10个字符,单词之间由空格间隔开来.\n如果单词是字母,则不区分大小写.\n\n#### Input\n第一行输入两个参数k(0<=k<=50)和n(0<=n<=100)，k表示下面将有k个废话关键词，每个废话关键词一行；n表示接着废话关键词之后有n个意见，每个意见一行.\n\nk=0或n=0时测试结束.\n\n#### Output\n输出每行判断意见是否为废话，是废话则输出YES，不是废话输出NO\n\n#### Sample Input\n```\n5 4\nGOD\n-_-\n^_^\nDamn\nHell\nToday is so damn good like God in hell\nI hate the god damn math -_-\nI love Shenzhen ^_^\n^_^ ^_^ ^_^ :)\n0 0\n```\n\n#### Sample Output\n```\nYES\nYES\nNO\nYES\n```',1000,32768,'0',8,84,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('885','Job scheduling','#### Description\n某系统根据作业重要性进行排队，用1-99表示优先级，数字越大就越排在前面。有时候可能有新作业插队。\n\n根据优先级，当前作业排队为98、56、37、12、8、8、7、7…….1、1\n\n如果新作业优先级为26，则排队为98、56、37、26、12、8、8…….1、1\n\n如果新作业优先级与旧作业一样，那就排在相同优先级的作业最后，并加上*\n\n例如新作业重要程度为8，则排队为98、56、37、12、8、8、8*、7…….1、1\n\n#### Input\n假设当前有8个作业排队，有两个新作业进入\n\n第一行输入一个t，表示下面将有t组测试数据。\n\n每组数据的第一行表示当前8个作业的排队情况，第二行表示两个新作业的优先级\n\n#### Output\n输出每行新的作业排队,作业之间以一个空格隔开,最后一个作业后面没有空格!\n\n#### Sample Input\n```\n2\n98 56 37 12 8 8 7 7\n12 3\n76 22 6 6 6 1 1 1\n88 4\n```\n\n#### Sample Output\n```\n98 56 37 12 12* 8 8 7 7 3\n88 76 22 6 6 6 4 1 1 1\n```\n',1000,32768,'0',8,85,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('886','Card Game','#### Description\n桌上有一叠牌，从第一张牌开始从上往下编号为2、3、4……N+1。给定两个参数K和L，K不等于L，且K×L <= N。按照以下规则进行操作：\n\n1、从上往下，凡是能同时被K和L整除的牌移动到整叠牌的最开始，凡是能被K整除不能被L整除的牌扔掉，凡是被L整除不能被K整除的牌移动到整叠牌最后\n\n2、K加1，L加1，如果K×L <= N，则重复执行步骤1，否则执行步骤3\n\n3、输出最后剩下的牌排列，游戏结束\n\n#### Input\n第一行输入t,表示有t组测试组数\n\n每一组测试输入三个参数N (0<N<=100)、K、L ( K, L>0 )\n\n#### Output\n输出最后剩下的牌排列\n\n#### Sample Input\n```\n1\n12 2 3\n```\n\n#### Sample Output\n```\n12 5 7 11 13\n```',1000,32768,'0',8,86,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('887','Data compression','#### Description\n你的任务是编写一个程序，将一串数据进行压缩，规则如下:\n\n数据串中所有由连续2至9个相同字符组成的序列,都要进行编码,这个编码是由两个字符组成的.第一个字符是这个序列的长度,第二个字符是这个序列的相同字符,如:AAAABBB221111就是4A3B2241.\n\n如果在一个序列中没有任何连续超过2个相同字符,则在它的首尾各加上一个1,同时这个序列中的1字符前面也要加上一个1,作为转义字符.如:1234就是1112341,12134就是111211341\n\n如果连续相同字符长度超过9个,则先对前9个字符编码,剩下的再进行以上规则的编码,如AAAAAAAAAA234就是9A1A2341\n\n#### Input\n第一行输入一个t,表示有多少组测试数据.\n接下来每行都有一串由字符组成的数据.字符由字母（包括大写和小写），数字，空格和标点符号。每一行以换行符终止，没有其他字符输入出现。字符串长度最长是500\n\n#### Output\n输入每组数据的编码\n\n#### Sample Input\n```\n3\nAAAAAABCCCC\n12344\naaaaaaaaaa234\n```\n\n#### Sample Output\n```\n6A1B14C\n11123124\n9a1a2341\n```',1000,32768,'0',8,87,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('888','Ali‘s balloon','#### Description\n很多很多的ACMer都喜欢气球，因为，在现场赛中，你做出一道题，那你就可以得到一个对应颜色的气球。而场面上最多的气球颜色，往往对应着最水的题目。\n\n在某次水题比赛中，阿狸告诉你每题对应的颜色，和现场中所以已经挂起的气球颜色。希望你能帮助他找已经出了最多的题目。如果有两个题目出现相同多的次数，阿狸更希望知道题目名字字典序排在前面的题目。\n\n#### Input\n多组测试\n第一行：两个整数 n 和 m.n为题目数,m为气球数。(1<=n<=10,1<=m<=1000)\n以下n行：每行包含两个字符串 pro_i,colour_i,代表第i题的题目和对应的颜色,每个字符串长度不会超过20\n一下m行：每行包含一个字符串 colour_j,代表着第j个出现的气球颜色。\n测试以 n==0,m==0结束\n每组测试间有一空行\n\n#### Output\n每组测试包含一行输出,包含一个字符串pro_ans和一个整数k,pro_ans为出了最多的题目，k为该题目出现的次数。\n\n#### Sample Input\n```\n3 6\napple red\nbanana yellow\ncat white\nyellow\nyellow\nred\nyellow\nwhite\nred\n\n2 4\nhello orange\nworld purple\norange\npurple\norange\npurple\n\n0 0\n```\n\n#### Sample Output\n```\nbanana 3\nhello 2\n```\n',1000,32768,'0',8,88,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('889','Ali’s card games','#### Description\n阿狸和snoopy都喜欢打牌。\n\n他们会约好，每周日打一种抢分的牌。打牌是好玩的事情，不过，记分却有点让人纠结。所以，他们希望能得到你的帮忙。他们告诉你游戏的规则和他们所出的牌，而你负责计分。\n\n大牌的规则如下。\n\n1.有13种牌，从小到大排为2.3.4.5.6.7.8.9.10.J.Q.K.A，不分花色，每钟牌不超过4张。\n\n2.5，10，K是分，依次代表5，10，10分。\n\n3.牌的格式为单张，对子，或者一手(五张).\n\n4.单张为单出一张牌，对子为出两张相同的牌。\n\n5.一手分为顺子和骷髅。顺子为连续的五张牌,如[3.4.5.6.7]，[7.8.9.10.J],而[J.Q.K.A.2]不为顺子,骷髅为三张相同的牌带一对。如[7.7.A.A.A],为了简化题目，顺子总是以升序排列，而骷髅对子在前，三张在后。\n\n6.顺子的比较看最大的牌，[5.6.7.8.9]会比[3.4.5.6.7]大。而骷髅的大小则看三张的大小，所以[2.2.5.5.5]会比[A.A.4.4.4]大。虽然，对子中[A.A]远大于[2.2]。我们会认为，最小的骷髅比最大的顺子大。\n\n7.每次出牌，都要出和对家格式相同，且比对方大的牌。或者选择pass。也就是说，当别人出对子时，我们不能出单张或者一手，当我们出J时，我们必须出比J大的牌，如K。\n\n8.若玩家选择pass，则说明一轮结束。该轮双方出的分数牌，归非pass玩家所有.\n\n9.对方pass后，玩家可以选择任意一种格式出牌。\n\n10.最后一次pass到出牌结束间的分数，为流分。不为双方所有。\n\n\n现在，他们告诉你各自的出牌，由你去计算结果。\n对于每局牌，可能会出现下面三种结果。\n\n1.平局。双方获得相同的分数。\n\n2.某方胜利。两人分数不同，分数多的为胜方。\n\n3.某方作弊。最先出牌不符规矩者，为作弊方。\n\n#### Input\n多组测试\n\n每组测试，第一行，一个整数n,代表这局牌的回合数。n<=20\n\n以下n行。为一个字符串.player:[/card].player为Li和snoopy其中一方。\"[]\"内为玩家出的牌或pass,牌间用\'.\'隔开。如snoopy:[A.A]为snoopy出了一对A。Li:[pass]为阿狸选择pass。\n\n数据保证双方交换出牌。\n\n没两组数据之间有一空行\n\n测试以n==0结束\n\n#### Output\n每组测试输出一行\n\n平局：输出字符串\"draw\"\n\n某方胜利:输出 \"/player win\"  player为snoopy或Li中一个。\n\n某方作弊:输出 \"/player cheat\" player为snoopy或Li中一个。\n\n出现下面任一情况，视为作弊。\n\n1.出牌不在上述三种格式。\n\n2.对家没有pass，而出牌格式与对家不同。\n\n3.和对家出牌格式相同，当牌没对方的大。\n#### Sample Input\n```\n5\nsnoopy:[3]\nLi:[5]\nsnoopy:[pass]\nLi:[10.10]\nsnoopy:[pass]\n\n3\nsnoopy:[2]\nLi:[3]\nsnoopy:[4]\n\n4\nLi:[3.3]\nsnoopy:[3.4.5.6.7]\nLi:[pass]\nsnoopy:[5]\n\n0\n```\n\n#### Sample Output\n```\nLi win\ndraw\nsnoopy cheat\n```\n',1000,32768,'0',8,89,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('89','Tornado!','#### Description\nIs this crazy weather the result of mankind’s continuous interference in the environment? Or is\nit simply the normal cycle of climate changes through the ages? No one seems to know for sure,\nbut the fact is that natural phenomena such as tornadoes and hurricanes have been hitting our\ncountry with more force and frequence than in past decades.\nOne tornado has just hit Silverado Farm, a cattle and milk producer, and made havoc.\nThe barn roof was torn, several trees were uprooted, the farm truck was overturned... But\nthe worst thing is that the tornado destroyed several sections of the fence that surrounded the\nproperty. The fence was very well built, with concrete posts every two meters, and barbed wire\nenclosing the whole farm perimeter (the perimeter, in meters, is an even number, making the\nfence perfectly regular).\nNow several posts are broken or missing, and there are gaps in the fence. To prevent the\ncattle from getting out of the property, the fence must be restored as quickly as possible.\nReconstructing the fence to its original form, with concrete posts, will take a long time. In\nthe meantime, the farm owners decided to close the gaps with a temporary fence, made with\nwooden posts. Wooden posts will be placed in exactly the same spots where missing/broken\nconcrete posts were/are. However, in order to make the temporary reconstruction faster and\nless expensive, the owners decided to use fewer posts: a wooden post will be used to replace a\nmissing/broken concrete post only if the length of the barbed wired needed to close the distance\nto the next post (wooden or concrete) exceeds four meters.\n[[Image:A88.jpg|center]]\nGiven the description of which posts are missing/broken, you must write a program to\ndetermine the smallest number of wooden posts needed to close all the gaps in the fence,\naccording to the owners’ decision.\n\n#### Input\nThe input contains several test cases. The first line of a test case contains one integer N\nindicating the number of original concrete posts in the fence $$$(5 \\leq N \\leq 5000)$$$. The second line\nof a test case contains N integers Xi indicating the state of each concrete post after the tornado\n$$$(0 \\leq Xi \\leq 1 for 1 \\leq i \\leq N)$$$. If Xi = 1 post i is in good condition, if Xi = 0 post i is broken or\nmissing. Note that post $$$N\\,$$$ is next to post $$$1\\,$$$. The end of input is indicated by N = 0.\n#### Output\nFor each test case in the input your program must produce one line of output, containing an\ninteger indicating the smallest number of wooden posts that are needed to restore the fence,\naccording to the owners’ decision.\n\n#### Sample Input\n```\n10\n1 0 0 1 0 0 1 0 1 1\n11\n1 0 0 1 0 0 0 1 1 0 1\n12\n0 0 0 0 0 1 1 0 0 0 1 1\n0\n```\n\n#### Sample Output\n```\n2\n2\n3\n```\n',10000,32768,'0',0,88,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('890','The story of \"laofan\"','#### Description\n今天，我来给大家讲一个关于捞饭的故事。\n\n我们都知道，回文是指一个从前往后读和从后往前读是一摸一样的单词，如abcba\n\n那么，对于一个不完全回文的字符串，我们用\"回文分数\"来表征他的回文程度。\n\n如果，一个字符串中的正数第i个字母，和倒数第i个字母是相同的。那么，我们认为，i是字符串的一个回文位置。一个字符串的回文分数，就是他所有回文位置的平方和了。如字符串abcqqdbb 我们可以发现，顺数第二个和第四个字母与倒数的第二和第四个字母是相同的。那么，二和四位这个字符串的回文位置。所以，这个字符串的回文分数为2*2+4*4=20。\n\n最后，这个故事和捞饭有什么关系呢。嘿嘿。其实，我也不知道。\n\n#### Input\n多组测试\n\n每组测试包含一行，为一个不长于1000的字符串\n\n两组测试间，有一个空行\n\n测试以\"#\"结束\n\n#### Output\n每组测试，输出一行:整数ans.为输入字符串的回文分数\n\n#### Sample Input\n```\nacmicpc\n\nhelloworld\n\nabaaba\n\nabcdba\n\n1. \n```\n\n#### Sample Output\n```\n16\n0\n14\n5\n```\n',1000,32768,'0',8,90,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('891','Ali‘s homework','#### Description\n相信大家都有过类似的经历，我们做的一些老师们认为不乖的事，于是，他们给我们布置了些类似把自己名字倒过来写一百遍的十分古怪的作业。\n今天，阿狸在班上公然调戏桃子，所以，老师要他在一个很长很长很长的字符串中找出出现次数最多的定长字串。我们认为字符串abcaca，长度为2的字串有ab bc ca ac 他们分别出现了1 1 2 1次。所以，ca是abcaca中出现最多的长度为2的字串。\n\n晚上，阿狸就抱着一张写满了字符串的纸，星星眼地看着你。\n\n#### Input\n多组测试\n对于每组测试\n\n第一行：两个整数 n m，n为字符串长度，m为老师要你找的字串长度。n<=1000 m<=5\n\n第二行：一个很长很长字符串str，为插找字串的模式串。 \n\n每两组测试数据间有一个空行\n\n测试以n==0 m==0结束\n\n#### Output\n每组测试输出一行： 一个字符串str_ans,和一个整数k，代表出现次数最多的字串，和他出现的次数，如果，多个字串出现相同次数，取字典序较小的。\n\n#### Sample Input\n```\n7 1\nacmicpc\n\n6 2\nbababa\n\n7 2\nbababab\n\n0 0\n```\n\n#### Sample Output\n```\nc 3\nba 3\nab 3\n```\n',1000,32768,'0',8,91,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('892','Segment tree','#### Description\n出题的人曾经散播谣言。 要出一题线段树的题目。而他，也的确出了。\n\n有n个容器，编号为[1,n],每个容器里面都存有一个正整数。\n\n对于这些容器。我们可以进行下面的操作。\n\n1.区间修改。给[a,b]区间内的每个容器都增加或者减少一个定值。\n\n2.位置设定。将第k个容器的值设为给定值。\n\n3.区间最值访问。输出[a,b]区间内的最大值。\n\n那些听过出题人的课，而又写不出算法的人，洗干净PP等着打好了。\n\n#### Input\n多组测试。\n\n每组测试第一行包含两个整数n,m 为容器个数好总操作数。(1<=n<=10000,1<=m<=10000)\n\n第二行包含n个正数 c0,c1..cn代表容器内的初始值。\n\n以下m行。每行包含一组指令。\n\n指令格式为。\n\n1.A a b c  区间修改指令。给[a,b]区间内的每个容器都增加c。\n\n2.B a c 位置设定。将第a个容器的值设为c。\n\n3.C a b 输出区间[a,b]内的最大值。\n\n两组测试间有一空行。\n\n测试以n=0,m=0结束。\n#### Output\n输出对应C指令。输出指定区间最大值。\n\n#### Sample Input\n```\n5 3\n1 2 3 4 5\nC 1 3\nC 2 4\nC 3 5\n\n4 5\n8 5 4 7\nC 1 4\nA 3 4 2\nC 1 4\nB 4 2\nC 1 4\n\n0 0\n```\n\n#### Sample Output\n```\n3\n4\n5\n8\n9\n8\n```\n',30000,65536,'0',8,92,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('893','A Reasonable Ranking','#### Description\n\n#### Input\n\n#### Output\n\n#### Sample Input\n```\n```\n\n#### Sample Output\n```\n```\n',3000,32768,'0',8,93,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('894','Burns\' Rods','#### Description\n\n#### Input\n\n#### Output\n\n#### Sample Input\n```\n```\n\n#### Sample Output\n```\n```\n',3000,32768,'0',8,94,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('895','Matryoshka Dolls, Again','#### Description\n\n#### Input\n\n#### Output\n\n#### Sample Input\n```\n```\n\n#### Sample Output\n```\n```\n',3000,32768,'0',8,95,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('896','Energy Collection','#### Description\n\n#### Input\n\n#### Output\n\n#### Sample Input\n```\n```\n\n#### Sample Output\n```\n```\n',3000,32768,'0',8,96,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('897','G-Avoiding Sequence','#### Description\n\n#### Input\n\n#### Output\n\n#### Sample Input\n```\n```\n\n#### Sample Output\n```\n```\n',3000,32768,'0',8,97,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('898','Let the Balloon Rise','#### Description\nContest time again! How excited it is to see balloons floating around. But to tell you a secret, the judges\' favorite time is guessing the most popular problem. When the contest is over, they will count the balloons of each color and find the result.\nThis year, they decide to leave this lovely job to you. To simplize the problem, we number the ballon of different color, such as \"res\" is No.1, \"green\" is No.2, and so on.\n\n#### Input\nInput contains multiple test cases. Each test case starts with a number N (0 < N <= 1000) -- the total number of balloons distributed. The next lines n integers that stand for the ballons\'color.\nA test case with N = 0 terminates the input and this test case is not to be processed.\n\n#### Output\nFor each case, print the number of color of balloon for the most popular problem on a single line. If there are more than one answer, output the smallest number.\n\n#### Sample Input\n```\n5\n3 1 2 1 4\n3\n2 1 2\n4\n2 2 1 1\n0\n```\n\n#### Sample Output\n```\n1\n2\n1\n\n```',1000,32768,'0',8,98,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('899','N!','#### Description\n输出n!的值的最后4位数，如果n!不足4位，补零。\n\n#### Input\n第一行为t(t<=20)，表示测试数据的组数。每组测试数据包含一个数n(0<=n<=1000)。\n\n#### Output\n对于每一组测试数据，输出一行，为n!的值的最后4位数（不要空格），如果n!不足4位，补零。\n\n#### Sample Input\n```\n3\n0\n3\n99\n```\n\n#### Sample Output\n```\n0001\n0006\n0000\n```',1000,32768,'0',8,99,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('9','Block hole','#### Description\nWe have some hole problems here. Let\'s have a look on one of it.\n\nThere are $$$N (1\\leq N \\leq 3,000)$$$ holes in a line, numbered from $$$0 \\rightsquigarrow  N-1$$$. Some of them are blocked, some of them are not. The charge for blocking the $$$i\\,$$$th to the $$$j\\,$$$th hold is $$$\\sqrt{j-i+1} (j>=i)$$$. We hope all of the holes can be blocked. Of course, we want to pay as less as we can.\n\nYour job is pretty clear, tell how much should we pay.\n\n#### Input\nThe first number $$$T(1\\leq T \\leq 100)$$$ will be how many test cases are there.\n\nFor each test case, there will be two lines.\n\nFirst line, how many holes are there, $$$N(1\\leq N \\leq 3,000)$$$.\n\nSecond line, a string with $$$N\\,$$$ character contain \'0\' or \'1\' only, \'0\' represented for hole waiting to block, \'1\' represented for hole blocked already.\n\n#### Output\nFor every test case, output one line contain the answer. \n\nAll the answer have an absolute error within 1e-9, will be consider as correct answer.\n\n#### Sample Input\n```\n2\n\n4\n0000\n\n9\n010111010\n```\n\n#### Sample Output\n```\n2.000000000\n3.000000000\n```\n',10000,32768,'0',0,8,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('90','Mission Impossible','#### Description\nYou have been hired to explore enemy territory. It is risky business, you know that. So, you’d\nbetter be prepared! The enemy has placed a number of security points all over his country,\nfrom which radars are detecting any moving vehicle within their range of cover. Any such\ndetected object will be immediately destroyed. Fortunately enough, you have been given by\nyour government a map of the enemy territory, consisting of coordinates and radius of coverage\nof each radar. You have also a list of local informers (together with their locations) that you\nshould contact in order to obtain valuable information. Your mission is to try to contact one\nof these informers, preferably the one with highest insider-coefficient. The insider-coefficient\nof each informer is simply the distance from the informer to the border of the country, where\nsuch a distance is defined as the minimum over all distances from the location of the informer\nto each point of the border. In intuitive sense, the informer with highest insider-coefficient is\nthat who is located as inside the country as possible, and will presumably have more valuable\ninformation about the country.\nYour first thought is then to design a computer program which will check if there is a path\nfrom your initial location, always the point (2000, 2000), to any of the informers’ location,\nwithout crossing any region which is covered by radar. Whenever possible, the program should\nindicate which reachable informer is the one to be contacted, according to the insider-coefficient\ncriteria described above.\n[[Image:A89.jpg|center]]\nThe enemy country has the shape of a simple polygon (not necessarily convex). Recall that\na polygon is called simple if it is described by a single, non-intersecting boundary. The borders\nof the country will be given as a sequence of $$$X\\,$$$,$$$Y\\,$$$-coordinates corresponding to the sequence\nof vertexes of the polygon. You may assume that all the radar’s centres and the informers’\ncoordinates are located within the country’s border. Notice, however, that the area covered by\nthe radars might include regions outside the border.\nIn the sample scenario of Figure 1, informer $$$I1\\,$$$ cannot be contacted since he is inside\nthe region covered by radars. The informer $$$I2\\,$$$, although outside the radar’s region, can’t\nbe contacted either since any trip to his location would go through the deadly radar-covered\nregions. Both informers $$$I3\\,$$$ and $$$I4\\,$$$ could be contacted, so that informer $$$I4\\,$$$ is chosen since his\ninsider-coefficient is greater than that of $$$I3\\,$$$.\n\n#### Input\nThe input consists of several test cases. The first line of each test case describes the border of\nthe enemy country, in the format\n\nB X1 Y1 X2 Y2 ... XB YB\n\nwhere $$$3 \\leq  B \\leq  1000$$$ is the number of border points, and each $$$Xi\\,$$$ $$$Yi\\,$$$ is the coordinate of the\n$$$i\\,$$$-th point in the border. The border of the country consists of line segments between points\n$$$i\\,$$$ and $$$i\\,$$$ + 1, and between points B and 1. The second line gives the number of informers and\ntheir respective positions, in the format\n\nN X1 Y1 X2 Y2 ... XN YN\n\nwhere $$$1 \\leq  N \\leq  1000$$$ is the number of informers, and $$$Xi\\,$$$  $$$Yi\\,$$$ is the coordinate of the $$$i\\,$$$-th\ninformer. The third line describes the position and radius of the radars, in the format\n\nM X1 Y1 R1 X2 Y2 R2 ... XM YM RM\n\nwhere $$$1\\leq M \\leq 30$$$ is the number of radars, $$$Xi\\,$$$  $$$Yi\\,$$$ is the coordinate of the $$$i\\,$$$-th radar, and\n$$$Ri\\,$$$ is the radius of the $$$i\\,$$$-th radar. All the coordinates are integers $$$0 \\leq X,Y \\leq 1000$$$. The radius\nof the radars are integers in the range $$$1 \\leq R \\leq  1000$$$  A test case where B = N = M = 0\nindicates the end of the input. This test case must not be processed.\n\n#### Output\nFor each test case in the input, your program must produce one line containing either “Mission\nimpossible” or “Contact informer K”, where “K” is the index of the informer (as given in the\ninput) with highest insider-coefficient which can be reached by the spy without going inside\nany radar coverage area. If there are more than one informer satisfying this condition, choose\nthe one among them with lowest index.\n\n#### Sample Input\n```\n4 0 0 0 200 200 200 200 0\n2 70 70 120 120\n1 100 100 100\n4 0 0 0 200 200 200 200 0\n3 100 102 70 80 20 10\n4 70 70 35 130 70 35 130 130 35 70 130 35\n0\n0\n0\n```\n\n#### Sample Output\n```\nMission impossible\nContact informer 3\n```',10000,32768,'0',0,89,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('900','permutation of 2','#### Description\n从1~n这n个数中选择2个数进行排列，输出所有排列方案。\n\n#### Input\n第一行为t(t<=20)，表示测试数据的组数。每组测试数据包含一个数n(2<=n<=13)。\n\n#### Output\n对于每一组测试数据，输出 n*(n-1) 对排列，每行输出10对（除非是最后一行，可以少于10个），注意不要输出多余的空行。将结果按升序输出（先比较第一个数，再比较第二个数）。\n\n#### Sample Input\n```\n4\n2\n3\n4\n8\n```\n\n#### Sample Output\n```\n1 2 2 1\n1 2 1 3 2 1 2 3 3 1 3 2\n1 2 1 3 1 4 2 1 2 3 2 4 3 1 3 2 3 4 4 1\n4 2 4 3\n1 2 1 3 1 4 1 5 1 6 1 7 1 8 2 1 2 3 2 4\n2 5 2 6 2 7 2 8 3 1 3 2 3 4 3 5 3 6 3 7\n3 8 4 1 4 2 4 3 4 5 4 6 4 7 4 8 5 1 5 2\n5 3 5 4 5 6 5 7 5 8 6 1 6 2 6 3 6 4 6 5\n6 7 6 8 7 1 7 2 7 3 7 4 7 5 7 6 7 8 8 1\n8 2 8 3 8 4 8 5 8 6 8 7\n```',1000,32768,'0',9,0,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('901','number_sequence','#### Description\nA number sequence is defined as follows:\nf(1) = 1, f(2) = 1, f(n) = (A * f(n - 1) + B * f(n - 2)) mod 7.\nGiven A, B, and n, you are to calculate the value of f(n).\n#### Input\nThe input consists of multiple test cases. Each test case contains 3 integers A, B and n on a single line (1 <= A, B, n <= 1000). Three zeros signal the end of input and this test case is not to be processed.\n#### Output\nFor each test case, print the value of f(n) on a single line.\n\n#### Sample Input\n```\n1 1 3\n1 2 10\n0 0 0\n```\n\n#### Sample Output\n```\n2\n5\n```',3000,32768,'0',9,1,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('902','divisibility','#### Description\n判断n是不是m的整数倍。\n\n#### Input\n第一行为t(t<=20)，表示测试数据的组数。每组测试数据包含两个数n，m(-1000<=n，m<=1000)。\n\n#### Output\n对于每一组测试数据输出一行，如果n是m的整数倍，输出Yes，否则输出No。\n\n#### Sample Input\n```\n3\n2 1\n3 2\n-9 3\n```\n\n#### Sample Output\n```\nYes\nNo\nYes\n```',1000,32768,'0',9,2,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('903','the farthest pair','#### Description\n直角坐标系中有n个点，我们可以定义每一对点A(x1,y1),B(x2,y2)之间的距离：\n\n$$$\\sqrt{(x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)}$$$\n\n请找出距离最远的两个点，输出它们的距离。\n\n#### Input\n输入的第一行是一个整数t，表示测试数据组数。接下来t组数据，对于每一组数据，第一行为一个整数n，表示有n个点，第二行有2*n个整数，(x1,y1),(x2,y2)…(xn,yn)，表示n个点的坐标。\n其中t=20, 2<=n<=1000，-10000<x,y<10000\n\n#### Output\n对于每组测试数据，输出一行：最远的两个点之间的距离，保留4位小数。\n#### Sample Input\n```\n2\n3\n0 0 3 4 1 2\n3\n0 0 3 4 9 12\n\n```\n\n#### Sample Output\n```\n5.0000\n15.0000\n```',2000,32768,'0',9,3,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('904','Regular Brackets','#### Description\n\n对于“合法的括号序列”我们有如下的定义：\n\n1、一个空的序列是一个合法的括号序列\n\n2、如果S是一个合法的括号序列，那么(S)、[S]和{S}也是合法的括号序列\n\n3、如果A和B是合法的括号序列，那么AB也是合法的括号序列\n\n4、除了上面三种外，其他都是非法的括号序列\n\n例如:\n\n(), [], ({}), {()[]}, ()[()]\n这些是合法的括号序列\n\n(, ], )(, ([)], ([(] \n这些是非法的括号序列\n\n\n现在给你一个序列，问你这个序列是不是合法的括号序列。\n\n#### Input\n输入的第一个行是一个数N，表示输入数据的个数。\n\n接下来每行是一个测试数据。每个数据只由{}[]()这六个符号组成。数据长度不会超过100个字符。\n#### Output\n\n对于每组数据输出一行，如果这个序列是合法的括号序列，那么输出Yes，否则输出No\n\n#### Sample Input\n```\n3\n()[]{}\n([{]})\n((())\n```\n\n#### Sample Output\n```\nYes\nNo\nNo\n```',1000,32768,'0',9,4,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('905','Preorder Traversal','#### Description\n给定一颗二叉树，要求输出先序遍历二叉树得到的序列。本题假设二叉树的结点数不超过1000。\n \n先序遍历的算法定义如下： 　　\n\n若二叉树非空，则依次执行如下操作： 　　\n\n(1) 访问根结点； 　　\n\n(2) 遍历左子树； 　　\n\n(3) 遍历右子树。\n\n\n#### Input\n输入数据分为多组，第一行是测试数据的组数n，下面的n行分别代表一棵二叉树。每棵二叉树的结点均为正整数，数据为0代表当前结点为空，数据为-1代表二叉树数据输入结束，-1不作处理。二叉树的构造按照层次顺序（即第1层1个整数，第2层2个，第3层4个，第4层有8个......，如果某个结点不存在以0代替），\n比如输入：1 2 0 3 4 -1得到的二叉树如下：\n\n[[File:J05.jpg|200px|center]]\n\n#### Output\n输出先序遍历二叉树得到的序列，以一个空格隔开两个结点，最后一个结点末尾没有空格。\n\n#### Sample Input\n```\n2\n1 -1\n1 2 0 3 4 -1\n```\n\n#### Sample Output\n```\n1\n1 2 3 4\n```',1000,32768,'0',9,5,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('906','Tree depth','#### Description\n给定一棵有根二叉树，规定连接两个节点的每条边长度是1，定义树的深度为根到叶子节点距离的最大值。\n\n#### Input\n第一行是整数n(0 < =n <= 100)节点用1...n表示，接下来有n行，分别表示节点1...n的孩子的情况\n\n每一行有个整数lc, rc，分别表示结点i的左，右子树节点的编号， 0表示该结点为空。 \n\nn=0的时候结束输入。\n\n#### Output\n输出一行，一个整数，为树的深度. \n\n#### Sample Input\n```\n7\n2 0\n3 4\n0 0\n5 6\n0 0\n0 7\n0 0 \n4\n2 3\n0 0\n4 0\n0 0\n0\n```\n\n#### Sample Output\n```\n5\n3\n```',1000,32768,'0',9,6,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('907','Binary Sort Tree','#### Description\n二叉排序树（Binary Sort Tree）又称二叉查找树。 它或者是一棵空树；或者是具有下列性质的二叉树： \n\n（1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值； \n\n（2）若右子树不空，则右子树上所有结点的值均大于它的根结点的值； \n\n（3）左、右子树也分别为二叉排序树；\n\n这次你的任务是创建一棵二叉排序树，并输出先序遍历二叉树得到的序列。结点数不超过1000.深度不超过10.\n\n\n#### Input\n第一行输入测试数据的组数t。\n\n下面t行分别有一串正整数数据（数据互不相等），每行的第一个数据n代表这个二叉树的结点个数，接着有n个数据。\n\n#### Output\n以第一个数据为根结点，构建一颗二叉排序树，将后面的数据依次插入到这个二叉排序树中，并输出先序遍历二叉树得到的序列。\n\n比如：4  3  2  4  1这组数据，创建成的二叉排序树如下图所示：\n\n[[File:J07.jpg|200px|center]]\n\n它的先序遍历后是：3  2  1  4\n\n#### Sample Input\n```\n2\n4 3 2 1 4\n5 9 4 7 2 1\n```\n\n#### Sample Output\n```\n3 2 1 4\n9 4 2 1 7\n```',1000,32768,'0',9,7,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('908','Balls falling','#### Description\n有一棵满二叉树，最大深度为D，且所有叶子的深度都相同。所有的结点从上到下从左到右编号为1，2，3…，2^D-1，如下图所示。在结点1处放一个小球，它会往下落。每个内结点上都有一个开关，初始全部打开。当每次有小球落到一个开关上时，开关的状态都会改变（如果开关是打开，则关闭，反之变为打开）。当小球到达一个内结点时，如果该结点上的开关关闭，则往右走，否则往左走，直到走到叶子结点。小球下落过程中，先改变开关状态，再住下掉落。\n\n[[File:J08.jpg|500px|center]]\n\n一些小球从结点1处依次开始下落，最后一个小球将会落到哪里呢？输入叶子深度D和小球个数I，输出第I个小球最后所在的叶子编号。假设I不超过整棵树的叶子个数，D<=10。\n\n#### Input\n第一行输入一个t，表示下面将有t组测试数据。\n\n接下来的行每行有两个参数，分别是叶子深度D和小球个数I。\n\n#### Output\n输出最后一个小球最后所在的叶子编号。\n\n#### Sample Input\n```\n3\n4 2\n3 4\n8 128\n```\n\n#### Sample Output\n```\n11\n4\n128\n```\n#### Hint\n例如\n\n第一个样例：4 2，\n\n第一个小球掉落路线为：1 3 7 15第二个小球掉落路线为：1 2 5 11，最后答案为11。',1000,32768,'0',9,8,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('909','Max Area','#### Description\n某天，你在森林里，有无限多条绳子，闲着无聊决定把森林里面的树都围起来。\n\n当然绳子应该绑在树上的，而且绳子应该是直的，不能弯曲。\n\n但是呢，你很贪心，你希望围出的封闭面积是最大的，但是呢，在面积最大的时候，所用的绳子长度也是最短的。^_^\n\n告诉你森林里有n个树（当作点），以及它们对应的整数点对的坐标，输出题目要求的最大面积。\n\n哦，忘记跟你说了，这个森林里有些小树会长在大树上，也就是说会有重点的呀。~_~\n\n#### Input\n第一行T（T<=120）.代表测试数据的个数。\n\n接下来每组测试数据第一行有一个整数n(3<=n<=50000)，接下来n行各有一个整数点对（x,y）,（|x|<=10000,|y|<=10000） \n\n#### Output\n输出题目要求的最大面积，精确到小数点后4位。\n\n#### Sample Input\n```\n2\n3\n0 0\n1 1\n2 2\n3\n0 0\n1 0\n1 1\n```\n\n#### Sample Output\n```\n0.0000\n0.5000\n```\n',5000,32768,'0',9,9,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('91','Pascal Library','#### Description\nPascal University, one of the oldest in the country, needs to renovate its Library Building,\nbecause after all these centuries the building started to show the effects of supporting the\nweight of the enormous amount of books it houses.\nTo help in the renovation, the Alumni Association of the University decided to organize a\nseries of fund-raising dinners, for which all alumni were invited. These events proved to be\na huge success and several were organized during the past year. (One of the reasons for the\nsuccess of this initiative seems to be the fact that students that went through the Pascal system\nof education have fond memories of that time and would love to see a renovated Pascal Library.)\nThe organizers maintained a spreadsheet indicating which alumni participated in each dinner.\nNow they want your help to determine whether any alumnus or alumna took part in all\nof the dinners.\n\n#### Input\nThe input contains several test cases. The first line of a test case contains two integers $$$N\\,$$$\nand D indicating respectively the number of alumni and the number of dinners organized\n($$$1 \\leq N \\leq 100$$$ and $$$1 \\leq D \\leq 500$$$). Alumni are identified by integers from $$$1\\,$$$ to $$$N\\,$$$. Each of\nthe next $$$D\\,$$$ lines describes the attendees of a dinner, and contains $$$N\\,$$$ integers $$$Xi\\,$$$ indicating if\nthe alumnus/alumna $$$i\\,$$$ attended that dinner ($$$Xi\\,$$$ = 1) or not ($$$Xi\\,$$$ = 0). The end of input is\nindicated by $$$N\\,$$$ = $$$D\\,$$$ = $$$0\\,$$$.\n\n#### Output\nFor each test case in the input your program must produce one line of output, containing either\nthe word ‘yes’, in case there exists at least one alumnus/alumna that attended all dinners, or\nthe word ‘no’ otherwise.\nThe output must be written to standard output.\nAlumna: a former female student of a particular school, college or university.\nAlumnus: a former male student of a particular school, college or university.\nAlumni: former students of either sex of a particular school, college or university.\n\n#### Sample Input\n```\n3 3\n1 1 1\n0 1 1\n1 1 1\n7 2\n1 0 1 0 1 0 1\n0 1 0 1 0 1 0\n0 0\n```\n\n#### Sample Output\n```\nyes\nno\n```\n',10000,32768,'0',0,90,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('910','Fill number','#### Description\n给出一个N*N（0<N<=1000000）的地图，在地图中填1，2，3，4，其中任意位置可以填写1，某位置上下左右存在1的话才能在该位置填写2，某位置上下左右同时存在1和2的话才能在该位置填写3，某位置上下左右同时存在1、2和3的话才能在该位置填写4，每个写过数字的地方可以按规则多次覆盖，好了，你的问题来了，如何使该地图内的数字和最大呢？\n\n#### Input\n题目包含多组测试数据，每行输入非零自然数N\n#### Output\n每行内按顺序输出该地图中存在的1、2、3、4的个数。用空格分隔。\n#### Sample Input\n```\n2\n3\n4\n```\n\n#### Sample Output\n```\n1 1 2 0\n1 2 2 4\n1 3 6 6\n```\n',1000,32768,'0',9,10,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('911','Eat In Balance','#### Description\nAfter finishing a lot of problem at the laboratory, King feels happy and hungry, then he go to the canteen now. \n\nThere are n(1<=n<=100) food in the canteen, each of them has a energy value v(1<=v<=100) ,because King like different taste, he  will choose one food only once. King needs B(1<=B<=10000) energy now.\n\nWe all like balance, so King doesn’t want to be too hungry or too satiate. \n\nSo your task is quite simple, just choose the sum X of m (m>=1) food’s energy value in the n food to get the close to the B. If there are exist 2 different value the same close to B, print out the max one.\n\n#### Input\nThe first line of input contains T(T<=120), the number of test cases. \n\nThere is two line for each test case. The first line contains two integers n,B. The second line contains n intergers represent the energy value. \n\n#### Output\nFor each test case, output X.\n\n#### Sample Input\n```\n2\n1 2\n1\n2 5\n3 7\n```\n\n#### Sample Output\n```\n1\n7\n```\n',1000,32768,'0',9,11,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('912','Base64 Encoding','#### Description\n\n将数据编码成BASE64编码时，以3字节为一组，转换为24bit的二进制数，再将24bit的二进制数分成四组，每组6bit。对于每一组，我们将得到一个数字：0-63.\n\n然后根据这个数字查表即得到结果。\n\n0-63 分别对应如下字母：\n\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/	\n\n\nBASE64填充（当输入数据字节数%3 != 0）：\n\n有两种情况： 　　 　　\n\n1) 输入数据最后编码是1个字节（输入数据字节数除3余1），即8比特，则需要填充2个\"=\"，因为要补齐6比特，需要加2个00； 　　\n\n2) 输入数据最后编码是2个字节（输入数据字节数除3余2），则需要填充1个\"=\"，因为补齐6比特，需要加1个00。\n\n\n[http://baike.baidu.com/view/1485202.htm 百度百科解释]\n\n#### Input\n这里有多组测试数据，每一行为一组数据，每组数据的字符串长度最大长度不超过100.\n\n#### Output\n每组输出数据单独占一行\n\n#### Sample Input\n```\na\nab\nabc\n123 456\n```\n\n#### Sample Output\n```\nYQ==\nYWI=\nYWJj\nMTIzIDQ1Ng==\n```\n',1000,32768,'0',9,12,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('913','Japanese','#### Description\n日语中有50音图，就像英语中的26个英文字母。\n\n```\n平假名：                     片假名：\nあいうえお                  アイウエオ\nかきくけこ                  カキクケコ\nさしすせそ                  サシスセソ\nたちつてと                  タチツテト\nなにぬねの                  ナニヌネノ\nはひふへほ                  ハヒフヘホ\nまみむめも                  マミムメモ\nやいゆえよ                  ヤイユエヨ\nらりるれろ                  ラリルレロ\nわいうえお                  ワイウエオ\nん                         ン\n```\n\n平假名和片假名之间的关系是一一对应的，就像英文中的大小写字母。\n\n你的任务很简单，就是把输入的平假名转换成片假名，片假名转换成平假名。\n\n\n<font color = red size=\"+2\"> 请不要在程序中使用日文,否则都会是Wrong Answer </font>\n\n\n<font color = blue size=\"+2\"> 那怎么存储日文呢？ 其实每个字符是以编码形式存在 比如‘A’的ASCII码是：65 等等</font>\n\n#### Input\n第一行T（T<=100）.代表测试数据的个数。\n接下来每行有一个字符串，仅仅包括片假名和平假名(每行的假名个数不多于100)。 \n\n#### Output\n输出转换后的字符串。\n\n#### Sample Input\n```\n2\nあいうえお\nアイウエオ\n```\n\n#### Sample Output\n```\nアイウエオ\nあいうえお\n```\n',1000,32768,'0',9,13,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('914','Black And White Picture','#### Description\n输入一个n*n的黑白图像(1表示黑色,0表示白色),任务是统计其中八连块的个数.\n\n如果两个黑格子有公共边或者公共顶点,就说它们属于同一个八连块,如下图所示有三个3个八连块.\n\n(可以参考教材109页)\n\n[[File:J14.jpg]]\n#### Input\n\n第一行输入一个t,表示下面有t组测试数据.\n\n每组测试数据的第一行是n(0<n<100),表示n*n的黑白图像(1表示黑色,0表示白色)\n\n接下来的n行每行有n个0或1,代表这个黑白图像.\n\n#### Output\n统计其中八连块的个数\n\n#### Sample Input\n```\n1\n6\n1 0 0 1 0 0\n0 0 1 0 1 0\n0 0 0 0 0 0\n1 1 0 0 0 0\n1 1 1 0 0 0\n0 1 0 1 0 0\n```\n\n#### Sample Output\n```\n3\n```\n',1000,32768,'0',9,14,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('915','A small maze','#### Description\n给定一个n× n的迷宫，迷宫中有两个位置，CY想从迷宫的一个位置S走到另外一个位置E，当然迷宫中有些地方是空地，CY可以穿越。而有些地方是墙壁’#’，CY可不想撞上去。令咱们头疼的是，CY是个没什么方向感的人，因此，他在行走过程中，不能转太多弯了，否则他会晕倒的。我们假定给定的两个位置都是空地，初始时，CY所面向的方向未定，他可以选择4个方向的任何一个出发，而不算成一次转弯。(迷宫中S和E分别仅有一个)(一次转了180度也只算作一次转弯)。\n\n令人高兴的是，迷宫中有一些Oil(可能是汽油。。或者是柴油。。这得问CY了),而CY非常喜欢喝这些饮料(为什么CY喜欢喝这些？！！可能他是一部机器人吧。- -！ ).当他喝下这饮料时,他体内会充满能量,在这些能量的支配下,他不再担心转弯的问题,因此他能在迷宫中使劲转弯.\n\n现在问题是，CY能否能给定的转弯次数下,顺利跑出这迷宫,如果能跑出迷宫，那最少的步数是多少呢?\n\n#### Input\n第一行只有一个 T(T≤200), 表示数据的数量. \n\n在每个数据中, 有三个正整数， N (1≤N≤100) 和  K(0≤K≤100), 表示迷宫大小是N*N,还有CY能在迷宫中转多少次弯（再多转一次CY可得要晕的。。。）. \n\n下面N行描述的是一个迷宫的形态，只包含（’.’ 和’#’和’O’和’S’和’E’）\n\n#### Output\n对每个数据, 输出像Sample一样的格式，CY能在多少步内走出迷宫.如果他不能走出迷宫，输出 “poor CY...” (不含双引号)\n\n#### Sample Input\n```\n2\n\n4 3\nE..#\n.#..\n1. 1. 1. .\n.O#S\n\n4 2\nE..#\n.#..\n1. 1. 1. .\n.O#S\n```\n\n#### Sample Output\n```\nCase 1:\n6\nCase 2:\npoor CY...\n```\n',5000,65536,'0',9,15,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('916','Bright stars','#### Description\n```\n坐在稔熟的星空下\n一处最最随意的地方\n我又一次举头\n品尝无边的璀璨\n\n这时我很想随意吟唱\n一支祥和的歌子\n可是夜色如水\n封锢了众多安眠的耳朵\n我诗歌的翅膀便在此时扬起\n笼罩夜空\n\n心事一缕缕细下来\n使我无暇顾及\n此重亦或彼轻\n想起此时离我最近的星子\n也迢遥若干光年\n沮丧的心又一次领略\n巨大的辽阔     和星斗们\n遥遥相映的温柔\n\n坐在星空下\n小我渐渐远去\n清凉的夜风\n使我双唇紧闭\n说不出多余的话\n\n一种真正的祥和汹涌潮来\n溶我于无极\n而我却要归去\n```\n归去何方?或许只有忧伤的作者清楚.\n\n是几万光年远处的彼岸?\n\n是曾经走过的漫漫长路？\n\n还是企盼着的神秘的未来?\n\n过去与未来或许只是我们遥不可及的梦想之一\n\n但我们从未放弃追求梦想。\n\n所以，我们一直期盼到达过去与未来。\n\n过去与未来不可能到达吗？\n\n或许不是，现实理论中有这么一个东西,可以连接两个时空,它就是虫洞(后面有关于它的解释)。\n\n\n在梦想之中，我们利用一个虫洞，连接任两个恒星（包括同一时间维度），通过这个虫洞，我们可以瞬间从1个星球到达另外一个星球，而虫洞的距离，就是这两个恒星的时空距离。\n\n通过虫洞，我们可以构造一整个星际旅行的网络，例如在银河系中，我们可以\n\n\n在空间上探索海王星的秘密。\n\n在空间上探索河外星系的飘渺虚无。\n\n在空间上探索宇宙深处的未知秘密。\n\n\n在时间上，与曾经一统整个亚欧大陆的一代天骄成吉思汗一起弯弓射大雕。\n\n在时间上，阻止乾隆实行闭关锁国的政策，从而使如今我们有一个繁华昌盛的国度。\n\n在时间上，挽回我们犯下的种种过错，重拾我们在堕落中度过的大学时光。\n\n\n问题来了：怎样才能在以最少虫洞的情况下，并且虫洞的长度总和最小，使一个时空星系中所有星球连接在一起？\n\n\n关于虫洞：\n\n由阿尔伯特•爱因斯坦提出该理论。简单地说，“虫洞”就是连接宇宙遥远区域间的时空细管。暗物质维持着虫洞出口的敞开。虫洞可以把平行宇宙和婴儿宇宙连接起来，并提供时间旅行的可能性。虫洞也可能是连接黑洞和白洞的时空隧道，所以也叫\"灰道\"。\n\n\n是不是很深奥？没关系，这里再说明一下，虫洞，我们可以再将其抽象成一条路，这条路的两端，正是连接着两个不同时空的两个星球.\n\n\n[[file:J16.jpg|400px|center]]\n\n#### Input\n有许多组测试数据,每组测试数据中,第一行一个n(2<=n<=2000),表示某星系恒星的数量.\n\n接下来n行,每行4个整型数据x,y,z,t(0<=x,y,z,t<=1000).表示恒星在宇宙中的空间坐标点以及时间的维度t(忽略计算恒星的体积大小)。\n\n#### Output\n输出1行,包含三个数字(用一个空格区分,注意最后一个数字后面没空格).\n\n第一个是需要虫洞的数量,第二个是所有虫洞总长度之和(输出后4位小数).第三个是最长的虫洞的长度(输出后4位小数).\n\n#### Sample Input\n```\n4\n0 0 0 0\n0 1 1 0\n1 1 1 0\n0 0 0 1\n```\n\n#### Sample Output\n```\n3 3.4142 1.4142\n```\n\n#### Hint\n我们知道,1维 空间 上的距离d=x\n\n我们知道,2维 空间 上的距离$$$ d = \\sqrt{x^2+y^2} $$$\n\n我们知道,3维 空间 上的距离$$$ d = \\sqrt{x^2+y^2+z^2} $$$\n\n类似地, 4维 时空 上的距离$$$ d = \\sqrt{x^2+y^2+z^2+t^2} $$$\n\nSample中 0 0 0 0,我们可以想象为是地球，而0 1 1 0是木星，1 1 1 0是金星，0 0 0 1是未来1个世纪后的地球。\n\n还有的是，注意星球的数量有点多，大家注意处理。\n\n',10000,65536,'0',9,16,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('917','Count it','#### Description\n由正三角形各边的n等分点分别作平行与边的线，得到一个三角形网格，问此网格的正三角形、菱形、平行四边形个数？\n\n[[file:J17.jpg]]\n\n#### Input\n包含多组测试数据，每组数据包含一行，只有一个数n(1<=n<=50000),表示将正三角行的边n等份\n\n输入数据以0结束\n\n#### Output\n对于每组数据输出一行，每行3个整数，分别是此网格的正三角形、菱形、平行四边形个数。\n#### Sample Input\n```\n3\n0\n```\n\n#### Sample Output\n```\n13 9 15\n```\n',2000,32768,'0',9,17,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('918','Another number sequence','#### Description\nAnother number sequence is defined as follows:\n\n<b>f(1) = 1, f(2) = 1, f(n) = (A * f(n - 1) + B * f(n - 2)) mod m. </b>\n\nGiven A, B, m and n, you are to calculate the value of f(n).\n\n#### Input\nThe input consists of multiple test cases. At most 1000 test cases.\n\nEach test case contains 4 integers A, B , m and n on a single line (1 <= A, B <= 1000,1<=m<= 1000, 1 <= n <= 2,000,000,000). \n\nFour zeros signal the end of input and this test case is not to be processed.\n\n#### Output\nFor each test case, print the value of f(n) on a single line.\n#### Sample Input\n```\n1 1 7 3\n1 2 7 10\n0 0 0 0\n```\n\n#### Sample Output\n```\n2\n5\n```\n',10000,65536,'0',9,18,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('919','Elements','#### Description\nGiven a partial order (P, <=). Every element <font size=\"+1\">$$$p_i$$$</font> of set P is a vector of three integer:<font size=\"+1\">$$$(x_i, y_i, z_i)$$$</font>.\nSay <font size=\"+1\">$$$p_i$$$</font> less or equal than <font size=\"+1\">($$$p_j$$$</font>), <font size=\"+1\">$$$p_i<=p_j$$$</font> if <font size=\"+1\">$$$x_i<=x_j$$$</font> and <font size=\"+1\">$$$y_i<=y_j$$$</font> and <font size=\"+1\">$$$z_i<=z_j$$$</font>.\nGive you a set P, for each element <font size=\"+1\">$$$p_i$$$</font> of set you should find out how many elements <font size=\"+1\">$$$p_j$$$</font> (included <font size=\"+1\">$$$p_i$$$</font> itself)  of set P is less or equal than <font size=\"+1\">$$$p_i$$$</font>.\n\n#### Input\nthere are multiple test cases.\nthe first line of each case is an integer n(0<n<=100000),indicating the size of set P.\n\nThen n lines follow. The $$$i^{th}$$$ line is three integers <font size=\"+1\">$$$x_i,y_i,z_i$$$</font>.<font size=\"+1\">$$$(1<=x_i,y_i,z_i<=1000)$$$</font>,indicating <font size=\"+1\">$$$p_i$$$</font> of P.\n\nAll vector are distinct.\n\ninput is terminated by EOF.\n\n#### Output\nfor each test case,print n line follow, each line contains the number of elements that in set P is less or equal than <font size=\"+1\">$$$p_i$$$</font>.\n#### Sample Input\n```\n4\n1 2 3\n1 1 1\n5 8 6\n1 9 5\n2\n1 5 9\n2 5 8\n```\n\n#### Sample Output\n```\n2\n1\n3\n3\n1\n1\n```\n',3000,65536,'0',9,19,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('92','ICPC Strikes Again','#### Description\nInternational Concrete Projects Company (ICPC) is a construction company which specializes\nin building houses for the high-end market. The company is the most profitable company\nin the world due to a very efficient land division method which has been used in its housing\ndevelopment projects since last year. Recently there was a chaos at ICPC, because employees\nrefused to work arguing that they did not earn enough. Worried about the loss in profit due\nto the strike, the company board proposed a new method to calculate the salaries which was\nluckily accepted by everyone.\nThe salary of a worker reflects the significance of the tasks that he/she has to perform and\nis influenced by the way tasks depend on each other.\nA task $$$X\\,$$$ depends on a task $$$Y\\,$$$ if either ($$$i\\,$$$) $$$X\\,$$$ depends directly on $$$Y\\,$$$ , or ($$$ii\\,$$$) there exists\na task $$$T\\,$$$ such that $$$X\\,$$$ depends directly on $$$T\\,$$$ and $$$T\\,$$$ depends on $$$Y\\,$$$ . Since in ICPC all tasks\nmust be performed, there is no circularity in the task dependence relation. Also, a task may\nbe performed by more than one worker.\n$$$A basic significance\\,$$$ is associated with each task reflecting its importance (for example,\ndeveloping the efficient land division method is more important than building the houses themselves).\nThe significance of a task $$$T\\,$$$ is then defined as the basic significance of $$$T\\,$$$ plus the\nsignificance of every task which depends directly on $$$T\\,$$$. Note that if no other tasks depend\ndirectly on task $$$T\\,$$$, the basic significance and the significance of $$$T\\,$$$ are the same.\nThe salary of a worker is the sum of the significances of all the tasks he/she performs which\ndo not depend on any other task performed by him/her. In other words, a value equal to the\nsignificance of task $$$X\\,$$$ will be added to the salary of a worker $$$W\\,$$$ that works in task $$$X\\,$$$ if there\nis no other task $$$Y\\,$$$ on which $$$X\\,$$$ depends, and $$$W\\,$$$ works also in $$$Y\\,$$$ .\nICPC wants you to help them to determine the salary of each of its employees.\n\n#### Input\nThe input contains several test cases.\nThe first line of a test case contains two integers $$$T\\,$$$ and $$$E\\,$$$ indicating respectively the number\nof tasks and the number of employees ($$$1 \\leq T \\leq 1000$$$ and $$$1 \\leq E \\leq 1000$$$). Tasks are numbered\nfrom $$$1\\,$$$ to $$$T\\,$$$ and employees from $$$1\\,$$$ to $$$E\\,$$$.\nThen it will come a sequence of lines describing the tasks $$$1\\,$$$ to $$$T\\,$$$ in ascending order. Each\ntask is described by two lines. The first of these lines contains three integers BS, ND and NE,\nrepresenting respectively the basic significance of the task, the number of tasks that depend\ndirectly on it, and the number of employees who perform it ($$$1 \\leq BS \\leq 1000$$$, $$$0 \\leq ND < T$$$\nand$$$ 1 \\leq NE \\leq E).$$$ The second line contains $$$ND+NE\\,$$$ integers corresponding first to the $$$ND\\,$$$\ndirectly dependent tasks and then the NE employees who perform the task.\nThe end of input is indicated by $$$T\\,$$$ = $$$E\\,$$$ = 0.\n\n#### Output\nTest cases must be answered in the order that they were presented. For each test case you must\nprint:\n• a single line containing five stars ***** indicating the beginning of the case\n• for each employee $$$i\\,$$$, one line with two integers $$$i\\,$$$ and $$$s\\,$$$, separated by a blank, meaning\nthat $$$i\\,$$$ has a salary of $$$s\\,$$$.\n\n#### Sample Input\n```\n3 2\n100 2 2\n2 3 1 2\n40 0 1\n1\n60 0 1\n2\n7 2\n10 2 1\n2 3 1\n10 2 1\n4 5 2\n10 2 1\n6 7 2\n10 0 1\n1\n10 0 1\n1\n10 0 1\n1\n10 0 1\n1\n0 0\n```\n\n#### Sample Output\n```\n  -   - *\n1 200\n2 200\n  -   - *\n1 70\n2 60\n```\n',10000,32768,'0',0,91,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('920','Mirror on the ground','#### Description\nFor most fonts, the lowercase letters \'\'\'w\'\'\' and \'\'\'m\'\'\' are inverted image of each other, as are the lowercase letters \'\'\'b\'\'\' and \'\'\'p\'\'\', \'\'\'d\'\'\' and \'\'\'q\'\'\', \'\'\'n\'\'\' and \'\'\'u\'\'\'.  Furthermore, letters \'\'\'c\'\'\',\'\'\'k\'\'\',\'\'\'l\'\'\',\'\'\'o\'\'\', and \'\'\'x\'\'\' are naturally inverted image of themselves. Although other symmetries exists for certain fonts, we consider only those specifically mentioned thus far for the remainder of this problem.\n\nBecause of these symmetries, it is possible to encode certain words based upon how those words would appear in the mirror which on the ground. For example the word \"boxwood\" would appear as \"poxmooq\", and the word \"lbld\" as \"lplq\". Given a particular sequence of letters, you are to determine its inverted image or to note that it is invalid.\n\n#### Input\nThe input contains a series of letter sequences, one per line, followed by a single line with the \'#\' character. Each letter sequence consists entirely of lowercase letters.\nAt most 100 character each test case.\n\n#### Output\nFor each letter sequence in the input, if its inverted image is a legitimate letter sequence based upon the given symmetries, then output that inverted image. If the inverted image does not form a legitimate sequence of characters, then output the word \"INVALID\".\n\n#### Sample Input\n```\nboxwood\nlbld\nbed\nbbb\n1. \n```\n\n#### Sample Output\n```\npoxmooq \nlplq\nINVALID\nppp\n```\n',1000,32768,'0',9,20,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('921','Are they the same?','#### Description\nYou are given N relations about two words. Here relation means the two words can change from each other. Then I have m times queries about whether given two strings are the same. Every string has no more than 100 words. Every word has no more than 10 letters.  To make two strings same, you can exchange the position of any two words in the string.\n#### Input\nThe number of the relations N (1<=N<=10000), and what they are. \n\nThe number of the test case M (1<=M<=10000) , and what they are. Please read sample for more.\n#### Output\nFor each case out put “yes” if the two string may be same, otherwise, output “no”. You should also output “Case + one space + No. + : + one space” before the answer. \n\nFor more details, please read the sample.\n\n#### Sample Input\n```\n3\ni wo\nlove ai\nyou ni\n5\nni\nwo\ni love you\nwo ai ni\ni love you\nni ai wo ma\ni love you\nni ai wo\ni love you\nni wo\n```\n\n#### Sample Output\n```\nCase 1: no\nCase 2: yes\nCase 3: no\nCase 4: yes\nCase 5: no\n```\n',10000,65536,'0',9,21,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('922','Url Coding','#### Description\n当你在百度搜索一些词语时，常常会看到地址栏上会出现很多个%，其实这是对字符和中文的编码方式，其中，URL编码是最常见的一种。\n\nURL编码:把字符和中文的ASCII编码的每个字节转换为两位的16进制数,然后在每两位十六进制数的前面加上一个%\n\n现在我们来玩个关于URL编码的游戏：给你一个字符串，按要求输出对应的结果。\n\n如果字符串以 <span>http</span>://开头，那么输出URL解码的结果，否则，把字符串进行URL编码。\n\n\nWhen you search some words on www.baidu.com, you can always find that some ‘%’s are lying on the address bar. In fact, this is encoding of words (especially for symbols and Chinese words).URL coding is a common way of this coding.\n\nURL coding: set one ‘%’ before every two HEX numbers of ASCII numbers from the string.\n\n\n+ Now, give you a string:\n  - if it begins with “<span>http</span>://” you should decode all URL code in the string.\n  - otherwise you should encode each characters in the string.\n\n#### Input\nEach test case contains a string on a single line. The length of the string is less than 1000.\n\n#### Output\nIn each case, output the result in a single line.\n\n#### Sample Input\n```\n0123456789\n你 好 ！\n%30%31%32%33\nhttp://www.baidu.com/baidu?word=%C4%E3%BA%C3%A3%A1\n```\n\n#### Sample Output\n```\n%30%31%32%33%34%35%36%37%38%39\n%C4%E3%20%BA%C3%20%A3%A1\n%25%33%30%25%33%31%25%33%32%25%33%33\n你好！\n```\n',1000,32768,'0',9,22,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('923','Prime Product','#### Description\nUsually when we talk about pp, we will think about beauty (漂漂).But here exactly not.\n\nAs we all know, prime is …. Now I will tell something new about prime. That is prime product. You are given two numbers A, B. We want you find 3 prime a, b, c (a<b<c) between A and B (A B included), then you will get two distances (the distance between a and b, and the distance between b and c), which to make the product of two distance biggest. Your task is to tell us the abs of different between two distances. \n\n#### Input\nThe first line of input contains T(1<=T<=10000), the number of test cases. There is only line for each test case. It contains two integers A, B(1<=A, B<=100000). \n\n#### Output\nFor each test case, output the result. Output -1 if there are no 3 primes between A and B.\n\n#### Sample Input\n```\n2\n1 10\n2 20\n```\n\n#### Sample Output\n```\n1\n1\n```\n#### Hint\nFor [1, 10], 2,5,7 is chosen\nFor [2, 20], 2,11,19 is chosen',1000,65536,'0',9,23,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('924','Greedy Snake Again','\n\n#### Description\nOne of the most popular NOKIA mobile phone game is \'Greedy Snake\'. But I have a strange snake ValeBoy. Greedy ValeBoy eat bigger food than the last time. So I will show you a table (N*M), and every cell in the table have a food size. For each step ValeBoy must in the table and he has only four directions can go(up, down, left, right).Of course ValeBoy can start from everywhere. Your task is tell us how many foods ValeBoy will eat? And the sequence of these foods. \n\n+ Note that if there are more than one answer：\n  - 1、 you should go up first, then down, then left, and last right. \n  - 2、if you can find more than one way, please show all of them.\n\n#### Input\nThe size of the table N, M(1<=N, M<=1000). And the food size X(-1000<=X<=1000) in each cell. EOF end please.\n\n#### Output\nFor each test case: The first line output N, M. \nThe second line output the max numbers of foods ValeBoy can eat. \nThen output the sequence. Every line will have M numbers(except last line), and one space between two numbers. \nTwo space line after each test case.\n\n#### Sample Input\n```\n5 5\n1 2 3 4 5\n16 17 18 19 6\n15 24 25 20 7\n14 23 22 21 8\n13 12 11 10 9\n\n5 5\n1 2 3 4 5\n10 9 8 7 6\n100 100 100 100 100\n10 9 8 7 6\n1 2 3 4 5\n```\n\n#### Sample Output\n```\n5 5\n25\n1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25\n\n\n5 5\n11\n1 2 3 4 5\n6 7 8 9 10\n100\n1 2 3 4 5\n6 7 8 9 10\n100\n\n\n```\n',20000,65536,'0',9,24,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('925','Valeboy’s Problem','#### Description\nValeboy和他的朋友Henny酷爱冒险，这次他们的目标是童话王国。Valeboy和Henny分别住在A、B两个城市，他们决定从Valeboy所在的城市A出发开始旅行。在两人汇合之前，Henny需要在他所在的城市B附近取到他藏在P1、P2、P3地点的三件宝物，当然知道宝物隐藏的位置的人不多，Valeboy知道Henny隐藏宝物的三个地点P1、P2、P3的位置。\n\n当Henny从城市B出发取得三件宝物之后，Henny就立即动身前往城市A和Valeboy汇合。现知城市A和城市B之间拥有世界最高传输速率的量子道路，因此在城市A和城市B之间往来所花费的时间是极少的，我们在这里将忽略这段极短的时间。\n\n\n为了以最快速度取得所有宝物，Henny将沿着通向宝物的直线路径行走，但是由于宝物隐藏的位置比较特殊，宝物隐藏点P1、P2、P3之间是没有两两直接相连的路径的，因此Henny只能在取得一件宝物后返回B城，再出发寻找另一件宝物。\n\n\n现在Valeboy想知道他需要等待Henny的最短时间(单位为秒)，已知城市P1、P2、P3的坐标，以及Henny寻找宝物时的速度v(m/s)，城市B的位置未知\n，你可以选择尽量优的位置来解答Valeboy的问题。\n\n#### Input\n每行包含7个数，表示一组测试数据:前6个数x1,y1,x2,y2,x3,y3,分别代表P1、P2、P3(无重复点，三点不共线)三个点的坐标，第7个数为Henny的行走速度 v。坐标的范围在-10000~10000，0<v<100.\n\n输入以EOF结束,测试数据的组数不超过2000.\n\n#### Output\n对于每组测试数据，输出一个数,代表Valeboy需要等待的最短时间（误差范围1e-9）。\n\n#### Sample Input\n```\n0 0 1 0 0 1 1\n305.1 535.2 267.1 69.0 689.4 742.4 67.1\n```\n\n#### Sample Output\n```\n3.863703305\n26.955133207\n```\n',1000,32768,'0',9,25,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('926','Valeboy’s Problem II','#### Description\n给定一个具有N个顶点（从1到N编号）的凸多边形，每个顶点的权均已知。问如何把这个凸多边形划分成N-2个互不相交的三角形，使得这些三角形顶点的权的乘积之和最大？\n\n#### Input\n第一行包含测试数据的组数T(T<=3000)\n\n每组测试数据包含两行，第一行一个数为顶点个数N(N<=50)的值，第二行为N个顶点（从1到N）的权值，权值为小于32768的正整数.\n\n#### Output\n每组测试数据输出一个数，代表各三角形顶点的权的乘积之和最大值.\n\n#### Sample Input\n```\n1\n5\n121 122 123 245 231\n```\n\n#### Sample Output\n```\n14141155\n```\n',10000,32768,'0',9,26,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('927','B_Search','#### Description\n\n在n(0<n<100000)个从小到大排好序的整数$$$(a_1<=a_2<=a_3<=...<=a_{n-1}<=a_n)$$$中,找出接下来给出的m(0<m<100000)个数据有多少个在这n个数中.\n\n(本题要用到二分查找,参照教材145页)\n\n#### Input\n第一行是一个整数t,代表有多少组测试数据.\n\n每组测试数据的第一行,第一个数是n,接着会有n个从小到大排序的整数.\n\n第二行是一个整数m,接着有m个整数.\n\n#### Output\nm个整数有多少个数在n整数列中.\n\n#### Sample Input\n```\n2\n5 2 3 4 5 6 \n2 3 2 \n10 1 3 5 7 9 11 12 13 14 15\n10 1 2 3 4 5 6 7 8 9 10\n```\n\n#### Sample Output\n```\n2\n5\n```\n',2000,32768,'0',9,27,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('928','larger than k','#### Description\n寻找最多连续有多少个数大于k。\n#### Input\n第一行为t(t<=20)，表示测试数据的组数。每组测试数据包含两行，\n第一行两个数n(0<=n<=1000)，k;\n<br/>n表示有多少个数。\n第二行n个数。\n\n#### Output\n对于每一组测试数据，输出一行：最多连续多少个数大于k。\n\n#### Sample Input\n```\n3\n6 4\n1 3 5 6 7 0\n5 3\n1 2 3 4 5\n6 -9\n0 2 3 5 4 -1\n```\n\n#### Sample Output\n```\n3\n2\n6\n```',1000,32768,'0',9,28,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('929','Square Tiles','#### Description\n给你一个n*m的矩阵，元素只包括 \'.\' 及 \'#\' 如下：\n    .##..\n    .####\n    .####\n    .##..\n你的任务是将所有2*2的\'#\'代替为如下图形：\n\n   /\\\n   \\/\n\n使得矩阵里没有\'#\' 。\n如，上图替代后结果为：\n    ./\\..\n    .\\//\\\n    ./\\\\/\n    .\\/..\n\n#### Input\n第一行为t(t<=50)，表示测试数据的组数。\n每组测试数据的第一行两个数n,m(0<=n,m<=50)，表示矩阵的行数跟列数。\n接下来n行为每一列的内容。\n\n#### Output\n对于每一组测试数据，输出结果矩阵。如果无法用\n/\\\n\\/\n替代所有2*2的\'#\'，则输出\"Impossible\".\n\n#### Sample Input\n```\n3\n2 3\n1. 1. 1. \n1. 1. 1. \n1 1\n.\n4 5\n.##..\n.####\n.####\n.##.. \n\n```\n\n#### Sample Output\n```\nImpossible\n.\n./\\..\n.\\//\\\n./\\\\/\n.\\/.. \n```',2000,32768,'0',9,29,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('93','Optical Fiber','#### Description\nA far away developing country is trying to improve its communication infrastructure. Currently,\neach city in the country has its local computer network, but there is no fast communication\nbetween the cities. The Autonomous Communications Ministry (ACM) of the country decided\nto create a fast, optical fiber network connecting every city. In order to do this, they decided\nto take the following approach. Pairs of cities were chosen to have an optical fiber link installed\nbetween them. The choice was such that there will be only one fiber path between any pair\nof cities, in order to reduce the cost. The pairs of cities were chosen considering many factors,\nincluding analysis of estimated demand and distance between the cities.\nEach city will have one optical router installed, which will be used to connect all the optical\nlinks with one end in that city. In each city, there are many different locations where the\noptical router can be installed. Your task, as an engineer working on this project, is to develop\na computer program to pick up the locations in each city in order to minimize the total length\nof fiber that will be necessary for this project.\n#### Input\nThe input consists of multiple test cases. Each test case starts with a line containing the\nnumber of cities $$$N\\, (1 \\leq N \\leq 1000)$$$ in the country. Following, for each city, there is a sequence\nof lines. The first line contains the (unique) name of the city (only capital letters, at most 15),\nand the number of candidate sites $$$Ci (1 \\leq Ci \\leq 50)$$$ where the optical router can be installed.\nThen, there is one line per candidate site, containing two integers $$$X\\,$$$ and $$$Y\\,$$$ representing the\ncoordinates of the site $$$(-10000 \\leq X, Y \\leq 10000)$$$. You should use the euclidean distance\nbetween the sites to compute the corresponding fiber length necessary to connect them. After\nthe description of each city with its candidate sites, there are $$$N\\, -1$$$ lines, each containing the\nnames of two cities that will have a fiber link installed between them. The end of the input is\nindicated by $$$N\\, = 0$$$.\nThe input must be read from standard input.\n#### Output\nFor each test case, your program should print a line with the minimum total length of optical\nfiber to connect the requested cities. Your answer should be rounded to one decimal digit.\nThe output must be written to standard output.\n#### Sample Input\n```\n3\nAUSTIN 1\n500 500\nDALLAS 2\n1000 10\n990 -10\nELPASO 2\n0 0\n30 0\nELPASO AUSTIN\nDALLAS ELPASO\n3\nHUSTON 3\n100 0\n100 50\n100 100\nAUSTIN 2\n200 0\n180 40\nSANANTONIO 2\n0 -10\n10 -50\nHUSTON AUSTIN\nHUSTON SANANTONIO\n0\n```\n\n#### Sample Output\n```\n1646.3\n189.9\n```\n',10000,32768,'0',0,92,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('930','multiple','#### Description\n给你a,b,c三个数，找出一个最小的大于1的整数 k，使得<br/>\n1，a%k == 0 或者 k%a == 0<br/>\n2, b%k == 0 或者 k%b == 0<br/>\n3, c%k == 0 或者 k%c == 0<br/>\n都成立。\n\n#### Input\n第一行为t(t<=50)，表示测试数据的组数。\n每组测试数据的只有一行，三个数a,b,c(1<=a,b,c<=100)。\n\n#### Output\n对于每组测试数据，输出一行：题目要求的 k。\n#### Sample Input\n```\n3\n1 2 3\n2 4 6\n9 27 6\n```\n\n#### Sample Output\n```\n6\n2\n3\n```',2000,32768,'0',9,30,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('931','bubble sort','#### Description\n冒泡排序是非常出名的排序，虽然复杂度比较高，但思想简单，实现简单，而且是稳定的，是初学者学排序的经典入门算法。以下是C语言实现：\n```\nvoid bubble_sort(int a[], int n)\n{\n	int i,j;\n	for (i=n-1; i>0; i--)\n	{\n		for (j=0; j<i; j++)\n		{\n			if (a[j]>a[j+1]) exchange(&a[j],&a[j+1]);\n		}\n	}\n	return;\n}\n```\n当然exchange函数以上并没有实现。\n你的任务很简单：统计对于一个序列进行排序，exchange函数共执行多少次。\n\n#### Input\n第一行为t(t<=20)，表示测试数据的组数。每组测试数据包含两行，\n第一行一个数n(0<=n<=1000)，表示序列有多少个数。\n第二行n个数。\n\n#### Output\n对于每一组测试数据，输出一个数total，即用冒泡排序对序列进行排序时，exchange函数总共执行多少次。\n#### Sample Input\n```\n3\n3\n3 2 1\n5\n4 5 1 2 3\n4\n4 3 2 1\n```\n\n#### Sample Output\n```\n3\n6\n6\n```',3000,32768,'0',9,31,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('932','change','#### Description\nNow we have some words, what you gonna do is to change them a little bit. The rule is: change the lower case to upper case, and vice versa.\n#### Input\nThe first line of input will contain T(1<=T<=15), the test case of the problem. Then T lines follow, for each line, there is a string which contains only the lower case and upper case of alphabet. And all strings’ lengths are less than 1000\n#### Output\nfor each test case, output the changed string.\n#### Sample Input\n```\n3\nabc\naPPLE\nOraNgE\n```\n\n#### Sample Output\n```\nABC\nApple\noRAnGe\n```',2000,32768,'0',9,32,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('933','fatorial','#### Description\ngiven a sequence of numbers, your task is to calculate the sum of their fatorial.\n#### Input\nThe first line of input contains T(1<=T<=10), the number of test cases. There is only one line for each test case. The first number N(1<=N<=10) of each test case will indicates ho many integer numbers are there. Then n integer numbers follows. All integers are less than 13.\n#### Output\noutput one line for each test case. The sum of factorial of all integers.\n#### Sample Input\n```\n4\n10 1 1 1 1 1 1 1 1 1 1\n5 2 2 2 2 2\n1 13\n1 2\n```\n\n#### Sample Output\n```\n10\n10\n6227020800\n2\n```',1000,1024,'0',9,33,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('934','no larger than k','#### Description\nI know the problem \"larger than k\" is too simple, so here comes a not that simple problem.\nGiving you a list of number, your job is to find a smallest number k, such that there are m numbers in the list that are no larger than k.\n\n#### Input\nThe first line is a number t, indicating the number of test cases.\nFor each case, there are two line: the first line contains two number n,m(1<=n<=8000,000, 1<=m<=n), indicating the size of the list, and the number of numbers that shuold not be larger than k.\n\n#### Output\nFor each case, output the number k.\n#### Sample Input\n```\n3\n6 3\n1 2 3 4 5 6\n6 2\n6 9 5 2 3 1\n3 2\n1 1 1\n```\n\n#### Sample Output\n```\n3\n2\n1\n```\n',5000,32768,'0',9,34,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('935','Simple Search','#### Description\n给你一个有序的正整数序列a，序列长度为n，(a1<=a2<=…<=ai<=...<=an，1<=i<=n，0<=ai<=1000000) ，接下来给定其中的一个数m，输出在此序列中比m小，并且最接近m的数，如果不存在则输出-1。\n\n#### Input\n输入的第一行是测试数据的个数t(1<=t<=10)。接下来有t组测试数据。\n每个测试数据的第一行是一个正整数n（1<=n<=100000），接下来一行有N个正整数(a1，a2……an)表示序列a，最后一行有一个数M，为序列中的其中一个数。\n\n#### Output\n对于每组测试数据，输出此序列中比m小，并且最接近m的数，如果不存在则输出-1。\n\n#### Sample Input\n```\n2\n2\n2 2\n2\n2\n1 2\n2\n```\n\n#### Sample Output\n```\n-1\n1\n```\n',1000,32768,'0',9,35,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('936','Quadratic Sum','#### Description\n给你一个序列，请你输出它们的平方和。\n例如序列3，-1，8它们的平方和是32+(-1)2+82 = 74。\n\n#### Input\n输入的第一行是测试数据的个数t(1<=t<=10)。接下来有t组测试数据。\n每个测试数据的第一行是一个正整数N（1<=N<=100），接下来一行有N个数，每个数的范围是-100到100。\n\n#### Output\n对于每组测试数据，输出此序列的平方和。\n\n#### Sample Input\n```\n2\n3\n3 -1 8\n4\n2 4 6 8\n```\n\n#### Sample Output\n```\n74\n120\n```\n',1000,32768,'0',9,36,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('937','Queue','#### Description\n商场中，现在有一队人正在排队。每个人都有一个属于自己唯一的编号X(0<=X<=100)。假设开始时队列为空，现在有以下三种指令：\npush X：编号X的人进入了这个队列(每个人只进队一次)\npop：队列的第一个人离开了队列\nask：询问现在队列头的那个人是谁。\n\n#### Input\n从第一行开始的正整数n(1<=n<=100),代表指令的个数。\n接下来n行，分别只会有以上的三个指令。\n\n#### Output\n对于pop指令，如果当前队列为空，则在一行里输入error，否则输出success；\n对于ask指令，则在一行里输出当前队头的人的编号，如果没有输出empty。\n\n#### Sample Input\n```\n4\npop\npush 1\nask\npop\n```\n\n#### Sample Output\n```\nerror\n1\nsuccess\n```\n',1000,32768,'0',9,37,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('938','Number Base Conversion','#### Description\n```\n现在假设：\n2进制对应的基数是0,1;\n3进制对应的基数是0,1,2;\n……\n10进制对应的基数是0,1,2,3,4,5,6,7,8,9.\n……\nn进制对应的基数是0,1,2,3,……,n-1;\n\n你的任务是实现进制之间的转换。\n```\n\n#### Input\n第一行，有t（t<=1000），表示测试数据的个数。\n接下来每行2个正整数n，m，分别代表 一个十进制的数n（n<10^100），和需要转成m（2<=m<100）进制的m。\n\n#### Output\n对于每组测试，输出转换之后的数。\n\n#### Sample Input\n```\n3\n19 17\n19 5\n51642140186286313 50\n```\n\n#### Sample Output\n```\n12\n34\n2622146482940142613\n```\n',1000,32768,'0',9,38,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('939','Simple Search Again','#### Description\n给你一个无序的正整数序列a，序列长度为n，接下来有m个数，对于其中的每一个数bi，输出在此序列a中比bi小，并且最接近bi的数，如果不存在则输出-1。\n\n#### Input\n测试数据的第一行是一个正整数n（1<=n<=100000），接下来一行有n个正整数(a1，a2……an) (0<=ai<=1000, 1<=i<=n)，接下来一行是一个数m（1<=m<=100000），最后一行是一个m个数的序列b(0<=bi<=1000, 1<=i<=n)。\n\n#### Output\n输出一行，总共有m个数，分别代表序列a中比bi小，并且最接近bi的数，如果不存在则为-1。\n\n#### Sample Input\n```\n4\n1 2 2 4\n3\n1 2 5\n```\n\n#### Sample Output\n```\n-1 1 4\n```\n',1000,32768,'0',9,39,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('94','Where Are My Genes','#### Description\nOne way that scientists try to measure how one species evolved into another is to find out how\nthe ancestor’s genome changed into the other’s. Closely related species have several genes in\ncommon and it turns out that a good way to compare them is comparing how the common\ngenes changed place.\nOne of the most common mutations that change the order of a genomes’ genes is the\nreversal. If we model a genome as a sequence of N genes with each gene being an integer from\n1 to N, then a reversal is a mutation that changes the genome by reverting the order of a\nblock of consecutive genes. A reversal can be described by two indexes $$$(i, j)\\,$$$ ,$$$ 1\\,$$$ $$$\\leq i \\leq j \\leq N$$$,\nindicating that it reverts the order of the genes within indexes from i to j. So, when it\nis applied to a genome [g1, . . . , gi−1, gi, gi+1, . . . , gj−1, gj , gj+1, . . . , gN] , we obtain the genome\n[g1, . . . , gi−1, gj , gj−1, . . . , gi+1, gi, gj+1, . . . , gN]. As an example, the reversal $$$(3, 6)\\,$$$ applied to the\ngenome $$$[1, 2, 3, 4, 5, 6, 7]\\,$$$ gives$$$ [1, 2, 6, 5, 4, 3, 7]\\,$$$ . If after that the reversal $$$(1, 3)\\,$$$ is applied, we\nobtain the genome $$$[6, 2, 1, 5, 4, 3, 7]\\,$$$.\nA scientist studying the evolution of a species wants to try a series of reversals on its genome.\nThen he wants to query the final position of several genes. Would you take the challenge and\nhelp him?\n\n#### Input\nThe input contains several test cases. The first line of a test case contains one integer$$$ N\\,$$$\nindicating the number of genes in the genome $$$ (1 \\leq N \\leq 50000)$$$ . You may assume that the\ninitial order of the genes is the sequence of integers from $$$1 \\,$$$to $$$N \\,$$$in increasing order. The second\nline of a test case contains one integer $$$ R (0 \\leq R \\leq 1000)$$$ indicating the number of reversals to be\napplied to the genome. Then R lines follow, each containing two integers $$$ i, j (1 \\leq i \\leq j \\leq N)$$$ ,\nseparated by a single space, indicating the two indexes that define the corresponding reversal.\nAfter the description of the reversals there is a line containing one integer $$$Q (0 \\leq Q \\leq 100)$$$ ,\nindicating the number of queries for genes, followed by $$$Q\\,$$$ lines, where each line contains an\ninteger representing a gene whose final position you must determine.\nThe end of input is indicated by $$$N\\,$$$ = 0.\n\nThe input must be read from standard input.\n\n#### Output\nFor each test case in the input your program must produce Q+1 lines of output. The first line\nmust contain the string “Genome ” followed by the number of the test case. The following Q\nlines must contain one integer each representing the answers of the queries.\n\nThe output must be written to standard output.\n\n#### Sample Input\n```\n9\n1\n3 6\n4\n1\n3\n5\n1\n5\n2\n1 2\n1 5\n2\n5\n2\n0\n```\n\n#### Sample Output\n```\nGenome 1\n1\n6\n4\n1\nGenome 2\n1\n5\n```\n',10000,32768,'0',0,93,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('940','Map','#### Description\n告诉你一个n*n 的地图，地图的第一个点的坐标是(1,1)，图中会出现许多不\n同的符号，只会包含不多于@，#，*，‐，四种字符。\n\n现在给你两个点p1(x1,y1)\n和p2( x2,y2)，请你p1 和p2 是不是连接在一起。\n\n连接有两种情况，\n\n一种是直接连接：一个点在另外一个点的上下左右，且字符相同。\n\n另一种是间接连接：假如p1和p2是直接连接，p2和p3是直接连接，那么p1和p3就是间接连接在一起了。\n\n当然如果现在p3 和 p4 是直接连接，那么p1也和p4间接连接的。也就是说间接连接具有传递性。\n\n#### Input\n包含多组测试，读取以EOF 结束。\n\n第一行一个正整数n（n<=10）。\n\n从第二行开始的n 行是n*n 的地图信息。\n\n最后一行是要判断的两个点p1 和p2 的坐标x1,y1,x2,y2(1<=x1,x2,y1,y2<=n)\n\n#### Output\n如果两个点连接在一起则输出”Yes”,否则输出”No”。\n注意连接包括直接连接，或间接连接。\n\n#### Sample Input\n```\n3\n1. 1. .\n.*.\n...\n1 1 1 2\n```\n\n#### Sample Output\n```\nYes\n```\n',1000,32768,'0',9,40,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('941','Back To The Start','#### Description\n回到原点。仅用此题纪念已经远离我们的高考。\n一个迷宫中有一个机器人，机器人的起始位置在左上角（0,0）处。\n迷宫中有障碍物`#`，不能走动，`.`代表可以走动，迷宫中只有`.` 或`#`两种符号。迷宫左上角保证为`.`。\n然后接受了一堆指令，U（上），D（下），L（左），R（右），做出相应的方向移动，注意碰到障碍物或走出迷宫则原地不动，该移动方向是相对于迷宫，而不是相对自身的方向。\n机器人每走一步，会自动记录当前回到起点的一条最短路。机器人收到RETURN指令，则从当前位置开始根据记录的最短路返回起点。\n你的任务就是输出机器人返回时候的路线。\n特殊说明：由于机器人的记忆力有限，每一步记录的最短路根据前一步记录的路径结果来更新最短路。\n\n#### Input\n包含多组测试，读取以EOF结束。\n第一行 告诉你2个正整数n和m（n,m<=10），接下来有n*m的矩阵输入。\n接下来有一堆由空格隔开的指令，当接受到RETURN指令，代表这组数据的结束(总指令个数不多于100)。\n\n#### Output\n对于每个测试数据，输出机器人的返回路线。\n输出路线以(x,y)这种形式输出，每组数据后面，输出一个空行。\n\n#### Sample Input\n```\n3 3\n..#\n.#.\n...\nR R D L D D U D R RETURN\n3 3\n..#\n.#.\n...\nR R RETURN\n2 2\n..\n..\nD R U L R D RETURN\n```\n\n#### Sample Output\n```\n(2,1)\n(2,0)\n(1,0)\n(0,0)\n\n(0,1)\n(0,0)\n\n(1,1)\n(0,1)\n(0,0)\n\n```\n',1000,32768,'0',9,41,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('942','Submultiple Number','#### Description\n你的任务很简单，给定一个正整数n(n<=2^31-1),输出它的所有约数个数。\n所谓的约数，就是能整除n的正整数。（数据有点大，注意效率问题。）\n\n#### Input\n第一行，有t（t<=1000），表示测试数据的个数。\n接下来每行一个正整数n。\n\n#### Output\n对于每个测试数据输出一行，表示这个数的约数个数。\n\n#### Sample Input\n```\n2\n1\n4\n```\n\n#### Sample Output\n```\n1\n3\n```\n',1000,32768,'0',9,42,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('943','Sum and Sub','#### Description\nGiven m, n (m<=n). Please calculate difference of the sum of the even numbers and\nthe sum of the odd numbers between m and n (m, n included).\n\n#### Input\nThe first line of input contains T (T<100), the number of test cases. There is only one\nline for each test case. It contains two integers m, n.\n#### Output\nFor each test case, output the result. All the number and result is fit in signed 32-bit\ninteger.\n#### Sample Input\n```\n2\n1 2\n2 5\n```\n\n#### Sample Output\n```\n1\n-2\n```\n#### Hint\nFor second case in the sample input, there are 2, 4 two even numbers and 3, 5 two\nodd numbers. So the result is (2+4)-(3+5) = -2. That is it.',1000,32768,'0',9,43,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('944','Change A+B','#### Description\nYou are given two nonnegative integers A, B. Then calculate the sum S of A and B. (A,\nB, S are in signed 32-bit integer)\nThen change the number of the sum S by the rule, change each x (x is one digit of the\nS) to (x*2)%10. For example, if s=123, then s=246, if s=56,(5 to 0,6 to 2)then s=2.\n\n#### Input\nThe first line of input contains T (T<=100) the number of test cases. There is only one\nline for each test case. It contains two integers A, B.\n\n#### Output\nFor each test case, output the required S.\n#### Sample Input\n```\n3\n109 14\n3 53\n0 0\n```\n\n#### Sample Output\n```\n246\n2\n0\n```\n',1000,32768,'0',9,44,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('945','One space','#### Description\nThere is a string such as “123 ab c”,you just need to change the string into “123\nab c” that the continuous space in the string become one space. If there have continuous\nspace or one space at the beginning or the end of the string, just ignore it.\n#### Input\nThe first line of input contains T (T<=100) the number of test cases. There is only one\nline for each test case. It contains a string (the length of the string is less than 100).\n#### Output\nFor each test case, output the new string.\n#### Sample Input\n```\n3\n123    ab   c\n A\n0\n```\n\n#### Sample Output\n```\n123 ab c\nA\n0\n```\n',1000,32768,'0',9,45,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('946','The 3rd number','#### Description\nGive a list sequences. Output the 3rd maximal number.\n#### Input\nThe first line of input contains T (T<100), the number of test cases. There is only one\nline for each test case. The first number N (2<N<10^7) indicates the total number of the\nsequence. Then comes the sequence. All numbers are in the range of (1, 2^31-1).\n#### Output\nFor each test case, output the result.\n#### Sample Input\n```\n2\n3 1 2 3\n5 1 2 5 4 6\n```\n\n#### Sample Output\n```\n1\n4\n```\n',1000,64000,'0',9,46,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('947','N!','#### Description\nN! = N*(N-1)*(N-2)*…*2*1.\nFor example:\n5! = 120\n10! = 3628800\nSo there is 1 zero after the 5! , and 2 zeros after the 10!.\nYour task is to tell the number of zeros in the tail of N!.\n\n#### Input\nThe first line of input contains T (T<100), the number of test cases. There is only one\nline for each test case. It contains only one integer n. (n is in unsigned 32-bit integer)\n#### Output\nFor each test case, output the result.\n#### Sample Input\n```\n2\n5\n10\n```\n\n#### Sample Output\n```\n1\n2\n```\n',1000,32768,'0',9,47,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('948','The smallest number','#### Description\nYou are given two positive integer m and n (m and n are in signed 32-bit integer,\nm<=n).We want you to choose any k integers. Then by picking up some numbers in the k\nintegers and the sum of those numbers can express all the number from m to n (m,n is\nincluded).\nAnd k should be as small as possible.\nFor instance, if m=2, n=5. You can choose 5 integers 1,1,1,1,1 or 4 integers 1,1,1,2 or\n3 integers 1,2,2. So the smallest k is 3.\n\n#### Input\nThe first line of input contains T (T<=100000) the number of test cases. There is only\none line for each test case. It contains two integers m, n (m<=n).\n#### Output\nFor each test case, output the smallest number k.\n#### Sample Input\n```\n3\n1 4\n3 7\n4 8\n```\n\n#### Sample Output\n```\n3\n3\n4\n```\n',1000,32768,'0',9,48,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('949','Rule','#### Description\nYou need to put numbers which are from 1 to n*n into a n*n map. And you should just\nlook the sample to find out the rule.\n#### Input\nThe first line of input contains T (T<=100) the number of test cases. There is only line\nfor each test case. It contains an integer n (1<=n<=100).\n#### Output\nFor each test case, output the result by the rule. And the output format should be the\nsame with the following example.\n#### Sample Input\n```\n3\n1\n2\n3\n```\n\n#### Sample Output\n```\n1\n1 2\n3 4\n1 2 6\n3 5 7\n4 8 9\n```\n',1000,32768,'0',9,49,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('95','Computer DJ','#### Description\nA very famous DJ has been recently invited to play in the closing party of a Computer Science\nconference. Trying to impress the participants of the event, he decided to use a program in\norder to choose the songs he would play at this party. However, the result was a disaster, since\nthe way the program chose the songs was quite weird and repetitive.\n\nFirst of all, the DJ has selected $$$N\\,$$$ songs among the set of songs he had available. The\nprogram used by the DJ then labels each of the songs using one different character from ‘A’\nto ‘Z’. The $$$ith\\,$$$ song is labeled using the $$$ith\\,$$$ character of the sequence ‘A’-‘Z’. The program\nchooses the songs to be played in the party in the order that their labels appear in the following\ninfinite sequence of characters: first come all the words with one character in lexicographical\norder; then all the words with two characters in lexicographical order; then all the words with\nthree characters in lexicographical order; and so on. For $$$N\\,$$$ = 3, this sequence would be\n\n$$$ABCAAABACBABBBCCACBCCAAAAABAACABAABBABC...$$$\n\nAt the end of the party, some people asked the DJ if he remembered which the first song\nplayed was. Others would like to know which the $$$25th\\,$$$ was, and so on. The DJ remembers\nnothing but the strange pattern of repetition of the songs, so he urges you to help him and\nwrite a program which answers such queries.\n\n#### Input\nThe input contains several test cases. Each test case consists of three lines. The first line of a\ntest case contains two integers $$$N\\,$$$ and $$$Q\\,$$$ indicating respectively the number of songs chosen by\nthe DJ and the number of queries made by the participants $$$(1 \\leq N \\leq 26\\,  and\\,  1 \\leq Q \\leq 1000)$$$.\nIn the second line, there will be the N titles of the songs (the title of a song is a chain of\nalphanumerical characters of at least one and at most 100 characters) separated by single\nspaces. The last line of a test case contains a sequence of queries. Each query is a number k\n$$$(1 \\leq k \\leq 100000000)$$$ corresponding to the$$$ kth\\,$$$ song played in the party. The end of the input\nis indicated by $$$N\\, = Q\\, = 0$$$.\n\nThe input must be read from standard input.\n\n#### Output\nFor each query number k in a test case, you shall print a single line containing the name of the\n$$$kth\\,$$$ song played in the party. A blank line must follow each test case.\n\nThe output must be written to standard output.\n#### Sample Input\n```\n10 3\nS0 S1 S2 S3 S4 S5 S6 S7 S8 S9\n3 6 10\n3 5\nPathethique TurkishMarch Winter\n1 2 3 4 16\n0 0\n\n```\n\n#### Sample Output\n```\nS2\nS5\nS9\n\nPathethique\nTurkishMarch\nWinter\nPathethique\nWinter\n\n```\n',10000,32768,'0',0,94,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('950','Train Problem I','#### Description\nAs the new term comes, the Ignatius Train Station is very busy nowadays. A lot of student want to get back to school by train(because the trains in the Ignatius Train Station is the fastest all over the world ^v^). But here comes a problem, there is only one railway where all the trains stop. So all the trains come in from one side and get out from the other side. For this problem, if train A gets into the railway first, and then train B gets into the railway before train A leaves, train A can\'t leave until train B leaves. The pictures below figure out the problem. Now the problem for you is, there are at most 9 trains in the station, all the trains has an ID(numbered from 1 to n), the trains get into the railway in an order O1, your task is to determine whether the trains can get out in an order O2.\n[[Image:J50_01.jpg|center]]\n\n#### Input\nThe input contains several test cases. Each test case consists of an integer, the number of trains, and two strings, the order of the trains come in:O1, and the order of the trains leave:O2. The input is terminated by the end of file. More details in the Sample Input.\n\n#### Output\nThe output contains a string \"No.\" if you can\'t exchange O2 to O1, or you should output a line contains \"Yes.\".\n\n#### Sample Input\n```\n3 123 321\n3 123 312\n```\n\n#### Sample Output\n```\nYes.\nNo.\n```\n',10000,65536,'0',9,50,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('951','RPN Again','#### Description\n\nPlease Do B62(RPN) First!!\nWe have already know how to make computer calculate a math string.\nNow please give the result of given string.\n\nThe string contains integers and operations(‘+’ ,  ’-‘ ,  ’*’ ,  ’/’ ,  ’%’ ,  ’(‘ ,  ’)’ ) only.\nNotice that \'%\' has the same priority as \'*\' and \'/\';\nAnd each number in the string smaller than 10 and bigger than -1.\nBut the result of them may bigger than 10.\nall the result and interim result would smaller than 127 and bigger than -127.\n\n#### Input\nFirst Line is test case T < 100.\nThen comes T line math string, the length of each string < 100.\n\n#### Output\nFor each test case, output the result in one line.\n\n#### Sample Input\n```\n3\n1+2\n(1/2)\n1%2\n```\n\n#### Sample Output\n```\n3\n0\n1\n```\n',1000,65536,'0',9,51,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('952','Airport Connecting Management','#### Description\nThere is a very beautiful country called ICPC (International Cleanest and Prettiest Country). It\'s really very clean and pretty, but not so convenient in traffic. This year, you are hired to take the following task called ACM (Airport Connecting Management):\n\nThere are N cities in ICPC. Each city has exactly one airport. At first, there are no flights between them. You are asked to connect these airports by adding flights. The schedule must follow these rules:\n\n(1) Each flight is a two-way service that directly connects two airports.\n\n(2) No pair of airports can be connected by more than on flight.\n\n(3) From a city, you can go to every other city by at most two flights (go directly or transfer an intermediate city).\n\nHere comes the problem: What\'s the minimum number of flights you need to add to obey these rules?\n\n#### Input\nThere are multiple test cases in this problem.\n\nThe first line contains an integer T (1<=T<=10) telling the number of test cases.\n\nEach test case is an integer N (2<=N<=50) in a line indicating the number of cities.\n\n#### Output\nFor each test case, output an integer telling the minimum number of flights in a lute.\n#### Sample Input\n```\n2\n2\n3\n```\n\n#### Sample Output\n```\n1\n2\n```\n\n',1000,32768,'0',9,52,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('953','Personnel Scheduling','#### Description\nPersonnel scheduling has been widely studied for many years. The scheduling can be thought of as the problem of assigning employees to shifts or duties over a scheduling period so that certain constraints are satisfied or the assignment achieved some objective.\n\nIn this problem, we focus on a basic personnel scheduling system. Suppose there is a small workshop which manufactures accessory for same special tools. This time, the workshop received a series of order farms in a day. Each order form gives out a period of time. Far an order form, the workshop owner has to recruit one laborer to manipulate the machine. In this period, order forms cannot distract the laborer. But when the laborer finished his current work, he can take over another order form.\n\nTo minimize the cost, the workshop owner wants to recruit least amount of the laborers. Besides, he has to consider the work-time balance among the laborers – the deviation of the work-time of each laborer should also be minimal. The definition of the deviation D is that, suppose there are m laborers and their work-times are w1 , w2, …, Wm，then\n\n\n$$$D=\\sqrt{\\frac{1}{m} \\left[ \\left( w_1- \\bar w \\right)^2 + \\left( w_2- \\bar w \\right)^2  + ...  + \\left( w_m- \\bar w \\right)^2  \\right]} $$$ ,\n\nwhere  $$$ \\bar w = \\frac{1}{m} \\left( w_1 + w_2 + ... + w_m \\right) $$$\n\nYour task is to work out the minimum number of laborers to be recruited and the minimum deviation between these laborers.\n\n#### Input\nThe first line of the input gives out the number T (T<=100) of test case. For each test case, the first line is an integer N (1 <=N<= 20), representing the number of the order form. The following N lines each line contains two timestamps, \"start-time\" and \"end-time\". The format of a time forms \"HH:MM\" (O<=HH<24, 0<=MM<60). A laborer should be assigned to this period of time, start-time and end-time inclusive.\n#### Output\nFor each test case, output a line with two number m and D. D is rounded to 2 decimal places.\n#### Sample Input\n```\n2\n2\n01:00 02:00\n02:00 03:00\n5\n00:00 00:00\n15:13 15:58\n13:38 04:42\n03:15 13:56\n13:03 21:50\n```\n\n#### Sample Output\n```\n2 0.00\n2 47.00\n```\n',1000,32768,'0',9,53,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('954','Brick by Brick Game','#### Description\nBrick by Brick Game is a kind of creative building game. Like all toy bricks games, it uses a set of bricks to construct buildings.\n\nIn this problem, we consider a set of bricks which forms a building in rectangle shape. Our task is to remove K bricks from the building. In order to make the remaining part of the building keep standing, the following rules should be obeyed:\n\n(1)Each floor of the building (remaining part) consists of a single connected row of bricks.\n\n(2) At least one brick from each floor must rest upon some brick from the floor below it. The only exception is the bottom floor, which rest upon ground.\n\n(3) At least one brick of tile bottom floor must be left.\n\nEach brick has its own visual value (a non-negative integer printed on the surface). We want maximize the sum of the visual values on the bricks left. Can you tell me what the sum could be?\n\nFor detail, Figure 4.3.1 illustrated the case in the sample input. The maximized solution follows all of the above rules. Remember that, there\'s no restriction on how many floors that the remaining part of the building must keep, so we may abandon some top floors.\n[[File:j58-431.png|thumb|Eggs]]\n\n#### Input\nThe first Tine of the input contains a positive integer T<=20 specifying the number of test to follow.\n\nThe first line of each case contains three integers: N, M and K. (O<N, M<=64, And max (NM - 64, 0) <=K<NM)\n\nNext follow N lines, each with M integers specifying the visual values of each bricks. The first line describes the top floor of the building while the last line describes the bottom floor. All of visual values are nun-negative integers smaller than 32768.\nNumbers are separated by spaces.\n\n#### Output\nFor each test case you should output a single line containing \"Case X: Y\" (quotes for clarity) where X is the number of the test case( starting at 1) and Y is the total visual value of the maximized solution.\n\n#### Sample Input\n```\n1\n6 4 12\n1 1 1 1\n1 7 14 1\n9 4 18 18\n2 4 5 5\n1 7 1 11\n3 2 7 16\n```\n\n#### Sample Output\n```\nCase 1: 118\n```\n',1000,32768,'0',9,54,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('955','A Carnival Game','#### Description\nMaybe you have ever played such a kind of carnival game (If not, you can go to Tee Mall or Grandview Mall to have a try ^_^):\n\nThere are a lot of semicircles on the desk. Every semicircle is divided into several parts. You can throw a coin to the desk. If your coin lies in some part without intersecting any arcs or lines, you can get the corresponding prize, e.g., a small price, middle prize, big prize or even gold price as shown in Figure 4.4.1 C a ).\n\nThis problem is base tin this game. To make things complicated, you have to deal with sectors instead of semicircles. There are N sectors on the desk. The sectors will not overlap. Every sector is divided into K parts. You can assume that the sector is cut from a group of concentric Circles why radius form an arithmetic progression (a list of numbers Ai satisfying that Ai – Ai-1 = d for all i >1. Initially, the whole desk is white. Then each part of every sector is colored differently. Figure 4.4.1 ( b ) shows an example of a sector when K=5.\n\nYou can throw some coins to the desk. A coin is a circle. If your coin lie in the colored part inside a sector and doesn\'t intersect any arc or segment of any sector, you can get some score. From the outer part to the inner part, the score you can get is 1, 2, 3, … , K separately. Otherwise the score is 0.\n\nNow, given the description of the N sectors and the Q coins, I\'d like you to tell me the score every coin can get.\n\nNote: A coin intersects an arc or a segment if and only if their minimum distance is less than 1E-6.\n\n#### Input\nThere are multiple test cases in this problem.\n\nThe first line contains an integer T ( 1<= T<=10) indicating the number of test cases.\n\nFor each test case, the first line contains two positive integers N and K (1 <=N<=5000, 1 <=K<=5000), indicating the number of sectors and the number of parts.\n\nThen N lines followed, each line contains five floating number x1, y1, x2, y2, r (-1 000 000 < x1, y1, x2, y2< 1 000 000, 0<r< 1 000 000). It means that there is a sector whose arc is (x1, y1) - (x2, y2) (in counter-clockwise order) and radius is r. The angle of the sector will never be more than 180 degrees.\n\nAfter that, there is a line containing one integer Q (1<=Q<=20), indicating the number of coins.\n\nThen Q lines followed, each line contains three floating number x, y, r (-1 000 000<x, y<1000 000, 0 < r< 1000 000). It means there is a coin whose center is (x, y] and radius is r.\n\n#### Output\nFor each test case, first print the case number (start from 1) in the format of \"Case i:\" in a line, as shown in the sample.\n\nThen print Q lines, each line contains an integer indicating the score of the corresponding coin\n\n#### Sample Input\n```\n2\n1 2\n1 0 0 1 1\n2\n0.5 0.5 0.2\n0.5 0.5 0.5\n2 2\n0.6 0 0 0.6 0.6\n1.7 1 0.7 0 1\n4\n0.1 0.1 0.05\n0.1 0.1 0.1\n0.67 0 0.05\n0.9 0.15 0.1\n```\n\n#### Sample Output\n```\nCase 1:\n1\n0\nCase 2:\n2\n0\n0\n1\n```\n',1000,32768,'0',9,55,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('956','Publish or perish','#### Description\nPaper quality and quantity have long been used to measure a research\'s scientific productivity and scientific impact. Citation, which is the total times a paper has been cited, is a common means to judge importance of a paper. However, with all these factors varying, a collegiate committee has problems when judging which research is doing better. For this reason, H-index is proposed and now widely used to combine the above factors and give accurate judgment. H-index is defined as:\n\n   A scientist has index h if h of [his] Np papers have at least h citations each, \n   and the other (Np-h) papers have at most h citations each.\n\nIn other words, a scholar with an index of h has published h papers each of which has been cited by others at least h times. Note that H-index is always an integer. It\'s said that achieving H-index of 18 means one is fully qualify to be a professor, and H-index of 45 or higher could mean membership in the United States National Academy of Sciences.\n\nYou are to calculate the H-index for all the researches in the list, based on the given information.\n\n#### Input\nThere are multiple scenarios in the input, terminated by a single zero (0).\n\nEach of the scenarios begin with an integer N (1 <=N<= 100), means that there are N papers. N lines follow, each contain a string (not exceeding 20 characters long), representing the author of the corresponding paper, without white spaces in-between. Though it would be common for one paper written by several authors, there would be exactly one author of each of these pagers. Finally, there are N lines of strings, containing \'0\'s and \'1\'s. If the j-th character in the i-th line is \'1\', it means the i-th paper cites the j-th paper. A paper could never cite itself.\n\n#### Output\nFor each scenario, output as many lines as the number of authors given. Each line contains the author\'s name and his H-index. The list should be sorted first by H-index in descending order, than by name in alphabetic order (Actually, ASCII order. So \'B\' is prior to \'a\').\n\n<b>Output a blank line after each scenario.</b>\n\n#### Sample Input\n```\n4\nPeter\nPeter\nBob\nBob\n0000\n1000\n1100\n0100\n0\n```\n\n#### Sample Output\n```\nPeter 2\nBob 0\n\n```\n',1000,32768,'0',9,56,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('957','Dreams in the East','#### Description\nAs a game master, Edwin\'s job is to design maps for Dreams in the East, a famous online game produced by the company he has been working for, the NetHard. One of his favorite designs is the so-complex-road-system connecting Anchang City and Cunfang Hill in the game.\n\nUnfortunately things have got somehow out of control recently, as Edwin found that some of those smartest players have already revealed the shortest path between Anchang City and Cunfang Hill. With such information being spread, players are now simply crowding on the shortest path and ignoring others, which makes the so-complex-road-system look like a so-naive-road-system.\n\nEdwin is now aggravated and the consequence could be serious. However, while maps can be designed and become more complicated easily, such measures may not he accepted by most players with ease: changing of existing roads or adding too many roads could lead to a bunch of complaint, which is very likely to threat Edwin\'s job, especially during this damned financial crisis. Hence Edwin needs another way out, to put it simple, he wonders if he can add one road only in the map to fulfill his somewhat \"unkind\" wish to players.\n\nSo here comes the problem:\n\nThe map is described as N way points and M bidirectional roads. Way points are numbered from 1 to N, with 1 for Anchang City and N for Cunfang Hill. A path connecting Anchang City and Cunfang Hill will be described as a sequence of roads; and two paths are different if the two sequences describing them are different by at least one road.\n\nEach road is weighted with the average tithe required to pass it, and a path will be considered the shortest if the sum of the average tune needed to travel through it is minimal. Note, there could be many different shortest paths connecting the same pair of points.\n\nTo get the job done, Edwin needs to choose two distinct way paints which are not connected directly by an existing road and then Iink them up with a new road. As to the weight, it is a positive integer determined sheerly at Edwin`s will, because as a game master he can dispatch a tough monster to guard the way, or simply add a light-speed car to deliver a player in a flash. However Edwin\'s aim is to increase the number of different shortest paths by at least a given number D, and now he wonders how many different choices he has when choosing those two way points. By the way, choosing point A and B is considered the same as choosing B and A.\n\n\n#### Input\nThere are multiple test cases.\n\nEach test case starts with an integer N indicating the number of way paints, and an integer M indicating the number of roads.\n\nThen a line contains the integer D which is the extra shortest path Edwin wants.\n\nThen M lines follow. Each line consists of three positive integers A, B and C, indicating an edge connecting vertex A and B with weight C.\n\nInput is terminated by a line containing two zero \"0 0\':\n\nIt is guaranteed that\n\n2 <= N <= 20 000\n\n0 <= M <= 100 000\n\n1 <= A, B <= N\n\n1 <= C <= 1 0000\n\n1 <= D <= 1 000 000 000\n\nNo two roads of a test case may connect a same pair of points, and no read connects a point to itself.\n\n#### Output\nFor each case just output the answer in one line.\n#### Sample Input\n```\n2 0\n1\n3 2\n1\n1 2 1\n2 3 1\n5 5\n2\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n1 3 2\n10 10\n1\n1 2 4\n2 3 3\n3 4 2\n3 5 3\n4 5 2\n5 6 1\n6 7 2\n7 8 4\n8 9 4\n9 10 1\n0 0\n```\n\n#### Sample Output\n```\n1\n1\n1\n35\n```\n',1000,32768,'0',9,57,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('958','Black Jack','#### Description\nNetease Interactive Entertainment (NIE) is interesting in developing funny leisure games for users. Nowadays some engineers are doing research on a famous game called Black Jack. Here let’s make the rules a little simpler. Considering that only the banker and you play the game with a number of cards valued form 1 to 10, and the game is consisted of several rounds; you and the banker play it round by round until there are less than 6 cards left. In each round of the game:\n\n(1)The banker and you must take two cards one by one in order, that means first the banker take one card, and then you take one, then the banker, and then you. After that the banker and you take turns to make some \"call\"; the banker first.\n\n(2) When it\'s one\'s turn to make a \"call\"; he can choose to take one more card or not. But if one chose not to take the card, he cannot make \"call\" any more in this round.\n\n(3) When it\'s the banker\'s turn to make a \"call\"; if the sum of his cards is not greater than 16, he must take one more card. Or else he will not take the card.\n\n(4) If one\'s sum of his cards is larger than 21, he loses and this round ends immediately.\n\n(5) When it\'s your turn to make a \"call\"; If the banker can’t make \"call\" any more and the sum of your cards is already larger than the banker\'s, you must choose not to take the card and this pound ends.\n\n(6) If both you and the banker choose not to take the card, or there is no card left, the banker wins this round if the sum of his card is not less than yours, otherwise you win this round.\n\nNow given N cards in order, one of the most valuable information that the engineers want to know is the number of rounds that you can win at most, could you help them?\n\n#### Input\nThe first line of input will be a positive integer T<=15, T test cases follow.\n\nFor each case, there will be two lines. The first line will be a positive integer N<=1000, representing the number of cards. Then N positive integers follow the next line, each number will be larger than D and less than 11, representing the value of the given N cards.\n\n#### Output\nFor each test case, output an integer on a single line, the number of rounds that you can win at most.\n#### Sample Input\n```\n2\n6\n10 10 7 3 2 3\n8\n1 1 1 1 10 10 1 1\n```\n\n#### Sample Output\n```\n1\n1\n```\n',1000,32768,'0',9,58,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('959','Westward Journey Online','#### Description\n\"Westward Journey\" is one of the most popular online games in China, which is developed and run by NIE. The game is based on the famous and romantic Chinese classical fiction \"Journey on the West” and the well-known film by Stephen Chow. The stony behind \"Westward Journey\" is fantasy and thus attracts many players.\n\nThe game contains many regions, and different regions are ruled by different dominators. One of the regions which named \"Tree World\" is now ruled by a monster. There are N castles in this region, and each of them has .its importance value (a positive integer not larger than 10^8). The castles are connected by (N-1) bidirectional roads. The roads make all the: castles connected (that means you can travel between any two castles of them). The importance values of the castles are variable. Now, the monster wants to know something if he destroys one of the roads. In detail, you are to handle totally Q instructions: each of them can be one of the following forms.\n\n{| border=\"2\" cellpadding=\"4\" cellspacing=\"0\" style=\"margin: 1em 1em 1em 0; background: #f9f9f9; border: 1px #aaa solid; border-collapse: collapse;\"\n|-\n! CHANGE i w\n! The importance value of i-th castle was changed to w (1<=w<= 10^8)\n|-\n| QUERY j\n| Ouput min1 * max1 + min2 * max2\n\nExplanations: The j-th road can divide the \"Tree World\" into two components, named part1 and part2. Here,\n\nmin1: the minimum importance value in part1;\n\nmax1: the maximum importance value in part1;\n\nmin2: the minimum importance value in part2;\n\nmax2: the maximum importance value in part2;\n\n|}\n\n#### Input\nThe first fine captains an integer T (T <= d), the number of test cases.\n\nFor each test case, the first line contains two integers N (2<=N<=100,000) and Q (1 <=Q<= 100,000), indicating the number of castles and instructions.\n\nThe following line contains N integers (positive integer not larger than 10^8), indicating the initial importance value of each castle (castles are numbered from 1 to N).\n\nThe following (N-1) lines each contains two integers a and v, indicating castle u and castle v are connected directly by a bidirectional road (the roads are numbered from 1 to N-1).\n\nThe following Q lines each contains an instruction according to the specification above.\n\n#### Output\nFor each \"QUERY\" instruction, output the result on a separate line.\n#### Sample Input\n```\n1\n5 3\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\nQUERY 1\nCHANGE 1 10\nQUERY 1\n```\n\n#### Sample Output\n```\n11\n110\n```\n',1000,32768,'0',9,59,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('96','P-Networks','#### Description\nPretty Networks Inc. is a company that builds some curious artifacts whose purpose is to\ntransform a set of input values in a given way. The transformation is determined by what they\ncall a p-network. The following picture shows an example of a p-network.\n[[Image:A95_1.jpg|center]]\nIn the general case, a p-network of order $$$N\\,$$$ and size $$$M\\,$$$, has N horizontal wires numbered\n$$$1\\,, 2\\,, . . .N\\,$$$, and $$$M\\,$$$ vertical strokes. Each stroke connects two consecutive wires. There are no\ntwo different strokes touching the same point of any wire, and there is no stroke touching the\nleftmost or rightmost point of any wire. The above example is a p-network of order 5 and size\n9.\nThe transformation determined by a p-network can be explained using a set of rules that\ngovern the way a p-network should be traversed:\n\n1. start at the leftmost point of one wire, and go to the right;\n\n2. each time a stroke appears move to the connected wire, and keep going from left to right;\n\n3. stop when the rightmost point of one wire is reached.\nIf starting at wire i the traversing ends at wire j, we say that the p-network transforms i into\nj, and we denote this with $$$i \\rightarrow  j$$$. In the above example the p-network determines the set of\ntransformations\n$$$\\{1 \\rightarrow  3, 2 \\rightarrow  5, 3 \\rightarrow  4, 4 \\rightarrow  1, 5 \\rightarrow  2\\}$$$ .\nPretty Networks Inc. hired you to solve the following p-network design problem: given a\nnumber N and a set of transformations $$$\\{1 \\rightarrow  i\\,_{1}, 2 \\rightarrow  i\\,_{2}, . . . N \\rightarrow  i\\,_{N}\\},$$$ decide if a p-network\nof order N can be built to accomplish them and, in this case, give one that does it.\nWhen there exists a solution with a certain size, in many cases there is another solution\nwith a greater size. Scientists at Pretty Networks Inc. have stated that if there exists a solution\nfor a p-network design problem, then there is a solution with size less than $$$4N^{2}\\,$$$. Therefore,\nthey are interested only in solutions having a size below this bound.\n\n#### Input\nThe input has a certain number of p-network design problems. Each problem is described in\njust one line that contains the values $$$N\\,, i_{1}, i_{2}, . . . i_{N}$$$, separated by a single blank space. The\nvalue N is the order of the desired p-network, i.e., its number of wires $$$(1 \\leq N \\leq 20)$$$. The\nvalues $$$i\\,_{1}, i\\,_{2}, . . . i\\,_{N}$$$ represent that the p-network should determine the set of transformations\n$$$\\{1 \\rightarrow  i_{1}, 2 \\rightarrow  i_{2}, . . . N \\rightarrow  i_{N}\\}$$$ $$$(1 \\leq i_{j} \\leq N$$$, for each $$$1 \\leq j \\leq N)$$$. The input ends with a line\nin which $$$N\\, = 0$$$; this line must not be processed as a p-network design problem.\n\n#### Output\nFor each p-network design problem in the input, the output must contain a single line. If the\nproblem has no solution the line must be No solution. Otherwise the line must contain a\ndescription of any p-network (with $$$N\\,$$$ wires and less than $$$4N^{2}\\,$$$ strokes) that accomplishes the\nrequested set of transformation. This description is given by a set of values $$$M\\,, s\\,_{1}\\,, s\\,_{2}\\,, . . . s\\,_{M}\\,$$$,\nwhere consecutive values are separated by a single blank space. The value $$$M\\,$$$ is the size of\nthe p-network, i.e., its number of strokes. The values$$$ s\\,_{1}\\,, s\\,_{2}\\,, . . . s\\,_{M}\\,$$$ describe the strokes of the\np-network; it should be understood that the i-th stroke from left to right, connects the wires\nsi and $$$1\\, +\\, si\\,$$$ $$$(1 \\leq i \\leq M)$$$. Notice that $$$0 \\leq M < 4N^{2}\\,$$$, while $$$1 \\leq si < N$$$ for each $$$1 \\leq i \\leq M$$$.\n\n#### Sample Input\n```\n5 3 5 4 1 2\n3 1 1 3\n2 1 2\n2 1 2\n0\n```\n\n#### Sample Output\n```\n9 1 3 2 4 1 3 2 3 4\nNo solution\n0\n2 1 1\n```\n',10000,32768,'0',0,95,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('960','Counting','#### Description\nRecently, Anthony learnt counting. He took a paper and wrote down the sequential numbers from 1 to 10^n-1. For example, if n=2, he wrote:\n\n    \"123456789101112131415...9899\"\n\nIn this string, digit 1 appears 20 times, while digit 0 appears 9 times. To calculate the number of occurrences of a digit is an easy task for Anthony.\n\nHe is studying in a more complicate task: to calculate the number of occurrences of the number m which may be larger than 9. For example, if n=2 and m=78, 78 appears 3 times at “12345678…777879…868788...99”.\n\n#### Input\nInput contains several cases(less than 2000 cases).\n\nEach case contains 2 integers n and m(1 <=n<=15, 1 <=m< 1 000 000).\n\nInput is terminated by two single zeros: \"0 0”.\n\n#### Output\nOutput one integer for each case, representing the total number.\n\n#### Sample Input\n```\n2 1\n2 10\n2 11\n2 78\n0 0\n```\n\n#### Sample Output\n```\n20\n1\n2\n3\n```\n',1000,32768,'0',9,60,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('961','Uncle Hey','#### Description\nThe annual GaoDaoKuOI (GDKDI), an interesting programming contest, was held several weeks ago. Untie Hey had been supposed to be a judge, but turned out to be a scheduler, which annoyed him very much. What\'s going on?\n\nDuring the contest, contestants might want to go out for a break. (Don\'t ask why they have such a privilege. They do have anyway) However, it is not allowed that two or more contestants went out together. So, they had to go one by one, that is, First Come First Served. In case that two or more contestants posted their requests at the same time, you could safely assume that the one with the lexicographically smaller name came earlier.\n\nIt\'s an annoying job, isn\'t it? So, Uncle Hey warts to share the annoyance with you guys here.\n\nGiven the record of all requests like this:\n\nT1 C1 D1\n\nT2 C2 D2\n\n…\n\nTn Cn Dn\n\nEach line describes a request, where不represents the posting time of the request, and Ci represents the name of the contestant who posted the request, and Di means how long will it take for he/she to go out and come back. Note that, requests are given in no order.\nYou\'re supposed to report all events like this: \"xxx went out at time yyy\" (quotes for clarity). Where xxx represents the name of the contestant and yyy is the time when he/she was permitted to go. You should print the events in the non-decreasing order of the happening time. Please refer to the sample for more information.\n\n#### Input\nFirst line contains，integer M (M<= 6), indicating the number of test cases.\n\nEach test case is in the format like this:\n\nFirst tames a positive integer N (N<=10 000), indicating the number of requests. Then N lines follows. Each line contains a positive integer T, a string C and a positive integer D, representing a request. T<=10 000 000, D<=1000, C contains no more than 20 lowercase letters.\nIt\'s guaranteed that there are no two requests share a same name.\n\n\n#### Output\nFor each test case, print all events in the order described as above, one event per line. Print a blank line after each test ease.\n#### Sample Input\n```\n2\n1\n10 lq 5\n2\n10 lq 5\n5 wing 6\n```\n\n#### Sample Output\n```\nlq went out at time 10\n\nwing went out at time 5\nlq went out at time 11\n\n```\n',1000,32768,'0',9,61,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('962','Anniversary party','#### Description\nThere is going to be a party to celebrate the 80-th Anniversary of the Ural State University. The University has a hierarchical structure of employees. It means that the supervisor relation forms a tree rooted at the rector V. E. Tretyakov. In order to make the party funny for every one, the rector does not want both an employee and his or her immediate supervisor to be present. The personnel office has evaluated conviviality of each employee, so everyone has some number (rating) attached to him or her. Your task is to make a list of guests with the maximal possible sum of guests\' conviviality ratings.\n\n\n#### Input\nEmployees are numbered from 1 to N. A first line of input contains a number N. 1 <= N <= 6 000. Each of the subsequent N lines contains the conviviality rating of the corresponding employee. Conviviality rating is an integer number in a range from -128 to 127. After that go T lines that describe a supervisor relation tree. Each line of the tree specification has the form: \nL K \nIt means that the K-th employee is an immediate supervisor of the L-th employee. Input is ended with the line \n0 0 \n\n#### Output\nOutput should contain the maximal sum of guests\' ratings.\n\n#### Sample Input\n```\n7\n1\n1\n1\n1\n1\n1\n1\n1 3\n2 3\n6 4\n7 4\n4 5\n3 5\n0 0\n```\n\n#### Sample Output\n```\n5\n```\n\n',1000,65536,'0',9,62,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('963','括号匹配检验','#### Notice\n<strong>\n1、请一定提交代码，不管AC与否<br>\n2、请不要提交雷同代码，不要拿别人代码做文字替换<br>\n</strong>\n\n#### Description\n在处理表达式过程中需要对括号匹配进行检验，括号匹配包括三种：“(”和“)”，“[”和“]”，“{”和“}”。例如表达式中包含括号如下：\n```\n(	)	[	(	)	(	[	]	)	]	{	}\n1	2	3	4	5	6	7	8	9	10	11	12\n```\n从上例可以看出第1和第2个括号匹配，第3和第10个括号匹配，4和5匹配，6和9匹配，7和8匹配，11和12匹配。从中可以看到括号嵌套的的情况是比较复杂的，使用堆栈可以很方便的处理这种括号匹配检验，可以遵循以下规则：\n\n1、	当接收第1个左括号，表示新的一组匹配检查开始；随后如果连续接收到左括号，则不断进堆栈。\n\n2、	当接受第1个右括号，则和最新进栈的左括号进行匹配，表示嵌套中1组括号已经匹配消除\n\n3、	若到最后，括号不能完全匹配，则说明输入的表达式有错\n\n#### Input\n第一行输入一个t，表示下面将有t组测试数据。接下来的t行的每行输入一个表达式，表达式只考虑英文半角状态输入，无需考虑中文全角输入\n#### Output\n对于每一行的表达式，检查括号是否匹配，匹配则输入ok，不匹配则输出error \n#### Sample Input\n```\n2\n(a+b)[4*5+(-6)]\n[5*8]/{(a+b)-6\n```\n\n#### Sample Output\n```\nok\nerror\n```\n',1000,32768,'0',9,63,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('964','数制转换','#### Description\n对于任意十进制数转换为k进制，包括整数部分和小数部分转换。\n整数部分采用除k求余法，小数部分采用乘k取整法\n例如x=19.125，求2进制转换\n```\n整数部分19，					小数部分0.125\n19 / 2 = 9 … 1					0.125 * 2 = 0.25 … 0\n9 / 2 = 4 … 1					0.25 * 2 = 0.5   … 0\n4 / 2 = 2 … 0 					0.5 * 2 = 1     … 1\n2 / 2 = 1 … 0\n1 / 2 = 0 … 1\n```\n所以整数部分转为 10011，小数部分转为0.001，合起来为10011.001\n请用堆栈实现上述数制转换\n\n#### Input\n第一行输入一个t，表示下面将有t组测试数据。接下来的t行的每行包含两个参数n（0<n<10000，且最多有8位小数）和k（1<k<=16），n表示要转换的数值，n可以带小数（也可以不带！），k表示要转换的数制，k必须是正整数。大于10的进制数据用A\\B\\C\\D\\E\\F表示\n\n#### Output\n对于每一组测试数据，每行输出转换后的结果，小数部分大于8位的，只输出前8位小数。\n\n#### Sample Input\n```\n2\n19.125 2\n15.125 16\n```\n\n#### Sample Output\n```\n10011.001\nF.2\n```\n',1000,32768,'0',9,64,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('965','组队列','#### News\n今天是ACM世界final的比赛，下面是board，有兴趣的关注一下...\nhttp://icpc.baylor.edu/scoreboard/\n\n#### Description\n组队列是队列结构中一种常见的队列结构，在很多地方有着广泛应用。组队列是是指队列内的元素分组聚集在一起。组队列包含两种命令：\n\n1、	ENQUEUE，表示当有新的元素进入队列，首先会检索是否有同一组的元素已经存在，如果有，则新元素排在同组的最后，如果没有则插入队列末尾。\n\n2、	DEQUEUE，表示队列头元素出队\n\n3、	STOP，停止操作\n\n#### Input\n第1行输入一个t(t<=10)，表示1个队列中有多少个组\n第2行输入一个第1组的元素个数和数值\n第3行输入一个第2组的元素个数和数值，以此类推\n输入完n组之后，开始输入多个操作命令(<200)，例如输入ENQUEUE 100，表示把元素100插入队列\n最后输入STOP，表示输入命令结束\n\n#### Output\n经过命令操作后队列的最终结果\n#### Sample Input\n```\n2\n3 101 102 103			\n3 201 202 203\nENQUEUE 101\nENQUEUE 201\nENQUEUE 102\nENQUEUE 202\nENQUEUE 103\nENQUEUE 203\nDEQUEUE\nDEQUEUE\nDEQUEUE\nSTOP\n```\n\n#### Sample Output\n```\n201 202 203\n```\n',1000,32768,'0',9,65,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('966','test','',10000,32768,'0',9,66,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('967','迷宫求解','#### Description\n迷宫求解一般采用“穷举法”，逐一沿顺时针方向查找相邻块（一共四块－东(右)、南(下)，西(左)、北(上)）是否可通，即该相邻块既是通道块，且不在当前路径上。用一个栈来记录已走过的路径\n#### Input\n第一行输入一个整数n(2<n<20)，表示一个n×n格的迷宫，行和列都从0开始编号到n-1，第（0，0）为起点，第(n-1，n-1)格为终点\n第二行起输入每行n个格是空白还是有障碍，空白为0，有障碍为1，注意第（0，0）和第(n-1，n-1)格必然是0\n输入n行\n\n#### Output\n如果找到路径，则输出路径的结点坐标，否则输出noway。每个坐标用一行表示，每一行包含两个数字，表示该坐标，以空格作为分隔符。\n\n#### Sample Input\n```\n4\n0 0 0 1\n0 1 0 0\n0 0 1 0\n0 1 0 0\n```\n\n#### Sample Output\n```\n0 0 \n0 1 \n0 2 \n1 2 \n1 3 \n2 3 \n3 3\n```\n',1000,32768,'0',9,67,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('968','员工培训','#### Description\n某企业将挑选一批新员工进行培训，遵循以下规则：\n1、将所有员工排成1个圈，从12点位置开始编号为1，反时钟方向编号到N，第N号员工在第1号的左手边\n2、两位培训官开始选择员工，培训官甲从1号开始逆时钟方向数，数到第k号员工停下；培训官乙从N号开始顺时钟方向数，数到第m号员工停下\n3、被选中的第k号和第m号员工不是同一人，两人同时送往制造培训\n4、被选中的第k号和第m号员工是同一人，将一人送往检测培训\n5、接着继续往下数，培训官甲同样数到k就停止，培训官乙同样数到m就停止，重复上述的选择\n\n#### Input\n在一行输入一个3个整数n、k、m，其中6<n<100，1<k<10，1<m<10，三个参数互不相等，分别表示n个员工，培训官甲每次数k个，培训官乙每次数m个\n\n#### Output\n请用队列实现上述选择，并按选择顺序每行分别输出先甲后乙的选择结果\n#### Sample Input\n```\n10 4 3\n```\n\n#### Sample Output\n```\n4 8\n9 5\n3 1\n2 6\n10\n7\n```\n',1000,32768,'0',9,68,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('969','二叉树遍历','#### Notice Again\n<strong>\n1、请一定提交代码，不管AC与否...<br>\n2、请不要提交雷同代码，不要拿别人代码做文字替换！！！<br>\n</strong>\n#### Description\n给定一颗二叉树的逻辑结构如下图，（先序遍历的结果，空树用字符‘0’表示，例如AB0C00D00），建立该二叉树的二叉链式存储结构，并输出该二叉树的先序遍历、中序遍历和后序遍历结果\n[[File:Biotree1.jpg]]\n\n#### Input\n第一行输入一个整数t，表示有t个测试数据\n第二行起输入每个二叉树的先序遍历，连续输入t行\n\n#### Output\n输出每个二叉树的先序遍历、中序遍历和后序遍历结果\n#### Sample Input\n```\n2\nAB0C00D00\nAB00C00\n```\n\n#### Sample Output\n```\nABCD\nBCAD\nCBDA\nABC\nBAC\nBCA\n\n```\n',1000,32768,'0',9,71,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('97','Light Up','#### Description\nLight Up is a puzzle set in a rectangular board divided in smaller squares. Some squares in the\nboard are “empty” (white squares the figure below), some squares are “barriers” (dark squares\nin the figure below). A barrier square may have an integer number i associated to it $$$(0 \\leq i \\leq 4).$$$\n[[Image:A96_1.jpg|center]]\nFigure 2: (a) Puzzle with 6 rows, 7 columns and 7 barriers; (b) a solution to the puzzle.\nIn this puzzle the goal is to “light up” all the empty squares by placing lamps in some of\nthem (lamps are depicted as circles in the figure). Each lamp illuminates the square it is on,\nplus all squares in line with it, horizontally or vertically, up to a barrier square or the board\nend.\n\nA winning configuration satisfies the following conditions:\n\n• all empty squares must be lit;\n\n• no lamp may be lit by another lamp;\n\n• all numbered barrier squares must have exactly that number of lamps adjacent to them\n(in the four squares above, below, and to the side);\n\n• non-numbered barrier squares may have any number of lamps adjacent to them.\n\nYou must write a program to determine the smallest number of lamps that are needed toreach a winning configuration.\n\n#### Input\nInput\nThe input contains several test cases. The first line of a test case contains two integers $$$N\\,, M\\,$$$\nindicating respectively the number of rows and the number of columns of the board $$$(1 \\leq N\\leq7,$$$\n$$$1 \\leq M \\leq 7).$$$ The second line contains one integer $$$B\\,$$$ indicating the number of barrier squares\n$$$(0 \\leq B\\leq $$$  $$$ N\\,$$$ × $$$M\\,)$$$. Each of the next $$$B\\,$$$ lines describe a barrier, containing three integers\n$$$R\\,, C\\, and\\, K\\,$$$, representing respectively the row number ($$$1\\leq R \\leq N),$$$ the column number\n$$$(1\\leq C\\leq M)$$$ and the barrier number $$$(-1 \\leq K\\leq 4);$$$ $$$K\\, = -1$$$ means the barrier is unnumbered.\nThe end of input is indicated by $$$N\\, = M\\, = 0$$$.\n\nThe input must be read from standard input.\n\n#### Output\nFor each test case in the input your program must produce one line of output, containing either\nan integer indicating the smallest number of lamps needed to reach a winning configuration, in\ncase such a configuration exists, or the words ‘No solution’.\nThe output must be written to standard output.\n\n#### Sample Input\n```\n2 2\n0\n2 2\n1\n2 2 1\n6 7\n7\n2 3 -1\n3 3 0\n4 2 1\n5 4 3\n5 6 2\n1 7 -1\n6 5 -1\n0 0\n```\n\n#### Sample Output\n```\n2\nNo solution\n8\n```\n',10000,32768,'0',0,96,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('970','括号二叉树','#### Description\n对一颗二叉树的逻辑结构采用括号进行描述，例如下图的先序遍历结果，采用括号描述为：\n\n(5 (4 (11 (7 () ()) (2 () ()) ) ()) (8 (13 () ()) (4 () (1 () ()) ) ) )\n\n空树用“()”表示，结点中的数值为自然数且小于100\n在二叉树中，每条路径是指从根结点到叶子结点的完整路径，例如下图中共有4条路径，每条路径权值等于路径上所有结点的数值总和，从图中可以算出\n\n路径1权值=5 + 4 + 11 + 7 = 27\n\n路径2权值=5 + 4 + 11 + 2 = 22\n\n路径3权值=5 + 8 + 13 = 26	\n\n路径4权值=5 + 8 + 4 + 1 = 18\n\n从而得出最小路径权值为18\n\n\n[[File:BioTree2.jpg]]\n\n#### Input\n第一行输入二叉树先序遍历的结果，用括号描述方式\n#### Output\n第一行输出二叉树后序遍历的结果，用常规数字表示即可\n第二行输出二叉树的最小路径权值，如果有重复，只输出1个权值即可\n\n#### Sample Input\n```\n(5 (4 (11 (7 () ()) (2 () ()) ) ()) (8 (13 () ()) (4 () (1 () ()) ) ) )\n```\n\n#### Sample Output\n```\n7 2 11 4 13 1 4 8 5\n18\n\n```\n',1000,32768,'0',9,70,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('971','英语回文串','#### Description\n英语单词中有一些单词，反过来拼写是一样的，比如： bob, level, refer….等等，就像汉语里面的回文（顺读和倒读都一样的词语，如：圈圈圆圆圈圈，上海自来水来自海上，山东落花生花落东山…等等），请使用堆栈来实现判断一个英文单词是否为回文（palindrome），假设最长的英文单词不超过50个字母，不区分大小写。\n\n#### Input\n第一行输入一个t，表示下面将有t组测试数据。接下来的t行的每行输入一个英文单词，单词只考虑英文半角状态输入，无需考虑中文全角输入\n#### Output\n如果单词是回文，输出Palindrome，否则输出Not palindrome \n\n#### Sample Input\n```\n2\nNoon\nMoon\n```\n\n#### Sample Output\n```\nPalindrome\nNot palindrome\n```\n',1000,32768,'0',9,69,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('972','舞伴配对','#### Description\n周末舞会上，男士们和女士们进入舞厅时，各自排成一队。跳舞开始时，依次从男队和女队的队头上各出一人配成舞伴。若两队初始人数不相同，则较长的那一队中未配对者等待下一伦舞曲。下一轮舞曲由上一轮未配对者优先选配舞伴，依次轮换。\n例如：舞会来了8位男士：编号依次1,2, 3,…,8;  5位女士：编号依次为1,2,3,4,5.\n第一轮舞曲： 1122334455（男士邀请女士带其跳舞，男士编号在前，女士在后）\n第二轮舞曲： 6172831425（由于第一轮6、7、8没跳，第二轮优先选配舞伴）\n第三轮舞曲： 3142536475（依次轮换，配对舞伴）\n……\n\n#### Input\n第一行输入男女舞伴人数m、n和舞曲数k，其中m、n、k都是自然数，且1<m，n，k<100\n#### Output\n逐行输出每轮舞曲配对编号\n#### Sample Input\n```\n4 6 3\n\n```\n\n#### Sample Output\n```\n11223344\n15263142\n13243546\n\n```\n',1000,32768,'0',9,73,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('973','二叉树搜索','#### Description\n给出一棵二叉树的先序遍历，0表示孩子为空， 用递归方法建立一颗字符二叉树，并按中序遍历输出二叉树，以及该树的叶子节点。\n#### Input\n第一行输入一课二叉树的先序遍历\n\n#### Output\n第一行输出中序遍历结果输出二叉树\n\n第二行输出该树的叶子节点\n\n#### Sample Input\n```\nABC00D00E0FG000 \n```\n\n#### Sample Output\n```\nCBDAEGF          \nCDG      \n\n```\n',1000,32768,'0',9,74,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('974','二叉树父子节点','#### Description\n给出一颗二叉树的中序遍历和后序遍历，编程输出它的叶子节点，以及它们的父节点 （若两个叶子节点同属于一个父节点，只输出一个即可）。\n#### Input\n第一行输入中序遍历结果\n\n第二行输入后序遍历结果\n\n#### Output\n第一行输出叶子节点\n\n第二行输出父亲节点\n\n#### Sample Input\n```\nBDCEAFHG\nDECBHGFA\n\n```\n\n#### Sample Output\n```\nDEH\nCG\n\n```\n',32768,32768,'0',9,72,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('975','逆序单词','#### Description\n对给定单词序列，逆序输出逆序后的单词\n#### Input\n第1行输入1个整数k(0<k<1000)，表示有k个单词\n从第2行起到第k+1行依次输入k个单词（单词长度<200）\n\n#### Output\n逆序依次输出k个单词，并且每行输出的单词是原词的逆序\n\n#### Sample Input\n```\n4\neloh\neht\nni\nerif\n\n```\n\n#### Sample Output\n```\nfire\nin\nthe\nhole\n\n```\n',1000,32768,'0',9,75,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('976','后缀表达式计算','#### Description\n对给定整数四则运算表达式的后缀表达式求值\n\n#### Input\n第1行输入1个整数k（0<k<1000），表示有k个表达式\n从第2行起到第k+1行，依次输入k个后缀表达式\n在后缀表达式中，输入数字（<1000）和运算符号间用空格隔开\n\n#### Output\n依次输出k行，每行是对表达式进行求值的结果。\n\n#### Sample Input\n```\n2\n1 2 + 3 * 1 – 4 /\n123 654 + 100 /\n\n```\n\n#### Sample Output\n```\n2\n7\n\n```\n',1000,32768,'0',9,76,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('977','便民服务','#### Description\n有一个便民服务站点，其工作时间从早上9点到下午17点，需要服务的市民到达站点后，排队接受服务，无插队和中途离队现象，假设站点为每个市民均服务5分钟，求到站市民每天的服务等待时间。\n\n#### Input\n先输入一个数字k（0<k<100），表示下面接下来是k天的市民到站情况记录\n接下来是1到第k天的市民到站情况，每天的情况记录格式如下，\n先是数字n(0<n<100)，表示这一天共有n个市民到站接受服务\n接下来是n个数字ni，0<ni<480，分别表示市民到站的时间距离早上9点的分钟数（如20，表示在9点20分到达服务站，479，表示在16：59分到达服务站）\n\n#### Output\n求每天市民的平均等待时间，保留4位小数\n\n提示：\n第1天没有人需要等待，平均等待时间=0；\n第2天9点时有4个人同时到站，则平均等待时间=（0+5+10+15）/4 =7.5\n\n#### Sample Input\n```\n2\n8 0 30 60 90 120 150 180 210\n4 0 0 0 0\n\n```\n\n#### Sample Output\n```\n0\n7.5\n\n```\n',1000,32768,'0',9,77,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('978','服务等待','#### Description\n有一个便民服务站点，其工作时间从早上9点到下午17点，需要服务的市民到达站点后，若发现排队人数<5人，则排队接受服务，否则离去。排队过程中无插队现象，求到站市民每天的服务等待时间。\n\n#### Input\n先输入一个数字k，表示下面接下来是k天的市民到站情况记录\n接下来是1到第k天的市民到站情况，每天的情况记录格式如下，\n先是数字n，表示这一天共有n个市民到站接受服务\n接下来是市民到站时间和完成市民所需服务时间，如9:00 10\n\n#### Output\n求每天放弃服务的市民人数和接受服务的市民平均等待时间，保留4位小数\n\n#### Sample Input\n```\n2\n8 9:00 5 9:30 10 10:00 15 10:30 20 11:00 25 11:30 30 12:00 35 12:30 40\n6 9:00 10 9:00 10 9:00 10 9:00 10 9:00 10 9:05 10\n\n```\n\n#### Sample Output\n```\n0 0.63\n1 20\n```\n\n提示：\n第1天没有人放弃服务，只有1名市民需等待5分钟，平均等待时间0.63\n第2天9:05时，队伍中已有5人，最后一个市民放弃服务离去，只有5名市民接受服务，平均等待时间=(0+10+20+30+40)/5 =20\n\n',1000,32768,'0',9,78,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('979','前缀转后缀','#### Description\n将给定四则运算前缀表达式转换成后缀表达式\n\n#### Input\n第1行输入1个整数k（0<k<1000），表示有k个表达式\n从第2行起到第k+1行，依次输入k个前缀表达式，操作数间用空格分开\n\n#### Output\n依次输出k行，每行是相应的后缀表达式\n\n#### Sample Input\n```\n2\n+ a * b 10\n+  + a b 10\n\n```\n\n#### Sample Output\n```\na b 10 * +\na b + 10 *\n\n```\n',1000,32768,'0',9,79,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('98','Biker’s Trip Odometer','#### Description\nMost bicycle speedometers work by using a Hall Effect sensor fastened to the front fork of the bicycle. A magnet is\nattached to one of the spokes on the front wheel so that it will line up with the Hall Effect switch once per revolution\nof the wheel. The speedometer monitors the sensor to count wheel revolutions. If the diameter of the wheel is\nknown, the distance traveled can be easily be calculated if you know how many revolutions the wheel has made. In\naddition, if the time it takes to complete the revolutions is known, the average speed can also be calculated.\nFor this problem, you will write a program to determine the total distance traveled (in miles) and the average speed\n(in Miles Per Hour) given the wheel diameter, the number of revolutions and the total time of the trip. You can\nassume that the front wheel never leaves the ground, and there is no slipping or skidding.\n\n#### Input\nInput consists of multiple datasets, one per line, of the form:\ndiameter revolutions time\nThe diameter is expressed in inches as a floating point value. The revolutions is an integer value. The\ntime is expressed in seconds as a floating point value. Input ends when the value of revolutions is 0 (zero).\n\n#### Output\nFor each data set, print:\n\nTrip #N: distance MPH\n\nOf course N should be replaced by the data set number, distance by the total distance in miles (accurate to 2\ndecimal places) and MPH by the speed in miles per hour (accurate to 2 decimal places). Your program should not\ngenerate any output for the ending case when revolutions is 0.\n\n#### Constants\n+ For p use the value: 3.1415927.\n+ There are 5280 feet in a mile.\n+ There are 12 inches in a foot.\n+ There are 60 minutes in an hour.\n+ There are 60 seconds in a minute.\n+ There are 201.168 meters in a furlong.\n\n#### Sample Input\n```\n26 1000 5\n27.25 873234 3000\n26 0 1000\n```\n\n#### Sample Output\n```\nTrip #1: 1.29 928.20\nTrip #2: 1179.86 1415.84\n```\n',10000,32768,'0',0,97,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('980','行编辑处理','#### Description\n在一个行编辑处理程序中，用户将输入一行字符。若用户输入有差错，可以用“#”表示退格符进行更正。\n\n请使用C++自带的stack栈进行编程。\n#### Input\n第一行输入一个t，表示下面将有t行字符，\n第二行起输入t行字符，若输入字符中有“#”，则删除“#”的前一个字符；若“#”之前无字符，则忽略不执行操作\n\n#### Output\n输出每一行最终的结果，如果结果为空则输出“NULL”\n\n#### Sample Input\n```\n3\nHello SS#henzhh#en\n1. Haha\n1. Hahaha1. 1. \n\n```\n\n#### Sample Output\n```\nHello ShenZhen\nHaha\nHaha\n```\n\n注意：第三个测试数据因为有两个连续##，所以执行了两次退格操作\n',1000,32768,'0',9,80,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('981','成组链接法','#### Description\n成组链接法是操作系统对磁盘管理的一种算法，它的设计规则如下：\n1、	将空闲盘块每N个组成一组，空闲盘块组的最后一个盘块存放下一个组的所有盘块号\n2、	使用1个空闲栈Empty存放当前可用的一组空闲盘块号，空闲栈每次只存放一组空闲盘块，使用1个变量L记录当前空闲栈存放多少个盘块\n本题将该算法进行简化，设定空闲栈长度为5，即它可以放5个盘块，另外设置2个堆栈fullA，fullB，每个数组长度为5，具体操作如下：\n1、	初始化，L=0，Empty=空，数组fullA和fullB都设成全0\n\n2、	回收操作，把盘块编号回收到堆栈中，每把1个盘块号压入栈，则L+1。当堆栈满了（即L>5），又有新的盘块要进入堆栈，按以下步骤执行\n     a)	把堆栈中所有盘块号按照堆栈顺序放入到数组fullA中\n     b)	清空堆栈，L=0；\n     c)	把新的盘块号压入堆栈\n     d)	若堆栈出现第二次满，则类似以上操作，把堆栈的盘块号放入到fullB中，不再考虑堆栈第三次满或其他情况，\n\n3、	分配操作，将盘块号从堆栈中取出，每取1个盘块号则L-1。当堆栈空（即L=0），还需要分配，按以下步骤执行\n    a)	检查fullA是否有盘块号，如果没有检查fullB，如果两个都没有，报错\n    b)	如果数组有盘块号，则把整个数组的数值按相反顺序拷贝到堆栈中，L=5，清空该数组为0\n   c)	从堆栈中取出1个盘块号，且L-1\n\n请使用C++自带的stack栈进行编程。\n\n#### Input\n一共输入三行\n\n第一行输入L和栈empty的内容，例如输入3 99 88 77，表示空闲栈有放着3个盘块号，从栈顶到栈底的顺序分别是99、88、77\n\n第二行输入要回收的盘块数目和盘块号，例如输入4 11 22 33 44，表示回收4个盘块，回收顺序是先11再22再33最后44，承接上行堆栈内容，执行如下：\n1、	回收了11和22后，堆栈满\n2、	堆栈内容拷贝fullA，fullA内容按顺序变成22 11 99 88 77\n3、	堆栈清空，接着回收33 44，则堆栈内容从栈顶到栈底的顺序分别是44 33，L=2\n\n第三行输入要分配的盘块数目，例如输入6，承接第二行回收后的状态执行：\n1、	分配44 33，堆栈空，L=0\n2、	检查fullA，有内容，把fullA的内容逆序拷贝到堆栈中，L=5\n3、	继续分配22 11 99 88，分配完毕，剩下堆栈内容为77，L=1\n\n#### Output\n一共输出7行\n\n第一行表示执行回收后L和堆栈内容\n\n第二行表示回收后fullA的内容\n\n第三行表示回收后fullB的内容，如果数组是空则输出1个0\n\n第四行表示执行分配后，输出分配的块号，按分配顺序输出\n\n第五行表示L和堆栈内容\n\n第六行表示分配后fullA的内容\n\n第七行表示分配后fullB的内容，如果数组是空则输出1个0\n\n注意，堆栈输出必须按栈顶到栈底顺序输出，数组从首元素开始输出，如果堆栈为空，输出1个0\n\n#### Sample Input\n```\n3 99 88 77\n4 11 22 33 44\n6\n```\n\n#### Sample Output\n```\n2 44 33\n22 11 99 88 77\n0\n44 33 22 11 99 88\n1 77\n0\n0\n\n```\n',1000,32768,'0',9,81,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('982','服务队列','#### Description\n假设银行有3个窗口面向顾客服务（编号为1、2、3），每个顾客到达的时间都不同，他们会选择队伍最短的窗口进行排队，如果两个窗口同样长，则选择编号小的窗口。\n顾客根据到达时间自动编号：1001，1002、1003以此类推 \n请根据每个顾客的到达时间进行排队，输出每个窗口的服务队列和首个顾客的开始服务时间，不考虑服务花费的时间，设定如果顾客到达并排队轮到他就可以立即服务\n\n#### Input\n第一行输入顾客数量m，m是自然数且3<m<=1000\n\n第二行输入顾客的到达时间\n\n#### Output\n按窗口编号顺序，输出四个窗口服务队列的顾客编号，并输出首个顾客的开始服务时间和最后一个顾客的开始服务时间，每个窗口一行\n\n#### Sample Input\n```\n9\n9 11 22 33 44 55 66 88 99\n\n```\n\n#### Sample Output\n```\n1001 1004 1007 9 66\n1002 1005 1008 11 88\n1003 1006 1009 22 99\n\n```\n\n从输入数据可以看出，第9秒到达的顾客编号为1001，第11秒到达的顾客编号为1002，以此类推，第99秒到达的顾客编号为1009\n\n从输出数据可以看出，1001 1004 1007三个顾客排在窗口1，1001是首个顾客，1007最后1个顾客，所以分别输出他们的到达时间9和66，以此类推\n',1000,32768,'0',9,82,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('983','多级反馈调度队列','#### Description\n\n多级反馈调度队列是任务调度的一种常用算法，本题将实现简化版的多级反馈调度队列，不考虑CPU抢占和任务中断的情况。具体设计规则如下：\n1、	设置三级队列I、II、III，各级队列的时间片长度为4、8、16\n2、	每个任务包含两个时间属性，到达时间和运行时间，每个任务到达后首先进入I级队列\n\n操作系统执行任务的策略如下：\n1、	检索I级队列，如果队列中有任务，则按顺序取出任务执行，否则查找II级队列，再查找III级队列\n2、	当1个任务分配到CPU后，将执行所在队列的1个时间片，如果它能完成则立刻退出，如果未完成，将降级到下一级队列。\n3、	1个任务在执行过程，不能中断，必须等时间结束或它已执行完，才能选择下一个任务。\n4、	假设每个任务最大时间长度不超过28，而且每个任务在完成后立刻执行下一个任务，忽略中途的调度时间\n\n请使用C++自带的queue队列进行编程。\n\n#### Input\n第一行输入任务数量t，系统给每个任务自动编号1001、1002、1003依此类推\n\n第二行输入每个任务的到达时间a，a是自然数\n\n第三行输入每个任务的到达时间b，b是自然数且 b<29\n\n#### Output\n第一行按执行顺序输出任务编号\n\n第二行按执行顺序输出每个任务的完成时间\n\n#### Sample Input\n```\n4\n5 9 15 22\n8 22 13 6\n\n```\n\n#### Sample Output\n```\n1001 1004 1002 1003\n17 43 53 54\n\n```\n\n解释：从输入可以看出四个任务\n编号1001任务到达为5，需要运行8；编号1002任务到达为9，需要运行22；编号1003任务到达为15，需要运行13；编号1004任务到达为22，需要运行6\n执行过程如下：\n\n05-09秒，1001在I级执行4秒，未完成，下降到II级队列，1002在第9秒到达\n\n09-13秒，1002在I级执行4秒，未完成，下降到II级队列，无新任务到达\n\n13-17秒，1001在II级执行4秒，完成退出，任务1003在第15秒到达\n\n17-21秒，1003在I级执行4秒，未完成，下降到II级队列，无新任务到达\n\n21-29秒，1002在II级执行8秒，未完成，下降到III级队列，1004已到达 \n\n29-33秒，1004在I级执行4秒，未完成，下降到II级队列\n\n33-41秒，1003在II级执行8秒，未完成，下降到III级队列\n\n41-43秒，1004在II级执行2秒，完成退出\n\n43-53秒，1002在III级执行10秒，完成退出\n\n53-54秒，1003在III级执行1秒，完成退出\n\n\n',1000,32768,'0',9,83,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('984','最大二叉树叶子','#### Description\n给定一颗二叉树的先序遍历结果，空树用字符‘0’表示，例如AB0C00D00建立该二叉树的二叉链式存储结构，见下图。每个结点都有编号和权值，编号用A\\B\\C\\D等字母表示，权值用自然数表示，找出权值最大的叶子，输出它的编号。如果两个权值相等，输出字母编号最小的叶子。\n\n[[File:Biotree1.jpg]]\n\n#### Input\n第一行输入二叉树的先序遍历结果，最多26个结点\n\n第二行输入每个结点的权值，按字母表的字母顺序输入权值\n\n#### Output\n输出权值最大的叶子编号\n\n#### Sample Input\n```\nAB0C00D00\n8 10 12 6\n\n```\n\n#### Sample Output\n```\nC\n\n```\n',1000,32768,'0',9,84,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('985','二叉树的左孩子','#### Description\n给定一颗二叉树的先序遍历结果，空树用字符‘0’表示，例如AB0C00D00建立该二叉树的二叉链式存储结构，见下图。每个结点都有编号，编号用A\\B\\C\\D等字母表示，判断二叉树包含多少个左孩子。\n\n[[File:Biotree1.jpg]]\n\n#### Input\n第一行输入二叉树的先序遍历结果，最多26个结点\n\n#### Output\n输出树包含的左孩子数目\n\n#### Sample Input\n```\nAB0C00D00\n\n```\n\n#### Sample Output\n```\n1\n\n```\n\n分析，建立二叉树后进行遍历（可采用先序遍历），判断哪些结点是左孩子。如图可以判断出B是左孩子，所以数目为1，输出1 \n',1000,32768,'0',9,85,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('986','行编辑程序','#### Description\n一个简单的行编辑程序的功能是：接受用户从终端输入的程序或数据，并存入用户的数据区。\n由于用户在终端上进行输入时，不能保证不出差错，因此，若在编辑程序中，“每接受一个字符即存入用户数据区”的做法显然不是最恰当的。较好的做法是，设立一个输入缓冲区，用以接受用户输入的一行字符，然后逐行存入用户数据区。允许用户输入出差错，并在发现有误时可以及时更正。例如，当用户发现刚刚键入的一个字符是错的时，可补进一个退格符\"#\"，以表示前一个字符无效。当然，如果前面没有字符，这个退格键无效。\n\n#### Input\n第一行为组数T\n接下来每行输入一行的字符序列\n字符总数（包含退格符和退行符）不大于250\n\n#### Output\n行编辑的结果\n每组测试一行\n\n#### Sample Input\n```\n1\nwhli##ilr#e(s#*s) putchar(*s=#++);\n\n```\n\n#### Sample Output\n```\nwhile(*s) putchar(*s++);\n\n```\n',1000,32768,'0',9,86,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('987','表达式中缀转后缀','#### Description\n\n如果你不熟悉表达式的表示方式，见下面的内容。如果你比较熟悉这些内容，跳过。\n\n表达式表示法\n算术表达式中最常见的表示法形式有 中缀、前缀和 后缀表示法。中缀表示法是书写表达式的常见方式，而前缀和后缀表示法主要用于计算机科学领域。\n\n中缀表示法 \n中缀表示法是算术表达式的常规表示法。称它为 中缀表示法是因为每个操作符都位于其操作数的中间，这种表示法只适用于操作符恰好对应两个操作数的时候（在操作符是二元操作符如加、减、乘、除以及取模的情况下）。对以中缀表示法书写的表达式进行语法分析时，需要用括号和优先规则排除多义性。\nSyntax: operand1 operator operand2\nExample: (A+B)*C-D/(E+F)\n\n前缀表示法 \n前缀表示法中，操作符写在操作数的前面。这种表示法经常用于计算机科学，特别是编译器设计方面。为纪念其发明家 ― Jan Lukasiewicz（波兰人），这种表示法也称 波兰表示法。\nSyntax  : operator operand1 operand2\nExample : -*+ABC/D+EF\n\n后缀表示法 \n在后缀表示法中，操作符位于操作数后面。后缀表示法也称 逆波兰表示法（reverse Polish notation，RPN），因其使表达式求值变得轻松，所以被普遍使用。\nSyntax  : operand1 operand2 operator\nExample : AB+C*DEF+/-\n\n表达式之间的转换\n\n1)中缀－>前缀，用栈\n2）中缀－>后缀，用栈\n3) 前缀－>中缀，用表达式树\n4) 前缀－>后缀，用表达式树\n5) 后缀－>中缀，用表达式树\n6) 后缀－>前缀，用表达式树\n\n中缀表达式到后缀表达式的转换\n要把表达式从中缀表达式的形式转换成用后缀表示法表示的等价表达式，必须了解操作符的优先级和结合性。 优先级或者说操作符的强度决定求值顺序；优先级高的操作符比优先级低的操作符先求值。 如果所有操作符优先级一样，那么求值顺序就取决于它们的 结合性。操作符的结合性定义了相同优先级操作符组合的顺序（从右至左或从左至右）。\nLeft associativity  : A+B+C = (A+B)+C\nRight associativity : A^B^C = A^(B^C)\n\n转换过程包括用下面的算法读入中缀表达式的操作数、操作符和括号：\n1. 如果读到一个操作数时，立即将它放到输出中。\n2. 如果读到左圆括号，则将其推入栈中。\n3. 如果读到操作符，首先要判断堆栈中的操作符与当前操作的优先级。如果此时栈顶操作符的优先级小于此操作符的优先级或者栈顶操作符为左括号，则将此操作符入栈；如果此时栈顶操作符的优先级大于或等于此操作符的优先级，弹出栈顶操作符并放到输出中，如此循环，直到遇到栈中优先级更低的元素或者左括号时，才将此操作符入栈。操作符中，+-优先级最低，*/优先级居中，（）优先级最高。\n4.如果遇到一个右括号，那么就将栈中的元素弹出并输出。直到遇到一个对应的左括号。但是这个左括号只被弹出，并不输出。\n5.在读到操作符时，除了处理）的时候，否则决不从栈中移走\"（\"。\n6. 如果读到输入的末尾，将栈元素弹出直到该栈变成空栈，将符号写到输出中。\n\n#### Input\n输入中缀表达式，操作数都只有一个字符\n\n#### Output\n相应的后缀表达式。\n\n#### Sample Input\n```\na+b*c-(d*e+f)*g\n\n```\n\n#### Sample Output\n```\nabc*+de*f+g*-\n\n```\n',1000,32768,'0',9,87,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('988','打印缓冲队列','#### Description\n缓冲队列经常用于解决两个设备在传输数据时的速度不匹配问题\n　　以主机和打印机为例来说明，主机输出数据给打印机打印，主机输出数据的速度比打印机打印的速度要快得多，若直接把输出的数据送给打印机打印，由于速度不匹配，显然是不行的。所以解决的方法是设置一个打印数据缓冲区，主机把要打印输出的数据依此写如到这个缓冲区中，写满后就暂停输出，继而去做其它的事情，打印机就从缓冲区中按照先进先出的原则依次取出数据并打印，打印完后再向主机发出请求，主机接到请求后再向缓冲区写入打印数据，这样利用队列既保证了打印数据的正确，又使主机提高了效率。\n\n#### Input\n先输入一个数字k（0<k<100），表示下面接下来是k个打印任务\n接下来是1到第k个的任务的达到情况，每次的情况记录格式如下: 先是数字n(0<n<100)，表示该任务的到达时间，比如1，表示该任务在第1分钟到达，比如90表示该任务在第90分钟到达. 然后是一个字符串，表示该打印任务需要打印的字符序列.\n最后是一个数字m，表示要输出该时刻的情况\n\n#### Output\n输出m时刻打印机打印前的队列中的内容（假设打印机以每分钟1个字符的速度从队列头取出字符。如果队列为空，则打印机不打印任何内容。队列输入需要1分钟的时间，也即队列输入到可以打印需要1分钟的时间。）如果队列为空，则输出“queue is empty！”\n\n#### Sample Input\n```\n2\n8 Hello World!\n10 No Problem.\n12\n\n\n```\n\n#### Sample Output\n```\nlo World!No Problem.\n```\n\n说明：从第8分钟开始任务输入到打印队列中，则从第9分钟开始打印机开始打印。第9分钟打印H，第10分钟打印e，第11分钟打印l，所以第12分钟队列里还剩下lo World!No Problem.注意空格、标点符号等也算一个字符。打印机在第12分钟会打印l。\n',1000,32768,'0',9,88,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('989','优先队列','#### Description\n某系统根据作业重要性进行排队，用1-99表示优先级，数字越大就越排在前面。有时候可能有新作业插队。作业包括一个字母的作业名和一个作业优先级。\n根据优先级，当前作业排队为A98、c56、a37、f12、g8、h8、a7、A7…….h1、i1\n如果新作业为i26，则该作业优先级为26，排队为A98、c56、a37、i26、f12、g8、h8、a7、A7…….h1、i1\n如果新作业优先级与旧作业一样，那就排在相同优先级的作业最后\n例如新作业r8，优先级为8，则排队为A98、c56、a37、i26、f12、g8、h8、r8、a7、A7…….h1、i1\n\n#### Input\n第一行输入表示当前作业排队\n第二行输入一个t，表示下面将有t组测试数据。\n第三行开始输入t个作业\n\n#### Output\n输出新的作业排队,作业之间以一个空格隔开,最后一个作业后面没有空格!\n\n#### Sample Input\n```\nA98 c56 a37 h12 i8 j8 r7 a7\n2\na12\nc2\n\n```\n\n#### Sample Output\n```\nA98 c56 a37 h12 a12 i8 j8 r7 a7 c2\n\n```\n',1000,32768,'0',9,89,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('99','Candy Sharing Game','#### Description\nA number of students sit in a circle facing their teacher in the center. Each student initially has an even number of\npieces of candy. When the teacher blows a whistle, each student simultaneously gives half of his or her candy to the\nneighbor on the right. Any student, who ends up with an odd number of pieces of candy, is given another piece by\nthe teacher. The game ends when all students have the same number of pieces of candy.\nWrite a program which determines the number of times the teacher blows the whistle and the final number of pieces\nof candy for each student from the amount of candy each child starts with.\n#### Input\nThe input may describe more than one game. For each game, the input begins with the number N of students,\nfollowed by N (even) candy counts for the children counter-clockwise around the circle. The input ends with a\nstudent count of 0. Each input number is on a line by itself.\n#### Output\nFor each game, output the number of rounds of the game followed by the amount of candy each child ends up with,\nboth on one line.\n#### Notes:\nThe game ends in a finite number of steps because:\n+  The maximum candy count can never increase.\n+  The minimum candy count can never decrease.\n+  No one with more than the minimum amount will ever decrease to the minimum.\n+  If the maximum and minimum candy count are not the same, at least one student with the minimum amount\nmust have their count increase\n\n#### Sample Input\n```\n6\n36 2 2 2 2 2\n11\n22 20 18 16 14 12 10 8 6 4 2 \n4\n2 4 6 8\n0\n```\n\n#### Sample Output\n```\n15 14\n17 22\n4 8\n```\n\n',10000,32768,'0',0,98,'',0,'1','2018-11-05 00:31:14','2018-11-05 00:48:07'),('990','二叉树深度','#### Description\n\n给定一颗二叉树的逻辑结构（先序遍历的结果，空树用字符‘0’表示，例如AB0C00D00），建立该二叉树的二叉链式存储结构， \n \n二叉树节点的层次是指从根结点到树中某结点所经路径上的边数加 1 称为该结点的层次。二叉树的深度就是二叉树中所有结点的层次的最大值称为该树的深度。比如图中，A的层次为1，B的层次为2，D的层次为2，C的层次为3。所以二叉树的深度为3。\n\n[[File:Biotree1.jpg]]\n\n先序遍历构造方式：从前往后扫描字符串；构造根；递归构造左子树；递归构造右子树\n\n#### Input\n第一行输入二叉树的先序遍历逻辑结构\n\n#### Output\n输出该二叉树的深度\n\n#### Sample Input\n```\nAB0C00D00\n```\n\n#### Sample Output\n```\n3\n```\n',1000,32768,'0',9,90,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('991','后缀转中缀','#### Description\n后缀表达式到中缀表达式的转换\n关于前缀后缀中缀表达式的解释见第2题。表达式与二叉树的关系： 前缀表达式对应于二叉树的前序遍历； 中缀表达式对应于二叉树的中序遍历； 后缀表达式对应于二叉树的后序遍历\n说明：因为后缀表达式是后序遍历，所以构造二叉树的方法与先序遍历方法前好相反。也即，必须从字符串的最后一个字符开始构造二叉树的根，然后从后往前递归构造二叉树的右子树和左子树。\n\n后序遍历构造二叉树方式：从后往前扫描字符串； 构造根；递归构造右子树； 递归构造左子树\n\n#### Input\n第1行输入1个整数k（0<k<1000），表示有k个表达式\n从第2行起到第k+1行，依次输入k个后缀表达式，操作数都只有一个字符\n\n\n#### Output\n依次输出k行，每行是相应的中缀表达式（暂时不考虑括号问题）\n\n#### Sample Input\n```\n2\nabc*+de*f+g*-\n12+34*-5+\n\n```\n\n#### Sample Output\n```\na+b*c-d*e+f*g\n1+2-3*4+5\n\n```\n',1000,32768,'0',9,91,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('992','图的遍历','#### Description\n给定一个有向图的邻接矩阵，从0号结点开始，按邻接结点中编号小的结点优先访问的次序，输出该图深度和广度的遍历结果。\n\n\n[[File:Graph1_1.jpg]]\n\n#### Input\n第1行输入一个整数n(<100)，表示有n个结点\n从第2行起到第n+1行输入一个nn的邻接矩阵，其中Matrix[i,j]=1表示第i个结点有边指向第j个结点，否则不存在边。\n#### Output\n输出图深度和广度遍历的结果\n#### Sample Input\n```\n7\n0 1 0 0 0 0 0\n0 0 1 1 0 0 0\n1 0 0 0 0 0 0\n1 0 1 0 0 0 0\n0 0 0 0 0 1 1\n0 1 0 0 0 0 0\n0 0 0 1 0 1 0\n```\n\n#### Sample Output\n```\n0 1 2 3 4 5 6\n0 1 2 3 4 5 6\n```\n',1000,32768,'0',9,92,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('993','图的连通性','#### Description\n给定一个无向图的邻接矩阵，请判断该图是否是连通图。\n\n[[File:graph2.jpg]]\n\n#### Input\n第1行输入一个整数k(<100)，表示有k个测试数据\n第2行输入一个整数n(<100)，表示有n个结点\n从第3行起到第n+2行输入一个nn的邻接矩阵，其中Matrix[i,j]=1表示第i个结点有边指向第j个结点，否则不存在边。\n接下来是第2到第k个测试数据的结点数和邻接矩阵\n\n#### Output\n输出Yes or No表示图是否是连通图\n#### Sample Input\n```\n2\n4\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\n3\n0 0 0\n0 0 0\n0 0 0\n\n```\n\n#### Sample Output\n```\nYes\nNo\n```\n',1000,32768,'0',9,93,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('994','图的最短路径','#### Description\n给定带权有向图的邻接矩阵，输出从结点0到结点1的最短路径及其长度。\n\n[[File:graph3.jpg]]\n#### Input\n第1行输入一个整数n(<100)，表示有n个结点\n从第2行起到第n+1行输入一个nn的邻接矩阵，其中Matrix[i,j]=x (x>0)表示第i个结点有边指向第j个结点且其长度为x，否则(x<=0)表示不存在边。\n\n#### Output\n输出最短路径及其长度\n若不存在路径，则输出No\n\n#### Sample Input\n```\n例子1：\n5\n0 100 0 30 10\n0 0 0 60 0 \n0 10 0 0 0\n0 0 20 0 0\n0 0 50 0 0\n例子2：\n3\n0 0 0\n0 0 0\n0 0 0\n\n```\n\n#### Sample Output\n```\n例子1输出：\n0 3 2 1\n60\n例子2输出：\nNo\n```\n',1000,32768,'0',9,94,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('995','拓扑排序','#### Description\n\n对一个有向无环图(Directed Acyclic Graph简称DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若(u，v)∈E(G)，则u在线性序列中出现在v之前。\n\n[[File:graph4.jpg]]\n\n#### Input\n第1行输入一个整数k(<100),表示有k个测试数据。\n\n第2行输入一个整数n(<100)，表示有n个结点。\n\n从第2行起到第n+1行输入一个n×n的邻接矩阵，其中Matrix[i,j]=1表示第i个结点有边指向第j个结点，否则不存在边。\n\n#### Output\n\n输出图的拓扑排序结果。\n(测试数据保证只有一个正确的拓扑排序结果）\n\n#### Sample Input\n```\n1\n7\n0 0 0 0 0 0 0\n0 0 1 1 0 0 0\n1 0 0 0 0 0 0\n1 0 1 0 0 0 0\n0 0 0 0 0 1 1\n0 1 0 0 0 0 0\n0 0 0 1 0 1 0\n```\n\n#### Sample Output\n```\n4 6 5 1 3 2 0\n```\n',1000,32768,'0',9,95,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('996','最早结束时间','#### Description\n\nAs everybody knows, staffs for the programming contest need to do a log of jobs to prepare. But i bet you can not image how terrible the arrange the jobs. We know, sometimes there are dependencies among the jobs. We say job 1 depends on job 2 that mens before starting job 1 we must finish job 2. We assume that there is only one job processing in one moment, and any job is dependent on no more than ten jobs.\nWhen we make up a jobs\' schedule, we should check whether it is valid. Now, Your task is to find out the earliest finish time of some jobs.\n\n#### Input\n\nInput will contain several test cases. The first line of each test case contains two integer numbers  N（0<=N<=100) and M. The jobs are numbered from 1 to N. You need to calculate the earliest finish time of job M. And then, the following N lines describe jobs. The first line is corresponding the job 1, second line is corresponding the job 2 and so on.\nEach job\'s describing line contains several positive integer numbers. The numbers are separated by spaces. The first one of the i-th line shows the time(<=100) that i-th job cost. The rest of numbers of the i-th line are the jobs on which the job depends.\nN=0 indicate the end of input. We guaranteed there is no circle on dependency.\n\n#### Output\n\nFor each test case you should output one line, and just one number in this line. The number is the earliest finishing time of job M.\n\n\n#### Sample Input\n```\n2 2\n3\n2 1\n3 3\n3\n2 1\n4 1 2\n0\n```\n\n#### Sample Output\n```\n5\n9\n```\n',10000,32768,'0',9,96,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('997','折半查找','#### Description\n给定一个静态有序查找表（不妨设为升序序列）S{s1，s2，…sn}，n为表元素的个数， 以及一个需要查找的值Key，使用折半查找从静态查找表S中查找Key。\n\n如果查找成功，输出成功标志1，否则输出0。查找成功时需输出Key为S中的第几个元素，不成功输出0。此外，不管查找成功还是失败，需输出查找过程中进行了几次比较操作。\n\n例1： S={5,13,19,21,37,56,64,75,80,88,92}，n = 11， Key=64\n\n表中有64, 查找成功，为第7个元素，共折半比较了3次\n\n因此，输出为 1 7 3\n\n例2： S={5,13,19,21,37,56,64,75,80,88,92}，n = 11， Key=59\n\n表中没有59, 查找不成功，共折半比较了3次\n\n因此，输出为 0 0 3\n\n#### Input\n第一行输入一个整数t，表示有t组测试数据\n\n第二行起每三行表示一次折半搜索\n\n第1行为静态有序查找表的元素个数\n\n第2行为静态有序查找表S\n\n第3行为待查找的Key\n\n#### Output\n输出成功标志、第几个元素、折半比较次数\n\n#### Sample Input\n```\n2\n11\n3 11 17 23 29 37 56 75 83 87 93\n56\n9\n11 19 23 31 39 43 53 67 71\n41\n\n```\n\n#### Sample Output\n```\n1 7 3\n0 0 3\n\n```\n',1000,32768,'0',9,97,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('998','二叉查找树','#### Description\n二叉排序树又称二叉查找树，是一种动态查找表\n\n其定义、性质、创建、插入、查找及删除，详见课件\n\n现给定一个任意序列（通常为无序）：S{s1，s2，…sn}， n为序列元素个数\n\n1)	建立一颗二叉查找树T，输出其中序遍历的结果（应为有序序列）\n\n2)	输出T中最小、最大值\n\n3)	给定一个待查找值sKey，在T中查找该值，输出成功与否标志、sKey所在树中位置：树中第几层，层中的第几个元素（相对完全二叉树位置）；因查找不成功会插入该值，所以不管成功与否，再次输出中序遍历结果\n\n4)	给定一个待插入值iKey, 插入该值，插入后输出中序遍历结果；以iKey为待查找值, 查找之，并输出结果\n\n5)	给定一个待删除值dKey, 删除该值，删除后输出中序遍历结果；以dKey为待查找值，查找之，并输出结果\n\n例： 给定S={56, 13, 64, 5, 36, 92, 21, 80, 19, 75, 88}， n=11\n\n1）则建立的树应为如下图，不需要画出来\n\n [[File:BSTree.jpg]] \n\n \n			中序遍历结果：5 13 19 21 37 56 64 75 80 88 92 （有序序列）\n\n2）输出T中最小值5，最大值92\n\n3）如sKey=13, 查找成功，在第2层，第1个位置\n\n			则输出 1 2 1\n\n			中序遍历结果：5 13 19 21 37 56 64 75 80 88 92  （未改变）\n\n\n如sKey=8, 查找不成功，查找到第4层，第2个位置\n\n			则输出 0 4 2\n\n			中序遍历结果：5 8 13 19 21 37 56 64 75 80 88 92  （8被插入）\n\n4）假设3）中sKey = 13， 后面的8没有被插入\n\niKey=40，插入后\n\n中序遍历结果：5 13 19 21 37 40 56 64 75 80 88 92\n\n查找40，输出结果为： 1 4 4\n\n		5） dKey = 21, 删除后\n\n中序遍历结果：5 13 19 37 40 56 64 75 80 88 92\n\n查找21，输出结果为： 0 5 6\n\n#### Input\n第一行输入一个整数t，表示有t组测试数据\n\n第二行起每三行表示一组数据\n\n第1行为输入序列的元素个数：n\n\n第2行为输入的序列：s1 s2 … sn\n\n第3行为输入：sKey iKey dKey\n\n#### Output\n第一行输出中序序列\n\n第二行输出最小值、最大值\n\n第三行输出查找sKey的结果\n\n第四行输出查找后的中序序列\n\n第五行输出插入iKey后的中序序列\n\n第六行输出查找iKey的结果\n\n第七行输出删除dKey后的中序序列\n\n第八行输出查找dKey的结果\n\n#### Sample Input\n```\n1\n12\n66 45 78 42 55 32 39 68 95 86 102 29\n55 63 78\n\n```\n\n#### Sample Output\n```\n29 32 39 42 45 55 66 68 78 86 95 102 \n29 102\n1 3 2\n29 32 39 42 45 55 66 68 78 86 95 102 \n29 32 39 42 45 55 63 66 68 78 86 95 102 \n1 4 4\n29 32 39 42 45 55 63 66 68 86 95 102 \n0 5 13\n\n```\n',1000,32768,'0',9,98,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07'),('999','希尔排序','#### Description\n给定无序序列 S{s1，s2，…sn}，n为表元素的个数，使用希尔排序对序列进行排序：\n\ngap的设置：按照Shell提出取gap = n/2，gap = gap/2，直到gap = 1。\n\n输出第一次插入排序后的中间结果，以及最终希尔排序完成后的有序序列。\n\n\n例1： S={25,13, 9,27,31,53, 4,79,48,95,81}，n = 11\n\n输出：\n\n第一次插入排序后：25 4 9 27 31 53 13 79 48 95 81\n\n希尔排序完成后：4 9 13 25 27 31 48 53 79 81 95\n\n\n#### Input\n第一行输入一个整数t，表示有t组测试数据\n\n第二行起每2行表示\n\n第1行为无序序列元素个数\n\n第2行为无序序列元素\n\n#### Output\n每两行表示1组测试数据的排序结果\n\n第1行为第1次插入排序完成后的结果\n\n第2行为最终希尔排序完成后的结果\n\n#### Sample Input\n```\n2\n\n11\n\n11 3 37 83 93 17 56 75 87 27 29\n\n9\n\n71 19 67 31 53 43 39 23 11\n\n```\n\n#### Sample Output\n```\n11 3 37 83 27 17 56 75 87 93 29\n\n3 11 17 27 29 37 56 75 83 87 93\n\n11 19 39 23 53 43 67 31 71\n\n11 19 23 31 39 43 53 67 71\n```\n',1000,32768,'0',9,99,'',0,'0','2018-11-05 00:31:14','2018-11-05 00:48:07');
/*!40000 ALTER TABLE `problem` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-11-05  9:27:31
